(function(scope){
'use strict';

function F(arity, fun, wrapper) {
  wrapper.a = arity;
  wrapper.f = fun;
  return wrapper;
}

function F2(fun) {
  return F(2, fun, function(a) { return function(b) { return fun(a,b); }; })
}
function F3(fun) {
  return F(3, fun, function(a) {
    return function(b) { return function(c) { return fun(a, b, c); }; };
  });
}
function F4(fun) {
  return F(4, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return fun(a, b, c, d); }; }; };
  });
}
function F5(fun) {
  return F(5, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return fun(a, b, c, d, e); }; }; }; };
  });
}
function F6(fun) {
  return F(6, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return fun(a, b, c, d, e, f); }; }; }; }; };
  });
}
function F7(fun) {
  return F(7, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return fun(a, b, c, d, e, f, g); }; }; }; }; }; };
  });
}
function F8(fun) {
  return F(8, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) {
    return fun(a, b, c, d, e, f, g, h); }; }; }; }; }; }; };
  });
}
function F9(fun) {
  return F(9, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) { return function(i) {
    return fun(a, b, c, d, e, f, g, h, i); }; }; }; }; }; }; }; };
  });
}

function A2(fun, a, b) {
  return fun.a === 2 ? fun.f(a, b) : fun(a)(b);
}
function A3(fun, a, b, c) {
  return fun.a === 3 ? fun.f(a, b, c) : fun(a)(b)(c);
}
function A4(fun, a, b, c, d) {
  return fun.a === 4 ? fun.f(a, b, c, d) : fun(a)(b)(c)(d);
}
function A5(fun, a, b, c, d, e) {
  return fun.a === 5 ? fun.f(a, b, c, d, e) : fun(a)(b)(c)(d)(e);
}
function A6(fun, a, b, c, d, e, f) {
  return fun.a === 6 ? fun.f(a, b, c, d, e, f) : fun(a)(b)(c)(d)(e)(f);
}
function A7(fun, a, b, c, d, e, f, g) {
  return fun.a === 7 ? fun.f(a, b, c, d, e, f, g) : fun(a)(b)(c)(d)(e)(f)(g);
}
function A8(fun, a, b, c, d, e, f, g, h) {
  return fun.a === 8 ? fun.f(a, b, c, d, e, f, g, h) : fun(a)(b)(c)(d)(e)(f)(g)(h);
}
function A9(fun, a, b, c, d, e, f, g, h, i) {
  return fun.a === 9 ? fun.f(a, b, c, d, e, f, g, h, i) : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
}

console.warn('Compiled in DEBUG mode. Follow the advice at https://elm-lang.org/0.19.1/optimize for better performance and smaller assets.');


// EQUALITY

function _Utils_eq(x, y)
{
	for (
		var pair, stack = [], isEqual = _Utils_eqHelp(x, y, 0, stack);
		isEqual && (pair = stack.pop());
		isEqual = _Utils_eqHelp(pair.a, pair.b, 0, stack)
		)
	{}

	return isEqual;
}

function _Utils_eqHelp(x, y, depth, stack)
{
	if (x === y)
	{
		return true;
	}

	if (typeof x !== 'object' || x === null || y === null)
	{
		typeof x === 'function' && _Debug_crash(5);
		return false;
	}

	if (depth > 100)
	{
		stack.push(_Utils_Tuple2(x,y));
		return true;
	}

	/**/
	if (x.$ === 'Set_elm_builtin')
	{
		x = $elm$core$Set$toList(x);
		y = $elm$core$Set$toList(y);
	}
	if (x.$ === 'RBNode_elm_builtin' || x.$ === 'RBEmpty_elm_builtin')
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	/**_UNUSED/
	if (x.$ < 0)
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	for (var key in x)
	{
		if (!_Utils_eqHelp(x[key], y[key], depth + 1, stack))
		{
			return false;
		}
	}
	return true;
}

var _Utils_equal = F2(_Utils_eq);
var _Utils_notEqual = F2(function(a, b) { return !_Utils_eq(a,b); });



// COMPARISONS

// Code in Generate/JavaScript.hs, Basics.js, and List.js depends on
// the particular integer values assigned to LT, EQ, and GT.

function _Utils_cmp(x, y, ord)
{
	if (typeof x !== 'object')
	{
		return x === y ? /*EQ*/ 0 : x < y ? /*LT*/ -1 : /*GT*/ 1;
	}

	/**/
	if (x instanceof String)
	{
		var a = x.valueOf();
		var b = y.valueOf();
		return a === b ? 0 : a < b ? -1 : 1;
	}
	//*/

	/**_UNUSED/
	if (typeof x.$ === 'undefined')
	//*/
	/**/
	if (x.$[0] === '#')
	//*/
	{
		return (ord = _Utils_cmp(x.a, y.a))
			? ord
			: (ord = _Utils_cmp(x.b, y.b))
				? ord
				: _Utils_cmp(x.c, y.c);
	}

	// traverse conses until end of a list or a mismatch
	for (; x.b && y.b && !(ord = _Utils_cmp(x.a, y.a)); x = x.b, y = y.b) {} // WHILE_CONSES
	return ord || (x.b ? /*GT*/ 1 : y.b ? /*LT*/ -1 : /*EQ*/ 0);
}

var _Utils_lt = F2(function(a, b) { return _Utils_cmp(a, b) < 0; });
var _Utils_le = F2(function(a, b) { return _Utils_cmp(a, b) < 1; });
var _Utils_gt = F2(function(a, b) { return _Utils_cmp(a, b) > 0; });
var _Utils_ge = F2(function(a, b) { return _Utils_cmp(a, b) >= 0; });

var _Utils_compare = F2(function(x, y)
{
	var n = _Utils_cmp(x, y);
	return n < 0 ? $elm$core$Basics$LT : n ? $elm$core$Basics$GT : $elm$core$Basics$EQ;
});


// COMMON VALUES

var _Utils_Tuple0_UNUSED = 0;
var _Utils_Tuple0 = { $: '#0' };

function _Utils_Tuple2_UNUSED(a, b) { return { a: a, b: b }; }
function _Utils_Tuple2(a, b) { return { $: '#2', a: a, b: b }; }

function _Utils_Tuple3_UNUSED(a, b, c) { return { a: a, b: b, c: c }; }
function _Utils_Tuple3(a, b, c) { return { $: '#3', a: a, b: b, c: c }; }

function _Utils_chr_UNUSED(c) { return c; }
function _Utils_chr(c) { return new String(c); }


// RECORDS

function _Utils_update(oldRecord, updatedFields)
{
	var newRecord = {};

	for (var key in oldRecord)
	{
		newRecord[key] = oldRecord[key];
	}

	for (var key in updatedFields)
	{
		newRecord[key] = updatedFields[key];
	}

	return newRecord;
}


// APPEND

var _Utils_append = F2(_Utils_ap);

function _Utils_ap(xs, ys)
{
	// append Strings
	if (typeof xs === 'string')
	{
		return xs + ys;
	}

	// append Lists
	if (!xs.b)
	{
		return ys;
	}
	var root = _List_Cons(xs.a, ys);
	xs = xs.b
	for (var curr = root; xs.b; xs = xs.b) // WHILE_CONS
	{
		curr = curr.b = _List_Cons(xs.a, ys);
	}
	return root;
}



var _List_Nil_UNUSED = { $: 0 };
var _List_Nil = { $: '[]' };

function _List_Cons_UNUSED(hd, tl) { return { $: 1, a: hd, b: tl }; }
function _List_Cons(hd, tl) { return { $: '::', a: hd, b: tl }; }


var _List_cons = F2(_List_Cons);

function _List_fromArray(arr)
{
	var out = _List_Nil;
	for (var i = arr.length; i--; )
	{
		out = _List_Cons(arr[i], out);
	}
	return out;
}

function _List_toArray(xs)
{
	for (var out = []; xs.b; xs = xs.b) // WHILE_CONS
	{
		out.push(xs.a);
	}
	return out;
}

var _List_map2 = F3(function(f, xs, ys)
{
	for (var arr = []; xs.b && ys.b; xs = xs.b, ys = ys.b) // WHILE_CONSES
	{
		arr.push(A2(f, xs.a, ys.a));
	}
	return _List_fromArray(arr);
});

var _List_map3 = F4(function(f, xs, ys, zs)
{
	for (var arr = []; xs.b && ys.b && zs.b; xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A3(f, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map4 = F5(function(f, ws, xs, ys, zs)
{
	for (var arr = []; ws.b && xs.b && ys.b && zs.b; ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A4(f, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map5 = F6(function(f, vs, ws, xs, ys, zs)
{
	for (var arr = []; vs.b && ws.b && xs.b && ys.b && zs.b; vs = vs.b, ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A5(f, vs.a, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_sortBy = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		return _Utils_cmp(f(a), f(b));
	}));
});

var _List_sortWith = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		var ord = A2(f, a, b);
		return ord === $elm$core$Basics$EQ ? 0 : ord === $elm$core$Basics$LT ? -1 : 1;
	}));
});



var _JsArray_empty = [];

function _JsArray_singleton(value)
{
    return [value];
}

function _JsArray_length(array)
{
    return array.length;
}

var _JsArray_initialize = F3(function(size, offset, func)
{
    var result = new Array(size);

    for (var i = 0; i < size; i++)
    {
        result[i] = func(offset + i);
    }

    return result;
});

var _JsArray_initializeFromList = F2(function (max, ls)
{
    var result = new Array(max);

    for (var i = 0; i < max && ls.b; i++)
    {
        result[i] = ls.a;
        ls = ls.b;
    }

    result.length = i;
    return _Utils_Tuple2(result, ls);
});

var _JsArray_unsafeGet = F2(function(index, array)
{
    return array[index];
});

var _JsArray_unsafeSet = F3(function(index, value, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[index] = value;
    return result;
});

var _JsArray_push = F2(function(value, array)
{
    var length = array.length;
    var result = new Array(length + 1);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[length] = value;
    return result;
});

var _JsArray_foldl = F3(function(func, acc, array)
{
    var length = array.length;

    for (var i = 0; i < length; i++)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_foldr = F3(function(func, acc, array)
{
    for (var i = array.length - 1; i >= 0; i--)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_map = F2(function(func, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = func(array[i]);
    }

    return result;
});

var _JsArray_indexedMap = F3(function(func, offset, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = A2(func, offset + i, array[i]);
    }

    return result;
});

var _JsArray_slice = F3(function(from, to, array)
{
    return array.slice(from, to);
});

var _JsArray_appendN = F3(function(n, dest, source)
{
    var destLen = dest.length;
    var itemsToCopy = n - destLen;

    if (itemsToCopy > source.length)
    {
        itemsToCopy = source.length;
    }

    var size = destLen + itemsToCopy;
    var result = new Array(size);

    for (var i = 0; i < destLen; i++)
    {
        result[i] = dest[i];
    }

    for (var i = 0; i < itemsToCopy; i++)
    {
        result[i + destLen] = source[i];
    }

    return result;
});



// LOG

var _Debug_log_UNUSED = F2(function(tag, value)
{
	return value;
});

var _Debug_log = F2(function(tag, value)
{
	console.log(tag + ': ' + _Debug_toString(value));
	return value;
});


// TODOS

function _Debug_todo(moduleName, region)
{
	return function(message) {
		_Debug_crash(8, moduleName, region, message);
	};
}

function _Debug_todoCase(moduleName, region, value)
{
	return function(message) {
		_Debug_crash(9, moduleName, region, value, message);
	};
}


// TO STRING

function _Debug_toString_UNUSED(value)
{
	return '<internals>';
}

function _Debug_toString(value)
{
	return _Debug_toAnsiString(false, value);
}

function _Debug_toAnsiString(ansi, value)
{
	if (typeof value === 'function')
	{
		return _Debug_internalColor(ansi, '<function>');
	}

	if (typeof value === 'boolean')
	{
		return _Debug_ctorColor(ansi, value ? 'True' : 'False');
	}

	if (typeof value === 'number')
	{
		return _Debug_numberColor(ansi, value + '');
	}

	if (value instanceof String)
	{
		return _Debug_charColor(ansi, "'" + _Debug_addSlashes(value, true) + "'");
	}

	if (typeof value === 'string')
	{
		return _Debug_stringColor(ansi, '"' + _Debug_addSlashes(value, false) + '"');
	}

	if (typeof value === 'object' && '$' in value)
	{
		var tag = value.$;

		if (typeof tag === 'number')
		{
			return _Debug_internalColor(ansi, '<internals>');
		}

		if (tag[0] === '#')
		{
			var output = [];
			for (var k in value)
			{
				if (k === '$') continue;
				output.push(_Debug_toAnsiString(ansi, value[k]));
			}
			return '(' + output.join(',') + ')';
		}

		if (tag === 'Set_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Set')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Set$toList(value));
		}

		if (tag === 'RBNode_elm_builtin' || tag === 'RBEmpty_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Dict')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Dict$toList(value));
		}

		if (tag === 'Array_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Array')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Array$toList(value));
		}

		if (tag === '::' || tag === '[]')
		{
			var output = '[';

			value.b && (output += _Debug_toAnsiString(ansi, value.a), value = value.b)

			for (; value.b; value = value.b) // WHILE_CONS
			{
				output += ',' + _Debug_toAnsiString(ansi, value.a);
			}
			return output + ']';
		}

		var output = '';
		for (var i in value)
		{
			if (i === '$') continue;
			var str = _Debug_toAnsiString(ansi, value[i]);
			var c0 = str[0];
			var parenless = c0 === '{' || c0 === '(' || c0 === '[' || c0 === '<' || c0 === '"' || str.indexOf(' ') < 0;
			output += ' ' + (parenless ? str : '(' + str + ')');
		}
		return _Debug_ctorColor(ansi, tag) + output;
	}

	if (typeof DataView === 'function' && value instanceof DataView)
	{
		return _Debug_stringColor(ansi, '<' + value.byteLength + ' bytes>');
	}

	if (typeof File !== 'undefined' && value instanceof File)
	{
		return _Debug_internalColor(ansi, '<' + value.name + '>');
	}

	if (typeof value === 'object')
	{
		var output = [];
		for (var key in value)
		{
			var field = key[0] === '_' ? key.slice(1) : key;
			output.push(_Debug_fadeColor(ansi, field) + ' = ' + _Debug_toAnsiString(ansi, value[key]));
		}
		if (output.length === 0)
		{
			return '{}';
		}
		return '{ ' + output.join(', ') + ' }';
	}

	return _Debug_internalColor(ansi, '<internals>');
}

function _Debug_addSlashes(str, isChar)
{
	var s = str
		.replace(/\\/g, '\\\\')
		.replace(/\n/g, '\\n')
		.replace(/\t/g, '\\t')
		.replace(/\r/g, '\\r')
		.replace(/\v/g, '\\v')
		.replace(/\0/g, '\\0');

	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}

function _Debug_ctorColor(ansi, string)
{
	return ansi ? '\x1b[96m' + string + '\x1b[0m' : string;
}

function _Debug_numberColor(ansi, string)
{
	return ansi ? '\x1b[95m' + string + '\x1b[0m' : string;
}

function _Debug_stringColor(ansi, string)
{
	return ansi ? '\x1b[93m' + string + '\x1b[0m' : string;
}

function _Debug_charColor(ansi, string)
{
	return ansi ? '\x1b[92m' + string + '\x1b[0m' : string;
}

function _Debug_fadeColor(ansi, string)
{
	return ansi ? '\x1b[37m' + string + '\x1b[0m' : string;
}

function _Debug_internalColor(ansi, string)
{
	return ansi ? '\x1b[36m' + string + '\x1b[0m' : string;
}

function _Debug_toHexDigit(n)
{
	return String.fromCharCode(n < 10 ? 48 + n : 55 + n);
}


// CRASH


function _Debug_crash_UNUSED(identifier)
{
	throw new Error('https://github.com/elm/core/blob/1.0.0/hints/' + identifier + '.md');
}


function _Debug_crash(identifier, fact1, fact2, fact3, fact4)
{
	switch(identifier)
	{
		case 0:
			throw new Error('What node should I take over? In JavaScript I need something like:\n\n    Elm.Main.init({\n        node: document.getElementById("elm-node")\n    })\n\nYou need to do this with any Browser.sandbox or Browser.element program.');

		case 1:
			throw new Error('Browser.application programs cannot handle URLs like this:\n\n    ' + document.location.href + '\n\nWhat is the root? The root of your file system? Try looking at this program with `elm reactor` or some other server.');

		case 2:
			var jsonErrorString = fact1;
			throw new Error('Problem with the flags given to your Elm program on initialization.\n\n' + jsonErrorString);

		case 3:
			var portName = fact1;
			throw new Error('There can only be one port named `' + portName + '`, but your program has multiple.');

		case 4:
			var portName = fact1;
			var problem = fact2;
			throw new Error('Trying to send an unexpected type of value through port `' + portName + '`:\n' + problem);

		case 5:
			throw new Error('Trying to use `(==)` on functions.\nThere is no way to know if functions are "the same" in the Elm sense.\nRead more about this at https://package.elm-lang.org/packages/elm/core/latest/Basics#== which describes why it is this way and what the better version will look like.');

		case 6:
			var moduleName = fact1;
			throw new Error('Your page is loading multiple Elm scripts with a module named ' + moduleName + '. Maybe a duplicate script is getting loaded accidentally? If not, rename one of them so I know which is which!');

		case 8:
			var moduleName = fact1;
			var region = fact2;
			var message = fact3;
			throw new Error('TODO in module `' + moduleName + '` ' + _Debug_regionToString(region) + '\n\n' + message);

		case 9:
			var moduleName = fact1;
			var region = fact2;
			var value = fact3;
			var message = fact4;
			throw new Error(
				'TODO in module `' + moduleName + '` from the `case` expression '
				+ _Debug_regionToString(region) + '\n\nIt received the following value:\n\n    '
				+ _Debug_toString(value).replace('\n', '\n    ')
				+ '\n\nBut the branch that handles it says:\n\n    ' + message.replace('\n', '\n    ')
			);

		case 10:
			throw new Error('Bug in https://github.com/elm/virtual-dom/issues');

		case 11:
			throw new Error('Cannot perform mod 0. Division by zero error.');
	}
}

function _Debug_regionToString(region)
{
	if (region.start.line === region.end.line)
	{
		return 'on line ' + region.start.line;
	}
	return 'on lines ' + region.start.line + ' through ' + region.end.line;
}



// MATH

var _Basics_add = F2(function(a, b) { return a + b; });
var _Basics_sub = F2(function(a, b) { return a - b; });
var _Basics_mul = F2(function(a, b) { return a * b; });
var _Basics_fdiv = F2(function(a, b) { return a / b; });
var _Basics_idiv = F2(function(a, b) { return (a / b) | 0; });
var _Basics_pow = F2(Math.pow);

var _Basics_remainderBy = F2(function(b, a) { return a % b; });

// https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/divmodnote-letter.pdf
var _Basics_modBy = F2(function(modulus, x)
{
	var answer = x % modulus;
	return modulus === 0
		? _Debug_crash(11)
		:
	((answer > 0 && modulus < 0) || (answer < 0 && modulus > 0))
		? answer + modulus
		: answer;
});


// TRIGONOMETRY

var _Basics_pi = Math.PI;
var _Basics_e = Math.E;
var _Basics_cos = Math.cos;
var _Basics_sin = Math.sin;
var _Basics_tan = Math.tan;
var _Basics_acos = Math.acos;
var _Basics_asin = Math.asin;
var _Basics_atan = Math.atan;
var _Basics_atan2 = F2(Math.atan2);


// MORE MATH

function _Basics_toFloat(x) { return x; }
function _Basics_truncate(n) { return n | 0; }
function _Basics_isInfinite(n) { return n === Infinity || n === -Infinity; }

var _Basics_ceiling = Math.ceil;
var _Basics_floor = Math.floor;
var _Basics_round = Math.round;
var _Basics_sqrt = Math.sqrt;
var _Basics_log = Math.log;
var _Basics_isNaN = isNaN;


// BOOLEANS

function _Basics_not(bool) { return !bool; }
var _Basics_and = F2(function(a, b) { return a && b; });
var _Basics_or  = F2(function(a, b) { return a || b; });
var _Basics_xor = F2(function(a, b) { return a !== b; });



var _String_cons = F2(function(chr, str)
{
	return chr + str;
});

function _String_uncons(string)
{
	var word = string.charCodeAt(0);
	return !isNaN(word)
		? $elm$core$Maybe$Just(
			0xD800 <= word && word <= 0xDBFF
				? _Utils_Tuple2(_Utils_chr(string[0] + string[1]), string.slice(2))
				: _Utils_Tuple2(_Utils_chr(string[0]), string.slice(1))
		)
		: $elm$core$Maybe$Nothing;
}

var _String_append = F2(function(a, b)
{
	return a + b;
});

function _String_length(str)
{
	return str.length;
}

var _String_map = F2(function(func, string)
{
	var len = string.length;
	var array = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = string.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			array[i] = func(_Utils_chr(string[i] + string[i+1]));
			i += 2;
			continue;
		}
		array[i] = func(_Utils_chr(string[i]));
		i++;
	}
	return array.join('');
});

var _String_filter = F2(function(isGood, str)
{
	var arr = [];
	var len = str.length;
	var i = 0;
	while (i < len)
	{
		var char = str[i];
		var word = str.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += str[i];
			i++;
		}

		if (isGood(_Utils_chr(char)))
		{
			arr.push(char);
		}
	}
	return arr.join('');
});

function _String_reverse(str)
{
	var len = str.length;
	var arr = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = str.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			arr[len - i] = str[i + 1];
			i++;
			arr[len - i] = str[i - 1];
			i++;
		}
		else
		{
			arr[len - i] = str[i];
			i++;
		}
	}
	return arr.join('');
}

var _String_foldl = F3(function(func, state, string)
{
	var len = string.length;
	var i = 0;
	while (i < len)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += string[i];
			i++;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_foldr = F3(function(func, state, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_split = F2(function(sep, str)
{
	return str.split(sep);
});

var _String_join = F2(function(sep, strs)
{
	return strs.join(sep);
});

var _String_slice = F3(function(start, end, str) {
	return str.slice(start, end);
});

function _String_trim(str)
{
	return str.trim();
}

function _String_trimLeft(str)
{
	return str.replace(/^\s+/, '');
}

function _String_trimRight(str)
{
	return str.replace(/\s+$/, '');
}

function _String_words(str)
{
	return _List_fromArray(str.trim().split(/\s+/g));
}

function _String_lines(str)
{
	return _List_fromArray(str.split(/\r\n|\r|\n/g));
}

function _String_toUpper(str)
{
	return str.toUpperCase();
}

function _String_toLower(str)
{
	return str.toLowerCase();
}

var _String_any = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (isGood(_Utils_chr(char)))
		{
			return true;
		}
	}
	return false;
});

var _String_all = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (!isGood(_Utils_chr(char)))
		{
			return false;
		}
	}
	return true;
});

var _String_contains = F2(function(sub, str)
{
	return str.indexOf(sub) > -1;
});

var _String_startsWith = F2(function(sub, str)
{
	return str.indexOf(sub) === 0;
});

var _String_endsWith = F2(function(sub, str)
{
	return str.length >= sub.length &&
		str.lastIndexOf(sub) === str.length - sub.length;
});

var _String_indexes = F2(function(sub, str)
{
	var subLen = sub.length;

	if (subLen < 1)
	{
		return _List_Nil;
	}

	var i = 0;
	var is = [];

	while ((i = str.indexOf(sub, i)) > -1)
	{
		is.push(i);
		i = i + subLen;
	}

	return _List_fromArray(is);
});


// TO STRING

function _String_fromNumber(number)
{
	return number + '';
}


// INT CONVERSIONS

function _String_toInt(str)
{
	var total = 0;
	var code0 = str.charCodeAt(0);
	var start = code0 == 0x2B /* + */ || code0 == 0x2D /* - */ ? 1 : 0;

	for (var i = start; i < str.length; ++i)
	{
		var code = str.charCodeAt(i);
		if (code < 0x30 || 0x39 < code)
		{
			return $elm$core$Maybe$Nothing;
		}
		total = 10 * total + code - 0x30;
	}

	return i == start
		? $elm$core$Maybe$Nothing
		: $elm$core$Maybe$Just(code0 == 0x2D ? -total : total);
}


// FLOAT CONVERSIONS

function _String_toFloat(s)
{
	// check if it is a hex, octal, or binary number
	if (s.length === 0 || /[\sxbo]/.test(s))
	{
		return $elm$core$Maybe$Nothing;
	}
	var n = +s;
	// faster isNaN check
	return n === n ? $elm$core$Maybe$Just(n) : $elm$core$Maybe$Nothing;
}

function _String_fromList(chars)
{
	return _List_toArray(chars).join('');
}




function _Char_toCode(char)
{
	var code = char.charCodeAt(0);
	if (0xD800 <= code && code <= 0xDBFF)
	{
		return (code - 0xD800) * 0x400 + char.charCodeAt(1) - 0xDC00 + 0x10000
	}
	return code;
}

function _Char_fromCode(code)
{
	return _Utils_chr(
		(code < 0 || 0x10FFFF < code)
			? '\uFFFD'
			:
		(code <= 0xFFFF)
			? String.fromCharCode(code)
			:
		(code -= 0x10000,
			String.fromCharCode(Math.floor(code / 0x400) + 0xD800, code % 0x400 + 0xDC00)
		)
	);
}

function _Char_toUpper(char)
{
	return _Utils_chr(char.toUpperCase());
}

function _Char_toLower(char)
{
	return _Utils_chr(char.toLowerCase());
}

function _Char_toLocaleUpper(char)
{
	return _Utils_chr(char.toLocaleUpperCase());
}

function _Char_toLocaleLower(char)
{
	return _Utils_chr(char.toLocaleLowerCase());
}



/**/
function _Json_errorToString(error)
{
	return $elm$json$Json$Decode$errorToString(error);
}
//*/


// CORE DECODERS

function _Json_succeed(msg)
{
	return {
		$: 0,
		a: msg
	};
}

function _Json_fail(msg)
{
	return {
		$: 1,
		a: msg
	};
}

function _Json_decodePrim(decoder)
{
	return { $: 2, b: decoder };
}

var _Json_decodeInt = _Json_decodePrim(function(value) {
	return (typeof value !== 'number')
		? _Json_expecting('an INT', value)
		:
	(-2147483647 < value && value < 2147483647 && (value | 0) === value)
		? $elm$core$Result$Ok(value)
		:
	(isFinite(value) && !(value % 1))
		? $elm$core$Result$Ok(value)
		: _Json_expecting('an INT', value);
});

var _Json_decodeBool = _Json_decodePrim(function(value) {
	return (typeof value === 'boolean')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a BOOL', value);
});

var _Json_decodeFloat = _Json_decodePrim(function(value) {
	return (typeof value === 'number')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a FLOAT', value);
});

var _Json_decodeValue = _Json_decodePrim(function(value) {
	return $elm$core$Result$Ok(_Json_wrap(value));
});

var _Json_decodeString = _Json_decodePrim(function(value) {
	return (typeof value === 'string')
		? $elm$core$Result$Ok(value)
		: (value instanceof String)
			? $elm$core$Result$Ok(value + '')
			: _Json_expecting('a STRING', value);
});

function _Json_decodeList(decoder) { return { $: 3, b: decoder }; }
function _Json_decodeArray(decoder) { return { $: 4, b: decoder }; }

function _Json_decodeNull(value) { return { $: 5, c: value }; }

var _Json_decodeField = F2(function(field, decoder)
{
	return {
		$: 6,
		d: field,
		b: decoder
	};
});

var _Json_decodeIndex = F2(function(index, decoder)
{
	return {
		$: 7,
		e: index,
		b: decoder
	};
});

function _Json_decodeKeyValuePairs(decoder)
{
	return {
		$: 8,
		b: decoder
	};
}

function _Json_mapMany(f, decoders)
{
	return {
		$: 9,
		f: f,
		g: decoders
	};
}

var _Json_andThen = F2(function(callback, decoder)
{
	return {
		$: 10,
		b: decoder,
		h: callback
	};
});

function _Json_oneOf(decoders)
{
	return {
		$: 11,
		g: decoders
	};
}


// DECODING OBJECTS

var _Json_map1 = F2(function(f, d1)
{
	return _Json_mapMany(f, [d1]);
});

var _Json_map2 = F3(function(f, d1, d2)
{
	return _Json_mapMany(f, [d1, d2]);
});

var _Json_map3 = F4(function(f, d1, d2, d3)
{
	return _Json_mapMany(f, [d1, d2, d3]);
});

var _Json_map4 = F5(function(f, d1, d2, d3, d4)
{
	return _Json_mapMany(f, [d1, d2, d3, d4]);
});

var _Json_map5 = F6(function(f, d1, d2, d3, d4, d5)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5]);
});

var _Json_map6 = F7(function(f, d1, d2, d3, d4, d5, d6)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6]);
});

var _Json_map7 = F8(function(f, d1, d2, d3, d4, d5, d6, d7)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
});

var _Json_map8 = F9(function(f, d1, d2, d3, d4, d5, d6, d7, d8)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
});


// DECODE

var _Json_runOnString = F2(function(decoder, string)
{
	try
	{
		var value = JSON.parse(string);
		return _Json_runHelp(decoder, value);
	}
	catch (e)
	{
		return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'This is not valid JSON! ' + e.message, _Json_wrap(string)));
	}
});

var _Json_run = F2(function(decoder, value)
{
	return _Json_runHelp(decoder, _Json_unwrap(value));
});

function _Json_runHelp(decoder, value)
{
	switch (decoder.$)
	{
		case 2:
			return decoder.b(value);

		case 5:
			return (value === null)
				? $elm$core$Result$Ok(decoder.c)
				: _Json_expecting('null', value);

		case 3:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('a LIST', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _List_fromArray);

		case 4:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _Json_toElmArray);

		case 6:
			var field = decoder.d;
			if (typeof value !== 'object' || value === null || !(field in value))
			{
				return _Json_expecting('an OBJECT with a field named `' + field + '`', value);
			}
			var result = _Json_runHelp(decoder.b, value[field]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, field, result.a));

		case 7:
			var index = decoder.e;
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			if (index >= value.length)
			{
				return _Json_expecting('a LONGER array. Need index ' + index + ' but only see ' + value.length + ' entries', value);
			}
			var result = _Json_runHelp(decoder.b, value[index]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, index, result.a));

		case 8:
			if (typeof value !== 'object' || value === null || _Json_isArray(value))
			{
				return _Json_expecting('an OBJECT', value);
			}

			var keyValuePairs = _List_Nil;
			// TODO test perf of Object.keys and switch when support is good enough
			for (var key in value)
			{
				if (value.hasOwnProperty(key))
				{
					var result = _Json_runHelp(decoder.b, value[key]);
					if (!$elm$core$Result$isOk(result))
					{
						return $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, key, result.a));
					}
					keyValuePairs = _List_Cons(_Utils_Tuple2(key, result.a), keyValuePairs);
				}
			}
			return $elm$core$Result$Ok($elm$core$List$reverse(keyValuePairs));

		case 9:
			var answer = decoder.f;
			var decoders = decoder.g;
			for (var i = 0; i < decoders.length; i++)
			{
				var result = _Json_runHelp(decoders[i], value);
				if (!$elm$core$Result$isOk(result))
				{
					return result;
				}
				answer = answer(result.a);
			}
			return $elm$core$Result$Ok(answer);

		case 10:
			var result = _Json_runHelp(decoder.b, value);
			return (!$elm$core$Result$isOk(result))
				? result
				: _Json_runHelp(decoder.h(result.a), value);

		case 11:
			var errors = _List_Nil;
			for (var temp = decoder.g; temp.b; temp = temp.b) // WHILE_CONS
			{
				var result = _Json_runHelp(temp.a, value);
				if ($elm$core$Result$isOk(result))
				{
					return result;
				}
				errors = _List_Cons(result.a, errors);
			}
			return $elm$core$Result$Err($elm$json$Json$Decode$OneOf($elm$core$List$reverse(errors)));

		case 1:
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, decoder.a, _Json_wrap(value)));

		case 0:
			return $elm$core$Result$Ok(decoder.a);
	}
}

function _Json_runArrayDecoder(decoder, value, toElmValue)
{
	var len = value.length;
	var array = new Array(len);
	for (var i = 0; i < len; i++)
	{
		var result = _Json_runHelp(decoder, value[i]);
		if (!$elm$core$Result$isOk(result))
		{
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, i, result.a));
		}
		array[i] = result.a;
	}
	return $elm$core$Result$Ok(toElmValue(array));
}

function _Json_isArray(value)
{
	return Array.isArray(value) || (typeof FileList !== 'undefined' && value instanceof FileList);
}

function _Json_toElmArray(array)
{
	return A2($elm$core$Array$initialize, array.length, function(i) { return array[i]; });
}

function _Json_expecting(type, value)
{
	return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'Expecting ' + type, _Json_wrap(value)));
}


// EQUALITY

function _Json_equality(x, y)
{
	if (x === y)
	{
		return true;
	}

	if (x.$ !== y.$)
	{
		return false;
	}

	switch (x.$)
	{
		case 0:
		case 1:
			return x.a === y.a;

		case 2:
			return x.b === y.b;

		case 5:
			return x.c === y.c;

		case 3:
		case 4:
		case 8:
			return _Json_equality(x.b, y.b);

		case 6:
			return x.d === y.d && _Json_equality(x.b, y.b);

		case 7:
			return x.e === y.e && _Json_equality(x.b, y.b);

		case 9:
			return x.f === y.f && _Json_listEquality(x.g, y.g);

		case 10:
			return x.h === y.h && _Json_equality(x.b, y.b);

		case 11:
			return _Json_listEquality(x.g, y.g);
	}
}

function _Json_listEquality(aDecoders, bDecoders)
{
	var len = aDecoders.length;
	if (len !== bDecoders.length)
	{
		return false;
	}
	for (var i = 0; i < len; i++)
	{
		if (!_Json_equality(aDecoders[i], bDecoders[i]))
		{
			return false;
		}
	}
	return true;
}


// ENCODE

var _Json_encode = F2(function(indentLevel, value)
{
	return JSON.stringify(_Json_unwrap(value), null, indentLevel) + '';
});

function _Json_wrap(value) { return { $: 0, a: value }; }
function _Json_unwrap(value) { return value.a; }

function _Json_wrap_UNUSED(value) { return value; }
function _Json_unwrap_UNUSED(value) { return value; }

function _Json_emptyArray() { return []; }
function _Json_emptyObject() { return {}; }

var _Json_addField = F3(function(key, value, object)
{
	object[key] = _Json_unwrap(value);
	return object;
});

function _Json_addEntry(func)
{
	return F2(function(entry, array)
	{
		array.push(_Json_unwrap(func(entry)));
		return array;
	});
}

var _Json_encodeNull = _Json_wrap(null);



// TASKS

function _Scheduler_succeed(value)
{
	return {
		$: 0,
		a: value
	};
}

function _Scheduler_fail(error)
{
	return {
		$: 1,
		a: error
	};
}

function _Scheduler_binding(callback)
{
	return {
		$: 2,
		b: callback,
		c: null
	};
}

var _Scheduler_andThen = F2(function(callback, task)
{
	return {
		$: 3,
		b: callback,
		d: task
	};
});

var _Scheduler_onError = F2(function(callback, task)
{
	return {
		$: 4,
		b: callback,
		d: task
	};
});

function _Scheduler_receive(callback)
{
	return {
		$: 5,
		b: callback
	};
}


// PROCESSES

var _Scheduler_guid = 0;

function _Scheduler_rawSpawn(task)
{
	var proc = {
		$: 0,
		e: _Scheduler_guid++,
		f: task,
		g: null,
		h: []
	};

	_Scheduler_enqueue(proc);

	return proc;
}

function _Scheduler_spawn(task)
{
	return _Scheduler_binding(function(callback) {
		callback(_Scheduler_succeed(_Scheduler_rawSpawn(task)));
	});
}

function _Scheduler_rawSend(proc, msg)
{
	proc.h.push(msg);
	_Scheduler_enqueue(proc);
}

var _Scheduler_send = F2(function(proc, msg)
{
	return _Scheduler_binding(function(callback) {
		_Scheduler_rawSend(proc, msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});

function _Scheduler_kill(proc)
{
	return _Scheduler_binding(function(callback) {
		var task = proc.f;
		if (task.$ === 2 && task.c)
		{
			task.c();
		}

		proc.f = null;

		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
}


/* STEP PROCESSES

type alias Process =
  { $ : tag
  , id : unique_id
  , root : Task
  , stack : null | { $: SUCCEED | FAIL, a: callback, b: stack }
  , mailbox : [msg]
  }

*/


var _Scheduler_working = false;
var _Scheduler_queue = [];


function _Scheduler_enqueue(proc)
{
	_Scheduler_queue.push(proc);
	if (_Scheduler_working)
	{
		return;
	}
	_Scheduler_working = true;
	while (proc = _Scheduler_queue.shift())
	{
		_Scheduler_step(proc);
	}
	_Scheduler_working = false;
}


function _Scheduler_step(proc)
{
	while (proc.f)
	{
		var rootTag = proc.f.$;
		if (rootTag === 0 || rootTag === 1)
		{
			while (proc.g && proc.g.$ !== rootTag)
			{
				proc.g = proc.g.i;
			}
			if (!proc.g)
			{
				return;
			}
			proc.f = proc.g.b(proc.f.a);
			proc.g = proc.g.i;
		}
		else if (rootTag === 2)
		{
			proc.f.c = proc.f.b(function(newRoot) {
				proc.f = newRoot;
				_Scheduler_enqueue(proc);
			});
			return;
		}
		else if (rootTag === 5)
		{
			if (proc.h.length === 0)
			{
				return;
			}
			proc.f = proc.f.b(proc.h.shift());
		}
		else // if (rootTag === 3 || rootTag === 4)
		{
			proc.g = {
				$: rootTag === 3 ? 0 : 1,
				b: proc.f.b,
				i: proc.g
			};
			proc.f = proc.f.d;
		}
	}
}



function _Process_sleep(time)
{
	return _Scheduler_binding(function(callback) {
		var id = setTimeout(function() {
			callback(_Scheduler_succeed(_Utils_Tuple0));
		}, time);

		return function() { clearTimeout(id); };
	});
}




// PROGRAMS


var _Platform_worker = F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function() { return function() {} }
	);
});



// INITIALIZE A PROGRAM


function _Platform_initialize(flagDecoder, args, init, update, subscriptions, stepperBuilder)
{
	var result = A2(_Json_run, flagDecoder, _Json_wrap(args ? args['flags'] : undefined));
	$elm$core$Result$isOk(result) || _Debug_crash(2 /**/, _Json_errorToString(result.a) /**/);
	var managers = {};
	var initPair = init(result.a);
	var model = initPair.a;
	var stepper = stepperBuilder(sendToApp, model);
	var ports = _Platform_setupEffects(managers, sendToApp);

	function sendToApp(msg, viewMetadata)
	{
		var pair = A2(update, msg, model);
		stepper(model = pair.a, viewMetadata);
		_Platform_enqueueEffects(managers, pair.b, subscriptions(model));
	}

	_Platform_enqueueEffects(managers, initPair.b, subscriptions(model));

	return ports ? { ports: ports } : {};
}



// TRACK PRELOADS
//
// This is used by code in elm/browser and elm/http
// to register any HTTP requests that are triggered by init.
//


var _Platform_preload;


function _Platform_registerPreload(url)
{
	_Platform_preload.add(url);
}



// EFFECT MANAGERS


var _Platform_effectManagers = {};


function _Platform_setupEffects(managers, sendToApp)
{
	var ports;

	// setup all necessary effect managers
	for (var key in _Platform_effectManagers)
	{
		var manager = _Platform_effectManagers[key];

		if (manager.a)
		{
			ports = ports || {};
			ports[key] = manager.a(key, sendToApp);
		}

		managers[key] = _Platform_instantiateManager(manager, sendToApp);
	}

	return ports;
}


function _Platform_createManager(init, onEffects, onSelfMsg, cmdMap, subMap)
{
	return {
		b: init,
		c: onEffects,
		d: onSelfMsg,
		e: cmdMap,
		f: subMap
	};
}


function _Platform_instantiateManager(info, sendToApp)
{
	var router = {
		g: sendToApp,
		h: undefined
	};

	var onEffects = info.c;
	var onSelfMsg = info.d;
	var cmdMap = info.e;
	var subMap = info.f;

	function loop(state)
	{
		return A2(_Scheduler_andThen, loop, _Scheduler_receive(function(msg)
		{
			var value = msg.a;

			if (msg.$ === 0)
			{
				return A3(onSelfMsg, router, value, state);
			}

			return cmdMap && subMap
				? A4(onEffects, router, value.i, value.j, state)
				: A3(onEffects, router, cmdMap ? value.i : value.j, state);
		}));
	}

	return router.h = _Scheduler_rawSpawn(A2(_Scheduler_andThen, loop, info.b));
}



// ROUTING


var _Platform_sendToApp = F2(function(router, msg)
{
	return _Scheduler_binding(function(callback)
	{
		router.g(msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});


var _Platform_sendToSelf = F2(function(router, msg)
{
	return A2(_Scheduler_send, router.h, {
		$: 0,
		a: msg
	});
});



// BAGS


function _Platform_leaf(home)
{
	return function(value)
	{
		return {
			$: 1,
			k: home,
			l: value
		};
	};
}


function _Platform_batch(list)
{
	return {
		$: 2,
		m: list
	};
}


var _Platform_map = F2(function(tagger, bag)
{
	return {
		$: 3,
		n: tagger,
		o: bag
	}
});



// PIPE BAGS INTO EFFECT MANAGERS
//
// Effects must be queued!
//
// Say your init contains a synchronous command, like Time.now or Time.here
//
//   - This will produce a batch of effects (FX_1)
//   - The synchronous task triggers the subsequent `update` call
//   - This will produce a batch of effects (FX_2)
//
// If we just start dispatching FX_2, subscriptions from FX_2 can be processed
// before subscriptions from FX_1. No good! Earlier versions of this code had
// this problem, leading to these reports:
//
//   https://github.com/elm/core/issues/980
//   https://github.com/elm/core/pull/981
//   https://github.com/elm/compiler/issues/1776
//
// The queue is necessary to avoid ordering issues for synchronous commands.


// Why use true/false here? Why not just check the length of the queue?
// The goal is to detect "are we currently dispatching effects?" If we
// are, we need to bail and let the ongoing while loop handle things.
//
// Now say the queue has 1 element. When we dequeue the final element,
// the queue will be empty, but we are still actively dispatching effects.
// So you could get queue jumping in a really tricky category of cases.
//
var _Platform_effectsQueue = [];
var _Platform_effectsActive = false;


function _Platform_enqueueEffects(managers, cmdBag, subBag)
{
	_Platform_effectsQueue.push({ p: managers, q: cmdBag, r: subBag });

	if (_Platform_effectsActive) return;

	_Platform_effectsActive = true;
	for (var fx; fx = _Platform_effectsQueue.shift(); )
	{
		_Platform_dispatchEffects(fx.p, fx.q, fx.r);
	}
	_Platform_effectsActive = false;
}


function _Platform_dispatchEffects(managers, cmdBag, subBag)
{
	var effectsDict = {};
	_Platform_gatherEffects(true, cmdBag, effectsDict, null);
	_Platform_gatherEffects(false, subBag, effectsDict, null);

	for (var home in managers)
	{
		_Scheduler_rawSend(managers[home], {
			$: 'fx',
			a: effectsDict[home] || { i: _List_Nil, j: _List_Nil }
		});
	}
}


function _Platform_gatherEffects(isCmd, bag, effectsDict, taggers)
{
	switch (bag.$)
	{
		case 1:
			var home = bag.k;
			var effect = _Platform_toEffect(isCmd, home, taggers, bag.l);
			effectsDict[home] = _Platform_insert(isCmd, effect, effectsDict[home]);
			return;

		case 2:
			for (var list = bag.m; list.b; list = list.b) // WHILE_CONS
			{
				_Platform_gatherEffects(isCmd, list.a, effectsDict, taggers);
			}
			return;

		case 3:
			_Platform_gatherEffects(isCmd, bag.o, effectsDict, {
				s: bag.n,
				t: taggers
			});
			return;
	}
}


function _Platform_toEffect(isCmd, home, taggers, value)
{
	function applyTaggers(x)
	{
		for (var temp = taggers; temp; temp = temp.t)
		{
			x = temp.s(x);
		}
		return x;
	}

	var map = isCmd
		? _Platform_effectManagers[home].e
		: _Platform_effectManagers[home].f;

	return A2(map, applyTaggers, value)
}


function _Platform_insert(isCmd, newEffect, effects)
{
	effects = effects || { i: _List_Nil, j: _List_Nil };

	isCmd
		? (effects.i = _List_Cons(newEffect, effects.i))
		: (effects.j = _List_Cons(newEffect, effects.j));

	return effects;
}



// PORTS


function _Platform_checkPortName(name)
{
	if (_Platform_effectManagers[name])
	{
		_Debug_crash(3, name)
	}
}



// OUTGOING PORTS


function _Platform_outgoingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		e: _Platform_outgoingPortMap,
		u: converter,
		a: _Platform_setupOutgoingPort
	};
	return _Platform_leaf(name);
}


var _Platform_outgoingPortMap = F2(function(tagger, value) { return value; });


function _Platform_setupOutgoingPort(name)
{
	var subs = [];
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Process_sleep(0);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, cmdList, state)
	{
		for ( ; cmdList.b; cmdList = cmdList.b) // WHILE_CONS
		{
			// grab a separate reference to subs in case unsubscribe is called
			var currentSubs = subs;
			var value = _Json_unwrap(converter(cmdList.a));
			for (var i = 0; i < currentSubs.length; i++)
			{
				currentSubs[i](value);
			}
		}
		return init;
	});

	// PUBLIC API

	function subscribe(callback)
	{
		subs.push(callback);
	}

	function unsubscribe(callback)
	{
		// copy subs into a new array in case unsubscribe is called within a
		// subscribed callback
		subs = subs.slice();
		var index = subs.indexOf(callback);
		if (index >= 0)
		{
			subs.splice(index, 1);
		}
	}

	return {
		subscribe: subscribe,
		unsubscribe: unsubscribe
	};
}



// INCOMING PORTS


function _Platform_incomingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		f: _Platform_incomingPortMap,
		u: converter,
		a: _Platform_setupIncomingPort
	};
	return _Platform_leaf(name);
}


var _Platform_incomingPortMap = F2(function(tagger, finalTagger)
{
	return function(value)
	{
		return tagger(finalTagger(value));
	};
});


function _Platform_setupIncomingPort(name, sendToApp)
{
	var subs = _List_Nil;
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Scheduler_succeed(null);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, subList, state)
	{
		subs = subList;
		return init;
	});

	// PUBLIC API

	function send(incomingValue)
	{
		var result = A2(_Json_run, converter, _Json_wrap(incomingValue));

		$elm$core$Result$isOk(result) || _Debug_crash(4, name, result.a);

		var value = result.a;
		for (var temp = subs; temp.b; temp = temp.b) // WHILE_CONS
		{
			sendToApp(temp.a(value));
		}
	}

	return { send: send };
}



// EXPORT ELM MODULES
//
// Have DEBUG and PROD versions so that we can (1) give nicer errors in
// debug mode and (2) not pay for the bits needed for that in prod mode.
//


function _Platform_export_UNUSED(exports)
{
	scope['Elm']
		? _Platform_mergeExportsProd(scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsProd(obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6)
				: _Platform_mergeExportsProd(obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}


function _Platform_export(exports)
{
	scope['Elm']
		? _Platform_mergeExportsDebug('Elm', scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsDebug(moduleName, obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6, moduleName)
				: _Platform_mergeExportsDebug(moduleName + '.' + name, obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}




// HELPERS


var _VirtualDom_divertHrefToApp;

var _VirtualDom_doc = typeof document !== 'undefined' ? document : {};


function _VirtualDom_appendChild(parent, child)
{
	parent.appendChild(child);
}

var _VirtualDom_init = F4(function(virtualNode, flagDecoder, debugMetadata, args)
{
	// NOTE: this function needs _Platform_export available to work

	/**_UNUSED/
	var node = args['node'];
	//*/
	/**/
	var node = args && args['node'] ? args['node'] : _Debug_crash(0);
	//*/

	node.parentNode.replaceChild(
		_VirtualDom_render(virtualNode, function() {}),
		node
	);

	return {};
});



// TEXT


function _VirtualDom_text(string)
{
	return {
		$: 0,
		a: string
	};
}



// NODE


var _VirtualDom_nodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 1,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_node = _VirtualDom_nodeNS(undefined);



// KEYED NODE


var _VirtualDom_keyedNodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 2,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_keyedNode = _VirtualDom_keyedNodeNS(undefined);



// CUSTOM


function _VirtualDom_custom(factList, model, render, diff)
{
	return {
		$: 3,
		d: _VirtualDom_organizeFacts(factList),
		g: model,
		h: render,
		i: diff
	};
}



// MAP


var _VirtualDom_map = F2(function(tagger, node)
{
	return {
		$: 4,
		j: tagger,
		k: node,
		b: 1 + (node.b || 0)
	};
});



// LAZY


function _VirtualDom_thunk(refs, thunk)
{
	return {
		$: 5,
		l: refs,
		m: thunk,
		k: undefined
	};
}

var _VirtualDom_lazy = F2(function(func, a)
{
	return _VirtualDom_thunk([func, a], function() {
		return func(a);
	});
});

var _VirtualDom_lazy2 = F3(function(func, a, b)
{
	return _VirtualDom_thunk([func, a, b], function() {
		return A2(func, a, b);
	});
});

var _VirtualDom_lazy3 = F4(function(func, a, b, c)
{
	return _VirtualDom_thunk([func, a, b, c], function() {
		return A3(func, a, b, c);
	});
});

var _VirtualDom_lazy4 = F5(function(func, a, b, c, d)
{
	return _VirtualDom_thunk([func, a, b, c, d], function() {
		return A4(func, a, b, c, d);
	});
});

var _VirtualDom_lazy5 = F6(function(func, a, b, c, d, e)
{
	return _VirtualDom_thunk([func, a, b, c, d, e], function() {
		return A5(func, a, b, c, d, e);
	});
});

var _VirtualDom_lazy6 = F7(function(func, a, b, c, d, e, f)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f], function() {
		return A6(func, a, b, c, d, e, f);
	});
});

var _VirtualDom_lazy7 = F8(function(func, a, b, c, d, e, f, g)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g], function() {
		return A7(func, a, b, c, d, e, f, g);
	});
});

var _VirtualDom_lazy8 = F9(function(func, a, b, c, d, e, f, g, h)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g, h], function() {
		return A8(func, a, b, c, d, e, f, g, h);
	});
});



// FACTS


var _VirtualDom_on = F2(function(key, handler)
{
	return {
		$: 'a0',
		n: key,
		o: handler
	};
});
var _VirtualDom_style = F2(function(key, value)
{
	return {
		$: 'a1',
		n: key,
		o: value
	};
});
var _VirtualDom_property = F2(function(key, value)
{
	return {
		$: 'a2',
		n: key,
		o: value
	};
});
var _VirtualDom_attribute = F2(function(key, value)
{
	return {
		$: 'a3',
		n: key,
		o: value
	};
});
var _VirtualDom_attributeNS = F3(function(namespace, key, value)
{
	return {
		$: 'a4',
		n: key,
		o: { f: namespace, o: value }
	};
});



// XSS ATTACK VECTOR CHECKS


function _VirtualDom_noScript(tag)
{
	return tag == 'script' ? 'p' : tag;
}

function _VirtualDom_noOnOrFormAction(key)
{
	return /^(on|formAction$)/i.test(key) ? 'data-' + key : key;
}

function _VirtualDom_noInnerHtmlOrFormAction(key)
{
	return key == 'innerHTML' || key == 'formAction' ? 'data-' + key : key;
}

function _VirtualDom_noJavaScriptUri_UNUSED(value)
{
	return /^javascript:/i.test(value.replace(/\s/g,'')) ? '' : value;
}

function _VirtualDom_noJavaScriptUri(value)
{
	return /^javascript:/i.test(value.replace(/\s/g,''))
		? 'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'
		: value;
}

function _VirtualDom_noJavaScriptOrHtmlUri_UNUSED(value)
{
	return /^\s*(javascript:|data:text\/html)/i.test(value) ? '' : value;
}

function _VirtualDom_noJavaScriptOrHtmlUri(value)
{
	return /^\s*(javascript:|data:text\/html)/i.test(value)
		? 'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'
		: value;
}



// MAP FACTS


var _VirtualDom_mapAttribute = F2(function(func, attr)
{
	return (attr.$ === 'a0')
		? A2(_VirtualDom_on, attr.n, _VirtualDom_mapHandler(func, attr.o))
		: attr;
});

function _VirtualDom_mapHandler(func, handler)
{
	var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);

	// 0 = Normal
	// 1 = MayStopPropagation
	// 2 = MayPreventDefault
	// 3 = Custom

	return {
		$: handler.$,
		a:
			!tag
				? A2($elm$json$Json$Decode$map, func, handler.a)
				:
			A3($elm$json$Json$Decode$map2,
				tag < 3
					? _VirtualDom_mapEventTuple
					: _VirtualDom_mapEventRecord,
				$elm$json$Json$Decode$succeed(func),
				handler.a
			)
	};
}

var _VirtualDom_mapEventTuple = F2(function(func, tuple)
{
	return _Utils_Tuple2(func(tuple.a), tuple.b);
});

var _VirtualDom_mapEventRecord = F2(function(func, record)
{
	return {
		message: func(record.message),
		stopPropagation: record.stopPropagation,
		preventDefault: record.preventDefault
	}
});



// ORGANIZE FACTS


function _VirtualDom_organizeFacts(factList)
{
	for (var facts = {}; factList.b; factList = factList.b) // WHILE_CONS
	{
		var entry = factList.a;

		var tag = entry.$;
		var key = entry.n;
		var value = entry.o;

		if (tag === 'a2')
		{
			(key === 'className')
				? _VirtualDom_addClass(facts, key, _Json_unwrap(value))
				: facts[key] = _Json_unwrap(value);

			continue;
		}

		var subFacts = facts[tag] || (facts[tag] = {});
		(tag === 'a3' && key === 'class')
			? _VirtualDom_addClass(subFacts, key, value)
			: subFacts[key] = value;
	}

	return facts;
}

function _VirtualDom_addClass(object, key, newClass)
{
	var classes = object[key];
	object[key] = classes ? classes + ' ' + newClass : newClass;
}



// RENDER


function _VirtualDom_render(vNode, eventNode)
{
	var tag = vNode.$;

	if (tag === 5)
	{
		return _VirtualDom_render(vNode.k || (vNode.k = vNode.m()), eventNode);
	}

	if (tag === 0)
	{
		return _VirtualDom_doc.createTextNode(vNode.a);
	}

	if (tag === 4)
	{
		var subNode = vNode.k;
		var tagger = vNode.j;

		while (subNode.$ === 4)
		{
			typeof tagger !== 'object'
				? tagger = [tagger, subNode.j]
				: tagger.push(subNode.j);

			subNode = subNode.k;
		}

		var subEventRoot = { j: tagger, p: eventNode };
		var domNode = _VirtualDom_render(subNode, subEventRoot);
		domNode.elm_event_node_ref = subEventRoot;
		return domNode;
	}

	if (tag === 3)
	{
		var domNode = vNode.h(vNode.g);
		_VirtualDom_applyFacts(domNode, eventNode, vNode.d);
		return domNode;
	}

	// at this point `tag` must be 1 or 2

	var domNode = vNode.f
		? _VirtualDom_doc.createElementNS(vNode.f, vNode.c)
		: _VirtualDom_doc.createElement(vNode.c);

	if (_VirtualDom_divertHrefToApp && vNode.c == 'a')
	{
		domNode.addEventListener('click', _VirtualDom_divertHrefToApp(domNode));
	}

	_VirtualDom_applyFacts(domNode, eventNode, vNode.d);

	for (var kids = vNode.e, i = 0; i < kids.length; i++)
	{
		_VirtualDom_appendChild(domNode, _VirtualDom_render(tag === 1 ? kids[i] : kids[i].b, eventNode));
	}

	return domNode;
}



// APPLY FACTS


function _VirtualDom_applyFacts(domNode, eventNode, facts)
{
	for (var key in facts)
	{
		var value = facts[key];

		key === 'a1'
			? _VirtualDom_applyStyles(domNode, value)
			:
		key === 'a0'
			? _VirtualDom_applyEvents(domNode, eventNode, value)
			:
		key === 'a3'
			? _VirtualDom_applyAttrs(domNode, value)
			:
		key === 'a4'
			? _VirtualDom_applyAttrsNS(domNode, value)
			:
		((key !== 'value' && key !== 'checked') || domNode[key] !== value) && (domNode[key] = value);
	}
}



// APPLY STYLES


function _VirtualDom_applyStyles(domNode, styles)
{
	var domNodeStyle = domNode.style;

	for (var key in styles)
	{
		domNodeStyle[key] = styles[key];
	}
}



// APPLY ATTRS


function _VirtualDom_applyAttrs(domNode, attrs)
{
	for (var key in attrs)
	{
		var value = attrs[key];
		typeof value !== 'undefined'
			? domNode.setAttribute(key, value)
			: domNode.removeAttribute(key);
	}
}



// APPLY NAMESPACED ATTRS


function _VirtualDom_applyAttrsNS(domNode, nsAttrs)
{
	for (var key in nsAttrs)
	{
		var pair = nsAttrs[key];
		var namespace = pair.f;
		var value = pair.o;

		typeof value !== 'undefined'
			? domNode.setAttributeNS(namespace, key, value)
			: domNode.removeAttributeNS(namespace, key);
	}
}



// APPLY EVENTS


function _VirtualDom_applyEvents(domNode, eventNode, events)
{
	var allCallbacks = domNode.elmFs || (domNode.elmFs = {});

	for (var key in events)
	{
		var newHandler = events[key];
		var oldCallback = allCallbacks[key];

		if (!newHandler)
		{
			domNode.removeEventListener(key, oldCallback);
			allCallbacks[key] = undefined;
			continue;
		}

		if (oldCallback)
		{
			var oldHandler = oldCallback.q;
			if (oldHandler.$ === newHandler.$)
			{
				oldCallback.q = newHandler;
				continue;
			}
			domNode.removeEventListener(key, oldCallback);
		}

		oldCallback = _VirtualDom_makeCallback(eventNode, newHandler);
		domNode.addEventListener(key, oldCallback,
			_VirtualDom_passiveSupported
			&& { passive: $elm$virtual_dom$VirtualDom$toHandlerInt(newHandler) < 2 }
		);
		allCallbacks[key] = oldCallback;
	}
}



// PASSIVE EVENTS


var _VirtualDom_passiveSupported;

try
{
	window.addEventListener('t', null, Object.defineProperty({}, 'passive', {
		get: function() { _VirtualDom_passiveSupported = true; }
	}));
}
catch(e) {}



// EVENT HANDLERS


function _VirtualDom_makeCallback(eventNode, initialHandler)
{
	function callback(event)
	{
		var handler = callback.q;
		var result = _Json_runHelp(handler.a, event);

		if (!$elm$core$Result$isOk(result))
		{
			return;
		}

		var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);

		// 0 = Normal
		// 1 = MayStopPropagation
		// 2 = MayPreventDefault
		// 3 = Custom

		var value = result.a;
		var message = !tag ? value : tag < 3 ? value.a : value.message;
		var stopPropagation = tag == 1 ? value.b : tag == 3 && value.stopPropagation;
		var currentEventNode = (
			stopPropagation && event.stopPropagation(),
			(tag == 2 ? value.b : tag == 3 && value.preventDefault) && event.preventDefault(),
			eventNode
		);
		var tagger;
		var i;
		while (tagger = currentEventNode.j)
		{
			if (typeof tagger == 'function')
			{
				message = tagger(message);
			}
			else
			{
				for (var i = tagger.length; i--; )
				{
					message = tagger[i](message);
				}
			}
			currentEventNode = currentEventNode.p;
		}
		currentEventNode(message, stopPropagation); // stopPropagation implies isSync
	}

	callback.q = initialHandler;

	return callback;
}

function _VirtualDom_equalEvents(x, y)
{
	return x.$ == y.$ && _Json_equality(x.a, y.a);
}



// DIFF


// TODO: Should we do patches like in iOS?
//
// type Patch
//   = At Int Patch
//   | Batch (List Patch)
//   | Change ...
//
// How could it not be better?
//
function _VirtualDom_diff(x, y)
{
	var patches = [];
	_VirtualDom_diffHelp(x, y, patches, 0);
	return patches;
}


function _VirtualDom_pushPatch(patches, type, index, data)
{
	var patch = {
		$: type,
		r: index,
		s: data,
		t: undefined,
		u: undefined
	};
	patches.push(patch);
	return patch;
}


function _VirtualDom_diffHelp(x, y, patches, index)
{
	if (x === y)
	{
		return;
	}

	var xType = x.$;
	var yType = y.$;

	// Bail if you run into different types of nodes. Implies that the
	// structure has changed significantly and it's not worth a diff.
	if (xType !== yType)
	{
		if (xType === 1 && yType === 2)
		{
			y = _VirtualDom_dekey(y);
			yType = 1;
		}
		else
		{
			_VirtualDom_pushPatch(patches, 0, index, y);
			return;
		}
	}

	// Now we know that both nodes are the same $.
	switch (yType)
	{
		case 5:
			var xRefs = x.l;
			var yRefs = y.l;
			var i = xRefs.length;
			var same = i === yRefs.length;
			while (same && i--)
			{
				same = xRefs[i] === yRefs[i];
			}
			if (same)
			{
				y.k = x.k;
				return;
			}
			y.k = y.m();
			var subPatches = [];
			_VirtualDom_diffHelp(x.k, y.k, subPatches, 0);
			subPatches.length > 0 && _VirtualDom_pushPatch(patches, 1, index, subPatches);
			return;

		case 4:
			// gather nested taggers
			var xTaggers = x.j;
			var yTaggers = y.j;
			var nesting = false;

			var xSubNode = x.k;
			while (xSubNode.$ === 4)
			{
				nesting = true;

				typeof xTaggers !== 'object'
					? xTaggers = [xTaggers, xSubNode.j]
					: xTaggers.push(xSubNode.j);

				xSubNode = xSubNode.k;
			}

			var ySubNode = y.k;
			while (ySubNode.$ === 4)
			{
				nesting = true;

				typeof yTaggers !== 'object'
					? yTaggers = [yTaggers, ySubNode.j]
					: yTaggers.push(ySubNode.j);

				ySubNode = ySubNode.k;
			}

			// Just bail if different numbers of taggers. This implies the
			// structure of the virtual DOM has changed.
			if (nesting && xTaggers.length !== yTaggers.length)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			// check if taggers are "the same"
			if (nesting ? !_VirtualDom_pairwiseRefEqual(xTaggers, yTaggers) : xTaggers !== yTaggers)
			{
				_VirtualDom_pushPatch(patches, 2, index, yTaggers);
			}

			// diff everything below the taggers
			_VirtualDom_diffHelp(xSubNode, ySubNode, patches, index + 1);
			return;

		case 0:
			if (x.a !== y.a)
			{
				_VirtualDom_pushPatch(patches, 3, index, y.a);
			}
			return;

		case 1:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKids);
			return;

		case 2:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKeyedKids);
			return;

		case 3:
			if (x.h !== y.h)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
			factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

			var patch = y.i(x.g, y.g);
			patch && _VirtualDom_pushPatch(patches, 5, index, patch);

			return;
	}
}

// assumes the incoming arrays are the same length
function _VirtualDom_pairwiseRefEqual(as, bs)
{
	for (var i = 0; i < as.length; i++)
	{
		if (as[i] !== bs[i])
		{
			return false;
		}
	}

	return true;
}

function _VirtualDom_diffNodes(x, y, patches, index, diffKids)
{
	// Bail if obvious indicators have changed. Implies more serious
	// structural changes such that it's not worth it to diff.
	if (x.c !== y.c || x.f !== y.f)
	{
		_VirtualDom_pushPatch(patches, 0, index, y);
		return;
	}

	var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
	factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

	diffKids(x, y, patches, index);
}



// DIFF FACTS


// TODO Instead of creating a new diff object, it's possible to just test if
// there *is* a diff. During the actual patch, do the diff again and make the
// modifications directly. This way, there's no new allocations. Worth it?
function _VirtualDom_diffFacts(x, y, category)
{
	var diff;

	// look for changes and removals
	for (var xKey in x)
	{
		if (xKey === 'a1' || xKey === 'a0' || xKey === 'a3' || xKey === 'a4')
		{
			var subDiff = _VirtualDom_diffFacts(x[xKey], y[xKey] || {}, xKey);
			if (subDiff)
			{
				diff = diff || {};
				diff[xKey] = subDiff;
			}
			continue;
		}

		// remove if not in the new facts
		if (!(xKey in y))
		{
			diff = diff || {};
			diff[xKey] =
				!category
					? (typeof x[xKey] === 'string' ? '' : null)
					:
				(category === 'a1')
					? ''
					:
				(category === 'a0' || category === 'a3')
					? undefined
					:
				{ f: x[xKey].f, o: undefined };

			continue;
		}

		var xValue = x[xKey];
		var yValue = y[xKey];

		// reference equal, so don't worry about it
		if (xValue === yValue && xKey !== 'value' && xKey !== 'checked'
			|| category === 'a0' && _VirtualDom_equalEvents(xValue, yValue))
		{
			continue;
		}

		diff = diff || {};
		diff[xKey] = yValue;
	}

	// add new stuff
	for (var yKey in y)
	{
		if (!(yKey in x))
		{
			diff = diff || {};
			diff[yKey] = y[yKey];
		}
	}

	return diff;
}



// DIFF KIDS


function _VirtualDom_diffKids(xParent, yParent, patches, index)
{
	var xKids = xParent.e;
	var yKids = yParent.e;

	var xLen = xKids.length;
	var yLen = yKids.length;

	// FIGURE OUT IF THERE ARE INSERTS OR REMOVALS

	if (xLen > yLen)
	{
		_VirtualDom_pushPatch(patches, 6, index, {
			v: yLen,
			i: xLen - yLen
		});
	}
	else if (xLen < yLen)
	{
		_VirtualDom_pushPatch(patches, 7, index, {
			v: xLen,
			e: yKids
		});
	}

	// PAIRWISE DIFF EVERYTHING ELSE

	for (var minLen = xLen < yLen ? xLen : yLen, i = 0; i < minLen; i++)
	{
		var xKid = xKids[i];
		_VirtualDom_diffHelp(xKid, yKids[i], patches, ++index);
		index += xKid.b || 0;
	}
}



// KEYED DIFF


function _VirtualDom_diffKeyedKids(xParent, yParent, patches, rootIndex)
{
	var localPatches = [];

	var changes = {}; // Dict String Entry
	var inserts = []; // Array { index : Int, entry : Entry }
	// type Entry = { tag : String, vnode : VNode, index : Int, data : _ }

	var xKids = xParent.e;
	var yKids = yParent.e;
	var xLen = xKids.length;
	var yLen = yKids.length;
	var xIndex = 0;
	var yIndex = 0;

	var index = rootIndex;

	while (xIndex < xLen && yIndex < yLen)
	{
		var x = xKids[xIndex];
		var y = yKids[yIndex];

		var xKey = x.a;
		var yKey = y.a;
		var xNode = x.b;
		var yNode = y.b;

		var newMatch = undefined;
		var oldMatch = undefined;

		// check if keys match

		if (xKey === yKey)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNode, localPatches, index);
			index += xNode.b || 0;

			xIndex++;
			yIndex++;
			continue;
		}

		// look ahead 1 to detect insertions and removals.

		var xNext = xKids[xIndex + 1];
		var yNext = yKids[yIndex + 1];

		if (xNext)
		{
			var xNextKey = xNext.a;
			var xNextNode = xNext.b;
			oldMatch = yKey === xNextKey;
		}

		if (yNext)
		{
			var yNextKey = yNext.a;
			var yNextNode = yNext.b;
			newMatch = xKey === yNextKey;
		}


		// swap x and y
		if (newMatch && oldMatch)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			_VirtualDom_insertNode(changes, localPatches, xKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNextNode, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		// insert y
		if (newMatch)
		{
			index++;
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			index += xNode.b || 0;

			xIndex += 1;
			yIndex += 2;
			continue;
		}

		// remove x
		if (oldMatch)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 1;
			continue;
		}

		// remove x, insert y
		if (xNext && xNextKey === yNextKey)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNextNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		break;
	}

	// eat up any remaining nodes with removeNode and insertNode

	while (xIndex < xLen)
	{
		index++;
		var x = xKids[xIndex];
		var xNode = x.b;
		_VirtualDom_removeNode(changes, localPatches, x.a, xNode, index);
		index += xNode.b || 0;
		xIndex++;
	}

	while (yIndex < yLen)
	{
		var endInserts = endInserts || [];
		var y = yKids[yIndex];
		_VirtualDom_insertNode(changes, localPatches, y.a, y.b, undefined, endInserts);
		yIndex++;
	}

	if (localPatches.length > 0 || inserts.length > 0 || endInserts)
	{
		_VirtualDom_pushPatch(patches, 8, rootIndex, {
			w: localPatches,
			x: inserts,
			y: endInserts
		});
	}
}



// CHANGES FROM KEYED DIFF


var _VirtualDom_POSTFIX = '_elmW6BL';


function _VirtualDom_insertNode(changes, localPatches, key, vnode, yIndex, inserts)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		entry = {
			c: 0,
			z: vnode,
			r: yIndex,
			s: undefined
		};

		inserts.push({ r: yIndex, A: entry });
		changes[key] = entry;

		return;
	}

	// this key was removed earlier, a match!
	if (entry.c === 1)
	{
		inserts.push({ r: yIndex, A: entry });

		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(entry.z, vnode, subPatches, entry.r);
		entry.r = yIndex;
		entry.s.s = {
			w: subPatches,
			A: entry
		};

		return;
	}

	// this key has already been inserted or moved, a duplicate!
	_VirtualDom_insertNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, yIndex, inserts);
}


function _VirtualDom_removeNode(changes, localPatches, key, vnode, index)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		var patch = _VirtualDom_pushPatch(localPatches, 9, index, undefined);

		changes[key] = {
			c: 1,
			z: vnode,
			r: index,
			s: patch
		};

		return;
	}

	// this key was inserted earlier, a match!
	if (entry.c === 0)
	{
		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(vnode, entry.z, subPatches, index);

		_VirtualDom_pushPatch(localPatches, 9, index, {
			w: subPatches,
			A: entry
		});

		return;
	}

	// this key has already been removed or moved, a duplicate!
	_VirtualDom_removeNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, index);
}



// ADD DOM NODES
//
// Each DOM node has an "index" assigned in order of traversal. It is important
// to minimize our crawl over the actual DOM, so these indexes (along with the
// descendantsCount of virtual nodes) let us skip touching entire subtrees of
// the DOM if we know there are no patches there.


function _VirtualDom_addDomNodes(domNode, vNode, patches, eventNode)
{
	_VirtualDom_addDomNodesHelp(domNode, vNode, patches, 0, 0, vNode.b, eventNode);
}


// assumes `patches` is non-empty and indexes increase monotonically.
function _VirtualDom_addDomNodesHelp(domNode, vNode, patches, i, low, high, eventNode)
{
	var patch = patches[i];
	var index = patch.r;

	while (index === low)
	{
		var patchType = patch.$;

		if (patchType === 1)
		{
			_VirtualDom_addDomNodes(domNode, vNode.k, patch.s, eventNode);
		}
		else if (patchType === 8)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var subPatches = patch.s.w;
			if (subPatches.length > 0)
			{
				_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
			}
		}
		else if (patchType === 9)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var data = patch.s;
			if (data)
			{
				data.A.s = domNode;
				var subPatches = data.w;
				if (subPatches.length > 0)
				{
					_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
				}
			}
		}
		else
		{
			patch.t = domNode;
			patch.u = eventNode;
		}

		i++;

		if (!(patch = patches[i]) || (index = patch.r) > high)
		{
			return i;
		}
	}

	var tag = vNode.$;

	if (tag === 4)
	{
		var subNode = vNode.k;

		while (subNode.$ === 4)
		{
			subNode = subNode.k;
		}

		return _VirtualDom_addDomNodesHelp(domNode, subNode, patches, i, low + 1, high, domNode.elm_event_node_ref);
	}

	// tag must be 1 or 2 at this point

	var vKids = vNode.e;
	var childNodes = domNode.childNodes;
	for (var j = 0; j < vKids.length; j++)
	{
		low++;
		var vKid = tag === 1 ? vKids[j] : vKids[j].b;
		var nextLow = low + (vKid.b || 0);
		if (low <= index && index <= nextLow)
		{
			i = _VirtualDom_addDomNodesHelp(childNodes[j], vKid, patches, i, low, nextLow, eventNode);
			if (!(patch = patches[i]) || (index = patch.r) > high)
			{
				return i;
			}
		}
		low = nextLow;
	}
	return i;
}



// APPLY PATCHES


function _VirtualDom_applyPatches(rootDomNode, oldVirtualNode, patches, eventNode)
{
	if (patches.length === 0)
	{
		return rootDomNode;
	}

	_VirtualDom_addDomNodes(rootDomNode, oldVirtualNode, patches, eventNode);
	return _VirtualDom_applyPatchesHelp(rootDomNode, patches);
}

function _VirtualDom_applyPatchesHelp(rootDomNode, patches)
{
	for (var i = 0; i < patches.length; i++)
	{
		var patch = patches[i];
		var localDomNode = patch.t
		var newNode = _VirtualDom_applyPatch(localDomNode, patch);
		if (localDomNode === rootDomNode)
		{
			rootDomNode = newNode;
		}
	}
	return rootDomNode;
}

function _VirtualDom_applyPatch(domNode, patch)
{
	switch (patch.$)
	{
		case 0:
			return _VirtualDom_applyPatchRedraw(domNode, patch.s, patch.u);

		case 4:
			_VirtualDom_applyFacts(domNode, patch.u, patch.s);
			return domNode;

		case 3:
			domNode.replaceData(0, domNode.length, patch.s);
			return domNode;

		case 1:
			return _VirtualDom_applyPatchesHelp(domNode, patch.s);

		case 2:
			if (domNode.elm_event_node_ref)
			{
				domNode.elm_event_node_ref.j = patch.s;
			}
			else
			{
				domNode.elm_event_node_ref = { j: patch.s, p: patch.u };
			}
			return domNode;

		case 6:
			var data = patch.s;
			for (var i = 0; i < data.i; i++)
			{
				domNode.removeChild(domNode.childNodes[data.v]);
			}
			return domNode;

		case 7:
			var data = patch.s;
			var kids = data.e;
			var i = data.v;
			var theEnd = domNode.childNodes[i];
			for (; i < kids.length; i++)
			{
				domNode.insertBefore(_VirtualDom_render(kids[i], patch.u), theEnd);
			}
			return domNode;

		case 9:
			var data = patch.s;
			if (!data)
			{
				domNode.parentNode.removeChild(domNode);
				return domNode;
			}
			var entry = data.A;
			if (typeof entry.r !== 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
			}
			entry.s = _VirtualDom_applyPatchesHelp(domNode, data.w);
			return domNode;

		case 8:
			return _VirtualDom_applyPatchReorder(domNode, patch);

		case 5:
			return patch.s(domNode);

		default:
			_Debug_crash(10); // 'Ran into an unknown patch!'
	}
}


function _VirtualDom_applyPatchRedraw(domNode, vNode, eventNode)
{
	var parentNode = domNode.parentNode;
	var newNode = _VirtualDom_render(vNode, eventNode);

	if (!newNode.elm_event_node_ref)
	{
		newNode.elm_event_node_ref = domNode.elm_event_node_ref;
	}

	if (parentNode && newNode !== domNode)
	{
		parentNode.replaceChild(newNode, domNode);
	}
	return newNode;
}


function _VirtualDom_applyPatchReorder(domNode, patch)
{
	var data = patch.s;

	// remove end inserts
	var frag = _VirtualDom_applyPatchReorderEndInsertsHelp(data.y, patch);

	// removals
	domNode = _VirtualDom_applyPatchesHelp(domNode, data.w);

	// inserts
	var inserts = data.x;
	for (var i = 0; i < inserts.length; i++)
	{
		var insert = inserts[i];
		var entry = insert.A;
		var node = entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u);
		domNode.insertBefore(node, domNode.childNodes[insert.r]);
	}

	// add end inserts
	if (frag)
	{
		_VirtualDom_appendChild(domNode, frag);
	}

	return domNode;
}


function _VirtualDom_applyPatchReorderEndInsertsHelp(endInserts, patch)
{
	if (!endInserts)
	{
		return;
	}

	var frag = _VirtualDom_doc.createDocumentFragment();
	for (var i = 0; i < endInserts.length; i++)
	{
		var insert = endInserts[i];
		var entry = insert.A;
		_VirtualDom_appendChild(frag, entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u)
		);
	}
	return frag;
}


function _VirtualDom_virtualize(node)
{
	// TEXT NODES

	if (node.nodeType === 3)
	{
		return _VirtualDom_text(node.textContent);
	}


	// WEIRD NODES

	if (node.nodeType !== 1)
	{
		return _VirtualDom_text('');
	}


	// ELEMENT NODES

	var attrList = _List_Nil;
	var attrs = node.attributes;
	for (var i = attrs.length; i--; )
	{
		var attr = attrs[i];
		var name = attr.name;
		var value = attr.value;
		attrList = _List_Cons( A2(_VirtualDom_attribute, name, value), attrList );
	}

	var tag = node.tagName.toLowerCase();
	var kidList = _List_Nil;
	var kids = node.childNodes;

	for (var i = kids.length; i--; )
	{
		kidList = _List_Cons(_VirtualDom_virtualize(kids[i]), kidList);
	}
	return A3(_VirtualDom_node, tag, attrList, kidList);
}

function _VirtualDom_dekey(keyedNode)
{
	var keyedKids = keyedNode.e;
	var len = keyedKids.length;
	var kids = new Array(len);
	for (var i = 0; i < len; i++)
	{
		kids[i] = keyedKids[i].b;
	}

	return {
		$: 1,
		c: keyedNode.c,
		d: keyedNode.d,
		e: kids,
		f: keyedNode.f,
		b: keyedNode.b
	};
}



var _Bitwise_and = F2(function(a, b)
{
	return a & b;
});

var _Bitwise_or = F2(function(a, b)
{
	return a | b;
});

var _Bitwise_xor = F2(function(a, b)
{
	return a ^ b;
});

function _Bitwise_complement(a)
{
	return ~a;
};

var _Bitwise_shiftLeftBy = F2(function(offset, a)
{
	return a << offset;
});

var _Bitwise_shiftRightBy = F2(function(offset, a)
{
	return a >> offset;
});

var _Bitwise_shiftRightZfBy = F2(function(offset, a)
{
	return a >>> offset;
});




// HELPERS


function _Debugger_unsafeCoerce(value)
{
	return value;
}



// PROGRAMS


var _Debugger_element = F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		A3($elm$browser$Debugger$Main$wrapInit, _Json_wrap(debugMetadata), _Debugger_popout(), impl.init),
		$elm$browser$Debugger$Main$wrapUpdate(impl.update),
		$elm$browser$Debugger$Main$wrapSubs(impl.subscriptions),
		function(sendToApp, initialModel)
		{
			var view = impl.view;
			var title = _VirtualDom_doc.title;
			var domNode = args && args['node'] ? args['node'] : _Debug_crash(0);
			var currNode = _VirtualDom_virtualize(domNode);
			var currBlocker = $elm$browser$Debugger$Main$toBlockerType(initialModel);
			var currPopout;

			var cornerNode = _VirtualDom_doc.createElement('div');
			domNode.parentNode.insertBefore(cornerNode, domNode.nextSibling);
			var cornerCurr = _VirtualDom_virtualize(cornerNode);

			initialModel.popout.a = sendToApp;

			return _Browser_makeAnimator(initialModel, function(model)
			{
				var nextNode = A2(_VirtualDom_map, $elm$browser$Debugger$Main$UserMsg, view($elm$browser$Debugger$Main$getUserModel(model)));
				var patches = _VirtualDom_diff(currNode, nextNode);
				domNode = _VirtualDom_applyPatches(domNode, currNode, patches, sendToApp);
				currNode = nextNode;

				// update blocker

				var nextBlocker = $elm$browser$Debugger$Main$toBlockerType(model);
				_Debugger_updateBlocker(currBlocker, nextBlocker);
				currBlocker = nextBlocker;

				// view corner

				var cornerNext = $elm$browser$Debugger$Main$cornerView(model);
				var cornerPatches = _VirtualDom_diff(cornerCurr, cornerNext);
				cornerNode = _VirtualDom_applyPatches(cornerNode, cornerCurr, cornerPatches, sendToApp);
				cornerCurr = cornerNext;

				if (!model.popout.b)
				{
					currPopout = undefined;
					return;
				}

				// view popout

				_VirtualDom_doc = model.popout.b; // SWITCH TO POPOUT DOC
				currPopout || (currPopout = _VirtualDom_virtualize(model.popout.b));
				var nextPopout = $elm$browser$Debugger$Main$popoutView(model);
				var popoutPatches = _VirtualDom_diff(currPopout, nextPopout);
				_VirtualDom_applyPatches(model.popout.b.body, currPopout, popoutPatches, sendToApp);
				currPopout = nextPopout;
				_VirtualDom_doc = document; // SWITCH BACK TO NORMAL DOC
			});
		}
	);
});


var _Debugger_document = F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		A3($elm$browser$Debugger$Main$wrapInit, _Json_wrap(debugMetadata), _Debugger_popout(), impl.init),
		$elm$browser$Debugger$Main$wrapUpdate(impl.update),
		$elm$browser$Debugger$Main$wrapSubs(impl.subscriptions),
		function(sendToApp, initialModel)
		{
			var divertHrefToApp = impl.setup && impl.setup(function(x) { return sendToApp($elm$browser$Debugger$Main$UserMsg(x)); });
			var view = impl.view;
			var title = _VirtualDom_doc.title;
			var bodyNode = _VirtualDom_doc.body;
			var currNode = _VirtualDom_virtualize(bodyNode);
			var currBlocker = $elm$browser$Debugger$Main$toBlockerType(initialModel);
			var currPopout;

			initialModel.popout.a = sendToApp;

			return _Browser_makeAnimator(initialModel, function(model)
			{
				_VirtualDom_divertHrefToApp = divertHrefToApp;
				var doc = view($elm$browser$Debugger$Main$getUserModel(model));
				var nextNode = _VirtualDom_node('body')(_List_Nil)(
					_Utils_ap(
						A2($elm$core$List$map, _VirtualDom_map($elm$browser$Debugger$Main$UserMsg), doc.body),
						_List_Cons($elm$browser$Debugger$Main$cornerView(model), _List_Nil)
					)
				);
				var patches = _VirtualDom_diff(currNode, nextNode);
				bodyNode = _VirtualDom_applyPatches(bodyNode, currNode, patches, sendToApp);
				currNode = nextNode;
				_VirtualDom_divertHrefToApp = 0;
				(title !== doc.title) && (_VirtualDom_doc.title = title = doc.title);

				// update blocker

				var nextBlocker = $elm$browser$Debugger$Main$toBlockerType(model);
				_Debugger_updateBlocker(currBlocker, nextBlocker);
				currBlocker = nextBlocker;

				// view popout

				if (!model.popout.b) { currPopout = undefined; return; }

				_VirtualDom_doc = model.popout.b; // SWITCH TO POPOUT DOC
				currPopout || (currPopout = _VirtualDom_virtualize(model.popout.b));
				var nextPopout = $elm$browser$Debugger$Main$popoutView(model);
				var popoutPatches = _VirtualDom_diff(currPopout, nextPopout);
				_VirtualDom_applyPatches(model.popout.b.body, currPopout, popoutPatches, sendToApp);
				currPopout = nextPopout;
				_VirtualDom_doc = document; // SWITCH BACK TO NORMAL DOC
			});
		}
	);
});


function _Debugger_popout()
{
	return {
		b: undefined,
		a: undefined
	};
}

function _Debugger_isOpen(popout)
{
	return !!popout.b;
}

function _Debugger_open(popout)
{
	return _Scheduler_binding(function(callback)
	{
		_Debugger_openWindow(popout);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
}

function _Debugger_openWindow(popout)
{
	var w = $elm$browser$Debugger$Main$initialWindowWidth,
		h = $elm$browser$Debugger$Main$initialWindowHeight,
	 	x = screen.width - w,
		y = screen.height - h;

	var debuggerWindow = window.open('', '', 'width=' + w + ',height=' + h + ',left=' + x + ',top=' + y);
	var doc = debuggerWindow.document;
	doc.title = 'Elm Debugger';

	// handle arrow keys
	doc.addEventListener('keydown', function(event) {
		event.metaKey && event.which === 82 && window.location.reload();
		event.key === 'ArrowUp'   && (popout.a($elm$browser$Debugger$Main$Up  ), event.preventDefault());
		event.key === 'ArrowDown' && (popout.a($elm$browser$Debugger$Main$Down), event.preventDefault());
	});

	// handle window close
	window.addEventListener('unload', close);
	debuggerWindow.addEventListener('unload', function() {
		popout.b = undefined;
		popout.a($elm$browser$Debugger$Main$NoOp);
		window.removeEventListener('unload', close);
	});

	function close() {
		popout.b = undefined;
		popout.a($elm$browser$Debugger$Main$NoOp);
		debuggerWindow.close();
	}

	// register new window
	popout.b = doc;
}



// SCROLL


function _Debugger_scroll(popout)
{
	return _Scheduler_binding(function(callback)
	{
		if (popout.b)
		{
			var msgs = popout.b.getElementById('elm-debugger-sidebar');
			if (msgs && msgs.scrollTop !== 0)
			{
				msgs.scrollTop = 0;
			}
		}
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
}


var _Debugger_scrollTo = F2(function(id, popout)
{
	return _Scheduler_binding(function(callback)
	{
		if (popout.b)
		{
			var msg = popout.b.getElementById(id);
			if (msg)
			{
				msg.scrollIntoView(false);
			}
		}
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});



// UPLOAD


function _Debugger_upload(popout)
{
	return _Scheduler_binding(function(callback)
	{
		var doc = popout.b || document;
		var element = doc.createElement('input');
		element.setAttribute('type', 'file');
		element.setAttribute('accept', 'text/json');
		element.style.display = 'none';
		element.addEventListener('change', function(event)
		{
			var fileReader = new FileReader();
			fileReader.onload = function(e)
			{
				callback(_Scheduler_succeed(e.target.result));
			};
			fileReader.readAsText(event.target.files[0]);
			doc.body.removeChild(element);
		});
		doc.body.appendChild(element);
		element.click();
	});
}



// DOWNLOAD


var _Debugger_download = F2(function(historyLength, json)
{
	return _Scheduler_binding(function(callback)
	{
		var fileName = 'history-' + historyLength + '.txt';
		var jsonString = JSON.stringify(json);
		var mime = 'text/plain;charset=utf-8';
		var done = _Scheduler_succeed(_Utils_Tuple0);

		// for IE10+
		if (navigator.msSaveBlob)
		{
			navigator.msSaveBlob(new Blob([jsonString], {type: mime}), fileName);
			return callback(done);
		}

		// for HTML5
		var element = document.createElement('a');
		element.setAttribute('href', 'data:' + mime + ',' + encodeURIComponent(jsonString));
		element.setAttribute('download', fileName);
		element.style.display = 'none';
		document.body.appendChild(element);
		element.click();
		document.body.removeChild(element);
		callback(done);
	});
});



// POPOUT CONTENT


function _Debugger_messageToString(value)
{
	if (typeof value === 'boolean')
	{
		return value ? 'True' : 'False';
	}

	if (typeof value === 'number')
	{
		return value + '';
	}

	if (typeof value === 'string')
	{
		return '"' + _Debugger_addSlashes(value, false) + '"';
	}

	if (value instanceof String)
	{
		return "'" + _Debugger_addSlashes(value, true) + "'";
	}

	if (typeof value !== 'object' || value === null || !('$' in value))
	{
		return '…';
	}

	if (typeof value.$ === 'number')
	{
		return '…';
	}

	var code = value.$.charCodeAt(0);
	if (code === 0x23 /* # */ || /* a */ 0x61 <= code && code <= 0x7A /* z */)
	{
		return '…';
	}

	if (['Array_elm_builtin', 'Set_elm_builtin', 'RBNode_elm_builtin', 'RBEmpty_elm_builtin'].indexOf(value.$) >= 0)
	{
		return '…';
	}

	var keys = Object.keys(value);
	switch (keys.length)
	{
		case 1:
			return value.$;
		case 2:
			return value.$ + ' ' + _Debugger_messageToString(value.a);
		default:
			return value.$ + ' … ' + _Debugger_messageToString(value[keys[keys.length - 1]]);
	}
}


function _Debugger_init(value)
{
	if (typeof value === 'boolean')
	{
		return A3($elm$browser$Debugger$Expando$Constructor, $elm$core$Maybe$Just(value ? 'True' : 'False'), true, _List_Nil);
	}

	if (typeof value === 'number')
	{
		return $elm$browser$Debugger$Expando$Primitive(value + '');
	}

	if (typeof value === 'string')
	{
		return $elm$browser$Debugger$Expando$S('"' + _Debugger_addSlashes(value, false) + '"');
	}

	if (value instanceof String)
	{
		return $elm$browser$Debugger$Expando$S("'" + _Debugger_addSlashes(value, true) + "'");
	}

	if (typeof value === 'object' && '$' in value)
	{
		var tag = value.$;

		if (tag === '::' || tag === '[]')
		{
			return A3($elm$browser$Debugger$Expando$Sequence, $elm$browser$Debugger$Expando$ListSeq, true,
				A2($elm$core$List$map, _Debugger_init, value)
			);
		}

		if (tag === 'Set_elm_builtin')
		{
			return A3($elm$browser$Debugger$Expando$Sequence, $elm$browser$Debugger$Expando$SetSeq, true,
				A3($elm$core$Set$foldr, _Debugger_initCons, _List_Nil, value)
			);
		}

		if (tag === 'RBNode_elm_builtin' || tag == 'RBEmpty_elm_builtin')
		{
			return A2($elm$browser$Debugger$Expando$Dictionary, true,
				A3($elm$core$Dict$foldr, _Debugger_initKeyValueCons, _List_Nil, value)
			);
		}

		if (tag === 'Array_elm_builtin')
		{
			return A3($elm$browser$Debugger$Expando$Sequence, $elm$browser$Debugger$Expando$ArraySeq, true,
				A3($elm$core$Array$foldr, _Debugger_initCons, _List_Nil, value)
			);
		}

		if (typeof tag === 'number')
		{
			return $elm$browser$Debugger$Expando$Primitive('<internals>');
		}

		var char = tag.charCodeAt(0);
		if (char === 35 || 65 <= char && char <= 90)
		{
			var list = _List_Nil;
			for (var i in value)
			{
				if (i === '$') continue;
				list = _List_Cons(_Debugger_init(value[i]), list);
			}
			return A3($elm$browser$Debugger$Expando$Constructor, char === 35 ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(tag), true, $elm$core$List$reverse(list));
		}

		return $elm$browser$Debugger$Expando$Primitive('<internals>');
	}

	if (typeof value === 'object')
	{
		var dict = $elm$core$Dict$empty;
		for (var i in value)
		{
			dict = A3($elm$core$Dict$insert, i, _Debugger_init(value[i]), dict);
		}
		return A2($elm$browser$Debugger$Expando$Record, true, dict);
	}

	return $elm$browser$Debugger$Expando$Primitive('<internals>');
}

var _Debugger_initCons = F2(function initConsHelp(value, list)
{
	return _List_Cons(_Debugger_init(value), list);
});

var _Debugger_initKeyValueCons = F3(function(key, value, list)
{
	return _List_Cons(
		_Utils_Tuple2(_Debugger_init(key), _Debugger_init(value)),
		list
	);
});

function _Debugger_addSlashes(str, isChar)
{
	var s = str
		.replace(/\\/g, '\\\\')
		.replace(/\n/g, '\\n')
		.replace(/\t/g, '\\t')
		.replace(/\r/g, '\\r')
		.replace(/\v/g, '\\v')
		.replace(/\0/g, '\\0');
	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}



// BLOCK EVENTS


function _Debugger_updateBlocker(oldBlocker, newBlocker)
{
	if (oldBlocker === newBlocker) return;

	var oldEvents = _Debugger_blockerToEvents(oldBlocker);
	var newEvents = _Debugger_blockerToEvents(newBlocker);

	// remove old blockers
	for (var i = 0; i < oldEvents.length; i++)
	{
		document.removeEventListener(oldEvents[i], _Debugger_blocker, true);
	}

	// add new blockers
	for (var i = 0; i < newEvents.length; i++)
	{
		document.addEventListener(newEvents[i], _Debugger_blocker, true);
	}
}


function _Debugger_blocker(event)
{
	if (event.type === 'keydown' && event.metaKey && event.which === 82)
	{
		return;
	}

	var isScroll = event.type === 'scroll' || event.type === 'wheel';
	for (var node = event.target; node; node = node.parentNode)
	{
		if (isScroll ? node.id === 'elm-debugger-details' : node.id === 'elm-debugger-overlay')
		{
			return;
		}
	}

	event.stopPropagation();
	event.preventDefault();
}

function _Debugger_blockerToEvents(blocker)
{
	return blocker === $elm$browser$Debugger$Overlay$BlockNone
		? []
		: blocker === $elm$browser$Debugger$Overlay$BlockMost
			? _Debugger_mostEvents
			: _Debugger_allEvents;
}

var _Debugger_mostEvents = [
	'click', 'dblclick', 'mousemove',
	'mouseup', 'mousedown', 'mouseenter', 'mouseleave',
	'touchstart', 'touchend', 'touchcancel', 'touchmove',
	'pointerdown', 'pointerup', 'pointerover', 'pointerout',
	'pointerenter', 'pointerleave', 'pointermove', 'pointercancel',
	'dragstart', 'drag', 'dragend', 'dragenter', 'dragover', 'dragleave', 'drop',
	'keyup', 'keydown', 'keypress',
	'input', 'change',
	'focus', 'blur'
];

var _Debugger_allEvents = _Debugger_mostEvents.concat('wheel', 'scroll');




// ELEMENT


var _Debugger_element;

var _Browser_element = _Debugger_element || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function(sendToApp, initialModel) {
			var view = impl.view;
			/**_UNUSED/
			var domNode = args['node'];
			//*/
			/**/
			var domNode = args && args['node'] ? args['node'] : _Debug_crash(0);
			//*/
			var currNode = _VirtualDom_virtualize(domNode);

			return _Browser_makeAnimator(initialModel, function(model)
			{
				var nextNode = view(model);
				var patches = _VirtualDom_diff(currNode, nextNode);
				domNode = _VirtualDom_applyPatches(domNode, currNode, patches, sendToApp);
				currNode = nextNode;
			});
		}
	);
});



// DOCUMENT


var _Debugger_document;

var _Browser_document = _Debugger_document || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function(sendToApp, initialModel) {
			var divertHrefToApp = impl.setup && impl.setup(sendToApp)
			var view = impl.view;
			var title = _VirtualDom_doc.title;
			var bodyNode = _VirtualDom_doc.body;
			var currNode = _VirtualDom_virtualize(bodyNode);
			return _Browser_makeAnimator(initialModel, function(model)
			{
				_VirtualDom_divertHrefToApp = divertHrefToApp;
				var doc = view(model);
				var nextNode = _VirtualDom_node('body')(_List_Nil)(doc.body);
				var patches = _VirtualDom_diff(currNode, nextNode);
				bodyNode = _VirtualDom_applyPatches(bodyNode, currNode, patches, sendToApp);
				currNode = nextNode;
				_VirtualDom_divertHrefToApp = 0;
				(title !== doc.title) && (_VirtualDom_doc.title = title = doc.title);
			});
		}
	);
});



// ANIMATION


var _Browser_cancelAnimationFrame =
	typeof cancelAnimationFrame !== 'undefined'
		? cancelAnimationFrame
		: function(id) { clearTimeout(id); };

var _Browser_requestAnimationFrame =
	typeof requestAnimationFrame !== 'undefined'
		? requestAnimationFrame
		: function(callback) { return setTimeout(callback, 1000 / 60); };


function _Browser_makeAnimator(model, draw)
{
	draw(model);

	var state = 0;

	function updateIfNeeded()
	{
		state = state === 1
			? 0
			: ( _Browser_requestAnimationFrame(updateIfNeeded), draw(model), 1 );
	}

	return function(nextModel, isSync)
	{
		model = nextModel;

		isSync
			? ( draw(model),
				state === 2 && (state = 1)
				)
			: ( state === 0 && _Browser_requestAnimationFrame(updateIfNeeded),
				state = 2
				);
	};
}



// APPLICATION


function _Browser_application(impl)
{
	var onUrlChange = impl.onUrlChange;
	var onUrlRequest = impl.onUrlRequest;
	var key = function() { key.a(onUrlChange(_Browser_getUrl())); };

	return _Browser_document({
		setup: function(sendToApp)
		{
			key.a = sendToApp;
			_Browser_window.addEventListener('popstate', key);
			_Browser_window.navigator.userAgent.indexOf('Trident') < 0 || _Browser_window.addEventListener('hashchange', key);

			return F2(function(domNode, event)
			{
				if (!event.ctrlKey && !event.metaKey && !event.shiftKey && event.button < 1 && !domNode.target && !domNode.hasAttribute('download'))
				{
					event.preventDefault();
					var href = domNode.href;
					var curr = _Browser_getUrl();
					var next = $elm$url$Url$fromString(href).a;
					sendToApp(onUrlRequest(
						(next
							&& curr.protocol === next.protocol
							&& curr.host === next.host
							&& curr.port_.a === next.port_.a
						)
							? $elm$browser$Browser$Internal(next)
							: $elm$browser$Browser$External(href)
					));
				}
			});
		},
		init: function(flags)
		{
			return A3(impl.init, flags, _Browser_getUrl(), key);
		},
		view: impl.view,
		update: impl.update,
		subscriptions: impl.subscriptions
	});
}

function _Browser_getUrl()
{
	return $elm$url$Url$fromString(_VirtualDom_doc.location.href).a || _Debug_crash(1);
}

var _Browser_go = F2(function(key, n)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		n && history.go(n);
		key();
	}));
});

var _Browser_pushUrl = F2(function(key, url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		history.pushState({}, '', url);
		key();
	}));
});

var _Browser_replaceUrl = F2(function(key, url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		history.replaceState({}, '', url);
		key();
	}));
});



// GLOBAL EVENTS


var _Browser_fakeNode = { addEventListener: function() {}, removeEventListener: function() {} };
var _Browser_doc = typeof document !== 'undefined' ? document : _Browser_fakeNode;
var _Browser_window = typeof window !== 'undefined' ? window : _Browser_fakeNode;

var _Browser_on = F3(function(node, eventName, sendToSelf)
{
	return _Scheduler_spawn(_Scheduler_binding(function(callback)
	{
		function handler(event)	{ _Scheduler_rawSpawn(sendToSelf(event)); }
		node.addEventListener(eventName, handler, _VirtualDom_passiveSupported && { passive: true });
		return function() { node.removeEventListener(eventName, handler); };
	}));
});

var _Browser_decodeEvent = F2(function(decoder, event)
{
	var result = _Json_runHelp(decoder, event);
	return $elm$core$Result$isOk(result) ? $elm$core$Maybe$Just(result.a) : $elm$core$Maybe$Nothing;
});



// PAGE VISIBILITY


function _Browser_visibilityInfo()
{
	return (typeof _VirtualDom_doc.hidden !== 'undefined')
		? { hidden: 'hidden', change: 'visibilitychange' }
		:
	(typeof _VirtualDom_doc.mozHidden !== 'undefined')
		? { hidden: 'mozHidden', change: 'mozvisibilitychange' }
		:
	(typeof _VirtualDom_doc.msHidden !== 'undefined')
		? { hidden: 'msHidden', change: 'msvisibilitychange' }
		:
	(typeof _VirtualDom_doc.webkitHidden !== 'undefined')
		? { hidden: 'webkitHidden', change: 'webkitvisibilitychange' }
		: { hidden: 'hidden', change: 'visibilitychange' };
}



// ANIMATION FRAMES


function _Browser_rAF()
{
	return _Scheduler_binding(function(callback)
	{
		var id = _Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(Date.now()));
		});

		return function() {
			_Browser_cancelAnimationFrame(id);
		};
	});
}


function _Browser_now()
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(Date.now()));
	});
}



// DOM STUFF


function _Browser_withNode(id, doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			var node = document.getElementById(id);
			callback(node
				? _Scheduler_succeed(doStuff(node))
				: _Scheduler_fail($elm$browser$Browser$Dom$NotFound(id))
			);
		});
	});
}


function _Browser_withWindow(doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(doStuff()));
		});
	});
}


// FOCUS and BLUR


var _Browser_call = F2(function(functionName, id)
{
	return _Browser_withNode(id, function(node) {
		node[functionName]();
		return _Utils_Tuple0;
	});
});



// WINDOW VIEWPORT


function _Browser_getViewport()
{
	return {
		scene: _Browser_getScene(),
		viewport: {
			x: _Browser_window.pageXOffset,
			y: _Browser_window.pageYOffset,
			width: _Browser_doc.documentElement.clientWidth,
			height: _Browser_doc.documentElement.clientHeight
		}
	};
}

function _Browser_getScene()
{
	var body = _Browser_doc.body;
	var elem = _Browser_doc.documentElement;
	return {
		width: Math.max(body.scrollWidth, body.offsetWidth, elem.scrollWidth, elem.offsetWidth, elem.clientWidth),
		height: Math.max(body.scrollHeight, body.offsetHeight, elem.scrollHeight, elem.offsetHeight, elem.clientHeight)
	};
}

var _Browser_setViewport = F2(function(x, y)
{
	return _Browser_withWindow(function()
	{
		_Browser_window.scroll(x, y);
		return _Utils_Tuple0;
	});
});



// ELEMENT VIEWPORT


function _Browser_getViewportOf(id)
{
	return _Browser_withNode(id, function(node)
	{
		return {
			scene: {
				width: node.scrollWidth,
				height: node.scrollHeight
			},
			viewport: {
				x: node.scrollLeft,
				y: node.scrollTop,
				width: node.clientWidth,
				height: node.clientHeight
			}
		};
	});
}


var _Browser_setViewportOf = F3(function(id, x, y)
{
	return _Browser_withNode(id, function(node)
	{
		node.scrollLeft = x;
		node.scrollTop = y;
		return _Utils_Tuple0;
	});
});



// ELEMENT


function _Browser_getElement(id)
{
	return _Browser_withNode(id, function(node)
	{
		var rect = node.getBoundingClientRect();
		var x = _Browser_window.pageXOffset;
		var y = _Browser_window.pageYOffset;
		return {
			scene: _Browser_getScene(),
			viewport: {
				x: x,
				y: y,
				width: _Browser_doc.documentElement.clientWidth,
				height: _Browser_doc.documentElement.clientHeight
			},
			element: {
				x: x + rect.left,
				y: y + rect.top,
				width: rect.width,
				height: rect.height
			}
		};
	});
}



// LOAD and RELOAD


function _Browser_reload(skipCache)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		_VirtualDom_doc.location.reload(skipCache);
	}));
}

function _Browser_load(url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		try
		{
			_Browser_window.location = url;
		}
		catch(err)
		{
			// Only Firefox can throw a NS_ERROR_MALFORMED_URI exception here.
			// Other browsers reload the page, so let's be consistent about that.
			_VirtualDom_doc.location.reload(false);
		}
	}));
}



function _Time_now(millisToPosix)
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(millisToPosix(Date.now())));
	});
}

var _Time_setInterval = F2(function(interval, task)
{
	return _Scheduler_binding(function(callback)
	{
		var id = setInterval(function() { _Scheduler_rawSpawn(task); }, interval);
		return function() { clearInterval(id); };
	});
});

function _Time_here()
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(
			A2($elm$time$Time$customZone, -(new Date().getTimezoneOffset()), _List_Nil)
		));
	});
}


function _Time_getZoneName()
{
	return _Scheduler_binding(function(callback)
	{
		try
		{
			var name = $elm$time$Time$Name(Intl.DateTimeFormat().resolvedOptions().timeZone);
		}
		catch (e)
		{
			var name = $elm$time$Time$Offset(new Date().getTimezoneOffset());
		}
		callback(_Scheduler_succeed(name));
	});
}


// CREATE

var _Regex_never = /.^/;

var _Regex_fromStringWith = F2(function(options, string)
{
	var flags = 'g';
	if (options.multiline) { flags += 'm'; }
	if (options.caseInsensitive) { flags += 'i'; }

	try
	{
		return $elm$core$Maybe$Just(new RegExp(string, flags));
	}
	catch(error)
	{
		return $elm$core$Maybe$Nothing;
	}
});


// USE

var _Regex_contains = F2(function(re, string)
{
	return string.match(re) !== null;
});


var _Regex_findAtMost = F3(function(n, re, str)
{
	var out = [];
	var number = 0;
	var string = str;
	var lastIndex = re.lastIndex;
	var prevLastIndex = -1;
	var result;
	while (number++ < n && (result = re.exec(string)))
	{
		if (prevLastIndex == re.lastIndex) break;
		var i = result.length - 1;
		var subs = new Array(i);
		while (i > 0)
		{
			var submatch = result[i];
			subs[--i] = submatch
				? $elm$core$Maybe$Just(submatch)
				: $elm$core$Maybe$Nothing;
		}
		out.push(A4($elm$regex$Regex$Match, result[0], result.index, number, _List_fromArray(subs)));
		prevLastIndex = re.lastIndex;
	}
	re.lastIndex = lastIndex;
	return _List_fromArray(out);
});


var _Regex_replaceAtMost = F4(function(n, re, replacer, string)
{
	var count = 0;
	function jsReplacer(match)
	{
		if (count++ >= n)
		{
			return match;
		}
		var i = arguments.length - 3;
		var submatches = new Array(i);
		while (i > 0)
		{
			var submatch = arguments[i];
			submatches[--i] = submatch
				? $elm$core$Maybe$Just(submatch)
				: $elm$core$Maybe$Nothing;
		}
		return replacer(A4($elm$regex$Regex$Match, match, arguments[arguments.length - 2], count, _List_fromArray(submatches)));
	}
	return string.replace(re, jsReplacer);
});

var _Regex_splitAtMost = F3(function(n, re, str)
{
	var string = str;
	var out = [];
	var start = re.lastIndex;
	var restoreLastIndex = re.lastIndex;
	while (n--)
	{
		var result = re.exec(string);
		if (!result) break;
		out.push(string.slice(start, result.index));
		start = re.lastIndex;
	}
	out.push(string.slice(start));
	re.lastIndex = restoreLastIndex;
	return _List_fromArray(out);
});

var _Regex_infinity = Infinity;




// STRINGS


var _Parser_isSubString = F5(function(smallString, offset, row, col, bigString)
{
	var smallLength = smallString.length;
	var isGood = offset + smallLength <= bigString.length;

	for (var i = 0; isGood && i < smallLength; )
	{
		var code = bigString.charCodeAt(offset);
		isGood =
			smallString[i++] === bigString[offset++]
			&& (
				code === 0x000A /* \n */
					? ( row++, col=1 )
					: ( col++, (code & 0xF800) === 0xD800 ? smallString[i++] === bigString[offset++] : 1 )
			)
	}

	return _Utils_Tuple3(isGood ? offset : -1, row, col);
});



// CHARS


var _Parser_isSubChar = F3(function(predicate, offset, string)
{
	return (
		string.length <= offset
			? -1
			:
		(string.charCodeAt(offset) & 0xF800) === 0xD800
			? (predicate(_Utils_chr(string.substr(offset, 2))) ? offset + 2 : -1)
			:
		(predicate(_Utils_chr(string[offset]))
			? ((string[offset] === '\n') ? -2 : (offset + 1))
			: -1
		)
	);
});


var _Parser_isAsciiCode = F3(function(code, offset, string)
{
	return string.charCodeAt(offset) === code;
});



// NUMBERS


var _Parser_chompBase10 = F2(function(offset, string)
{
	for (; offset < string.length; offset++)
	{
		var code = string.charCodeAt(offset);
		if (code < 0x30 || 0x39 < code)
		{
			return offset;
		}
	}
	return offset;
});


var _Parser_consumeBase = F3(function(base, offset, string)
{
	for (var total = 0; offset < string.length; offset++)
	{
		var digit = string.charCodeAt(offset) - 0x30;
		if (digit < 0 || base <= digit) break;
		total = base * total + digit;
	}
	return _Utils_Tuple2(offset, total);
});


var _Parser_consumeBase16 = F2(function(offset, string)
{
	for (var total = 0; offset < string.length; offset++)
	{
		var code = string.charCodeAt(offset);
		if (0x30 <= code && code <= 0x39)
		{
			total = 16 * total + code - 0x30;
		}
		else if (0x41 <= code && code <= 0x46)
		{
			total = 16 * total + code - 55;
		}
		else if (0x61 <= code && code <= 0x66)
		{
			total = 16 * total + code - 87;
		}
		else
		{
			break;
		}
	}
	return _Utils_Tuple2(offset, total);
});



// FIND STRING


var _Parser_findSubString = F5(function(smallString, offset, row, col, bigString)
{
	var newOffset = bigString.indexOf(smallString, offset);
	var target = newOffset < 0 ? bigString.length : newOffset + smallString.length;

	while (offset < target)
	{
		var code = bigString.charCodeAt(offset++);
		code === 0x000A /* \n */
			? ( col=1, row++ )
			: ( col++, (code & 0xF800) === 0xD800 && offset++ )
	}

	return _Utils_Tuple3(newOffset, row, col);
});


function _Url_percentEncode(string)
{
	return encodeURIComponent(string);
}

function _Url_percentDecode(string)
{
	try
	{
		return $elm$core$Maybe$Just(decodeURIComponent(string));
	}
	catch (e)
	{
		return $elm$core$Maybe$Nothing;
	}
}var $elm$core$Basics$EQ = {$: 'EQ'};
var $elm$core$Basics$GT = {$: 'GT'};
var $elm$core$Basics$LT = {$: 'LT'};
var $elm$core$List$cons = _List_cons;
var $elm$core$Dict$foldr = F3(
	function (func, acc, t) {
		foldr:
		while (true) {
			if (t.$ === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var key = t.b;
				var value = t.c;
				var left = t.d;
				var right = t.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldr, func, acc, right)),
					$temp$t = left;
				func = $temp$func;
				acc = $temp$acc;
				t = $temp$t;
				continue foldr;
			}
		}
	});
var $elm$core$Dict$toList = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, list) {
				return A2(
					$elm$core$List$cons,
					_Utils_Tuple2(key, value),
					list);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Dict$keys = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, keyList) {
				return A2($elm$core$List$cons, key, keyList);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Set$toList = function (_v0) {
	var dict = _v0.a;
	return $elm$core$Dict$keys(dict);
};
var $elm$core$Elm$JsArray$foldr = _JsArray_foldr;
var $elm$core$Array$foldr = F3(
	function (func, baseCase, _v0) {
		var tree = _v0.c;
		var tail = _v0.d;
		var helper = F2(
			function (node, acc) {
				if (node.$ === 'SubTree') {
					var subTree = node.a;
					return A3($elm$core$Elm$JsArray$foldr, helper, acc, subTree);
				} else {
					var values = node.a;
					return A3($elm$core$Elm$JsArray$foldr, func, acc, values);
				}
			});
		return A3(
			$elm$core$Elm$JsArray$foldr,
			helper,
			A3($elm$core$Elm$JsArray$foldr, func, baseCase, tail),
			tree);
	});
var $elm$core$Array$toList = function (array) {
	return A3($elm$core$Array$foldr, $elm$core$List$cons, _List_Nil, array);
};
var $elm$core$Result$Err = function (a) {
	return {$: 'Err', a: a};
};
var $elm$json$Json$Decode$Failure = F2(
	function (a, b) {
		return {$: 'Failure', a: a, b: b};
	});
var $elm$json$Json$Decode$Field = F2(
	function (a, b) {
		return {$: 'Field', a: a, b: b};
	});
var $elm$json$Json$Decode$Index = F2(
	function (a, b) {
		return {$: 'Index', a: a, b: b};
	});
var $elm$core$Result$Ok = function (a) {
	return {$: 'Ok', a: a};
};
var $elm$json$Json$Decode$OneOf = function (a) {
	return {$: 'OneOf', a: a};
};
var $elm$core$Basics$False = {$: 'False'};
var $elm$core$Basics$add = _Basics_add;
var $elm$core$Maybe$Just = function (a) {
	return {$: 'Just', a: a};
};
var $elm$core$Maybe$Nothing = {$: 'Nothing'};
var $elm$core$String$all = _String_all;
var $elm$core$Basics$and = _Basics_and;
var $elm$core$Basics$append = _Utils_append;
var $elm$json$Json$Encode$encode = _Json_encode;
var $elm$core$String$fromInt = _String_fromNumber;
var $elm$core$String$join = F2(
	function (sep, chunks) {
		return A2(
			_String_join,
			sep,
			_List_toArray(chunks));
	});
var $elm$core$String$split = F2(
	function (sep, string) {
		return _List_fromArray(
			A2(_String_split, sep, string));
	});
var $elm$json$Json$Decode$indent = function (str) {
	return A2(
		$elm$core$String$join,
		'\n    ',
		A2($elm$core$String$split, '\n', str));
};
var $elm$core$List$foldl = F3(
	function (func, acc, list) {
		foldl:
		while (true) {
			if (!list.b) {
				return acc;
			} else {
				var x = list.a;
				var xs = list.b;
				var $temp$func = func,
					$temp$acc = A2(func, x, acc),
					$temp$list = xs;
				func = $temp$func;
				acc = $temp$acc;
				list = $temp$list;
				continue foldl;
			}
		}
	});
var $elm$core$List$length = function (xs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, i) {
				return i + 1;
			}),
		0,
		xs);
};
var $elm$core$List$map2 = _List_map2;
var $elm$core$Basics$le = _Utils_le;
var $elm$core$Basics$sub = _Basics_sub;
var $elm$core$List$rangeHelp = F3(
	function (lo, hi, list) {
		rangeHelp:
		while (true) {
			if (_Utils_cmp(lo, hi) < 1) {
				var $temp$lo = lo,
					$temp$hi = hi - 1,
					$temp$list = A2($elm$core$List$cons, hi, list);
				lo = $temp$lo;
				hi = $temp$hi;
				list = $temp$list;
				continue rangeHelp;
			} else {
				return list;
			}
		}
	});
var $elm$core$List$range = F2(
	function (lo, hi) {
		return A3($elm$core$List$rangeHelp, lo, hi, _List_Nil);
	});
var $elm$core$List$indexedMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$map2,
			f,
			A2(
				$elm$core$List$range,
				0,
				$elm$core$List$length(xs) - 1),
			xs);
	});
var $elm$core$Char$toCode = _Char_toCode;
var $elm$core$Char$isLower = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (97 <= code) && (code <= 122);
};
var $elm$core$Char$isUpper = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 90) && (65 <= code);
};
var $elm$core$Basics$or = _Basics_or;
var $elm$core$Char$isAlpha = function (_char) {
	return $elm$core$Char$isLower(_char) || $elm$core$Char$isUpper(_char);
};
var $elm$core$Char$isDigit = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 57) && (48 <= code);
};
var $elm$core$Char$isAlphaNum = function (_char) {
	return $elm$core$Char$isLower(_char) || ($elm$core$Char$isUpper(_char) || $elm$core$Char$isDigit(_char));
};
var $elm$core$List$reverse = function (list) {
	return A3($elm$core$List$foldl, $elm$core$List$cons, _List_Nil, list);
};
var $elm$core$String$uncons = _String_uncons;
var $elm$json$Json$Decode$errorOneOf = F2(
	function (i, error) {
		return '\n\n(' + ($elm$core$String$fromInt(i + 1) + (') ' + $elm$json$Json$Decode$indent(
			$elm$json$Json$Decode$errorToString(error))));
	});
var $elm$json$Json$Decode$errorToString = function (error) {
	return A2($elm$json$Json$Decode$errorToStringHelp, error, _List_Nil);
};
var $elm$json$Json$Decode$errorToStringHelp = F2(
	function (error, context) {
		errorToStringHelp:
		while (true) {
			switch (error.$) {
				case 'Field':
					var f = error.a;
					var err = error.b;
					var isSimple = function () {
						var _v1 = $elm$core$String$uncons(f);
						if (_v1.$ === 'Nothing') {
							return false;
						} else {
							var _v2 = _v1.a;
							var _char = _v2.a;
							var rest = _v2.b;
							return $elm$core$Char$isAlpha(_char) && A2($elm$core$String$all, $elm$core$Char$isAlphaNum, rest);
						}
					}();
					var fieldName = isSimple ? ('.' + f) : ('[\'' + (f + '\']'));
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, fieldName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 'Index':
					var i = error.a;
					var err = error.b;
					var indexName = '[' + ($elm$core$String$fromInt(i) + ']');
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, indexName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 'OneOf':
					var errors = error.a;
					if (!errors.b) {
						return 'Ran into a Json.Decode.oneOf with no possibilities' + function () {
							if (!context.b) {
								return '!';
							} else {
								return ' at json' + A2(
									$elm$core$String$join,
									'',
									$elm$core$List$reverse(context));
							}
						}();
					} else {
						if (!errors.b.b) {
							var err = errors.a;
							var $temp$error = err,
								$temp$context = context;
							error = $temp$error;
							context = $temp$context;
							continue errorToStringHelp;
						} else {
							var starter = function () {
								if (!context.b) {
									return 'Json.Decode.oneOf';
								} else {
									return 'The Json.Decode.oneOf at json' + A2(
										$elm$core$String$join,
										'',
										$elm$core$List$reverse(context));
								}
							}();
							var introduction = starter + (' failed in the following ' + ($elm$core$String$fromInt(
								$elm$core$List$length(errors)) + ' ways:'));
							return A2(
								$elm$core$String$join,
								'\n\n',
								A2(
									$elm$core$List$cons,
									introduction,
									A2($elm$core$List$indexedMap, $elm$json$Json$Decode$errorOneOf, errors)));
						}
					}
				default:
					var msg = error.a;
					var json = error.b;
					var introduction = function () {
						if (!context.b) {
							return 'Problem with the given value:\n\n';
						} else {
							return 'Problem with the value at json' + (A2(
								$elm$core$String$join,
								'',
								$elm$core$List$reverse(context)) + ':\n\n    ');
						}
					}();
					return introduction + ($elm$json$Json$Decode$indent(
						A2($elm$json$Json$Encode$encode, 4, json)) + ('\n\n' + msg));
			}
		}
	});
var $elm$core$Array$branchFactor = 32;
var $elm$core$Array$Array_elm_builtin = F4(
	function (a, b, c, d) {
		return {$: 'Array_elm_builtin', a: a, b: b, c: c, d: d};
	});
var $elm$core$Elm$JsArray$empty = _JsArray_empty;
var $elm$core$Basics$ceiling = _Basics_ceiling;
var $elm$core$Basics$fdiv = _Basics_fdiv;
var $elm$core$Basics$logBase = F2(
	function (base, number) {
		return _Basics_log(number) / _Basics_log(base);
	});
var $elm$core$Basics$toFloat = _Basics_toFloat;
var $elm$core$Array$shiftStep = $elm$core$Basics$ceiling(
	A2($elm$core$Basics$logBase, 2, $elm$core$Array$branchFactor));
var $elm$core$Array$empty = A4($elm$core$Array$Array_elm_builtin, 0, $elm$core$Array$shiftStep, $elm$core$Elm$JsArray$empty, $elm$core$Elm$JsArray$empty);
var $elm$core$Elm$JsArray$initialize = _JsArray_initialize;
var $elm$core$Array$Leaf = function (a) {
	return {$: 'Leaf', a: a};
};
var $elm$core$Basics$apL = F2(
	function (f, x) {
		return f(x);
	});
var $elm$core$Basics$apR = F2(
	function (x, f) {
		return f(x);
	});
var $elm$core$Basics$eq = _Utils_equal;
var $elm$core$Basics$floor = _Basics_floor;
var $elm$core$Elm$JsArray$length = _JsArray_length;
var $elm$core$Basics$gt = _Utils_gt;
var $elm$core$Basics$max = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) > 0) ? x : y;
	});
var $elm$core$Basics$mul = _Basics_mul;
var $elm$core$Array$SubTree = function (a) {
	return {$: 'SubTree', a: a};
};
var $elm$core$Elm$JsArray$initializeFromList = _JsArray_initializeFromList;
var $elm$core$Array$compressNodes = F2(
	function (nodes, acc) {
		compressNodes:
		while (true) {
			var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodes);
			var node = _v0.a;
			var remainingNodes = _v0.b;
			var newAcc = A2(
				$elm$core$List$cons,
				$elm$core$Array$SubTree(node),
				acc);
			if (!remainingNodes.b) {
				return $elm$core$List$reverse(newAcc);
			} else {
				var $temp$nodes = remainingNodes,
					$temp$acc = newAcc;
				nodes = $temp$nodes;
				acc = $temp$acc;
				continue compressNodes;
			}
		}
	});
var $elm$core$Tuple$first = function (_v0) {
	var x = _v0.a;
	return x;
};
var $elm$core$Array$treeFromBuilder = F2(
	function (nodeList, nodeListSize) {
		treeFromBuilder:
		while (true) {
			var newNodeSize = $elm$core$Basics$ceiling(nodeListSize / $elm$core$Array$branchFactor);
			if (newNodeSize === 1) {
				return A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodeList).a;
			} else {
				var $temp$nodeList = A2($elm$core$Array$compressNodes, nodeList, _List_Nil),
					$temp$nodeListSize = newNodeSize;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue treeFromBuilder;
			}
		}
	});
var $elm$core$Array$builderToArray = F2(
	function (reverseNodeList, builder) {
		if (!builder.nodeListSize) {
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.tail),
				$elm$core$Array$shiftStep,
				$elm$core$Elm$JsArray$empty,
				builder.tail);
		} else {
			var treeLen = builder.nodeListSize * $elm$core$Array$branchFactor;
			var depth = $elm$core$Basics$floor(
				A2($elm$core$Basics$logBase, $elm$core$Array$branchFactor, treeLen - 1));
			var correctNodeList = reverseNodeList ? $elm$core$List$reverse(builder.nodeList) : builder.nodeList;
			var tree = A2($elm$core$Array$treeFromBuilder, correctNodeList, builder.nodeListSize);
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.tail) + treeLen,
				A2($elm$core$Basics$max, 5, depth * $elm$core$Array$shiftStep),
				tree,
				builder.tail);
		}
	});
var $elm$core$Basics$idiv = _Basics_idiv;
var $elm$core$Basics$lt = _Utils_lt;
var $elm$core$Array$initializeHelp = F5(
	function (fn, fromIndex, len, nodeList, tail) {
		initializeHelp:
		while (true) {
			if (fromIndex < 0) {
				return A2(
					$elm$core$Array$builderToArray,
					false,
					{nodeList: nodeList, nodeListSize: (len / $elm$core$Array$branchFactor) | 0, tail: tail});
			} else {
				var leaf = $elm$core$Array$Leaf(
					A3($elm$core$Elm$JsArray$initialize, $elm$core$Array$branchFactor, fromIndex, fn));
				var $temp$fn = fn,
					$temp$fromIndex = fromIndex - $elm$core$Array$branchFactor,
					$temp$len = len,
					$temp$nodeList = A2($elm$core$List$cons, leaf, nodeList),
					$temp$tail = tail;
				fn = $temp$fn;
				fromIndex = $temp$fromIndex;
				len = $temp$len;
				nodeList = $temp$nodeList;
				tail = $temp$tail;
				continue initializeHelp;
			}
		}
	});
var $elm$core$Basics$remainderBy = _Basics_remainderBy;
var $elm$core$Array$initialize = F2(
	function (len, fn) {
		if (len <= 0) {
			return $elm$core$Array$empty;
		} else {
			var tailLen = len % $elm$core$Array$branchFactor;
			var tail = A3($elm$core$Elm$JsArray$initialize, tailLen, len - tailLen, fn);
			var initialFromIndex = (len - tailLen) - $elm$core$Array$branchFactor;
			return A5($elm$core$Array$initializeHelp, fn, initialFromIndex, len, _List_Nil, tail);
		}
	});
var $elm$core$Basics$True = {$: 'True'};
var $elm$core$Result$isOk = function (result) {
	if (result.$ === 'Ok') {
		return true;
	} else {
		return false;
	}
};
var $elm$json$Json$Decode$map = _Json_map1;
var $elm$json$Json$Decode$map2 = _Json_map2;
var $elm$json$Json$Decode$succeed = _Json_succeed;
var $elm$virtual_dom$VirtualDom$toHandlerInt = function (handler) {
	switch (handler.$) {
		case 'Normal':
			return 0;
		case 'MayStopPropagation':
			return 1;
		case 'MayPreventDefault':
			return 2;
		default:
			return 3;
	}
};
var $elm$browser$Debugger$Expando$ArraySeq = {$: 'ArraySeq'};
var $elm$browser$Debugger$Overlay$BlockMost = {$: 'BlockMost'};
var $elm$browser$Debugger$Overlay$BlockNone = {$: 'BlockNone'};
var $elm$browser$Debugger$Expando$Constructor = F3(
	function (a, b, c) {
		return {$: 'Constructor', a: a, b: b, c: c};
	});
var $elm$browser$Debugger$Expando$Dictionary = F2(
	function (a, b) {
		return {$: 'Dictionary', a: a, b: b};
	});
var $elm$browser$Debugger$Main$Down = {$: 'Down'};
var $elm$browser$Debugger$Expando$ListSeq = {$: 'ListSeq'};
var $elm$browser$Debugger$Main$NoOp = {$: 'NoOp'};
var $elm$browser$Debugger$Expando$Primitive = function (a) {
	return {$: 'Primitive', a: a};
};
var $elm$browser$Debugger$Expando$Record = F2(
	function (a, b) {
		return {$: 'Record', a: a, b: b};
	});
var $elm$browser$Debugger$Expando$S = function (a) {
	return {$: 'S', a: a};
};
var $elm$browser$Debugger$Expando$Sequence = F3(
	function (a, b, c) {
		return {$: 'Sequence', a: a, b: b, c: c};
	});
var $elm$browser$Debugger$Expando$SetSeq = {$: 'SetSeq'};
var $elm$browser$Debugger$Main$Up = {$: 'Up'};
var $elm$browser$Debugger$Main$UserMsg = function (a) {
	return {$: 'UserMsg', a: a};
};
var $elm$browser$Debugger$Main$Export = {$: 'Export'};
var $elm$browser$Debugger$Main$Import = {$: 'Import'};
var $elm$browser$Debugger$Main$Open = {$: 'Open'};
var $elm$browser$Debugger$Main$OverlayMsg = function (a) {
	return {$: 'OverlayMsg', a: a};
};
var $elm$browser$Debugger$Main$Resume = {$: 'Resume'};
var $elm$browser$Debugger$Main$isPaused = function (state) {
	if (state.$ === 'Running') {
		return false;
	} else {
		return true;
	}
};
var $elm$browser$Debugger$History$size = function (history) {
	return history.numMessages;
};
var $elm$browser$Debugger$Overlay$Accept = function (a) {
	return {$: 'Accept', a: a};
};
var $elm$browser$Debugger$Overlay$Choose = F2(
	function (a, b) {
		return {$: 'Choose', a: a, b: b};
	});
var $elm$html$Html$div = _VirtualDom_node('div');
var $elm$json$Json$Encode$string = _Json_wrap;
var $elm$html$Html$Attributes$stringProperty = F2(
	function (key, string) {
		return A2(
			_VirtualDom_property,
			key,
			$elm$json$Json$Encode$string(string));
	});
var $elm$html$Html$Attributes$id = $elm$html$Html$Attributes$stringProperty('id');
var $elm$virtual_dom$VirtualDom$Normal = function (a) {
	return {$: 'Normal', a: a};
};
var $elm$virtual_dom$VirtualDom$on = _VirtualDom_on;
var $elm$html$Html$Events$on = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$Normal(decoder));
	});
var $elm$html$Html$Events$onClick = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'click',
		$elm$json$Json$Decode$succeed(msg));
};
var $elm$html$Html$span = _VirtualDom_node('span');
var $elm$virtual_dom$VirtualDom$style = _VirtualDom_style;
var $elm$html$Html$Attributes$style = $elm$virtual_dom$VirtualDom$style;
var $elm$virtual_dom$VirtualDom$text = _VirtualDom_text;
var $elm$html$Html$text = $elm$virtual_dom$VirtualDom$text;
var $elm$html$Html$a = _VirtualDom_node('a');
var $elm$browser$Debugger$Overlay$goodNews1 = '\nThe good news is that having values like this in your message type is not\nso great in the long run. You are better off using simpler data, like\n';
var $elm$browser$Debugger$Overlay$goodNews2 = '\nfunction can pattern match on that data and call whatever functions, JSON\ndecoders, etc. you need. This makes the code much more explicit and easy to\nfollow for other readers (or you in a few months!)\n';
var $elm$html$Html$Attributes$href = function (url) {
	return A2(
		$elm$html$Html$Attributes$stringProperty,
		'href',
		_VirtualDom_noJavaScriptUri(url));
};
var $elm$core$List$foldrHelper = F4(
	function (fn, acc, ctr, ls) {
		if (!ls.b) {
			return acc;
		} else {
			var a = ls.a;
			var r1 = ls.b;
			if (!r1.b) {
				return A2(fn, a, acc);
			} else {
				var b = r1.a;
				var r2 = r1.b;
				if (!r2.b) {
					return A2(
						fn,
						a,
						A2(fn, b, acc));
				} else {
					var c = r2.a;
					var r3 = r2.b;
					if (!r3.b) {
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(fn, c, acc)));
					} else {
						var d = r3.a;
						var r4 = r3.b;
						var res = (ctr > 500) ? A3(
							$elm$core$List$foldl,
							fn,
							acc,
							$elm$core$List$reverse(r4)) : A4($elm$core$List$foldrHelper, fn, acc, ctr + 1, r4);
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(
									fn,
									c,
									A2(fn, d, res))));
					}
				}
			}
		}
	});
var $elm$core$List$foldr = F3(
	function (fn, acc, ls) {
		return A4($elm$core$List$foldrHelper, fn, acc, 0, ls);
	});
var $elm$core$List$map = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, acc) {
					return A2(
						$elm$core$List$cons,
						f(x),
						acc);
				}),
			_List_Nil,
			xs);
	});
var $elm$html$Html$p = _VirtualDom_node('p');
var $elm$html$Html$ul = _VirtualDom_node('ul');
var $elm$html$Html$code = _VirtualDom_node('code');
var $elm$browser$Debugger$Overlay$viewCode = function (name) {
	return A2(
		$elm$html$Html$code,
		_List_Nil,
		_List_fromArray(
			[
				$elm$html$Html$text(name)
			]));
};
var $elm$browser$Debugger$Overlay$addCommas = function (items) {
	if (!items.b) {
		return '';
	} else {
		if (!items.b.b) {
			var item = items.a;
			return item;
		} else {
			if (!items.b.b.b) {
				var item1 = items.a;
				var _v1 = items.b;
				var item2 = _v1.a;
				return item1 + (' and ' + item2);
			} else {
				var lastItem = items.a;
				var otherItems = items.b;
				return A2(
					$elm$core$String$join,
					', ',
					_Utils_ap(
						otherItems,
						_List_fromArray(
							[' and ' + lastItem])));
			}
		}
	}
};
var $elm$html$Html$li = _VirtualDom_node('li');
var $elm$browser$Debugger$Overlay$problemToString = function (problem) {
	switch (problem.$) {
		case 'Function':
			return 'functions';
		case 'Decoder':
			return 'JSON decoders';
		case 'Task':
			return 'tasks';
		case 'Process':
			return 'processes';
		case 'Socket':
			return 'web sockets';
		case 'Request':
			return 'HTTP requests';
		case 'Program':
			return 'programs';
		default:
			return 'virtual DOM values';
	}
};
var $elm$browser$Debugger$Overlay$viewProblemType = function (_v0) {
	var name = _v0.name;
	var problems = _v0.problems;
	return A2(
		$elm$html$Html$li,
		_List_Nil,
		_List_fromArray(
			[
				$elm$browser$Debugger$Overlay$viewCode(name),
				$elm$html$Html$text(
				' can contain ' + ($elm$browser$Debugger$Overlay$addCommas(
					A2($elm$core$List$map, $elm$browser$Debugger$Overlay$problemToString, problems)) + '.'))
			]));
};
var $elm$browser$Debugger$Overlay$viewBadMetadata = function (_v0) {
	var message = _v0.message;
	var problems = _v0.problems;
	return _List_fromArray(
		[
			A2(
			$elm$html$Html$p,
			_List_Nil,
			_List_fromArray(
				[
					$elm$html$Html$text('The '),
					$elm$browser$Debugger$Overlay$viewCode(message),
					$elm$html$Html$text(' type of your program cannot be reliably serialized for history files.')
				])),
			A2(
			$elm$html$Html$p,
			_List_Nil,
			_List_fromArray(
				[
					$elm$html$Html$text('Functions cannot be serialized, nor can values that contain functions. This is a problem in these places:')
				])),
			A2(
			$elm$html$Html$ul,
			_List_Nil,
			A2($elm$core$List$map, $elm$browser$Debugger$Overlay$viewProblemType, problems)),
			A2(
			$elm$html$Html$p,
			_List_Nil,
			_List_fromArray(
				[
					$elm$html$Html$text($elm$browser$Debugger$Overlay$goodNews1),
					A2(
					$elm$html$Html$a,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$href('https://guide.elm-lang.org/types/custom_types.html')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('custom types')
						])),
					$elm$html$Html$text(', in your messages. From there, your '),
					$elm$browser$Debugger$Overlay$viewCode('update'),
					$elm$html$Html$text($elm$browser$Debugger$Overlay$goodNews2)
				]))
		]);
};
var $elm$virtual_dom$VirtualDom$map = _VirtualDom_map;
var $elm$html$Html$map = $elm$virtual_dom$VirtualDom$map;
var $elm$browser$Debugger$Overlay$Cancel = {$: 'Cancel'};
var $elm$browser$Debugger$Overlay$Proceed = {$: 'Proceed'};
var $elm$html$Html$button = _VirtualDom_node('button');
var $elm$browser$Debugger$Overlay$viewButtons = function (buttons) {
	var btn = F2(
		function (msg, string) {
			return A2(
				$elm$html$Html$button,
				_List_fromArray(
					[
						A2($elm$html$Html$Attributes$style, 'margin-right', '20px'),
						$elm$html$Html$Events$onClick(msg)
					]),
				_List_fromArray(
					[
						$elm$html$Html$text(string)
					]));
		});
	var buttonNodes = function () {
		if (buttons.$ === 'Accept') {
			var proceed = buttons.a;
			return _List_fromArray(
				[
					A2(btn, $elm$browser$Debugger$Overlay$Proceed, proceed)
				]);
		} else {
			var cancel = buttons.a;
			var proceed = buttons.b;
			return _List_fromArray(
				[
					A2(btn, $elm$browser$Debugger$Overlay$Cancel, cancel),
					A2(btn, $elm$browser$Debugger$Overlay$Proceed, proceed)
				]);
		}
	}();
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'height', '60px'),
				A2($elm$html$Html$Attributes$style, 'line-height', '60px'),
				A2($elm$html$Html$Attributes$style, 'text-align', 'right'),
				A2($elm$html$Html$Attributes$style, 'background-color', 'rgb(50, 50, 50)')
			]),
		buttonNodes);
};
var $elm$browser$Debugger$Overlay$viewMessage = F4(
	function (config, title, details, buttons) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$id('elm-debugger-overlay'),
					A2($elm$html$Html$Attributes$style, 'position', 'fixed'),
					A2($elm$html$Html$Attributes$style, 'top', '0'),
					A2($elm$html$Html$Attributes$style, 'left', '0'),
					A2($elm$html$Html$Attributes$style, 'width', '100vw'),
					A2($elm$html$Html$Attributes$style, 'height', '100vh'),
					A2($elm$html$Html$Attributes$style, 'color', 'white'),
					A2($elm$html$Html$Attributes$style, 'pointer-events', 'none'),
					A2($elm$html$Html$Attributes$style, 'font-family', '\'Trebuchet MS\', \'Lucida Grande\', \'Bitstream Vera Sans\', \'Helvetica Neue\', sans-serif'),
					A2($elm$html$Html$Attributes$style, 'z-index', '2147483647')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'position', 'absolute'),
							A2($elm$html$Html$Attributes$style, 'width', '600px'),
							A2($elm$html$Html$Attributes$style, 'height', '100vh'),
							A2($elm$html$Html$Attributes$style, 'padding-left', 'calc(50% - 300px)'),
							A2($elm$html$Html$Attributes$style, 'padding-right', 'calc(50% - 300px)'),
							A2($elm$html$Html$Attributes$style, 'background-color', 'rgba(200, 200, 200, 0.7)'),
							A2($elm$html$Html$Attributes$style, 'pointer-events', 'auto')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									A2($elm$html$Html$Attributes$style, 'font-size', '36px'),
									A2($elm$html$Html$Attributes$style, 'height', '80px'),
									A2($elm$html$Html$Attributes$style, 'background-color', 'rgb(50, 50, 50)'),
									A2($elm$html$Html$Attributes$style, 'padding-left', '22px'),
									A2($elm$html$Html$Attributes$style, 'vertical-align', 'middle'),
									A2($elm$html$Html$Attributes$style, 'line-height', '80px')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text(title)
								])),
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$id('elm-debugger-details'),
									A2($elm$html$Html$Attributes$style, 'padding', ' 8px 20px'),
									A2($elm$html$Html$Attributes$style, 'overflow-y', 'auto'),
									A2($elm$html$Html$Attributes$style, 'max-height', 'calc(100vh - 156px)'),
									A2($elm$html$Html$Attributes$style, 'background-color', 'rgb(61, 61, 61)')
								]),
							details),
							A2(
							$elm$html$Html$map,
							config.wrap,
							$elm$browser$Debugger$Overlay$viewButtons(buttons))
						]))
				]));
	});
var $elm$virtual_dom$VirtualDom$attribute = F2(
	function (key, value) {
		return A2(
			_VirtualDom_attribute,
			_VirtualDom_noOnOrFormAction(key),
			_VirtualDom_noJavaScriptOrHtmlUri(value));
	});
var $elm$core$Basics$negate = function (n) {
	return -n;
};
var $elm$virtual_dom$VirtualDom$nodeNS = function (tag) {
	return _VirtualDom_nodeNS(
		_VirtualDom_noScript(tag));
};
var $elm$core$String$fromFloat = _String_fromNumber;
var $elm$browser$Debugger$Overlay$viewShape = F4(
	function (x, y, angle, coordinates) {
		return A4(
			$elm$virtual_dom$VirtualDom$nodeNS,
			'http://www.w3.org/2000/svg',
			'polygon',
			_List_fromArray(
				[
					A2($elm$virtual_dom$VirtualDom$attribute, 'points', coordinates),
					A2(
					$elm$virtual_dom$VirtualDom$attribute,
					'transform',
					'translate(' + ($elm$core$String$fromFloat(x) + (' ' + ($elm$core$String$fromFloat(y) + (') rotate(' + ($elm$core$String$fromFloat(-angle) + ')'))))))
				]),
			_List_Nil);
	});
var $elm$browser$Debugger$Overlay$elmLogo = A4(
	$elm$virtual_dom$VirtualDom$nodeNS,
	'http://www.w3.org/2000/svg',
	'svg',
	_List_fromArray(
		[
			A2($elm$virtual_dom$VirtualDom$attribute, 'viewBox', '-300 -300 600 600'),
			A2($elm$virtual_dom$VirtualDom$attribute, 'xmlns', 'http://www.w3.org/2000/svg'),
			A2($elm$virtual_dom$VirtualDom$attribute, 'fill', 'currentColor'),
			A2($elm$virtual_dom$VirtualDom$attribute, 'width', '24px'),
			A2($elm$virtual_dom$VirtualDom$attribute, 'height', '24px')
		]),
	_List_fromArray(
		[
			A4(
			$elm$virtual_dom$VirtualDom$nodeNS,
			'http://www.w3.org/2000/svg',
			'g',
			_List_fromArray(
				[
					A2($elm$virtual_dom$VirtualDom$attribute, 'transform', 'scale(1 -1)')
				]),
			_List_fromArray(
				[
					A4($elm$browser$Debugger$Overlay$viewShape, 0, -210, 0, '-280,-90 0,190 280,-90'),
					A4($elm$browser$Debugger$Overlay$viewShape, -210, 0, 90, '-280,-90 0,190 280,-90'),
					A4($elm$browser$Debugger$Overlay$viewShape, 207, 207, 45, '-198,-66 0,132 198,-66'),
					A4($elm$browser$Debugger$Overlay$viewShape, 150, 0, 0, '-130,0 0,-130 130,0 0,130'),
					A4($elm$browser$Debugger$Overlay$viewShape, -89, 239, 0, '-191,61 69,61 191,-61 -69,-61'),
					A4($elm$browser$Debugger$Overlay$viewShape, 0, 106, 180, '-130,-44 0,86  130,-44'),
					A4($elm$browser$Debugger$Overlay$viewShape, 256, -150, 270, '-130,-44 0,86  130,-44')
				]))
		]));
var $elm$core$String$length = _String_length;
var $elm$browser$Debugger$Overlay$viewMiniControls = F2(
	function (config, numMsgs) {
		var string = $elm$core$String$fromInt(numMsgs);
		var width = $elm$core$String$fromInt(
			2 + $elm$core$String$length(string));
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'position', 'fixed'),
					A2($elm$html$Html$Attributes$style, 'bottom', '2em'),
					A2($elm$html$Html$Attributes$style, 'right', '2em'),
					A2($elm$html$Html$Attributes$style, 'width', 'calc(42px + ' + (width + 'ch)')),
					A2($elm$html$Html$Attributes$style, 'height', '36px'),
					A2($elm$html$Html$Attributes$style, 'background-color', '#1293D8'),
					A2($elm$html$Html$Attributes$style, 'color', 'white'),
					A2($elm$html$Html$Attributes$style, 'font-family', 'monospace'),
					A2($elm$html$Html$Attributes$style, 'pointer-events', 'auto'),
					A2($elm$html$Html$Attributes$style, 'z-index', '2147483647'),
					A2($elm$html$Html$Attributes$style, 'display', 'flex'),
					A2($elm$html$Html$Attributes$style, 'justify-content', 'center'),
					A2($elm$html$Html$Attributes$style, 'align-items', 'center'),
					A2($elm$html$Html$Attributes$style, 'cursor', 'pointer'),
					$elm$html$Html$Events$onClick(config.open)
				]),
			_List_fromArray(
				[
					$elm$browser$Debugger$Overlay$elmLogo,
					A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'padding-left', 'calc(1ch + 6px)'),
							A2($elm$html$Html$Attributes$style, 'padding-right', '1ch')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(string)
						]))
				]));
	});
var $elm$browser$Debugger$Overlay$explanationBad = '\nThe messages in this history do not match the messages handled by your\nprogram. I noticed changes in the following types:\n';
var $elm$browser$Debugger$Overlay$explanationRisky = '\nThis history seems old. It will work with this program, but some\nmessages have been added since the history was created:\n';
var $elm$core$List$intersperse = F2(
	function (sep, xs) {
		if (!xs.b) {
			return _List_Nil;
		} else {
			var hd = xs.a;
			var tl = xs.b;
			var step = F2(
				function (x, rest) {
					return A2(
						$elm$core$List$cons,
						sep,
						A2($elm$core$List$cons, x, rest));
				});
			var spersed = A3($elm$core$List$foldr, step, _List_Nil, tl);
			return A2($elm$core$List$cons, hd, spersed);
		}
	});
var $elm$browser$Debugger$Overlay$viewMention = F2(
	function (tags, verbed) {
		var _v0 = A2(
			$elm$core$List$map,
			$elm$browser$Debugger$Overlay$viewCode,
			$elm$core$List$reverse(tags));
		if (!_v0.b) {
			return $elm$html$Html$text('');
		} else {
			if (!_v0.b.b) {
				var tag = _v0.a;
				return A2(
					$elm$html$Html$li,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text(verbed),
							tag,
							$elm$html$Html$text('.')
						]));
			} else {
				if (!_v0.b.b.b) {
					var tag2 = _v0.a;
					var _v1 = _v0.b;
					var tag1 = _v1.a;
					return A2(
						$elm$html$Html$li,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text(verbed),
								tag1,
								$elm$html$Html$text(' and '),
								tag2,
								$elm$html$Html$text('.')
							]));
				} else {
					var lastTag = _v0.a;
					var otherTags = _v0.b;
					return A2(
						$elm$html$Html$li,
						_List_Nil,
						A2(
							$elm$core$List$cons,
							$elm$html$Html$text(verbed),
							_Utils_ap(
								A2(
									$elm$core$List$intersperse,
									$elm$html$Html$text(', '),
									$elm$core$List$reverse(otherTags)),
								_List_fromArray(
									[
										$elm$html$Html$text(', and '),
										lastTag,
										$elm$html$Html$text('.')
									]))));
				}
			}
		}
	});
var $elm$browser$Debugger$Overlay$viewChange = function (change) {
	return A2(
		$elm$html$Html$li,
		_List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'margin', '8px 0')
			]),
		function () {
			if (change.$ === 'AliasChange') {
				var name = change.a;
				return _List_fromArray(
					[
						A2(
						$elm$html$Html$span,
						_List_fromArray(
							[
								A2($elm$html$Html$Attributes$style, 'font-size', '1.5em')
							]),
						_List_fromArray(
							[
								$elm$browser$Debugger$Overlay$viewCode(name)
							]))
					]);
			} else {
				var name = change.a;
				var removed = change.b.removed;
				var changed = change.b.changed;
				var added = change.b.added;
				var argsMatch = change.b.argsMatch;
				return _List_fromArray(
					[
						A2(
						$elm$html$Html$span,
						_List_fromArray(
							[
								A2($elm$html$Html$Attributes$style, 'font-size', '1.5em')
							]),
						_List_fromArray(
							[
								$elm$browser$Debugger$Overlay$viewCode(name)
							])),
						A2(
						$elm$html$Html$ul,
						_List_fromArray(
							[
								A2($elm$html$Html$Attributes$style, 'list-style-type', 'disc'),
								A2($elm$html$Html$Attributes$style, 'padding-left', '2em')
							]),
						_List_fromArray(
							[
								A2($elm$browser$Debugger$Overlay$viewMention, removed, 'Removed '),
								A2($elm$browser$Debugger$Overlay$viewMention, changed, 'Changed '),
								A2($elm$browser$Debugger$Overlay$viewMention, added, 'Added ')
							])),
						argsMatch ? $elm$html$Html$text('') : $elm$html$Html$text('This may be due to the fact that the type variable names changed.')
					]);
			}
		}());
};
var $elm$browser$Debugger$Overlay$viewReport = F2(
	function (isBad, report) {
		switch (report.$) {
			case 'CorruptHistory':
				return _List_fromArray(
					[
						$elm$html$Html$text('Looks like this history file is corrupt. I cannot understand it.')
					]);
			case 'VersionChanged':
				var old = report.a;
				var _new = report.b;
				return _List_fromArray(
					[
						$elm$html$Html$text('This history was created with Elm ' + (old + (', but you are using Elm ' + (_new + ' right now.'))))
					]);
			case 'MessageChanged':
				var old = report.a;
				var _new = report.b;
				return _List_fromArray(
					[
						$elm$html$Html$text('To import some other history, the overall message type must' + ' be the same. The old history has '),
						$elm$browser$Debugger$Overlay$viewCode(old),
						$elm$html$Html$text(' messages, but the new program works with '),
						$elm$browser$Debugger$Overlay$viewCode(_new),
						$elm$html$Html$text(' messages.')
					]);
			default:
				var changes = report.a;
				return _List_fromArray(
					[
						A2(
						$elm$html$Html$p,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text(
								isBad ? $elm$browser$Debugger$Overlay$explanationBad : $elm$browser$Debugger$Overlay$explanationRisky)
							])),
						A2(
						$elm$html$Html$ul,
						_List_fromArray(
							[
								A2($elm$html$Html$Attributes$style, 'list-style-type', 'none'),
								A2($elm$html$Html$Attributes$style, 'padding-left', '20px')
							]),
						A2($elm$core$List$map, $elm$browser$Debugger$Overlay$viewChange, changes))
					]);
		}
	});
var $elm$browser$Debugger$Overlay$view = F5(
	function (config, isPaused, isOpen, numMsgs, state) {
		switch (state.$) {
			case 'None':
				return isOpen ? $elm$html$Html$text('') : (isPaused ? A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$id('elm-debugger-overlay'),
							A2($elm$html$Html$Attributes$style, 'position', 'fixed'),
							A2($elm$html$Html$Attributes$style, 'top', '0'),
							A2($elm$html$Html$Attributes$style, 'left', '0'),
							A2($elm$html$Html$Attributes$style, 'width', '100vw'),
							A2($elm$html$Html$Attributes$style, 'height', '100vh'),
							A2($elm$html$Html$Attributes$style, 'cursor', 'pointer'),
							A2($elm$html$Html$Attributes$style, 'display', 'flex'),
							A2($elm$html$Html$Attributes$style, 'align-items', 'center'),
							A2($elm$html$Html$Attributes$style, 'justify-content', 'center'),
							A2($elm$html$Html$Attributes$style, 'pointer-events', 'auto'),
							A2($elm$html$Html$Attributes$style, 'background-color', 'rgba(200, 200, 200, 0.7)'),
							A2($elm$html$Html$Attributes$style, 'color', 'white'),
							A2($elm$html$Html$Attributes$style, 'font-family', '\'Trebuchet MS\', \'Lucida Grande\', \'Bitstream Vera Sans\', \'Helvetica Neue\', sans-serif'),
							A2($elm$html$Html$Attributes$style, 'z-index', '2147483646'),
							$elm$html$Html$Events$onClick(config.resume)
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									A2($elm$html$Html$Attributes$style, 'font-size', '80px')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('Click to Resume')
								])),
							A2($elm$browser$Debugger$Overlay$viewMiniControls, config, numMsgs)
						])) : A2($elm$browser$Debugger$Overlay$viewMiniControls, config, numMsgs));
			case 'BadMetadata':
				var badMetadata_ = state.a;
				return A4(
					$elm$browser$Debugger$Overlay$viewMessage,
					config,
					'Cannot use Import or Export',
					$elm$browser$Debugger$Overlay$viewBadMetadata(badMetadata_),
					$elm$browser$Debugger$Overlay$Accept('Ok'));
			case 'BadImport':
				var report = state.a;
				return A4(
					$elm$browser$Debugger$Overlay$viewMessage,
					config,
					'Cannot Import History',
					A2($elm$browser$Debugger$Overlay$viewReport, true, report),
					$elm$browser$Debugger$Overlay$Accept('Ok'));
			default:
				var report = state.a;
				return A4(
					$elm$browser$Debugger$Overlay$viewMessage,
					config,
					'Warning',
					A2($elm$browser$Debugger$Overlay$viewReport, false, report),
					A2($elm$browser$Debugger$Overlay$Choose, 'Cancel', 'Import Anyway'));
		}
	});
var $elm$browser$Debugger$Main$cornerView = function (model) {
	return A5(
		$elm$browser$Debugger$Overlay$view,
		{exportHistory: $elm$browser$Debugger$Main$Export, importHistory: $elm$browser$Debugger$Main$Import, open: $elm$browser$Debugger$Main$Open, resume: $elm$browser$Debugger$Main$Resume, wrap: $elm$browser$Debugger$Main$OverlayMsg},
		$elm$browser$Debugger$Main$isPaused(model.state),
		_Debugger_isOpen(model.popout),
		$elm$browser$Debugger$History$size(model.history),
		model.overlay);
};
var $elm$core$Dict$RBEmpty_elm_builtin = {$: 'RBEmpty_elm_builtin'};
var $elm$core$Dict$empty = $elm$core$Dict$RBEmpty_elm_builtin;
var $elm$core$Set$foldr = F3(
	function (func, initialState, _v0) {
		var dict = _v0.a;
		return A3(
			$elm$core$Dict$foldr,
			F3(
				function (key, _v1, state) {
					return A2(func, key, state);
				}),
			initialState,
			dict);
	});
var $elm$browser$Debugger$Main$getCurrentModel = function (state) {
	if (state.$ === 'Running') {
		var model = state.a;
		return model;
	} else {
		var model = state.b;
		return model;
	}
};
var $elm$browser$Debugger$Main$getUserModel = function (model) {
	return $elm$browser$Debugger$Main$getCurrentModel(model.state);
};
var $elm$browser$Debugger$Main$initialWindowHeight = 420;
var $elm$browser$Debugger$Main$initialWindowWidth = 900;
var $elm$core$Dict$Black = {$: 'Black'};
var $elm$core$Dict$RBNode_elm_builtin = F5(
	function (a, b, c, d, e) {
		return {$: 'RBNode_elm_builtin', a: a, b: b, c: c, d: d, e: e};
	});
var $elm$core$Dict$Red = {$: 'Red'};
var $elm$core$Dict$balance = F5(
	function (color, key, value, left, right) {
		if ((right.$ === 'RBNode_elm_builtin') && (right.a.$ === 'Red')) {
			var _v1 = right.a;
			var rK = right.b;
			var rV = right.c;
			var rLeft = right.d;
			var rRight = right.e;
			if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) {
				var _v3 = left.a;
				var lK = left.b;
				var lV = left.c;
				var lLeft = left.d;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Red,
					key,
					value,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					rK,
					rV,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, left, rLeft),
					rRight);
			}
		} else {
			if ((((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) && (left.d.$ === 'RBNode_elm_builtin')) && (left.d.a.$ === 'Red')) {
				var _v5 = left.a;
				var lK = left.b;
				var lV = left.c;
				var _v6 = left.d;
				var _v7 = _v6.a;
				var llK = _v6.b;
				var llV = _v6.c;
				var llLeft = _v6.d;
				var llRight = _v6.e;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Red,
					lK,
					lV,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, llK, llV, llLeft, llRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, key, value, lRight, right));
			} else {
				return A5($elm$core$Dict$RBNode_elm_builtin, color, key, value, left, right);
			}
		}
	});
var $elm$core$Basics$compare = _Utils_compare;
var $elm$core$Dict$insertHelp = F3(
	function (key, value, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, $elm$core$Dict$RBEmpty_elm_builtin, $elm$core$Dict$RBEmpty_elm_builtin);
		} else {
			var nColor = dict.a;
			var nKey = dict.b;
			var nValue = dict.c;
			var nLeft = dict.d;
			var nRight = dict.e;
			var _v1 = A2($elm$core$Basics$compare, key, nKey);
			switch (_v1.$) {
				case 'LT':
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						A3($elm$core$Dict$insertHelp, key, value, nLeft),
						nRight);
				case 'EQ':
					return A5($elm$core$Dict$RBNode_elm_builtin, nColor, nKey, value, nLeft, nRight);
				default:
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						nLeft,
						A3($elm$core$Dict$insertHelp, key, value, nRight));
			}
		}
	});
var $elm$core$Dict$insert = F3(
	function (key, value, dict) {
		var _v0 = A3($elm$core$Dict$insertHelp, key, value, dict);
		if ((_v0.$ === 'RBNode_elm_builtin') && (_v0.a.$ === 'Red')) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$browser$Debugger$Main$cachedHistory = function (model) {
	var _v0 = model.state;
	if (_v0.$ === 'Running') {
		return model.history;
	} else {
		var history = _v0.e;
		return history;
	}
};
var $elm$virtual_dom$VirtualDom$node = function (tag) {
	return _VirtualDom_node(
		_VirtualDom_noScript(tag));
};
var $elm$html$Html$node = $elm$virtual_dom$VirtualDom$node;
var $elm$browser$Debugger$Main$DragEnd = {$: 'DragEnd'};
var $elm$browser$Debugger$Main$getDragStatus = function (layout) {
	if (layout.$ === 'Horizontal') {
		var status = layout.a;
		return status;
	} else {
		var status = layout.a;
		return status;
	}
};
var $elm$browser$Debugger$Main$Drag = function (a) {
	return {$: 'Drag', a: a};
};
var $elm$browser$Debugger$Main$DragInfo = F5(
	function (x, y, down, width, height) {
		return {down: down, height: height, width: width, x: x, y: y};
	});
var $elm$json$Json$Decode$field = _Json_decodeField;
var $elm$json$Json$Decode$at = F2(
	function (fields, decoder) {
		return A3($elm$core$List$foldr, $elm$json$Json$Decode$field, decoder, fields);
	});
var $elm$json$Json$Decode$float = _Json_decodeFloat;
var $elm$browser$Debugger$Main$decodeDimension = function (field) {
	return A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['currentTarget', 'ownerDocument', 'defaultView', field]),
		$elm$json$Json$Decode$float);
};
var $elm$json$Json$Decode$int = _Json_decodeInt;
var $elm$json$Json$Decode$map5 = _Json_map5;
var $elm$browser$Debugger$Main$onMouseMove = A2(
	$elm$html$Html$Events$on,
	'mousemove',
	A2(
		$elm$json$Json$Decode$map,
		$elm$browser$Debugger$Main$Drag,
		A6(
			$elm$json$Json$Decode$map5,
			$elm$browser$Debugger$Main$DragInfo,
			A2($elm$json$Json$Decode$field, 'pageX', $elm$json$Json$Decode$float),
			A2($elm$json$Json$Decode$field, 'pageY', $elm$json$Json$Decode$float),
			A2(
				$elm$json$Json$Decode$field,
				'buttons',
				A2(
					$elm$json$Json$Decode$map,
					function (v) {
						return v === 1;
					},
					$elm$json$Json$Decode$int)),
			$elm$browser$Debugger$Main$decodeDimension('innerWidth'),
			$elm$browser$Debugger$Main$decodeDimension('innerHeight'))));
var $elm$html$Html$Events$onMouseUp = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'mouseup',
		$elm$json$Json$Decode$succeed(msg));
};
var $elm$browser$Debugger$Main$toDragListeners = function (layout) {
	var _v0 = $elm$browser$Debugger$Main$getDragStatus(layout);
	if (_v0.$ === 'Static') {
		return _List_Nil;
	} else {
		return _List_fromArray(
			[
				$elm$browser$Debugger$Main$onMouseMove,
				$elm$html$Html$Events$onMouseUp($elm$browser$Debugger$Main$DragEnd)
			]);
	}
};
var $elm$browser$Debugger$Main$toFlexDirection = function (layout) {
	if (layout.$ === 'Horizontal') {
		return 'row';
	} else {
		return 'column-reverse';
	}
};
var $elm$browser$Debugger$Main$DragStart = {$: 'DragStart'};
var $elm$html$Html$Events$onMouseDown = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'mousedown',
		$elm$json$Json$Decode$succeed(msg));
};
var $elm$browser$Debugger$Main$toPercent = function (fraction) {
	return $elm$core$String$fromFloat(100 * fraction) + '%';
};
var $elm$browser$Debugger$Main$viewDragZone = function (layout) {
	if (layout.$ === 'Horizontal') {
		var x = layout.b;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'position', 'absolute'),
					A2($elm$html$Html$Attributes$style, 'top', '0'),
					A2(
					$elm$html$Html$Attributes$style,
					'left',
					$elm$browser$Debugger$Main$toPercent(x)),
					A2($elm$html$Html$Attributes$style, 'margin-left', '-5px'),
					A2($elm$html$Html$Attributes$style, 'width', '10px'),
					A2($elm$html$Html$Attributes$style, 'height', '100%'),
					A2($elm$html$Html$Attributes$style, 'cursor', 'col-resize'),
					$elm$html$Html$Events$onMouseDown($elm$browser$Debugger$Main$DragStart)
				]),
			_List_Nil);
	} else {
		var y = layout.c;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'position', 'absolute'),
					A2(
					$elm$html$Html$Attributes$style,
					'top',
					$elm$browser$Debugger$Main$toPercent(y)),
					A2($elm$html$Html$Attributes$style, 'left', '0'),
					A2($elm$html$Html$Attributes$style, 'margin-top', '-5px'),
					A2($elm$html$Html$Attributes$style, 'width', '100%'),
					A2($elm$html$Html$Attributes$style, 'height', '10px'),
					A2($elm$html$Html$Attributes$style, 'cursor', 'row-resize'),
					$elm$html$Html$Events$onMouseDown($elm$browser$Debugger$Main$DragStart)
				]),
			_List_Nil);
	}
};
var $elm$browser$Debugger$Main$TweakExpandoModel = function (a) {
	return {$: 'TweakExpandoModel', a: a};
};
var $elm$browser$Debugger$Main$TweakExpandoMsg = function (a) {
	return {$: 'TweakExpandoMsg', a: a};
};
var $elm$browser$Debugger$Main$toExpandoPercents = function (layout) {
	if (layout.$ === 'Horizontal') {
		var x = layout.b;
		return _Utils_Tuple2(
			$elm$browser$Debugger$Main$toPercent(1 - x),
			'100%');
	} else {
		var y = layout.c;
		return _Utils_Tuple2(
			'100%',
			$elm$browser$Debugger$Main$toPercent(y));
	}
};
var $elm$browser$Debugger$Main$toMouseBlocker = function (layout) {
	var _v0 = $elm$browser$Debugger$Main$getDragStatus(layout);
	if (_v0.$ === 'Static') {
		return 'auto';
	} else {
		return 'none';
	}
};
var $elm$browser$Debugger$Expando$Field = F2(
	function (a, b) {
		return {$: 'Field', a: a, b: b};
	});
var $elm$browser$Debugger$Expando$Index = F3(
	function (a, b, c) {
		return {$: 'Index', a: a, b: b, c: c};
	});
var $elm$browser$Debugger$Expando$Key = {$: 'Key'};
var $elm$browser$Debugger$Expando$None = {$: 'None'};
var $elm$browser$Debugger$Expando$Toggle = {$: 'Toggle'};
var $elm$browser$Debugger$Expando$Value = {$: 'Value'};
var $elm$browser$Debugger$Expando$blue = A2($elm$html$Html$Attributes$style, 'color', 'rgb(28, 0, 207)');
var $elm$core$Basics$composeL = F3(
	function (g, f, x) {
		return g(
			f(x));
	});
var $elm$browser$Debugger$Expando$leftPad = function (maybeKey) {
	if (maybeKey.$ === 'Nothing') {
		return _List_Nil;
	} else {
		return _List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'padding-left', '4ch')
			]);
	}
};
var $elm$browser$Debugger$Expando$makeArrow = function (arrow) {
	return A2(
		$elm$html$Html$span,
		_List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'color', '#777'),
				A2($elm$html$Html$Attributes$style, 'padding-left', '2ch'),
				A2($elm$html$Html$Attributes$style, 'width', '2ch'),
				A2($elm$html$Html$Attributes$style, 'display', 'inline-block')
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(arrow)
			]));
};
var $elm$browser$Debugger$Expando$purple = A2($elm$html$Html$Attributes$style, 'color', 'rgb(136, 19, 145)');
var $elm$browser$Debugger$Expando$lineStarter = F3(
	function (maybeKey, maybeIsClosed, description) {
		var arrow = function () {
			if (maybeIsClosed.$ === 'Nothing') {
				return $elm$browser$Debugger$Expando$makeArrow('');
			} else {
				if (maybeIsClosed.a) {
					return $elm$browser$Debugger$Expando$makeArrow('▸');
				} else {
					return $elm$browser$Debugger$Expando$makeArrow('▾');
				}
			}
		}();
		if (maybeKey.$ === 'Nothing') {
			return A2($elm$core$List$cons, arrow, description);
		} else {
			var key = maybeKey.a;
			return A2(
				$elm$core$List$cons,
				arrow,
				A2(
					$elm$core$List$cons,
					A2(
						$elm$html$Html$span,
						_List_fromArray(
							[$elm$browser$Debugger$Expando$purple]),
						_List_fromArray(
							[
								$elm$html$Html$text(key)
							])),
					A2(
						$elm$core$List$cons,
						$elm$html$Html$text(' = '),
						description)));
		}
	});
var $elm$browser$Debugger$Expando$red = A2($elm$html$Html$Attributes$style, 'color', 'rgb(196, 26, 22)');
var $elm$core$Tuple$second = function (_v0) {
	var y = _v0.b;
	return y;
};
var $elm$browser$Debugger$Expando$seqTypeToString = F2(
	function (n, seqType) {
		switch (seqType.$) {
			case 'ListSeq':
				return 'List(' + ($elm$core$String$fromInt(n) + ')');
			case 'SetSeq':
				return 'Set(' + ($elm$core$String$fromInt(n) + ')');
			default:
				return 'Array(' + ($elm$core$String$fromInt(n) + ')');
		}
	});
var $elm$core$String$slice = _String_slice;
var $elm$core$String$left = F2(
	function (n, string) {
		return (n < 1) ? '' : A3($elm$core$String$slice, 0, n, string);
	});
var $elm$core$String$right = F2(
	function (n, string) {
		return (n < 1) ? '' : A3(
			$elm$core$String$slice,
			-n,
			$elm$core$String$length(string),
			string);
	});
var $elm$browser$Debugger$Expando$elideMiddle = function (str) {
	return ($elm$core$String$length(str) <= 18) ? str : (A2($elm$core$String$left, 8, str) + ('...' + A2($elm$core$String$right, 8, str)));
};
var $elm$core$Dict$isEmpty = function (dict) {
	if (dict.$ === 'RBEmpty_elm_builtin') {
		return true;
	} else {
		return false;
	}
};
var $elm$browser$Debugger$Expando$viewExtraTinyRecord = F3(
	function (length, starter, entries) {
		if (!entries.b) {
			return _Utils_Tuple2(
				length + 1,
				_List_fromArray(
					[
						$elm$html$Html$text('}')
					]));
		} else {
			var field = entries.a;
			var rest = entries.b;
			var nextLength = (length + $elm$core$String$length(field)) + 1;
			if (nextLength > 18) {
				return _Utils_Tuple2(
					length + 2,
					_List_fromArray(
						[
							$elm$html$Html$text('…}')
						]));
			} else {
				var _v1 = A3($elm$browser$Debugger$Expando$viewExtraTinyRecord, nextLength, ',', rest);
				var finalLength = _v1.a;
				var otherHtmls = _v1.b;
				return _Utils_Tuple2(
					finalLength,
					A2(
						$elm$core$List$cons,
						$elm$html$Html$text(starter),
						A2(
							$elm$core$List$cons,
							A2(
								$elm$html$Html$span,
								_List_fromArray(
									[$elm$browser$Debugger$Expando$purple]),
								_List_fromArray(
									[
										$elm$html$Html$text(field)
									])),
							otherHtmls)));
			}
		}
	});
var $elm$browser$Debugger$Expando$viewTinyHelp = function (str) {
	return _Utils_Tuple2(
		$elm$core$String$length(str),
		_List_fromArray(
			[
				$elm$html$Html$text(str)
			]));
};
var $elm$core$Maybe$withDefault = F2(
	function (_default, maybe) {
		if (maybe.$ === 'Just') {
			var value = maybe.a;
			return value;
		} else {
			return _default;
		}
	});
var $elm$browser$Debugger$Expando$viewExtraTiny = function (value) {
	if (value.$ === 'Record') {
		var record = value.b;
		return A3(
			$elm$browser$Debugger$Expando$viewExtraTinyRecord,
			0,
			'{',
			$elm$core$Dict$keys(record));
	} else {
		return $elm$browser$Debugger$Expando$viewTiny(value);
	}
};
var $elm$browser$Debugger$Expando$viewTiny = function (value) {
	switch (value.$) {
		case 'S':
			var stringRep = value.a;
			var str = $elm$browser$Debugger$Expando$elideMiddle(stringRep);
			return _Utils_Tuple2(
				$elm$core$String$length(str),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$span,
						_List_fromArray(
							[$elm$browser$Debugger$Expando$red]),
						_List_fromArray(
							[
								$elm$html$Html$text(str)
							]))
					]));
		case 'Primitive':
			var stringRep = value.a;
			return _Utils_Tuple2(
				$elm$core$String$length(stringRep),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$span,
						_List_fromArray(
							[$elm$browser$Debugger$Expando$blue]),
						_List_fromArray(
							[
								$elm$html$Html$text(stringRep)
							]))
					]));
		case 'Sequence':
			var seqType = value.a;
			var valueList = value.c;
			return $elm$browser$Debugger$Expando$viewTinyHelp(
				A2(
					$elm$browser$Debugger$Expando$seqTypeToString,
					$elm$core$List$length(valueList),
					seqType));
		case 'Dictionary':
			var keyValuePairs = value.b;
			return $elm$browser$Debugger$Expando$viewTinyHelp(
				'Dict(' + ($elm$core$String$fromInt(
					$elm$core$List$length(keyValuePairs)) + ')'));
		case 'Record':
			var record = value.b;
			return $elm$browser$Debugger$Expando$viewTinyRecord(record);
		default:
			if (!value.c.b) {
				var maybeName = value.a;
				return $elm$browser$Debugger$Expando$viewTinyHelp(
					A2($elm$core$Maybe$withDefault, 'Unit', maybeName));
			} else {
				var maybeName = value.a;
				var valueList = value.c;
				return $elm$browser$Debugger$Expando$viewTinyHelp(
					function () {
						if (maybeName.$ === 'Nothing') {
							return 'Tuple(' + ($elm$core$String$fromInt(
								$elm$core$List$length(valueList)) + ')');
						} else {
							var name = maybeName.a;
							return name + ' …';
						}
					}());
			}
	}
};
var $elm$browser$Debugger$Expando$viewTinyRecord = function (record) {
	return $elm$core$Dict$isEmpty(record) ? _Utils_Tuple2(
		2,
		_List_fromArray(
			[
				$elm$html$Html$text('{}')
			])) : A3(
		$elm$browser$Debugger$Expando$viewTinyRecordHelp,
		0,
		'{ ',
		$elm$core$Dict$toList(record));
};
var $elm$browser$Debugger$Expando$viewTinyRecordHelp = F3(
	function (length, starter, entries) {
		if (!entries.b) {
			return _Utils_Tuple2(
				length + 2,
				_List_fromArray(
					[
						$elm$html$Html$text(' }')
					]));
		} else {
			var _v1 = entries.a;
			var field = _v1.a;
			var value = _v1.b;
			var rest = entries.b;
			var fieldLen = $elm$core$String$length(field);
			var _v2 = $elm$browser$Debugger$Expando$viewExtraTiny(value);
			var valueLen = _v2.a;
			var valueHtmls = _v2.b;
			var newLength = ((length + fieldLen) + valueLen) + 5;
			if (newLength > 60) {
				return _Utils_Tuple2(
					length + 4,
					_List_fromArray(
						[
							$elm$html$Html$text(', … }')
						]));
			} else {
				var _v3 = A3($elm$browser$Debugger$Expando$viewTinyRecordHelp, newLength, ', ', rest);
				var finalLength = _v3.a;
				var otherHtmls = _v3.b;
				return _Utils_Tuple2(
					finalLength,
					A2(
						$elm$core$List$cons,
						$elm$html$Html$text(starter),
						A2(
							$elm$core$List$cons,
							A2(
								$elm$html$Html$span,
								_List_fromArray(
									[$elm$browser$Debugger$Expando$purple]),
								_List_fromArray(
									[
										$elm$html$Html$text(field)
									])),
							A2(
								$elm$core$List$cons,
								$elm$html$Html$text(' = '),
								A2(
									$elm$core$List$cons,
									A2($elm$html$Html$span, _List_Nil, valueHtmls),
									otherHtmls)))));
			}
		}
	});
var $elm$browser$Debugger$Expando$view = F2(
	function (maybeKey, expando) {
		switch (expando.$) {
			case 'S':
				var stringRep = expando.a;
				return A2(
					$elm$html$Html$div,
					$elm$browser$Debugger$Expando$leftPad(maybeKey),
					A3(
						$elm$browser$Debugger$Expando$lineStarter,
						maybeKey,
						$elm$core$Maybe$Nothing,
						_List_fromArray(
							[
								A2(
								$elm$html$Html$span,
								_List_fromArray(
									[$elm$browser$Debugger$Expando$red]),
								_List_fromArray(
									[
										$elm$html$Html$text(stringRep)
									]))
							])));
			case 'Primitive':
				var stringRep = expando.a;
				return A2(
					$elm$html$Html$div,
					$elm$browser$Debugger$Expando$leftPad(maybeKey),
					A3(
						$elm$browser$Debugger$Expando$lineStarter,
						maybeKey,
						$elm$core$Maybe$Nothing,
						_List_fromArray(
							[
								A2(
								$elm$html$Html$span,
								_List_fromArray(
									[$elm$browser$Debugger$Expando$blue]),
								_List_fromArray(
									[
										$elm$html$Html$text(stringRep)
									]))
							])));
			case 'Sequence':
				var seqType = expando.a;
				var isClosed = expando.b;
				var valueList = expando.c;
				return A4($elm$browser$Debugger$Expando$viewSequence, maybeKey, seqType, isClosed, valueList);
			case 'Dictionary':
				var isClosed = expando.a;
				var keyValuePairs = expando.b;
				return A3($elm$browser$Debugger$Expando$viewDictionary, maybeKey, isClosed, keyValuePairs);
			case 'Record':
				var isClosed = expando.a;
				var valueDict = expando.b;
				return A3($elm$browser$Debugger$Expando$viewRecord, maybeKey, isClosed, valueDict);
			default:
				var maybeName = expando.a;
				var isClosed = expando.b;
				var valueList = expando.c;
				return A4($elm$browser$Debugger$Expando$viewConstructor, maybeKey, maybeName, isClosed, valueList);
		}
	});
var $elm$browser$Debugger$Expando$viewConstructor = F4(
	function (maybeKey, maybeName, isClosed, valueList) {
		var tinyArgs = A2(
			$elm$core$List$map,
			A2($elm$core$Basics$composeL, $elm$core$Tuple$second, $elm$browser$Debugger$Expando$viewExtraTiny),
			valueList);
		var description = function () {
			var _v7 = _Utils_Tuple2(maybeName, tinyArgs);
			if (_v7.a.$ === 'Nothing') {
				if (!_v7.b.b) {
					var _v8 = _v7.a;
					return _List_fromArray(
						[
							$elm$html$Html$text('()')
						]);
				} else {
					var _v9 = _v7.a;
					var _v10 = _v7.b;
					var x = _v10.a;
					var xs = _v10.b;
					return A2(
						$elm$core$List$cons,
						$elm$html$Html$text('( '),
						A2(
							$elm$core$List$cons,
							A2($elm$html$Html$span, _List_Nil, x),
							A3(
								$elm$core$List$foldr,
								F2(
									function (args, rest) {
										return A2(
											$elm$core$List$cons,
											$elm$html$Html$text(', '),
											A2(
												$elm$core$List$cons,
												A2($elm$html$Html$span, _List_Nil, args),
												rest));
									}),
								_List_fromArray(
									[
										$elm$html$Html$text(' )')
									]),
								xs)));
				}
			} else {
				if (!_v7.b.b) {
					var name = _v7.a.a;
					return _List_fromArray(
						[
							$elm$html$Html$text(name)
						]);
				} else {
					var name = _v7.a.a;
					var _v11 = _v7.b;
					var x = _v11.a;
					var xs = _v11.b;
					return A2(
						$elm$core$List$cons,
						$elm$html$Html$text(name + ' '),
						A2(
							$elm$core$List$cons,
							A2($elm$html$Html$span, _List_Nil, x),
							A3(
								$elm$core$List$foldr,
								F2(
									function (args, rest) {
										return A2(
											$elm$core$List$cons,
											$elm$html$Html$text(' '),
											A2(
												$elm$core$List$cons,
												A2($elm$html$Html$span, _List_Nil, args),
												rest));
									}),
								_List_Nil,
								xs)));
				}
			}
		}();
		var _v4 = function () {
			if (!valueList.b) {
				return _Utils_Tuple2(
					$elm$core$Maybe$Nothing,
					A2($elm$html$Html$div, _List_Nil, _List_Nil));
			} else {
				if (!valueList.b.b) {
					var entry = valueList.a;
					switch (entry.$) {
						case 'S':
							return _Utils_Tuple2(
								$elm$core$Maybe$Nothing,
								A2($elm$html$Html$div, _List_Nil, _List_Nil));
						case 'Primitive':
							return _Utils_Tuple2(
								$elm$core$Maybe$Nothing,
								A2($elm$html$Html$div, _List_Nil, _List_Nil));
						case 'Sequence':
							var subValueList = entry.c;
							return _Utils_Tuple2(
								$elm$core$Maybe$Just(isClosed),
								isClosed ? A2($elm$html$Html$div, _List_Nil, _List_Nil) : A2(
									$elm$html$Html$map,
									A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$None, 0),
									$elm$browser$Debugger$Expando$viewSequenceOpen(subValueList)));
						case 'Dictionary':
							var keyValuePairs = entry.b;
							return _Utils_Tuple2(
								$elm$core$Maybe$Just(isClosed),
								isClosed ? A2($elm$html$Html$div, _List_Nil, _List_Nil) : A2(
									$elm$html$Html$map,
									A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$None, 0),
									$elm$browser$Debugger$Expando$viewDictionaryOpen(keyValuePairs)));
						case 'Record':
							var record = entry.b;
							return _Utils_Tuple2(
								$elm$core$Maybe$Just(isClosed),
								isClosed ? A2($elm$html$Html$div, _List_Nil, _List_Nil) : A2(
									$elm$html$Html$map,
									A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$None, 0),
									$elm$browser$Debugger$Expando$viewRecordOpen(record)));
						default:
							var subValueList = entry.c;
							return _Utils_Tuple2(
								$elm$core$Maybe$Just(isClosed),
								isClosed ? A2($elm$html$Html$div, _List_Nil, _List_Nil) : A2(
									$elm$html$Html$map,
									A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$None, 0),
									$elm$browser$Debugger$Expando$viewConstructorOpen(subValueList)));
					}
				} else {
					return _Utils_Tuple2(
						$elm$core$Maybe$Just(isClosed),
						isClosed ? A2($elm$html$Html$div, _List_Nil, _List_Nil) : $elm$browser$Debugger$Expando$viewConstructorOpen(valueList));
				}
			}
		}();
		var maybeIsClosed = _v4.a;
		var openHtml = _v4.b;
		return A2(
			$elm$html$Html$div,
			$elm$browser$Debugger$Expando$leftPad(maybeKey),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Events$onClick($elm$browser$Debugger$Expando$Toggle)
						]),
					A3($elm$browser$Debugger$Expando$lineStarter, maybeKey, maybeIsClosed, description)),
					openHtml
				]));
	});
var $elm$browser$Debugger$Expando$viewConstructorEntry = F2(
	function (index, value) {
		return A2(
			$elm$html$Html$map,
			A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$None, index),
			A2(
				$elm$browser$Debugger$Expando$view,
				$elm$core$Maybe$Just(
					$elm$core$String$fromInt(index)),
				value));
	});
var $elm$browser$Debugger$Expando$viewConstructorOpen = function (valueList) {
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		A2($elm$core$List$indexedMap, $elm$browser$Debugger$Expando$viewConstructorEntry, valueList));
};
var $elm$browser$Debugger$Expando$viewDictionary = F3(
	function (maybeKey, isClosed, keyValuePairs) {
		var starter = 'Dict(' + ($elm$core$String$fromInt(
			$elm$core$List$length(keyValuePairs)) + ')');
		return A2(
			$elm$html$Html$div,
			$elm$browser$Debugger$Expando$leftPad(maybeKey),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Events$onClick($elm$browser$Debugger$Expando$Toggle)
						]),
					A3(
						$elm$browser$Debugger$Expando$lineStarter,
						maybeKey,
						$elm$core$Maybe$Just(isClosed),
						_List_fromArray(
							[
								$elm$html$Html$text(starter)
							]))),
					isClosed ? $elm$html$Html$text('') : $elm$browser$Debugger$Expando$viewDictionaryOpen(keyValuePairs)
				]));
	});
var $elm$browser$Debugger$Expando$viewDictionaryEntry = F2(
	function (index, _v2) {
		var key = _v2.a;
		var value = _v2.b;
		switch (key.$) {
			case 'S':
				var stringRep = key.a;
				return A2(
					$elm$html$Html$map,
					A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$Value, index),
					A2(
						$elm$browser$Debugger$Expando$view,
						$elm$core$Maybe$Just(stringRep),
						value));
			case 'Primitive':
				var stringRep = key.a;
				return A2(
					$elm$html$Html$map,
					A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$Value, index),
					A2(
						$elm$browser$Debugger$Expando$view,
						$elm$core$Maybe$Just(stringRep),
						value));
			default:
				return A2(
					$elm$html$Html$div,
					_List_Nil,
					_List_fromArray(
						[
							A2(
							$elm$html$Html$map,
							A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$Key, index),
							A2(
								$elm$browser$Debugger$Expando$view,
								$elm$core$Maybe$Just('key'),
								key)),
							A2(
							$elm$html$Html$map,
							A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$Value, index),
							A2(
								$elm$browser$Debugger$Expando$view,
								$elm$core$Maybe$Just('value'),
								value))
						]));
		}
	});
var $elm$browser$Debugger$Expando$viewDictionaryOpen = function (keyValuePairs) {
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		A2($elm$core$List$indexedMap, $elm$browser$Debugger$Expando$viewDictionaryEntry, keyValuePairs));
};
var $elm$browser$Debugger$Expando$viewRecord = F3(
	function (maybeKey, isClosed, record) {
		var _v1 = isClosed ? _Utils_Tuple3(
			$elm$browser$Debugger$Expando$viewTinyRecord(record).b,
			$elm$html$Html$text(''),
			$elm$html$Html$text('')) : _Utils_Tuple3(
			_List_fromArray(
				[
					$elm$html$Html$text('{')
				]),
			$elm$browser$Debugger$Expando$viewRecordOpen(record),
			A2(
				$elm$html$Html$div,
				$elm$browser$Debugger$Expando$leftPad(
					$elm$core$Maybe$Just(_Utils_Tuple0)),
				_List_fromArray(
					[
						$elm$html$Html$text('}')
					])));
		var start = _v1.a;
		var middle = _v1.b;
		var end = _v1.c;
		return A2(
			$elm$html$Html$div,
			$elm$browser$Debugger$Expando$leftPad(maybeKey),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Events$onClick($elm$browser$Debugger$Expando$Toggle)
						]),
					A3(
						$elm$browser$Debugger$Expando$lineStarter,
						maybeKey,
						$elm$core$Maybe$Just(isClosed),
						start)),
					middle,
					end
				]));
	});
var $elm$browser$Debugger$Expando$viewRecordEntry = function (_v0) {
	var field = _v0.a;
	var value = _v0.b;
	return A2(
		$elm$html$Html$map,
		$elm$browser$Debugger$Expando$Field(field),
		A2(
			$elm$browser$Debugger$Expando$view,
			$elm$core$Maybe$Just(field),
			value));
};
var $elm$browser$Debugger$Expando$viewRecordOpen = function (record) {
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		A2(
			$elm$core$List$map,
			$elm$browser$Debugger$Expando$viewRecordEntry,
			$elm$core$Dict$toList(record)));
};
var $elm$browser$Debugger$Expando$viewSequence = F4(
	function (maybeKey, seqType, isClosed, valueList) {
		var starter = A2(
			$elm$browser$Debugger$Expando$seqTypeToString,
			$elm$core$List$length(valueList),
			seqType);
		return A2(
			$elm$html$Html$div,
			$elm$browser$Debugger$Expando$leftPad(maybeKey),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Events$onClick($elm$browser$Debugger$Expando$Toggle)
						]),
					A3(
						$elm$browser$Debugger$Expando$lineStarter,
						maybeKey,
						$elm$core$Maybe$Just(isClosed),
						_List_fromArray(
							[
								$elm$html$Html$text(starter)
							]))),
					isClosed ? $elm$html$Html$text('') : $elm$browser$Debugger$Expando$viewSequenceOpen(valueList)
				]));
	});
var $elm$browser$Debugger$Expando$viewSequenceOpen = function (values) {
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		A2($elm$core$List$indexedMap, $elm$browser$Debugger$Expando$viewConstructorEntry, values));
};
var $elm$browser$Debugger$Main$viewExpando = F3(
	function (expandoMsg, expandoModel, layout) {
		var block = $elm$browser$Debugger$Main$toMouseBlocker(layout);
		var _v0 = $elm$browser$Debugger$Main$toExpandoPercents(layout);
		var w = _v0.a;
		var h = _v0.b;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'display', 'block'),
					A2($elm$html$Html$Attributes$style, 'width', 'calc(' + (w + ' - 4em)')),
					A2($elm$html$Html$Attributes$style, 'height', 'calc(' + (h + ' - 4em)')),
					A2($elm$html$Html$Attributes$style, 'padding', '2em'),
					A2($elm$html$Html$Attributes$style, 'margin', '0'),
					A2($elm$html$Html$Attributes$style, 'overflow', 'auto'),
					A2($elm$html$Html$Attributes$style, 'pointer-events', block),
					A2($elm$html$Html$Attributes$style, '-webkit-user-select', block),
					A2($elm$html$Html$Attributes$style, '-moz-user-select', block),
					A2($elm$html$Html$Attributes$style, '-ms-user-select', block),
					A2($elm$html$Html$Attributes$style, 'user-select', block)
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'color', '#ccc'),
							A2($elm$html$Html$Attributes$style, 'padding', '0 0 1em 0')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('-- MESSAGE')
						])),
					A2(
					$elm$html$Html$map,
					$elm$browser$Debugger$Main$TweakExpandoMsg,
					A2($elm$browser$Debugger$Expando$view, $elm$core$Maybe$Nothing, expandoMsg)),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'color', '#ccc'),
							A2($elm$html$Html$Attributes$style, 'padding', '1em 0')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('-- MODEL')
						])),
					A2(
					$elm$html$Html$map,
					$elm$browser$Debugger$Main$TweakExpandoModel,
					A2($elm$browser$Debugger$Expando$view, $elm$core$Maybe$Nothing, expandoModel))
				]));
	});
var $elm$browser$Debugger$Main$Jump = function (a) {
	return {$: 'Jump', a: a};
};
var $elm$virtual_dom$VirtualDom$lazy = _VirtualDom_lazy;
var $elm$html$Html$Lazy$lazy = $elm$virtual_dom$VirtualDom$lazy;
var $elm$browser$Debugger$Main$toHistoryPercents = function (layout) {
	if (layout.$ === 'Horizontal') {
		var x = layout.b;
		return _Utils_Tuple2(
			$elm$browser$Debugger$Main$toPercent(x),
			'100%');
	} else {
		var y = layout.c;
		return _Utils_Tuple2(
			'100%',
			$elm$browser$Debugger$Main$toPercent(1 - y));
	}
};
var $elm$virtual_dom$VirtualDom$lazy3 = _VirtualDom_lazy3;
var $elm$html$Html$Lazy$lazy3 = $elm$virtual_dom$VirtualDom$lazy3;
var $elm$html$Html$Attributes$class = $elm$html$Html$Attributes$stringProperty('className');
var $elm$browser$Debugger$History$idForMessageIndex = function (index) {
	return 'msg-' + $elm$core$String$fromInt(index);
};
var $elm$html$Html$Attributes$title = $elm$html$Html$Attributes$stringProperty('title');
var $elm$browser$Debugger$History$viewMessage = F3(
	function (currentIndex, index, msg) {
		var messageName = _Debugger_messageToString(msg);
		var className = _Utils_eq(currentIndex, index) ? 'elm-debugger-entry elm-debugger-entry-selected' : 'elm-debugger-entry';
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$id(
					$elm$browser$Debugger$History$idForMessageIndex(index)),
					$elm$html$Html$Attributes$class(className),
					$elm$html$Html$Events$onClick(index)
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$title(messageName),
							$elm$html$Html$Attributes$class('elm-debugger-entry-content')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(messageName)
						])),
					A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('elm-debugger-entry-index')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(
							$elm$core$String$fromInt(index))
						]))
				]));
	});
var $elm$browser$Debugger$History$consMsg = F3(
	function (currentIndex, msg, _v0) {
		var index = _v0.a;
		var rest = _v0.b;
		return _Utils_Tuple2(
			index + 1,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$elm$core$String$fromInt(index),
					A4($elm$html$Html$Lazy$lazy3, $elm$browser$Debugger$History$viewMessage, currentIndex, index, msg)),
				rest));
	});
var $elm$core$Array$length = function (_v0) {
	var len = _v0.a;
	return len;
};
var $elm$core$Basics$neq = _Utils_notEqual;
var $elm$virtual_dom$VirtualDom$keyedNode = function (tag) {
	return _VirtualDom_keyedNode(
		_VirtualDom_noScript(tag));
};
var $elm$html$Html$Keyed$node = $elm$virtual_dom$VirtualDom$keyedNode;
var $elm$browser$Debugger$History$maxSnapshotSize = 31;
var $elm$browser$Debugger$History$showMoreButton = function (numMessages) {
	var nextIndex = (numMessages - 1) - ($elm$browser$Debugger$History$maxSnapshotSize * 2);
	var labelText = 'View more messages';
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('elm-debugger-entry'),
				$elm$html$Html$Events$onClick(nextIndex)
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$span,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$title(labelText),
						$elm$html$Html$Attributes$class('elm-debugger-entry-content')
					]),
				_List_fromArray(
					[
						$elm$html$Html$text(labelText)
					])),
				A2(
				$elm$html$Html$span,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('elm-debugger-entry-index')
					]),
				_List_Nil)
			]));
};
var $elm$browser$Debugger$History$styles = A3(
	$elm$html$Html$node,
	'style',
	_List_Nil,
	_List_fromArray(
		[
			$elm$html$Html$text('\n\n.elm-debugger-entry {\n  cursor: pointer;\n  width: 100%;\n  box-sizing: border-box;\n  padding: 8px;\n}\n\n.elm-debugger-entry:hover {\n  background-color: rgb(41, 41, 41);\n}\n\n.elm-debugger-entry-selected, .elm-debugger-entry-selected:hover {\n  background-color: rgb(10, 10, 10);\n}\n\n.elm-debugger-entry-content {\n  width: calc(100% - 40px);\n  padding: 0 5px;\n  box-sizing: border-box;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  display: inline-block;\n}\n\n.elm-debugger-entry-index {\n  color: #666;\n  width: 40px;\n  text-align: right;\n  display: block;\n  float: right;\n}\n\n')
		]));
var $elm$core$Basics$ge = _Utils_ge;
var $elm$browser$Debugger$History$viewSnapshot = F3(
	function (selectedIndex, index, _v0) {
		var messages = _v0.messages;
		return A3(
			$elm$html$Html$Keyed$node,
			'div',
			_List_Nil,
			A3(
				$elm$core$Array$foldr,
				$elm$browser$Debugger$History$consMsg(selectedIndex),
				_Utils_Tuple2(index, _List_Nil),
				messages).b);
	});
var $elm$browser$Debugger$History$consSnapshot = F3(
	function (selectedIndex, snapshot, _v0) {
		var index = _v0.a;
		var rest = _v0.b;
		var nextIndex = index + $elm$core$Array$length(snapshot.messages);
		var selectedIndexHelp = ((_Utils_cmp(nextIndex, selectedIndex) > 0) && (_Utils_cmp(selectedIndex, index) > -1)) ? selectedIndex : (-1);
		return _Utils_Tuple2(
			nextIndex,
			A2(
				$elm$core$List$cons,
				A4($elm$html$Html$Lazy$lazy3, $elm$browser$Debugger$History$viewSnapshot, selectedIndexHelp, index, snapshot),
				rest));
	});
var $elm$core$Elm$JsArray$foldl = _JsArray_foldl;
var $elm$core$Array$foldl = F3(
	function (func, baseCase, _v0) {
		var tree = _v0.c;
		var tail = _v0.d;
		var helper = F2(
			function (node, acc) {
				if (node.$ === 'SubTree') {
					var subTree = node.a;
					return A3($elm$core$Elm$JsArray$foldl, helper, acc, subTree);
				} else {
					var values = node.a;
					return A3($elm$core$Elm$JsArray$foldl, func, acc, values);
				}
			});
		return A3(
			$elm$core$Elm$JsArray$foldl,
			func,
			A3($elm$core$Elm$JsArray$foldl, helper, baseCase, tree),
			tail);
	});
var $elm$browser$Debugger$History$viewAllSnapshots = F3(
	function (selectedIndex, startIndex, snapshots) {
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			A3(
				$elm$core$Array$foldl,
				$elm$browser$Debugger$History$consSnapshot(selectedIndex),
				_Utils_Tuple2(startIndex, _List_Nil),
				snapshots).b);
	});
var $elm$core$Array$fromListHelp = F3(
	function (list, nodeList, nodeListSize) {
		fromListHelp:
		while (true) {
			var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, list);
			var jsArray = _v0.a;
			var remainingItems = _v0.b;
			if (_Utils_cmp(
				$elm$core$Elm$JsArray$length(jsArray),
				$elm$core$Array$branchFactor) < 0) {
				return A2(
					$elm$core$Array$builderToArray,
					true,
					{nodeList: nodeList, nodeListSize: nodeListSize, tail: jsArray});
			} else {
				var $temp$list = remainingItems,
					$temp$nodeList = A2(
					$elm$core$List$cons,
					$elm$core$Array$Leaf(jsArray),
					nodeList),
					$temp$nodeListSize = nodeListSize + 1;
				list = $temp$list;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue fromListHelp;
			}
		}
	});
var $elm$core$Array$fromList = function (list) {
	if (!list.b) {
		return $elm$core$Array$empty;
	} else {
		return A3($elm$core$Array$fromListHelp, list, _List_Nil, 0);
	}
};
var $elm$core$Bitwise$and = _Bitwise_and;
var $elm$core$Bitwise$shiftRightZfBy = _Bitwise_shiftRightZfBy;
var $elm$core$Array$bitMask = 4294967295 >>> (32 - $elm$core$Array$shiftStep);
var $elm$core$Elm$JsArray$unsafeGet = _JsArray_unsafeGet;
var $elm$core$Array$getHelp = F3(
	function (shift, index, tree) {
		getHelp:
		while (true) {
			var pos = $elm$core$Array$bitMask & (index >>> shift);
			var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (_v0.$ === 'SubTree') {
				var subTree = _v0.a;
				var $temp$shift = shift - $elm$core$Array$shiftStep,
					$temp$index = index,
					$temp$tree = subTree;
				shift = $temp$shift;
				index = $temp$index;
				tree = $temp$tree;
				continue getHelp;
			} else {
				var values = _v0.a;
				return A2($elm$core$Elm$JsArray$unsafeGet, $elm$core$Array$bitMask & index, values);
			}
		}
	});
var $elm$core$Bitwise$shiftLeftBy = _Bitwise_shiftLeftBy;
var $elm$core$Array$tailIndex = function (len) {
	return (len >>> 5) << 5;
};
var $elm$core$Array$get = F2(
	function (index, _v0) {
		var len = _v0.a;
		var startShift = _v0.b;
		var tree = _v0.c;
		var tail = _v0.d;
		return ((index < 0) || (_Utils_cmp(index, len) > -1)) ? $elm$core$Maybe$Nothing : ((_Utils_cmp(
			index,
			$elm$core$Array$tailIndex(len)) > -1) ? $elm$core$Maybe$Just(
			A2($elm$core$Elm$JsArray$unsafeGet, $elm$core$Array$bitMask & index, tail)) : $elm$core$Maybe$Just(
			A3($elm$core$Array$getHelp, startShift, index, tree)));
	});
var $elm$core$Elm$JsArray$appendN = _JsArray_appendN;
var $elm$core$Elm$JsArray$slice = _JsArray_slice;
var $elm$core$Array$appendHelpBuilder = F2(
	function (tail, builder) {
		var tailLen = $elm$core$Elm$JsArray$length(tail);
		var notAppended = ($elm$core$Array$branchFactor - $elm$core$Elm$JsArray$length(builder.tail)) - tailLen;
		var appended = A3($elm$core$Elm$JsArray$appendN, $elm$core$Array$branchFactor, builder.tail, tail);
		return (notAppended < 0) ? {
			nodeList: A2(
				$elm$core$List$cons,
				$elm$core$Array$Leaf(appended),
				builder.nodeList),
			nodeListSize: builder.nodeListSize + 1,
			tail: A3($elm$core$Elm$JsArray$slice, notAppended, tailLen, tail)
		} : ((!notAppended) ? {
			nodeList: A2(
				$elm$core$List$cons,
				$elm$core$Array$Leaf(appended),
				builder.nodeList),
			nodeListSize: builder.nodeListSize + 1,
			tail: $elm$core$Elm$JsArray$empty
		} : {nodeList: builder.nodeList, nodeListSize: builder.nodeListSize, tail: appended});
	});
var $elm$core$List$drop = F2(
	function (n, list) {
		drop:
		while (true) {
			if (n <= 0) {
				return list;
			} else {
				if (!list.b) {
					return list;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs;
					n = $temp$n;
					list = $temp$list;
					continue drop;
				}
			}
		}
	});
var $elm$core$Array$sliceLeft = F2(
	function (from, array) {
		var len = array.a;
		var tree = array.c;
		var tail = array.d;
		if (!from) {
			return array;
		} else {
			if (_Utils_cmp(
				from,
				$elm$core$Array$tailIndex(len)) > -1) {
				return A4(
					$elm$core$Array$Array_elm_builtin,
					len - from,
					$elm$core$Array$shiftStep,
					$elm$core$Elm$JsArray$empty,
					A3(
						$elm$core$Elm$JsArray$slice,
						from - $elm$core$Array$tailIndex(len),
						$elm$core$Elm$JsArray$length(tail),
						tail));
			} else {
				var skipNodes = (from / $elm$core$Array$branchFactor) | 0;
				var helper = F2(
					function (node, acc) {
						if (node.$ === 'SubTree') {
							var subTree = node.a;
							return A3($elm$core$Elm$JsArray$foldr, helper, acc, subTree);
						} else {
							var leaf = node.a;
							return A2($elm$core$List$cons, leaf, acc);
						}
					});
				var leafNodes = A3(
					$elm$core$Elm$JsArray$foldr,
					helper,
					_List_fromArray(
						[tail]),
					tree);
				var nodesToInsert = A2($elm$core$List$drop, skipNodes, leafNodes);
				if (!nodesToInsert.b) {
					return $elm$core$Array$empty;
				} else {
					var head = nodesToInsert.a;
					var rest = nodesToInsert.b;
					var firstSlice = from - (skipNodes * $elm$core$Array$branchFactor);
					var initialBuilder = {
						nodeList: _List_Nil,
						nodeListSize: 0,
						tail: A3(
							$elm$core$Elm$JsArray$slice,
							firstSlice,
							$elm$core$Elm$JsArray$length(head),
							head)
					};
					return A2(
						$elm$core$Array$builderToArray,
						true,
						A3($elm$core$List$foldl, $elm$core$Array$appendHelpBuilder, initialBuilder, rest));
				}
			}
		}
	});
var $elm$core$Array$fetchNewTail = F4(
	function (shift, end, treeEnd, tree) {
		fetchNewTail:
		while (true) {
			var pos = $elm$core$Array$bitMask & (treeEnd >>> shift);
			var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (_v0.$ === 'SubTree') {
				var sub = _v0.a;
				var $temp$shift = shift - $elm$core$Array$shiftStep,
					$temp$end = end,
					$temp$treeEnd = treeEnd,
					$temp$tree = sub;
				shift = $temp$shift;
				end = $temp$end;
				treeEnd = $temp$treeEnd;
				tree = $temp$tree;
				continue fetchNewTail;
			} else {
				var values = _v0.a;
				return A3($elm$core$Elm$JsArray$slice, 0, $elm$core$Array$bitMask & end, values);
			}
		}
	});
var $elm$core$Array$hoistTree = F3(
	function (oldShift, newShift, tree) {
		hoistTree:
		while (true) {
			if ((_Utils_cmp(oldShift, newShift) < 1) || (!$elm$core$Elm$JsArray$length(tree))) {
				return tree;
			} else {
				var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, 0, tree);
				if (_v0.$ === 'SubTree') {
					var sub = _v0.a;
					var $temp$oldShift = oldShift - $elm$core$Array$shiftStep,
						$temp$newShift = newShift,
						$temp$tree = sub;
					oldShift = $temp$oldShift;
					newShift = $temp$newShift;
					tree = $temp$tree;
					continue hoistTree;
				} else {
					return tree;
				}
			}
		}
	});
var $elm$core$Elm$JsArray$unsafeSet = _JsArray_unsafeSet;
var $elm$core$Array$sliceTree = F3(
	function (shift, endIdx, tree) {
		var lastPos = $elm$core$Array$bitMask & (endIdx >>> shift);
		var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, lastPos, tree);
		if (_v0.$ === 'SubTree') {
			var sub = _v0.a;
			var newSub = A3($elm$core$Array$sliceTree, shift - $elm$core$Array$shiftStep, endIdx, sub);
			return (!$elm$core$Elm$JsArray$length(newSub)) ? A3($elm$core$Elm$JsArray$slice, 0, lastPos, tree) : A3(
				$elm$core$Elm$JsArray$unsafeSet,
				lastPos,
				$elm$core$Array$SubTree(newSub),
				A3($elm$core$Elm$JsArray$slice, 0, lastPos + 1, tree));
		} else {
			return A3($elm$core$Elm$JsArray$slice, 0, lastPos, tree);
		}
	});
var $elm$core$Array$sliceRight = F2(
	function (end, array) {
		var len = array.a;
		var startShift = array.b;
		var tree = array.c;
		var tail = array.d;
		if (_Utils_eq(end, len)) {
			return array;
		} else {
			if (_Utils_cmp(
				end,
				$elm$core$Array$tailIndex(len)) > -1) {
				return A4(
					$elm$core$Array$Array_elm_builtin,
					end,
					startShift,
					tree,
					A3($elm$core$Elm$JsArray$slice, 0, $elm$core$Array$bitMask & end, tail));
			} else {
				var endIdx = $elm$core$Array$tailIndex(end);
				var depth = $elm$core$Basics$floor(
					A2(
						$elm$core$Basics$logBase,
						$elm$core$Array$branchFactor,
						A2($elm$core$Basics$max, 1, endIdx - 1)));
				var newShift = A2($elm$core$Basics$max, 5, depth * $elm$core$Array$shiftStep);
				return A4(
					$elm$core$Array$Array_elm_builtin,
					end,
					newShift,
					A3(
						$elm$core$Array$hoistTree,
						startShift,
						newShift,
						A3($elm$core$Array$sliceTree, startShift, endIdx, tree)),
					A4($elm$core$Array$fetchNewTail, startShift, end, endIdx, tree));
			}
		}
	});
var $elm$core$Array$translateIndex = F2(
	function (index, _v0) {
		var len = _v0.a;
		var posIndex = (index < 0) ? (len + index) : index;
		return (posIndex < 0) ? 0 : ((_Utils_cmp(posIndex, len) > 0) ? len : posIndex);
	});
var $elm$core$Array$slice = F3(
	function (from, to, array) {
		var correctTo = A2($elm$core$Array$translateIndex, to, array);
		var correctFrom = A2($elm$core$Array$translateIndex, from, array);
		return (_Utils_cmp(correctFrom, correctTo) > 0) ? $elm$core$Array$empty : A2(
			$elm$core$Array$sliceLeft,
			correctFrom,
			A2($elm$core$Array$sliceRight, correctTo, array));
	});
var $elm$browser$Debugger$History$viewRecentSnapshots = F3(
	function (selectedIndex, recentMessagesNum, snapshots) {
		var messagesToFill = $elm$browser$Debugger$History$maxSnapshotSize - recentMessagesNum;
		var arrayLength = $elm$core$Array$length(snapshots);
		var snapshotsToRender = function () {
			var _v0 = _Utils_Tuple2(
				A2($elm$core$Array$get, arrayLength - 2, snapshots),
				A2($elm$core$Array$get, arrayLength - 1, snapshots));
			if ((_v0.a.$ === 'Just') && (_v0.b.$ === 'Just')) {
				var fillerSnapshot = _v0.a.a;
				var recentSnapshot = _v0.b.a;
				return $elm$core$Array$fromList(
					_List_fromArray(
						[
							{
							messages: A3($elm$core$Array$slice, 0, messagesToFill, fillerSnapshot.messages),
							model: fillerSnapshot.model
						},
							recentSnapshot
						]));
			} else {
				return snapshots;
			}
		}();
		var startingIndex = ((arrayLength * $elm$browser$Debugger$History$maxSnapshotSize) - $elm$browser$Debugger$History$maxSnapshotSize) - messagesToFill;
		return A3($elm$browser$Debugger$History$viewAllSnapshots, selectedIndex, startingIndex, snapshotsToRender);
	});
var $elm$browser$Debugger$History$view = F2(
	function (maybeIndex, _v0) {
		var snapshots = _v0.snapshots;
		var recent = _v0.recent;
		var numMessages = _v0.numMessages;
		var recentMessageStartIndex = numMessages - recent.numMessages;
		var index = A2($elm$core$Maybe$withDefault, -1, maybeIndex);
		var newStuff = A3(
			$elm$html$Html$Keyed$node,
			'div',
			_List_Nil,
			A3(
				$elm$core$List$foldr,
				$elm$browser$Debugger$History$consMsg(index),
				_Utils_Tuple2(recentMessageStartIndex, _List_Nil),
				recent.messages).b);
		var onlyRenderRecentMessages = (!_Utils_eq(index, -1)) || ($elm$core$Array$length(snapshots) < 2);
		var oldStuff = onlyRenderRecentMessages ? A4($elm$html$Html$Lazy$lazy3, $elm$browser$Debugger$History$viewAllSnapshots, index, 0, snapshots) : A4($elm$html$Html$Lazy$lazy3, $elm$browser$Debugger$History$viewRecentSnapshots, index, recent.numMessages, snapshots);
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$id('elm-debugger-sidebar'),
					A2($elm$html$Html$Attributes$style, 'width', '100%'),
					A2($elm$html$Html$Attributes$style, 'overflow-y', 'auto'),
					A2($elm$html$Html$Attributes$style, 'height', 'calc(100% - 72px)')
				]),
			A2(
				$elm$core$List$cons,
				$elm$browser$Debugger$History$styles,
				A2(
					$elm$core$List$cons,
					newStuff,
					A2(
						$elm$core$List$cons,
						oldStuff,
						onlyRenderRecentMessages ? _List_Nil : _List_fromArray(
							[
								$elm$browser$Debugger$History$showMoreButton(numMessages)
							])))));
	});
var $elm$browser$Debugger$Main$SwapLayout = {$: 'SwapLayout'};
var $elm$browser$Debugger$Main$toHistoryIcon = function (layout) {
	if (layout.$ === 'Horizontal') {
		return 'M13 1a3 3 0 0 1 3 3v8a3 3 0 0 1-3 3h-10a3 3 0 0 1-3-3v-8a3 3 0 0 1 3-3z M13 3h-10a1 1 0 0 0-1 1v5h12v-5a1 1 0 0 0-1-1z M14 10h-12v2a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1z';
	} else {
		return 'M0 4a3 3 0 0 1 3-3h10a3 3 0 0 1 3 3v8a3 3 0 0 1-3 3h-10a3 3 0 0 1-3-3z M2 4v8a1 1 0 0 0 1 1h2v-10h-2a1 1 0 0 0-1 1z M6 3v10h7a1 1 0 0 0 1-1v-8a1 1 0 0 0-1-1z';
	}
};
var $elm$browser$Debugger$Main$icon = function (path) {
	return A4(
		$elm$virtual_dom$VirtualDom$nodeNS,
		'http://www.w3.org/2000/svg',
		'svg',
		_List_fromArray(
			[
				A2($elm$virtual_dom$VirtualDom$attribute, 'viewBox', '0 0 16 16'),
				A2($elm$virtual_dom$VirtualDom$attribute, 'xmlns', 'http://www.w3.org/2000/svg'),
				A2($elm$virtual_dom$VirtualDom$attribute, 'fill', 'currentColor'),
				A2($elm$virtual_dom$VirtualDom$attribute, 'width', '16px'),
				A2($elm$virtual_dom$VirtualDom$attribute, 'height', '16px')
			]),
		_List_fromArray(
			[
				A4(
				$elm$virtual_dom$VirtualDom$nodeNS,
				'http://www.w3.org/2000/svg',
				'path',
				_List_fromArray(
					[
						A2($elm$virtual_dom$VirtualDom$attribute, 'd', path)
					]),
				_List_Nil)
			]));
};
var $elm$browser$Debugger$Main$viewHistoryButton = F3(
	function (label, msg, path) {
		return A2(
			$elm$html$Html$button,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'display', 'flex'),
					A2($elm$html$Html$Attributes$style, 'flex-direction', 'row'),
					A2($elm$html$Html$Attributes$style, 'align-items', 'center'),
					A2($elm$html$Html$Attributes$style, 'background', 'none'),
					A2($elm$html$Html$Attributes$style, 'border', 'none'),
					A2($elm$html$Html$Attributes$style, 'color', 'inherit'),
					A2($elm$html$Html$Attributes$style, 'cursor', 'pointer'),
					$elm$html$Html$Events$onClick(msg)
				]),
			_List_fromArray(
				[
					$elm$browser$Debugger$Main$icon(path),
					A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'padding-left', '6px')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(label)
						]))
				]));
	});
var $elm$browser$Debugger$Main$viewHistoryOptions = function (layout) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'width', '100%'),
				A2($elm$html$Html$Attributes$style, 'height', '36px'),
				A2($elm$html$Html$Attributes$style, 'display', 'flex'),
				A2($elm$html$Html$Attributes$style, 'flex-direction', 'row'),
				A2($elm$html$Html$Attributes$style, 'align-items', 'center'),
				A2($elm$html$Html$Attributes$style, 'justify-content', 'space-between'),
				A2($elm$html$Html$Attributes$style, 'background-color', 'rgb(50, 50, 50)')
			]),
		_List_fromArray(
			[
				A3(
				$elm$browser$Debugger$Main$viewHistoryButton,
				'Swap Layout',
				$elm$browser$Debugger$Main$SwapLayout,
				$elm$browser$Debugger$Main$toHistoryIcon(layout)),
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						A2($elm$html$Html$Attributes$style, 'display', 'flex'),
						A2($elm$html$Html$Attributes$style, 'flex-direction', 'row'),
						A2($elm$html$Html$Attributes$style, 'align-items', 'center'),
						A2($elm$html$Html$Attributes$style, 'justify-content', 'space-between')
					]),
				_List_fromArray(
					[
						A3($elm$browser$Debugger$Main$viewHistoryButton, 'Import', $elm$browser$Debugger$Main$Import, 'M5 1a1 1 0 0 1 0 2h-2a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1a1 1 0 0 1 2 0a3 3 0 0 1-3 3h-10a3 3 0 0 1-3-3v-8a3 3 0 0 1 3-3z M10 2a1 1 0 0 0 -2 0v6a1 1 0 0 0 1 1h6a1 1 0 0 0 0-2h-3.586l4.293-4.293a1 1 0 0 0-1.414-1.414l-4.293 4.293z'),
						A3($elm$browser$Debugger$Main$viewHistoryButton, 'Export', $elm$browser$Debugger$Main$Export, 'M5 1a1 1 0 0 1 0 2h-2a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1 a1 1 0 0 1 2 0a3 3 0 0 1-3 3h-10a3 3 0 0 1-3-3v-8a3 3 0 0 1 3-3z M9 3a1 1 0 1 1 0-2h6a1 1 0 0 1 1 1v6a1 1 0 1 1-2 0v-3.586l-5.293 5.293 a1 1 0 0 1-1.414-1.414l5.293 -5.293z')
					]))
			]));
};
var $elm$browser$Debugger$Main$SliderJump = function (a) {
	return {$: 'SliderJump', a: a};
};
var $elm$core$Basics$composeR = F3(
	function (f, g, x) {
		return g(
			f(x));
	});
var $elm$html$Html$input = _VirtualDom_node('input');
var $elm$browser$Debugger$Main$isPlaying = function (maybeIndex) {
	if (maybeIndex.$ === 'Nothing') {
		return true;
	} else {
		return false;
	}
};
var $elm$html$Html$Attributes$max = $elm$html$Html$Attributes$stringProperty('max');
var $elm$html$Html$Attributes$min = $elm$html$Html$Attributes$stringProperty('min');
var $elm$html$Html$Events$alwaysStop = function (x) {
	return _Utils_Tuple2(x, true);
};
var $elm$virtual_dom$VirtualDom$MayStopPropagation = function (a) {
	return {$: 'MayStopPropagation', a: a};
};
var $elm$html$Html$Events$stopPropagationOn = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$MayStopPropagation(decoder));
	});
var $elm$json$Json$Decode$string = _Json_decodeString;
var $elm$html$Html$Events$targetValue = A2(
	$elm$json$Json$Decode$at,
	_List_fromArray(
		['target', 'value']),
	$elm$json$Json$Decode$string);
var $elm$html$Html$Events$onInput = function (tagger) {
	return A2(
		$elm$html$Html$Events$stopPropagationOn,
		'input',
		A2(
			$elm$json$Json$Decode$map,
			$elm$html$Html$Events$alwaysStop,
			A2($elm$json$Json$Decode$map, tagger, $elm$html$Html$Events$targetValue)));
};
var $elm$core$String$toInt = _String_toInt;
var $elm$html$Html$Attributes$type_ = $elm$html$Html$Attributes$stringProperty('type');
var $elm$html$Html$Attributes$value = $elm$html$Html$Attributes$stringProperty('value');
var $elm$browser$Debugger$Main$viewPlayButton = function (playing) {
	return A2(
		$elm$html$Html$button,
		_List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'background', '#1293D8'),
				A2($elm$html$Html$Attributes$style, 'border', 'none'),
				A2($elm$html$Html$Attributes$style, 'color', 'white'),
				A2($elm$html$Html$Attributes$style, 'cursor', 'pointer'),
				A2($elm$html$Html$Attributes$style, 'width', '36px'),
				A2($elm$html$Html$Attributes$style, 'height', '36px'),
				$elm$html$Html$Events$onClick($elm$browser$Debugger$Main$Resume)
			]),
		_List_fromArray(
			[
				playing ? $elm$browser$Debugger$Main$icon('M2 2h4v12h-4v-12z M10 2h4v12h-4v-12z') : $elm$browser$Debugger$Main$icon('M2 2l12 7l-12 7z')
			]));
};
var $elm$browser$Debugger$Main$viewHistorySlider = F2(
	function (history, maybeIndex) {
		var lastIndex = $elm$browser$Debugger$History$size(history) - 1;
		var selectedIndex = A2($elm$core$Maybe$withDefault, lastIndex, maybeIndex);
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'display', 'flex'),
					A2($elm$html$Html$Attributes$style, 'flex-direction', 'row'),
					A2($elm$html$Html$Attributes$style, 'align-items', 'center'),
					A2($elm$html$Html$Attributes$style, 'width', '100%'),
					A2($elm$html$Html$Attributes$style, 'height', '36px'),
					A2($elm$html$Html$Attributes$style, 'background-color', 'rgb(50, 50, 50)')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$Lazy$lazy,
					$elm$browser$Debugger$Main$viewPlayButton,
					$elm$browser$Debugger$Main$isPlaying(maybeIndex)),
					A2(
					$elm$html$Html$input,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$type_('range'),
							A2($elm$html$Html$Attributes$style, 'width', 'calc(100% - 56px)'),
							A2($elm$html$Html$Attributes$style, 'height', '36px'),
							A2($elm$html$Html$Attributes$style, 'margin', '0 10px'),
							$elm$html$Html$Attributes$min('0'),
							$elm$html$Html$Attributes$max(
							$elm$core$String$fromInt(lastIndex)),
							$elm$html$Html$Attributes$value(
							$elm$core$String$fromInt(selectedIndex)),
							$elm$html$Html$Events$onInput(
							A2(
								$elm$core$Basics$composeR,
								$elm$core$String$toInt,
								A2(
									$elm$core$Basics$composeR,
									$elm$core$Maybe$withDefault(lastIndex),
									$elm$browser$Debugger$Main$SliderJump)))
						]),
					_List_Nil)
				]));
	});
var $elm$browser$Debugger$Main$viewHistory = F3(
	function (maybeIndex, history, layout) {
		var block = $elm$browser$Debugger$Main$toMouseBlocker(layout);
		var _v0 = $elm$browser$Debugger$Main$toHistoryPercents(layout);
		var w = _v0.a;
		var h = _v0.b;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'width', w),
					A2($elm$html$Html$Attributes$style, 'height', h),
					A2($elm$html$Html$Attributes$style, 'display', 'flex'),
					A2($elm$html$Html$Attributes$style, 'flex-direction', 'column'),
					A2($elm$html$Html$Attributes$style, 'color', '#DDDDDD'),
					A2($elm$html$Html$Attributes$style, 'background-color', 'rgb(61, 61, 61)'),
					A2($elm$html$Html$Attributes$style, 'pointer-events', block),
					A2($elm$html$Html$Attributes$style, 'user-select', block)
				]),
			_List_fromArray(
				[
					A2($elm$browser$Debugger$Main$viewHistorySlider, history, maybeIndex),
					A2(
					$elm$html$Html$map,
					$elm$browser$Debugger$Main$Jump,
					A2($elm$browser$Debugger$History$view, maybeIndex, history)),
					A2($elm$html$Html$Lazy$lazy, $elm$browser$Debugger$Main$viewHistoryOptions, layout)
				]));
	});
var $elm$browser$Debugger$Main$popoutView = function (model) {
	var maybeIndex = function () {
		var _v0 = model.state;
		if (_v0.$ === 'Running') {
			return $elm$core$Maybe$Nothing;
		} else {
			var index = _v0.a;
			return $elm$core$Maybe$Just(index);
		}
	}();
	var historyToRender = $elm$browser$Debugger$Main$cachedHistory(model);
	return A3(
		$elm$html$Html$node,
		'body',
		_Utils_ap(
			$elm$browser$Debugger$Main$toDragListeners(model.layout),
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'margin', '0'),
					A2($elm$html$Html$Attributes$style, 'padding', '0'),
					A2($elm$html$Html$Attributes$style, 'width', '100%'),
					A2($elm$html$Html$Attributes$style, 'height', '100%'),
					A2($elm$html$Html$Attributes$style, 'font-family', 'monospace'),
					A2($elm$html$Html$Attributes$style, 'display', 'flex'),
					A2(
					$elm$html$Html$Attributes$style,
					'flex-direction',
					$elm$browser$Debugger$Main$toFlexDirection(model.layout))
				])),
		_List_fromArray(
			[
				A3($elm$browser$Debugger$Main$viewHistory, maybeIndex, historyToRender, model.layout),
				$elm$browser$Debugger$Main$viewDragZone(model.layout),
				A3($elm$browser$Debugger$Main$viewExpando, model.expandoMsg, model.expandoModel, model.layout)
			]));
};
var $elm$browser$Debugger$Overlay$BlockAll = {$: 'BlockAll'};
var $elm$browser$Debugger$Overlay$toBlockerType = F2(
	function (isPaused, state) {
		switch (state.$) {
			case 'None':
				return isPaused ? $elm$browser$Debugger$Overlay$BlockAll : $elm$browser$Debugger$Overlay$BlockNone;
			case 'BadMetadata':
				return $elm$browser$Debugger$Overlay$BlockMost;
			case 'BadImport':
				return $elm$browser$Debugger$Overlay$BlockMost;
			default:
				return $elm$browser$Debugger$Overlay$BlockMost;
		}
	});
var $elm$browser$Debugger$Main$toBlockerType = function (model) {
	return A2(
		$elm$browser$Debugger$Overlay$toBlockerType,
		$elm$browser$Debugger$Main$isPaused(model.state),
		model.overlay);
};
var $elm$browser$Debugger$Main$Horizontal = F3(
	function (a, b, c) {
		return {$: 'Horizontal', a: a, b: b, c: c};
	});
var $elm$browser$Debugger$Main$Running = function (a) {
	return {$: 'Running', a: a};
};
var $elm$browser$Debugger$Main$Static = {$: 'Static'};
var $elm$browser$Debugger$Metadata$Error = F2(
	function (message, problems) {
		return {message: message, problems: problems};
	});
var $elm$json$Json$Decode$decodeValue = _Json_run;
var $elm$browser$Debugger$Metadata$Metadata = F2(
	function (versions, types) {
		return {types: types, versions: versions};
	});
var $elm$browser$Debugger$Metadata$Types = F3(
	function (message, aliases, unions) {
		return {aliases: aliases, message: message, unions: unions};
	});
var $elm$browser$Debugger$Metadata$Alias = F2(
	function (args, tipe) {
		return {args: args, tipe: tipe};
	});
var $elm$json$Json$Decode$list = _Json_decodeList;
var $elm$browser$Debugger$Metadata$decodeAlias = A3(
	$elm$json$Json$Decode$map2,
	$elm$browser$Debugger$Metadata$Alias,
	A2(
		$elm$json$Json$Decode$field,
		'args',
		$elm$json$Json$Decode$list($elm$json$Json$Decode$string)),
	A2($elm$json$Json$Decode$field, 'type', $elm$json$Json$Decode$string));
var $elm$browser$Debugger$Metadata$Union = F2(
	function (args, tags) {
		return {args: args, tags: tags};
	});
var $elm$core$Dict$fromList = function (assocs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, dict) {
				var key = _v0.a;
				var value = _v0.b;
				return A3($elm$core$Dict$insert, key, value, dict);
			}),
		$elm$core$Dict$empty,
		assocs);
};
var $elm$json$Json$Decode$keyValuePairs = _Json_decodeKeyValuePairs;
var $elm$json$Json$Decode$dict = function (decoder) {
	return A2(
		$elm$json$Json$Decode$map,
		$elm$core$Dict$fromList,
		$elm$json$Json$Decode$keyValuePairs(decoder));
};
var $elm$browser$Debugger$Metadata$decodeUnion = A3(
	$elm$json$Json$Decode$map2,
	$elm$browser$Debugger$Metadata$Union,
	A2(
		$elm$json$Json$Decode$field,
		'args',
		$elm$json$Json$Decode$list($elm$json$Json$Decode$string)),
	A2(
		$elm$json$Json$Decode$field,
		'tags',
		$elm$json$Json$Decode$dict(
			$elm$json$Json$Decode$list($elm$json$Json$Decode$string))));
var $elm$json$Json$Decode$map3 = _Json_map3;
var $elm$browser$Debugger$Metadata$decodeTypes = A4(
	$elm$json$Json$Decode$map3,
	$elm$browser$Debugger$Metadata$Types,
	A2($elm$json$Json$Decode$field, 'message', $elm$json$Json$Decode$string),
	A2(
		$elm$json$Json$Decode$field,
		'aliases',
		$elm$json$Json$Decode$dict($elm$browser$Debugger$Metadata$decodeAlias)),
	A2(
		$elm$json$Json$Decode$field,
		'unions',
		$elm$json$Json$Decode$dict($elm$browser$Debugger$Metadata$decodeUnion)));
var $elm$browser$Debugger$Metadata$Versions = function (elm) {
	return {elm: elm};
};
var $elm$browser$Debugger$Metadata$decodeVersions = A2(
	$elm$json$Json$Decode$map,
	$elm$browser$Debugger$Metadata$Versions,
	A2($elm$json$Json$Decode$field, 'elm', $elm$json$Json$Decode$string));
var $elm$browser$Debugger$Metadata$decoder = A3(
	$elm$json$Json$Decode$map2,
	$elm$browser$Debugger$Metadata$Metadata,
	A2($elm$json$Json$Decode$field, 'versions', $elm$browser$Debugger$Metadata$decodeVersions),
	A2($elm$json$Json$Decode$field, 'types', $elm$browser$Debugger$Metadata$decodeTypes));
var $elm$browser$Debugger$Metadata$ProblemType = F2(
	function (name, problems) {
		return {name: name, problems: problems};
	});
var $elm$core$List$maybeCons = F3(
	function (f, mx, xs) {
		var _v0 = f(mx);
		if (_v0.$ === 'Just') {
			var x = _v0.a;
			return A2($elm$core$List$cons, x, xs);
		} else {
			return xs;
		}
	});
var $elm$core$List$filterMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			$elm$core$List$maybeCons(f),
			_List_Nil,
			xs);
	});
var $elm$core$String$contains = _String_contains;
var $elm$browser$Debugger$Metadata$hasProblem = F2(
	function (tipe, _v0) {
		var problem = _v0.a;
		var token = _v0.b;
		return A2($elm$core$String$contains, token, tipe) ? $elm$core$Maybe$Just(problem) : $elm$core$Maybe$Nothing;
	});
var $elm$browser$Debugger$Metadata$Decoder = {$: 'Decoder'};
var $elm$browser$Debugger$Metadata$Function = {$: 'Function'};
var $elm$browser$Debugger$Metadata$Process = {$: 'Process'};
var $elm$browser$Debugger$Metadata$Program = {$: 'Program'};
var $elm$browser$Debugger$Metadata$Request = {$: 'Request'};
var $elm$browser$Debugger$Metadata$Socket = {$: 'Socket'};
var $elm$browser$Debugger$Metadata$Task = {$: 'Task'};
var $elm$browser$Debugger$Metadata$VirtualDom = {$: 'VirtualDom'};
var $elm$browser$Debugger$Metadata$problemTable = _List_fromArray(
	[
		_Utils_Tuple2($elm$browser$Debugger$Metadata$Function, '->'),
		_Utils_Tuple2($elm$browser$Debugger$Metadata$Decoder, 'Json.Decode.Decoder'),
		_Utils_Tuple2($elm$browser$Debugger$Metadata$Task, 'Task.Task'),
		_Utils_Tuple2($elm$browser$Debugger$Metadata$Process, 'Process.Id'),
		_Utils_Tuple2($elm$browser$Debugger$Metadata$Socket, 'WebSocket.LowLevel.WebSocket'),
		_Utils_Tuple2($elm$browser$Debugger$Metadata$Request, 'Http.Request'),
		_Utils_Tuple2($elm$browser$Debugger$Metadata$Program, 'Platform.Program'),
		_Utils_Tuple2($elm$browser$Debugger$Metadata$VirtualDom, 'VirtualDom.Node'),
		_Utils_Tuple2($elm$browser$Debugger$Metadata$VirtualDom, 'VirtualDom.Attribute')
	]);
var $elm$browser$Debugger$Metadata$findProblems = function (tipe) {
	return A2(
		$elm$core$List$filterMap,
		$elm$browser$Debugger$Metadata$hasProblem(tipe),
		$elm$browser$Debugger$Metadata$problemTable);
};
var $elm$browser$Debugger$Metadata$collectBadAliases = F3(
	function (name, _v0, list) {
		var tipe = _v0.tipe;
		var _v1 = $elm$browser$Debugger$Metadata$findProblems(tipe);
		if (!_v1.b) {
			return list;
		} else {
			var problems = _v1;
			return A2(
				$elm$core$List$cons,
				A2($elm$browser$Debugger$Metadata$ProblemType, name, problems),
				list);
		}
	});
var $elm$core$List$append = F2(
	function (xs, ys) {
		if (!ys.b) {
			return xs;
		} else {
			return A3($elm$core$List$foldr, $elm$core$List$cons, ys, xs);
		}
	});
var $elm$core$List$concat = function (lists) {
	return A3($elm$core$List$foldr, $elm$core$List$append, _List_Nil, lists);
};
var $elm$core$List$concatMap = F2(
	function (f, list) {
		return $elm$core$List$concat(
			A2($elm$core$List$map, f, list));
	});
var $elm$core$Dict$values = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, valueList) {
				return A2($elm$core$List$cons, value, valueList);
			}),
		_List_Nil,
		dict);
};
var $elm$browser$Debugger$Metadata$collectBadUnions = F3(
	function (name, _v0, list) {
		var tags = _v0.tags;
		var _v1 = A2(
			$elm$core$List$concatMap,
			$elm$browser$Debugger$Metadata$findProblems,
			$elm$core$List$concat(
				$elm$core$Dict$values(tags)));
		if (!_v1.b) {
			return list;
		} else {
			var problems = _v1;
			return A2(
				$elm$core$List$cons,
				A2($elm$browser$Debugger$Metadata$ProblemType, name, problems),
				list);
		}
	});
var $elm$core$Dict$foldl = F3(
	function (func, acc, dict) {
		foldl:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldl, func, acc, left)),
					$temp$dict = right;
				func = $temp$func;
				acc = $temp$acc;
				dict = $temp$dict;
				continue foldl;
			}
		}
	});
var $elm$browser$Debugger$Metadata$isPortable = function (_v0) {
	var types = _v0.types;
	var badAliases = A3($elm$core$Dict$foldl, $elm$browser$Debugger$Metadata$collectBadAliases, _List_Nil, types.aliases);
	var _v1 = A3($elm$core$Dict$foldl, $elm$browser$Debugger$Metadata$collectBadUnions, badAliases, types.unions);
	if (!_v1.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var problems = _v1;
		return $elm$core$Maybe$Just(
			A2($elm$browser$Debugger$Metadata$Error, types.message, problems));
	}
};
var $elm$browser$Debugger$Metadata$decode = function (value) {
	var _v0 = A2($elm$json$Json$Decode$decodeValue, $elm$browser$Debugger$Metadata$decoder, value);
	if (_v0.$ === 'Err') {
		return $elm$core$Result$Err(
			A2($elm$browser$Debugger$Metadata$Error, 'The compiler is generating bad metadata. This is a compiler bug!', _List_Nil));
	} else {
		var metadata = _v0.a;
		var _v1 = $elm$browser$Debugger$Metadata$isPortable(metadata);
		if (_v1.$ === 'Nothing') {
			return $elm$core$Result$Ok(metadata);
		} else {
			var error = _v1.a;
			return $elm$core$Result$Err(error);
		}
	}
};
var $elm$browser$Debugger$History$History = F3(
	function (snapshots, recent, numMessages) {
		return {numMessages: numMessages, recent: recent, snapshots: snapshots};
	});
var $elm$browser$Debugger$History$RecentHistory = F3(
	function (model, messages, numMessages) {
		return {messages: messages, model: model, numMessages: numMessages};
	});
var $elm$browser$Debugger$History$empty = function (model) {
	return A3(
		$elm$browser$Debugger$History$History,
		$elm$core$Array$empty,
		A3($elm$browser$Debugger$History$RecentHistory, model, _List_Nil, 0),
		0);
};
var $elm$core$Dict$map = F2(
	function (func, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				A2(func, key, value),
				A2($elm$core$Dict$map, func, left),
				A2($elm$core$Dict$map, func, right));
		}
	});
var $elm$core$Dict$sizeHelp = F2(
	function (n, dict) {
		sizeHelp:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return n;
			} else {
				var left = dict.d;
				var right = dict.e;
				var $temp$n = A2($elm$core$Dict$sizeHelp, n + 1, right),
					$temp$dict = left;
				n = $temp$n;
				dict = $temp$dict;
				continue sizeHelp;
			}
		}
	});
var $elm$core$Dict$size = function (dict) {
	return A2($elm$core$Dict$sizeHelp, 0, dict);
};
var $elm$browser$Debugger$Expando$initHelp = F2(
	function (isOuter, expando) {
		switch (expando.$) {
			case 'S':
				return expando;
			case 'Primitive':
				return expando;
			case 'Sequence':
				var seqType = expando.a;
				var isClosed = expando.b;
				var items = expando.c;
				return isOuter ? A3(
					$elm$browser$Debugger$Expando$Sequence,
					seqType,
					false,
					A2(
						$elm$core$List$map,
						$elm$browser$Debugger$Expando$initHelp(false),
						items)) : (($elm$core$List$length(items) <= 8) ? A3($elm$browser$Debugger$Expando$Sequence, seqType, false, items) : expando);
			case 'Dictionary':
				var isClosed = expando.a;
				var keyValuePairs = expando.b;
				return isOuter ? A2(
					$elm$browser$Debugger$Expando$Dictionary,
					false,
					A2(
						$elm$core$List$map,
						function (_v1) {
							var k = _v1.a;
							var v = _v1.b;
							return _Utils_Tuple2(
								k,
								A2($elm$browser$Debugger$Expando$initHelp, false, v));
						},
						keyValuePairs)) : (($elm$core$List$length(keyValuePairs) <= 8) ? A2($elm$browser$Debugger$Expando$Dictionary, false, keyValuePairs) : expando);
			case 'Record':
				var isClosed = expando.a;
				var entries = expando.b;
				return isOuter ? A2(
					$elm$browser$Debugger$Expando$Record,
					false,
					A2(
						$elm$core$Dict$map,
						F2(
							function (_v2, v) {
								return A2($elm$browser$Debugger$Expando$initHelp, false, v);
							}),
						entries)) : (($elm$core$Dict$size(entries) <= 4) ? A2($elm$browser$Debugger$Expando$Record, false, entries) : expando);
			default:
				var maybeName = expando.a;
				var isClosed = expando.b;
				var args = expando.c;
				return isOuter ? A3(
					$elm$browser$Debugger$Expando$Constructor,
					maybeName,
					false,
					A2(
						$elm$core$List$map,
						$elm$browser$Debugger$Expando$initHelp(false),
						args)) : (($elm$core$List$length(args) <= 4) ? A3($elm$browser$Debugger$Expando$Constructor, maybeName, false, args) : expando);
		}
	});
var $elm$browser$Debugger$Expando$init = function (value) {
	return A2(
		$elm$browser$Debugger$Expando$initHelp,
		true,
		_Debugger_init(value));
};
var $elm$core$Platform$Cmd$map = _Platform_map;
var $elm$browser$Debugger$Overlay$None = {$: 'None'};
var $elm$browser$Debugger$Overlay$none = $elm$browser$Debugger$Overlay$None;
var $elm$browser$Debugger$Main$wrapInit = F4(
	function (metadata, popout, init, flags) {
		var _v0 = init(flags);
		var userModel = _v0.a;
		var userCommands = _v0.b;
		return _Utils_Tuple2(
			{
				expandoModel: $elm$browser$Debugger$Expando$init(userModel),
				expandoMsg: $elm$browser$Debugger$Expando$init(_Utils_Tuple0),
				history: $elm$browser$Debugger$History$empty(userModel),
				layout: A3($elm$browser$Debugger$Main$Horizontal, $elm$browser$Debugger$Main$Static, 0.3, 0.5),
				metadata: $elm$browser$Debugger$Metadata$decode(metadata),
				overlay: $elm$browser$Debugger$Overlay$none,
				popout: popout,
				state: $elm$browser$Debugger$Main$Running(userModel)
			},
			A2($elm$core$Platform$Cmd$map, $elm$browser$Debugger$Main$UserMsg, userCommands));
	});
var $elm$browser$Debugger$Main$getLatestModel = function (state) {
	if (state.$ === 'Running') {
		var model = state.a;
		return model;
	} else {
		var model = state.c;
		return model;
	}
};
var $elm$core$Platform$Sub$map = _Platform_map;
var $elm$browser$Debugger$Main$wrapSubs = F2(
	function (subscriptions, model) {
		return A2(
			$elm$core$Platform$Sub$map,
			$elm$browser$Debugger$Main$UserMsg,
			subscriptions(
				$elm$browser$Debugger$Main$getLatestModel(model.state)));
	});
var $elm$browser$Debugger$Main$Moving = {$: 'Moving'};
var $elm$browser$Debugger$Main$Paused = F5(
	function (a, b, c, d, e) {
		return {$: 'Paused', a: a, b: b, c: c, d: d, e: e};
	});
var $elm$browser$Debugger$History$Snapshot = F2(
	function (model, messages) {
		return {messages: messages, model: model};
	});
var $elm$browser$Debugger$History$addRecent = F3(
	function (msg, newModel, _v0) {
		var model = _v0.model;
		var messages = _v0.messages;
		var numMessages = _v0.numMessages;
		return _Utils_eq(numMessages, $elm$browser$Debugger$History$maxSnapshotSize) ? _Utils_Tuple2(
			$elm$core$Maybe$Just(
				A2(
					$elm$browser$Debugger$History$Snapshot,
					model,
					$elm$core$Array$fromList(messages))),
			A3(
				$elm$browser$Debugger$History$RecentHistory,
				newModel,
				_List_fromArray(
					[msg]),
				1)) : _Utils_Tuple2(
			$elm$core$Maybe$Nothing,
			A3(
				$elm$browser$Debugger$History$RecentHistory,
				model,
				A2($elm$core$List$cons, msg, messages),
				numMessages + 1));
	});
var $elm$core$Elm$JsArray$push = _JsArray_push;
var $elm$core$Elm$JsArray$singleton = _JsArray_singleton;
var $elm$core$Array$insertTailInTree = F4(
	function (shift, index, tail, tree) {
		var pos = $elm$core$Array$bitMask & (index >>> shift);
		if (_Utils_cmp(
			pos,
			$elm$core$Elm$JsArray$length(tree)) > -1) {
			if (shift === 5) {
				return A2(
					$elm$core$Elm$JsArray$push,
					$elm$core$Array$Leaf(tail),
					tree);
			} else {
				var newSub = $elm$core$Array$SubTree(
					A4($elm$core$Array$insertTailInTree, shift - $elm$core$Array$shiftStep, index, tail, $elm$core$Elm$JsArray$empty));
				return A2($elm$core$Elm$JsArray$push, newSub, tree);
			}
		} else {
			var value = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (value.$ === 'SubTree') {
				var subTree = value.a;
				var newSub = $elm$core$Array$SubTree(
					A4($elm$core$Array$insertTailInTree, shift - $elm$core$Array$shiftStep, index, tail, subTree));
				return A3($elm$core$Elm$JsArray$unsafeSet, pos, newSub, tree);
			} else {
				var newSub = $elm$core$Array$SubTree(
					A4(
						$elm$core$Array$insertTailInTree,
						shift - $elm$core$Array$shiftStep,
						index,
						tail,
						$elm$core$Elm$JsArray$singleton(value)));
				return A3($elm$core$Elm$JsArray$unsafeSet, pos, newSub, tree);
			}
		}
	});
var $elm$core$Array$unsafeReplaceTail = F2(
	function (newTail, _v0) {
		var len = _v0.a;
		var startShift = _v0.b;
		var tree = _v0.c;
		var tail = _v0.d;
		var originalTailLen = $elm$core$Elm$JsArray$length(tail);
		var newTailLen = $elm$core$Elm$JsArray$length(newTail);
		var newArrayLen = len + (newTailLen - originalTailLen);
		if (_Utils_eq(newTailLen, $elm$core$Array$branchFactor)) {
			var overflow = _Utils_cmp(newArrayLen >>> $elm$core$Array$shiftStep, 1 << startShift) > 0;
			if (overflow) {
				var newShift = startShift + $elm$core$Array$shiftStep;
				var newTree = A4(
					$elm$core$Array$insertTailInTree,
					newShift,
					len,
					newTail,
					$elm$core$Elm$JsArray$singleton(
						$elm$core$Array$SubTree(tree)));
				return A4($elm$core$Array$Array_elm_builtin, newArrayLen, newShift, newTree, $elm$core$Elm$JsArray$empty);
			} else {
				return A4(
					$elm$core$Array$Array_elm_builtin,
					newArrayLen,
					startShift,
					A4($elm$core$Array$insertTailInTree, startShift, len, newTail, tree),
					$elm$core$Elm$JsArray$empty);
			}
		} else {
			return A4($elm$core$Array$Array_elm_builtin, newArrayLen, startShift, tree, newTail);
		}
	});
var $elm$core$Array$push = F2(
	function (a, array) {
		var tail = array.d;
		return A2(
			$elm$core$Array$unsafeReplaceTail,
			A2($elm$core$Elm$JsArray$push, a, tail),
			array);
	});
var $elm$browser$Debugger$History$add = F3(
	function (msg, model, _v0) {
		var snapshots = _v0.snapshots;
		var recent = _v0.recent;
		var numMessages = _v0.numMessages;
		var _v1 = A3($elm$browser$Debugger$History$addRecent, msg, model, recent);
		if (_v1.a.$ === 'Just') {
			var snapshot = _v1.a.a;
			var newRecent = _v1.b;
			return A3(
				$elm$browser$Debugger$History$History,
				A2($elm$core$Array$push, snapshot, snapshots),
				newRecent,
				numMessages + 1);
		} else {
			var _v2 = _v1.a;
			var newRecent = _v1.b;
			return A3($elm$browser$Debugger$History$History, snapshots, newRecent, numMessages + 1);
		}
	});
var $elm$core$Basics$always = F2(
	function (a, _v0) {
		return a;
	});
var $elm$browser$Debugger$Overlay$BadImport = function (a) {
	return {$: 'BadImport', a: a};
};
var $elm$browser$Debugger$Overlay$RiskyImport = F2(
	function (a, b) {
		return {$: 'RiskyImport', a: a, b: b};
	});
var $elm$browser$Debugger$Report$VersionChanged = F2(
	function (a, b) {
		return {$: 'VersionChanged', a: a, b: b};
	});
var $elm$browser$Debugger$Report$MessageChanged = F2(
	function (a, b) {
		return {$: 'MessageChanged', a: a, b: b};
	});
var $elm$browser$Debugger$Report$SomethingChanged = function (a) {
	return {$: 'SomethingChanged', a: a};
};
var $elm$browser$Debugger$Report$AliasChange = function (a) {
	return {$: 'AliasChange', a: a};
};
var $elm$browser$Debugger$Metadata$checkAlias = F4(
	function (name, old, _new, changes) {
		return (_Utils_eq(old.tipe, _new.tipe) && _Utils_eq(old.args, _new.args)) ? changes : A2(
			$elm$core$List$cons,
			$elm$browser$Debugger$Report$AliasChange(name),
			changes);
	});
var $elm$browser$Debugger$Report$UnionChange = F2(
	function (a, b) {
		return {$: 'UnionChange', a: a, b: b};
	});
var $elm$browser$Debugger$Metadata$addTag = F3(
	function (tag, _v0, changes) {
		return _Utils_update(
			changes,
			{
				added: A2($elm$core$List$cons, tag, changes.added)
			});
	});
var $elm$browser$Debugger$Metadata$checkTag = F4(
	function (tag, old, _new, changes) {
		return _Utils_eq(old, _new) ? changes : _Utils_update(
			changes,
			{
				changed: A2($elm$core$List$cons, tag, changes.changed)
			});
	});
var $elm$browser$Debugger$Report$TagChanges = F4(
	function (removed, changed, added, argsMatch) {
		return {added: added, argsMatch: argsMatch, changed: changed, removed: removed};
	});
var $elm$browser$Debugger$Report$emptyTagChanges = function (argsMatch) {
	return A4($elm$browser$Debugger$Report$TagChanges, _List_Nil, _List_Nil, _List_Nil, argsMatch);
};
var $elm$browser$Debugger$Report$hasTagChanges = function (tagChanges) {
	return _Utils_eq(
		tagChanges,
		A4($elm$browser$Debugger$Report$TagChanges, _List_Nil, _List_Nil, _List_Nil, true));
};
var $elm$core$Dict$merge = F6(
	function (leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {
		var stepState = F3(
			function (rKey, rValue, _v0) {
				stepState:
				while (true) {
					var list = _v0.a;
					var result = _v0.b;
					if (!list.b) {
						return _Utils_Tuple2(
							list,
							A3(rightStep, rKey, rValue, result));
					} else {
						var _v2 = list.a;
						var lKey = _v2.a;
						var lValue = _v2.b;
						var rest = list.b;
						if (_Utils_cmp(lKey, rKey) < 0) {
							var $temp$rKey = rKey,
								$temp$rValue = rValue,
								$temp$_v0 = _Utils_Tuple2(
								rest,
								A3(leftStep, lKey, lValue, result));
							rKey = $temp$rKey;
							rValue = $temp$rValue;
							_v0 = $temp$_v0;
							continue stepState;
						} else {
							if (_Utils_cmp(lKey, rKey) > 0) {
								return _Utils_Tuple2(
									list,
									A3(rightStep, rKey, rValue, result));
							} else {
								return _Utils_Tuple2(
									rest,
									A4(bothStep, lKey, lValue, rValue, result));
							}
						}
					}
				}
			});
		var _v3 = A3(
			$elm$core$Dict$foldl,
			stepState,
			_Utils_Tuple2(
				$elm$core$Dict$toList(leftDict),
				initialResult),
			rightDict);
		var leftovers = _v3.a;
		var intermediateResult = _v3.b;
		return A3(
			$elm$core$List$foldl,
			F2(
				function (_v4, result) {
					var k = _v4.a;
					var v = _v4.b;
					return A3(leftStep, k, v, result);
				}),
			intermediateResult,
			leftovers);
	});
var $elm$browser$Debugger$Metadata$removeTag = F3(
	function (tag, _v0, changes) {
		return _Utils_update(
			changes,
			{
				removed: A2($elm$core$List$cons, tag, changes.removed)
			});
	});
var $elm$browser$Debugger$Metadata$checkUnion = F4(
	function (name, old, _new, changes) {
		var tagChanges = A6(
			$elm$core$Dict$merge,
			$elm$browser$Debugger$Metadata$removeTag,
			$elm$browser$Debugger$Metadata$checkTag,
			$elm$browser$Debugger$Metadata$addTag,
			old.tags,
			_new.tags,
			$elm$browser$Debugger$Report$emptyTagChanges(
				_Utils_eq(old.args, _new.args)));
		return $elm$browser$Debugger$Report$hasTagChanges(tagChanges) ? changes : A2(
			$elm$core$List$cons,
			A2($elm$browser$Debugger$Report$UnionChange, name, tagChanges),
			changes);
	});
var $elm$browser$Debugger$Metadata$ignore = F3(
	function (key, value, report) {
		return report;
	});
var $elm$browser$Debugger$Metadata$checkTypes = F2(
	function (old, _new) {
		return (!_Utils_eq(old.message, _new.message)) ? A2($elm$browser$Debugger$Report$MessageChanged, old.message, _new.message) : $elm$browser$Debugger$Report$SomethingChanged(
			A6(
				$elm$core$Dict$merge,
				$elm$browser$Debugger$Metadata$ignore,
				$elm$browser$Debugger$Metadata$checkUnion,
				$elm$browser$Debugger$Metadata$ignore,
				old.unions,
				_new.unions,
				A6($elm$core$Dict$merge, $elm$browser$Debugger$Metadata$ignore, $elm$browser$Debugger$Metadata$checkAlias, $elm$browser$Debugger$Metadata$ignore, old.aliases, _new.aliases, _List_Nil)));
	});
var $elm$browser$Debugger$Metadata$check = F2(
	function (old, _new) {
		return (!_Utils_eq(old.versions.elm, _new.versions.elm)) ? A2($elm$browser$Debugger$Report$VersionChanged, old.versions.elm, _new.versions.elm) : A2($elm$browser$Debugger$Metadata$checkTypes, old.types, _new.types);
	});
var $elm$browser$Debugger$Report$CorruptHistory = {$: 'CorruptHistory'};
var $elm$browser$Debugger$Overlay$corruptImport = $elm$browser$Debugger$Overlay$BadImport($elm$browser$Debugger$Report$CorruptHistory);
var $elm$json$Json$Decode$decodeString = _Json_runOnString;
var $elm$browser$Debugger$Report$Fine = {$: 'Fine'};
var $elm$browser$Debugger$Report$Impossible = {$: 'Impossible'};
var $elm$browser$Debugger$Report$Risky = {$: 'Risky'};
var $elm$core$Basics$not = _Basics_not;
var $elm$core$List$isEmpty = function (xs) {
	if (!xs.b) {
		return true;
	} else {
		return false;
	}
};
var $elm$browser$Debugger$Report$some = function (list) {
	return !$elm$core$List$isEmpty(list);
};
var $elm$browser$Debugger$Report$evaluateChange = function (change) {
	if (change.$ === 'AliasChange') {
		return $elm$browser$Debugger$Report$Impossible;
	} else {
		var removed = change.b.removed;
		var changed = change.b.changed;
		var added = change.b.added;
		var argsMatch = change.b.argsMatch;
		return ((!argsMatch) || ($elm$browser$Debugger$Report$some(changed) || $elm$browser$Debugger$Report$some(removed))) ? $elm$browser$Debugger$Report$Impossible : ($elm$browser$Debugger$Report$some(added) ? $elm$browser$Debugger$Report$Risky : $elm$browser$Debugger$Report$Fine);
	}
};
var $elm$browser$Debugger$Report$worstCase = F2(
	function (status, statusList) {
		worstCase:
		while (true) {
			if (!statusList.b) {
				return status;
			} else {
				switch (statusList.a.$) {
					case 'Impossible':
						var _v1 = statusList.a;
						return $elm$browser$Debugger$Report$Impossible;
					case 'Risky':
						var _v2 = statusList.a;
						var rest = statusList.b;
						var $temp$status = $elm$browser$Debugger$Report$Risky,
							$temp$statusList = rest;
						status = $temp$status;
						statusList = $temp$statusList;
						continue worstCase;
					default:
						var _v3 = statusList.a;
						var rest = statusList.b;
						var $temp$status = status,
							$temp$statusList = rest;
						status = $temp$status;
						statusList = $temp$statusList;
						continue worstCase;
				}
			}
		}
	});
var $elm$browser$Debugger$Report$evaluate = function (report) {
	switch (report.$) {
		case 'CorruptHistory':
			return $elm$browser$Debugger$Report$Impossible;
		case 'VersionChanged':
			return $elm$browser$Debugger$Report$Impossible;
		case 'MessageChanged':
			return $elm$browser$Debugger$Report$Impossible;
		default:
			var changes = report.a;
			return A2(
				$elm$browser$Debugger$Report$worstCase,
				$elm$browser$Debugger$Report$Fine,
				A2($elm$core$List$map, $elm$browser$Debugger$Report$evaluateChange, changes));
	}
};
var $elm$json$Json$Decode$value = _Json_decodeValue;
var $elm$browser$Debugger$Overlay$uploadDecoder = A3(
	$elm$json$Json$Decode$map2,
	F2(
		function (x, y) {
			return _Utils_Tuple2(x, y);
		}),
	A2($elm$json$Json$Decode$field, 'metadata', $elm$browser$Debugger$Metadata$decoder),
	A2($elm$json$Json$Decode$field, 'history', $elm$json$Json$Decode$value));
var $elm$browser$Debugger$Overlay$assessImport = F2(
	function (metadata, jsonString) {
		var _v0 = A2($elm$json$Json$Decode$decodeString, $elm$browser$Debugger$Overlay$uploadDecoder, jsonString);
		if (_v0.$ === 'Err') {
			return $elm$core$Result$Err($elm$browser$Debugger$Overlay$corruptImport);
		} else {
			var _v1 = _v0.a;
			var foreignMetadata = _v1.a;
			var rawHistory = _v1.b;
			var report = A2($elm$browser$Debugger$Metadata$check, foreignMetadata, metadata);
			var _v2 = $elm$browser$Debugger$Report$evaluate(report);
			switch (_v2.$) {
				case 'Impossible':
					return $elm$core$Result$Err(
						$elm$browser$Debugger$Overlay$BadImport(report));
				case 'Risky':
					return $elm$core$Result$Err(
						A2($elm$browser$Debugger$Overlay$RiskyImport, report, rawHistory));
				default:
					return $elm$core$Result$Ok(rawHistory);
			}
		}
	});
var $elm$core$Platform$Cmd$batch = _Platform_batch;
var $elm$browser$Debugger$Overlay$close = F2(
	function (msg, state) {
		switch (state.$) {
			case 'None':
				return $elm$core$Maybe$Nothing;
			case 'BadMetadata':
				return $elm$core$Maybe$Nothing;
			case 'BadImport':
				return $elm$core$Maybe$Nothing;
			default:
				var rawHistory = state.b;
				if (msg.$ === 'Cancel') {
					return $elm$core$Maybe$Nothing;
				} else {
					return $elm$core$Maybe$Just(rawHistory);
				}
		}
	});
var $elm$browser$Debugger$History$elmToJs = A2($elm$core$Basics$composeR, _Json_wrap, _Debugger_unsafeCoerce);
var $elm$browser$Debugger$History$encodeHelp = F2(
	function (snapshot, allMessages) {
		return A3($elm$core$Array$foldl, $elm$core$List$cons, allMessages, snapshot.messages);
	});
var $elm$json$Json$Encode$list = F2(
	function (func, entries) {
		return _Json_wrap(
			A3(
				$elm$core$List$foldl,
				_Json_addEntry(func),
				_Json_emptyArray(_Utils_Tuple0),
				entries));
	});
var $elm$browser$Debugger$History$encode = function (_v0) {
	var snapshots = _v0.snapshots;
	var recent = _v0.recent;
	return A2(
		$elm$json$Json$Encode$list,
		$elm$browser$Debugger$History$elmToJs,
		A3(
			$elm$core$Array$foldr,
			$elm$browser$Debugger$History$encodeHelp,
			$elm$core$List$reverse(recent.messages),
			snapshots));
};
var $elm$json$Json$Encode$object = function (pairs) {
	return _Json_wrap(
		A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, obj) {
					var k = _v0.a;
					var v = _v0.b;
					return A3(_Json_addField, k, v, obj);
				}),
			_Json_emptyObject(_Utils_Tuple0),
			pairs));
};
var $elm$browser$Debugger$Metadata$encodeAlias = function (_v0) {
	var args = _v0.args;
	var tipe = _v0.tipe;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'args',
				A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, args)),
				_Utils_Tuple2(
				'type',
				$elm$json$Json$Encode$string(tipe))
			]));
};
var $elm$browser$Debugger$Metadata$encodeDict = F2(
	function (f, dict) {
		return $elm$json$Json$Encode$object(
			$elm$core$Dict$toList(
				A2(
					$elm$core$Dict$map,
					F2(
						function (key, value) {
							return f(value);
						}),
					dict)));
	});
var $elm$browser$Debugger$Metadata$encodeUnion = function (_v0) {
	var args = _v0.args;
	var tags = _v0.tags;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'args',
				A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, args)),
				_Utils_Tuple2(
				'tags',
				A2(
					$elm$browser$Debugger$Metadata$encodeDict,
					$elm$json$Json$Encode$list($elm$json$Json$Encode$string),
					tags))
			]));
};
var $elm$browser$Debugger$Metadata$encodeTypes = function (_v0) {
	var message = _v0.message;
	var unions = _v0.unions;
	var aliases = _v0.aliases;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'message',
				$elm$json$Json$Encode$string(message)),
				_Utils_Tuple2(
				'aliases',
				A2($elm$browser$Debugger$Metadata$encodeDict, $elm$browser$Debugger$Metadata$encodeAlias, aliases)),
				_Utils_Tuple2(
				'unions',
				A2($elm$browser$Debugger$Metadata$encodeDict, $elm$browser$Debugger$Metadata$encodeUnion, unions))
			]));
};
var $elm$browser$Debugger$Metadata$encodeVersions = function (_v0) {
	var elm = _v0.elm;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'elm',
				$elm$json$Json$Encode$string(elm))
			]));
};
var $elm$browser$Debugger$Metadata$encode = function (_v0) {
	var versions = _v0.versions;
	var types = _v0.types;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'versions',
				$elm$browser$Debugger$Metadata$encodeVersions(versions)),
				_Utils_Tuple2(
				'types',
				$elm$browser$Debugger$Metadata$encodeTypes(types))
			]));
};
var $elm$core$Basics$identity = function (x) {
	return x;
};
var $elm$core$Task$Perform = function (a) {
	return {$: 'Perform', a: a};
};
var $elm$core$Task$succeed = _Scheduler_succeed;
var $elm$core$Task$init = $elm$core$Task$succeed(_Utils_Tuple0);
var $elm$core$Task$andThen = _Scheduler_andThen;
var $elm$core$Task$map = F2(
	function (func, taskA) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return $elm$core$Task$succeed(
					func(a));
			},
			taskA);
	});
var $elm$core$Task$map2 = F3(
	function (func, taskA, taskB) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return A2(
					$elm$core$Task$andThen,
					function (b) {
						return $elm$core$Task$succeed(
							A2(func, a, b));
					},
					taskB);
			},
			taskA);
	});
var $elm$core$Task$sequence = function (tasks) {
	return A3(
		$elm$core$List$foldr,
		$elm$core$Task$map2($elm$core$List$cons),
		$elm$core$Task$succeed(_List_Nil),
		tasks);
};
var $elm$core$Platform$sendToApp = _Platform_sendToApp;
var $elm$core$Task$spawnCmd = F2(
	function (router, _v0) {
		var task = _v0.a;
		return _Scheduler_spawn(
			A2(
				$elm$core$Task$andThen,
				$elm$core$Platform$sendToApp(router),
				task));
	});
var $elm$core$Task$onEffects = F3(
	function (router, commands, state) {
		return A2(
			$elm$core$Task$map,
			function (_v0) {
				return _Utils_Tuple0;
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$map,
					$elm$core$Task$spawnCmd(router),
					commands)));
	});
var $elm$core$Task$onSelfMsg = F3(
	function (_v0, _v1, _v2) {
		return $elm$core$Task$succeed(_Utils_Tuple0);
	});
var $elm$core$Task$cmdMap = F2(
	function (tagger, _v0) {
		var task = _v0.a;
		return $elm$core$Task$Perform(
			A2($elm$core$Task$map, tagger, task));
	});
_Platform_effectManagers['Task'] = _Platform_createManager($elm$core$Task$init, $elm$core$Task$onEffects, $elm$core$Task$onSelfMsg, $elm$core$Task$cmdMap);
var $elm$core$Task$command = _Platform_leaf('Task');
var $elm$core$Task$perform = F2(
	function (toMessage, task) {
		return $elm$core$Task$command(
			$elm$core$Task$Perform(
				A2($elm$core$Task$map, toMessage, task)));
	});
var $elm$browser$Debugger$Main$download = F2(
	function (metadata, history) {
		var historyLength = $elm$browser$Debugger$History$size(history);
		return A2(
			$elm$core$Task$perform,
			function (_v0) {
				return $elm$browser$Debugger$Main$NoOp;
			},
			A2(
				_Debugger_download,
				historyLength,
				_Json_unwrap(
					$elm$json$Json$Encode$object(
						_List_fromArray(
							[
								_Utils_Tuple2(
								'metadata',
								$elm$browser$Debugger$Metadata$encode(metadata)),
								_Utils_Tuple2(
								'history',
								$elm$browser$Debugger$History$encode(history))
							])))));
	});
var $elm$browser$Debugger$Main$Vertical = F3(
	function (a, b, c) {
		return {$: 'Vertical', a: a, b: b, c: c};
	});
var $elm$browser$Debugger$Main$drag = F2(
	function (info, layout) {
		if (layout.$ === 'Horizontal') {
			var status = layout.a;
			var y = layout.c;
			return A3($elm$browser$Debugger$Main$Horizontal, status, info.x / info.width, y);
		} else {
			var status = layout.a;
			var x = layout.b;
			return A3($elm$browser$Debugger$Main$Vertical, status, x, info.y / info.height);
		}
	});
var $elm$browser$Debugger$History$Stepping = F2(
	function (a, b) {
		return {$: 'Stepping', a: a, b: b};
	});
var $elm$browser$Debugger$History$Done = F2(
	function (a, b) {
		return {$: 'Done', a: a, b: b};
	});
var $elm$browser$Debugger$History$getHelp = F3(
	function (update, msg, getResult) {
		if (getResult.$ === 'Done') {
			return getResult;
		} else {
			var n = getResult.a;
			var model = getResult.b;
			return (!n) ? A2(
				$elm$browser$Debugger$History$Done,
				msg,
				A2(update, msg, model).a) : A2(
				$elm$browser$Debugger$History$Stepping,
				n - 1,
				A2(update, msg, model).a);
		}
	});
var $elm$browser$Debugger$History$undone = function (getResult) {
	undone:
	while (true) {
		if (getResult.$ === 'Done') {
			var msg = getResult.a;
			var model = getResult.b;
			return _Utils_Tuple2(model, msg);
		} else {
			var $temp$getResult = getResult;
			getResult = $temp$getResult;
			continue undone;
		}
	}
};
var $elm$browser$Debugger$History$get = F3(
	function (update, index, history) {
		get:
		while (true) {
			var recent = history.recent;
			var snapshotMax = history.numMessages - recent.numMessages;
			if (_Utils_cmp(index, snapshotMax) > -1) {
				return $elm$browser$Debugger$History$undone(
					A3(
						$elm$core$List$foldr,
						$elm$browser$Debugger$History$getHelp(update),
						A2($elm$browser$Debugger$History$Stepping, index - snapshotMax, recent.model),
						recent.messages));
			} else {
				var _v0 = A2($elm$core$Array$get, (index / $elm$browser$Debugger$History$maxSnapshotSize) | 0, history.snapshots);
				if (_v0.$ === 'Nothing') {
					var $temp$update = update,
						$temp$index = index,
						$temp$history = history;
					update = $temp$update;
					index = $temp$index;
					history = $temp$history;
					continue get;
				} else {
					var model = _v0.a.model;
					var messages = _v0.a.messages;
					return $elm$browser$Debugger$History$undone(
						A3(
							$elm$core$Array$foldr,
							$elm$browser$Debugger$History$getHelp(update),
							A2($elm$browser$Debugger$History$Stepping, index % $elm$browser$Debugger$History$maxSnapshotSize, model),
							messages));
				}
			}
		}
	});
var $elm$browser$Debugger$History$getRecentMsg = function (history) {
	getRecentMsg:
	while (true) {
		var _v0 = history.recent.messages;
		if (!_v0.b) {
			var $temp$history = history;
			history = $temp$history;
			continue getRecentMsg;
		} else {
			var first = _v0.a;
			return first;
		}
	}
};
var $elm$core$Dict$get = F2(
	function (targetKey, dict) {
		get:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return $elm$core$Maybe$Nothing;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var _v1 = A2($elm$core$Basics$compare, targetKey, key);
				switch (_v1.$) {
					case 'LT':
						var $temp$targetKey = targetKey,
							$temp$dict = left;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
					case 'EQ':
						return $elm$core$Maybe$Just(value);
					default:
						var $temp$targetKey = targetKey,
							$temp$dict = right;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
				}
			}
		}
	});
var $elm$browser$Debugger$Expando$mergeDictHelp = F3(
	function (oldDict, key, value) {
		var _v12 = A2($elm$core$Dict$get, key, oldDict);
		if (_v12.$ === 'Nothing') {
			return value;
		} else {
			var oldValue = _v12.a;
			return A2($elm$browser$Debugger$Expando$mergeHelp, oldValue, value);
		}
	});
var $elm$browser$Debugger$Expando$mergeHelp = F2(
	function (old, _new) {
		var _v3 = _Utils_Tuple2(old, _new);
		_v3$6:
		while (true) {
			switch (_v3.b.$) {
				case 'S':
					return _new;
				case 'Primitive':
					return _new;
				case 'Sequence':
					if (_v3.a.$ === 'Sequence') {
						var _v4 = _v3.a;
						var isClosed = _v4.b;
						var oldValues = _v4.c;
						var _v5 = _v3.b;
						var seqType = _v5.a;
						var newValues = _v5.c;
						return A3(
							$elm$browser$Debugger$Expando$Sequence,
							seqType,
							isClosed,
							A2($elm$browser$Debugger$Expando$mergeListHelp, oldValues, newValues));
					} else {
						break _v3$6;
					}
				case 'Dictionary':
					if (_v3.a.$ === 'Dictionary') {
						var _v6 = _v3.a;
						var isClosed = _v6.a;
						var _v7 = _v3.b;
						var keyValuePairs = _v7.b;
						return A2($elm$browser$Debugger$Expando$Dictionary, isClosed, keyValuePairs);
					} else {
						break _v3$6;
					}
				case 'Record':
					if (_v3.a.$ === 'Record') {
						var _v8 = _v3.a;
						var isClosed = _v8.a;
						var oldDict = _v8.b;
						var _v9 = _v3.b;
						var newDict = _v9.b;
						return A2(
							$elm$browser$Debugger$Expando$Record,
							isClosed,
							A2(
								$elm$core$Dict$map,
								$elm$browser$Debugger$Expando$mergeDictHelp(oldDict),
								newDict));
					} else {
						break _v3$6;
					}
				default:
					if (_v3.a.$ === 'Constructor') {
						var _v10 = _v3.a;
						var isClosed = _v10.b;
						var oldValues = _v10.c;
						var _v11 = _v3.b;
						var maybeName = _v11.a;
						var newValues = _v11.c;
						return A3(
							$elm$browser$Debugger$Expando$Constructor,
							maybeName,
							isClosed,
							A2($elm$browser$Debugger$Expando$mergeListHelp, oldValues, newValues));
					} else {
						break _v3$6;
					}
			}
		}
		return _new;
	});
var $elm$browser$Debugger$Expando$mergeListHelp = F2(
	function (olds, news) {
		var _v0 = _Utils_Tuple2(olds, news);
		if (!_v0.a.b) {
			return news;
		} else {
			if (!_v0.b.b) {
				return news;
			} else {
				var _v1 = _v0.a;
				var x = _v1.a;
				var xs = _v1.b;
				var _v2 = _v0.b;
				var y = _v2.a;
				var ys = _v2.b;
				return A2(
					$elm$core$List$cons,
					A2($elm$browser$Debugger$Expando$mergeHelp, x, y),
					A2($elm$browser$Debugger$Expando$mergeListHelp, xs, ys));
			}
		}
	});
var $elm$browser$Debugger$Expando$merge = F2(
	function (value, expando) {
		return A2(
			$elm$browser$Debugger$Expando$mergeHelp,
			expando,
			_Debugger_init(value));
	});
var $elm$browser$Debugger$Main$jumpUpdate = F3(
	function (update, index, model) {
		var history = $elm$browser$Debugger$Main$cachedHistory(model);
		var currentMsg = $elm$browser$Debugger$History$getRecentMsg(history);
		var currentModel = $elm$browser$Debugger$Main$getLatestModel(model.state);
		var _v0 = A3($elm$browser$Debugger$History$get, update, index, history);
		var indexModel = _v0.a;
		var indexMsg = _v0.b;
		return _Utils_update(
			model,
			{
				expandoModel: A2($elm$browser$Debugger$Expando$merge, indexModel, model.expandoModel),
				expandoMsg: A2($elm$browser$Debugger$Expando$merge, indexMsg, model.expandoMsg),
				state: A5($elm$browser$Debugger$Main$Paused, index, indexModel, currentModel, currentMsg, history)
			});
	});
var $elm$browser$Debugger$History$jsToElm = A2($elm$core$Basics$composeR, _Json_unwrap, _Debugger_unsafeCoerce);
var $elm$browser$Debugger$History$decoder = F2(
	function (initialModel, update) {
		var addMessage = F2(
			function (rawMsg, _v0) {
				var model = _v0.a;
				var history = _v0.b;
				var msg = $elm$browser$Debugger$History$jsToElm(rawMsg);
				return _Utils_Tuple2(
					A2(update, msg, model),
					A3($elm$browser$Debugger$History$add, msg, model, history));
			});
		var updateModel = function (rawMsgs) {
			return A3(
				$elm$core$List$foldl,
				addMessage,
				_Utils_Tuple2(
					initialModel,
					$elm$browser$Debugger$History$empty(initialModel)),
				rawMsgs);
		};
		return A2(
			$elm$json$Json$Decode$map,
			updateModel,
			$elm$json$Json$Decode$list($elm$json$Json$Decode$value));
	});
var $elm$browser$Debugger$History$getInitialModel = function (_v0) {
	var snapshots = _v0.snapshots;
	var recent = _v0.recent;
	var _v1 = A2($elm$core$Array$get, 0, snapshots);
	if (_v1.$ === 'Just') {
		var model = _v1.a.model;
		return model;
	} else {
		return recent.model;
	}
};
var $elm$core$Platform$Cmd$none = $elm$core$Platform$Cmd$batch(_List_Nil);
var $elm$browser$Debugger$Main$loadNewHistory = F3(
	function (rawHistory, update, model) {
		var pureUserUpdate = F2(
			function (msg, userModel) {
				return A2(update, msg, userModel).a;
			});
		var initialUserModel = $elm$browser$Debugger$History$getInitialModel(model.history);
		var decoder = A2($elm$browser$Debugger$History$decoder, initialUserModel, pureUserUpdate);
		var _v0 = A2($elm$json$Json$Decode$decodeValue, decoder, rawHistory);
		if (_v0.$ === 'Err') {
			return _Utils_Tuple2(
				_Utils_update(
					model,
					{overlay: $elm$browser$Debugger$Overlay$corruptImport}),
				$elm$core$Platform$Cmd$none);
		} else {
			var _v1 = _v0.a;
			var latestUserModel = _v1.a;
			var newHistory = _v1.b;
			return _Utils_Tuple2(
				_Utils_update(
					model,
					{
						expandoModel: $elm$browser$Debugger$Expando$init(latestUserModel),
						expandoMsg: $elm$browser$Debugger$Expando$init(
							$elm$browser$Debugger$History$getRecentMsg(newHistory)),
						history: newHistory,
						overlay: $elm$browser$Debugger$Overlay$none,
						state: $elm$browser$Debugger$Main$Running(latestUserModel)
					}),
				$elm$core$Platform$Cmd$none);
		}
	});
var $elm$browser$Debugger$Main$scroll = function (popout) {
	return A2(
		$elm$core$Task$perform,
		$elm$core$Basics$always($elm$browser$Debugger$Main$NoOp),
		_Debugger_scroll(popout));
};
var $elm$browser$Debugger$Main$scrollTo = F2(
	function (id, popout) {
		return A2(
			$elm$core$Task$perform,
			$elm$core$Basics$always($elm$browser$Debugger$Main$NoOp),
			A2(_Debugger_scrollTo, id, popout));
	});
var $elm$browser$Debugger$Main$setDragStatus = F2(
	function (status, layout) {
		if (layout.$ === 'Horizontal') {
			var x = layout.b;
			var y = layout.c;
			return A3($elm$browser$Debugger$Main$Horizontal, status, x, y);
		} else {
			var x = layout.b;
			var y = layout.c;
			return A3($elm$browser$Debugger$Main$Vertical, status, x, y);
		}
	});
var $elm$browser$Debugger$Main$swapLayout = function (layout) {
	if (layout.$ === 'Horizontal') {
		var s = layout.a;
		var x = layout.b;
		var y = layout.c;
		return A3($elm$browser$Debugger$Main$Vertical, s, x, y);
	} else {
		var s = layout.a;
		var x = layout.b;
		var y = layout.c;
		return A3($elm$browser$Debugger$Main$Horizontal, s, x, y);
	}
};
var $elm$core$Dict$getMin = function (dict) {
	getMin:
	while (true) {
		if ((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) {
			var left = dict.d;
			var $temp$dict = left;
			dict = $temp$dict;
			continue getMin;
		} else {
			return dict;
		}
	}
};
var $elm$core$Dict$moveRedLeft = function (dict) {
	if (((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) && (dict.e.$ === 'RBNode_elm_builtin')) {
		if ((dict.e.d.$ === 'RBNode_elm_builtin') && (dict.e.d.a.$ === 'Red')) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var lLeft = _v1.d;
			var lRight = _v1.e;
			var _v2 = dict.e;
			var rClr = _v2.a;
			var rK = _v2.b;
			var rV = _v2.c;
			var rLeft = _v2.d;
			var _v3 = rLeft.a;
			var rlK = rLeft.b;
			var rlV = rLeft.c;
			var rlL = rLeft.d;
			var rlR = rLeft.e;
			var rRight = _v2.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				$elm$core$Dict$Red,
				rlK,
				rlV,
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					rlL),
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, rK, rV, rlR, rRight));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v4 = dict.d;
			var lClr = _v4.a;
			var lK = _v4.b;
			var lV = _v4.c;
			var lLeft = _v4.d;
			var lRight = _v4.e;
			var _v5 = dict.e;
			var rClr = _v5.a;
			var rK = _v5.b;
			var rV = _v5.c;
			var rLeft = _v5.d;
			var rRight = _v5.e;
			if (clr.$ === 'Black') {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$moveRedRight = function (dict) {
	if (((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) && (dict.e.$ === 'RBNode_elm_builtin')) {
		if ((dict.d.d.$ === 'RBNode_elm_builtin') && (dict.d.d.a.$ === 'Red')) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var _v2 = _v1.d;
			var _v3 = _v2.a;
			var llK = _v2.b;
			var llV = _v2.c;
			var llLeft = _v2.d;
			var llRight = _v2.e;
			var lRight = _v1.e;
			var _v4 = dict.e;
			var rClr = _v4.a;
			var rK = _v4.b;
			var rV = _v4.c;
			var rLeft = _v4.d;
			var rRight = _v4.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				$elm$core$Dict$Red,
				lK,
				lV,
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, llK, llV, llLeft, llRight),
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					lRight,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight)));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v5 = dict.d;
			var lClr = _v5.a;
			var lK = _v5.b;
			var lV = _v5.c;
			var lLeft = _v5.d;
			var lRight = _v5.e;
			var _v6 = dict.e;
			var rClr = _v6.a;
			var rK = _v6.b;
			var rV = _v6.c;
			var rLeft = _v6.d;
			var rRight = _v6.e;
			if (clr.$ === 'Black') {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$removeHelpPrepEQGT = F7(
	function (targetKey, dict, color, key, value, left, right) {
		if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) {
			var _v1 = left.a;
			var lK = left.b;
			var lV = left.c;
			var lLeft = left.d;
			var lRight = left.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				lK,
				lV,
				lLeft,
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, lRight, right));
		} else {
			_v2$2:
			while (true) {
				if ((right.$ === 'RBNode_elm_builtin') && (right.a.$ === 'Black')) {
					if (right.d.$ === 'RBNode_elm_builtin') {
						if (right.d.a.$ === 'Black') {
							var _v3 = right.a;
							var _v4 = right.d;
							var _v5 = _v4.a;
							return $elm$core$Dict$moveRedRight(dict);
						} else {
							break _v2$2;
						}
					} else {
						var _v6 = right.a;
						var _v7 = right.d;
						return $elm$core$Dict$moveRedRight(dict);
					}
				} else {
					break _v2$2;
				}
			}
			return dict;
		}
	});
var $elm$core$Dict$removeMin = function (dict) {
	if ((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) {
		var color = dict.a;
		var key = dict.b;
		var value = dict.c;
		var left = dict.d;
		var lColor = left.a;
		var lLeft = left.d;
		var right = dict.e;
		if (lColor.$ === 'Black') {
			if ((lLeft.$ === 'RBNode_elm_builtin') && (lLeft.a.$ === 'Red')) {
				var _v3 = lLeft.a;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					key,
					value,
					$elm$core$Dict$removeMin(left),
					right);
			} else {
				var _v4 = $elm$core$Dict$moveRedLeft(dict);
				if (_v4.$ === 'RBNode_elm_builtin') {
					var nColor = _v4.a;
					var nKey = _v4.b;
					var nValue = _v4.c;
					var nLeft = _v4.d;
					var nRight = _v4.e;
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						$elm$core$Dict$removeMin(nLeft),
						nRight);
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			}
		} else {
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				value,
				$elm$core$Dict$removeMin(left),
				right);
		}
	} else {
		return $elm$core$Dict$RBEmpty_elm_builtin;
	}
};
var $elm$core$Dict$removeHelp = F2(
	function (targetKey, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_cmp(targetKey, key) < 0) {
				if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Black')) {
					var _v4 = left.a;
					var lLeft = left.d;
					if ((lLeft.$ === 'RBNode_elm_builtin') && (lLeft.a.$ === 'Red')) {
						var _v6 = lLeft.a;
						return A5(
							$elm$core$Dict$RBNode_elm_builtin,
							color,
							key,
							value,
							A2($elm$core$Dict$removeHelp, targetKey, left),
							right);
					} else {
						var _v7 = $elm$core$Dict$moveRedLeft(dict);
						if (_v7.$ === 'RBNode_elm_builtin') {
							var nColor = _v7.a;
							var nKey = _v7.b;
							var nValue = _v7.c;
							var nLeft = _v7.d;
							var nRight = _v7.e;
							return A5(
								$elm$core$Dict$balance,
								nColor,
								nKey,
								nValue,
								A2($elm$core$Dict$removeHelp, targetKey, nLeft),
								nRight);
						} else {
							return $elm$core$Dict$RBEmpty_elm_builtin;
						}
					}
				} else {
					return A5(
						$elm$core$Dict$RBNode_elm_builtin,
						color,
						key,
						value,
						A2($elm$core$Dict$removeHelp, targetKey, left),
						right);
				}
			} else {
				return A2(
					$elm$core$Dict$removeHelpEQGT,
					targetKey,
					A7($elm$core$Dict$removeHelpPrepEQGT, targetKey, dict, color, key, value, left, right));
			}
		}
	});
var $elm$core$Dict$removeHelpEQGT = F2(
	function (targetKey, dict) {
		if (dict.$ === 'RBNode_elm_builtin') {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_eq(targetKey, key)) {
				var _v1 = $elm$core$Dict$getMin(right);
				if (_v1.$ === 'RBNode_elm_builtin') {
					var minKey = _v1.b;
					var minValue = _v1.c;
					return A5(
						$elm$core$Dict$balance,
						color,
						minKey,
						minValue,
						left,
						$elm$core$Dict$removeMin(right));
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			} else {
				return A5(
					$elm$core$Dict$balance,
					color,
					key,
					value,
					left,
					A2($elm$core$Dict$removeHelp, targetKey, right));
			}
		} else {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		}
	});
var $elm$core$Dict$remove = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$removeHelp, key, dict);
		if ((_v0.$ === 'RBNode_elm_builtin') && (_v0.a.$ === 'Red')) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$core$Dict$update = F3(
	function (targetKey, alter, dictionary) {
		var _v0 = alter(
			A2($elm$core$Dict$get, targetKey, dictionary));
		if (_v0.$ === 'Just') {
			var value = _v0.a;
			return A3($elm$core$Dict$insert, targetKey, value, dictionary);
		} else {
			return A2($elm$core$Dict$remove, targetKey, dictionary);
		}
	});
var $elm$browser$Debugger$Expando$updateIndex = F3(
	function (n, func, list) {
		if (!list.b) {
			return _List_Nil;
		} else {
			var x = list.a;
			var xs = list.b;
			return (n <= 0) ? A2(
				$elm$core$List$cons,
				func(x),
				xs) : A2(
				$elm$core$List$cons,
				x,
				A3($elm$browser$Debugger$Expando$updateIndex, n - 1, func, xs));
		}
	});
var $elm$browser$Debugger$Expando$update = F2(
	function (msg, value) {
		switch (value.$) {
			case 'S':
				return value;
			case 'Primitive':
				return value;
			case 'Sequence':
				var seqType = value.a;
				var isClosed = value.b;
				var valueList = value.c;
				switch (msg.$) {
					case 'Toggle':
						return A3($elm$browser$Debugger$Expando$Sequence, seqType, !isClosed, valueList);
					case 'Index':
						if (msg.a.$ === 'None') {
							var _v3 = msg.a;
							var index = msg.b;
							var subMsg = msg.c;
							return A3(
								$elm$browser$Debugger$Expando$Sequence,
								seqType,
								isClosed,
								A3(
									$elm$browser$Debugger$Expando$updateIndex,
									index,
									$elm$browser$Debugger$Expando$update(subMsg),
									valueList));
						} else {
							return value;
						}
					default:
						return value;
				}
			case 'Dictionary':
				var isClosed = value.a;
				var keyValuePairs = value.b;
				switch (msg.$) {
					case 'Toggle':
						return A2($elm$browser$Debugger$Expando$Dictionary, !isClosed, keyValuePairs);
					case 'Index':
						var redirect = msg.a;
						var index = msg.b;
						var subMsg = msg.c;
						switch (redirect.$) {
							case 'None':
								return value;
							case 'Key':
								return A2(
									$elm$browser$Debugger$Expando$Dictionary,
									isClosed,
									A3(
										$elm$browser$Debugger$Expando$updateIndex,
										index,
										function (_v6) {
											var k = _v6.a;
											var v = _v6.b;
											return _Utils_Tuple2(
												A2($elm$browser$Debugger$Expando$update, subMsg, k),
												v);
										},
										keyValuePairs));
							default:
								return A2(
									$elm$browser$Debugger$Expando$Dictionary,
									isClosed,
									A3(
										$elm$browser$Debugger$Expando$updateIndex,
										index,
										function (_v7) {
											var k = _v7.a;
											var v = _v7.b;
											return _Utils_Tuple2(
												k,
												A2($elm$browser$Debugger$Expando$update, subMsg, v));
										},
										keyValuePairs));
						}
					default:
						return value;
				}
			case 'Record':
				var isClosed = value.a;
				var valueDict = value.b;
				switch (msg.$) {
					case 'Toggle':
						return A2($elm$browser$Debugger$Expando$Record, !isClosed, valueDict);
					case 'Index':
						return value;
					default:
						var field = msg.a;
						var subMsg = msg.b;
						return A2(
							$elm$browser$Debugger$Expando$Record,
							isClosed,
							A3(
								$elm$core$Dict$update,
								field,
								$elm$browser$Debugger$Expando$updateField(subMsg),
								valueDict));
				}
			default:
				var maybeName = value.a;
				var isClosed = value.b;
				var valueList = value.c;
				switch (msg.$) {
					case 'Toggle':
						return A3($elm$browser$Debugger$Expando$Constructor, maybeName, !isClosed, valueList);
					case 'Index':
						if (msg.a.$ === 'None') {
							var _v10 = msg.a;
							var index = msg.b;
							var subMsg = msg.c;
							return A3(
								$elm$browser$Debugger$Expando$Constructor,
								maybeName,
								isClosed,
								A3(
									$elm$browser$Debugger$Expando$updateIndex,
									index,
									$elm$browser$Debugger$Expando$update(subMsg),
									valueList));
						} else {
							return value;
						}
					default:
						return value;
				}
		}
	});
var $elm$browser$Debugger$Expando$updateField = F2(
	function (msg, maybeExpando) {
		if (maybeExpando.$ === 'Nothing') {
			return maybeExpando;
		} else {
			var expando = maybeExpando.a;
			return $elm$core$Maybe$Just(
				A2($elm$browser$Debugger$Expando$update, msg, expando));
		}
	});
var $elm$browser$Debugger$Main$Upload = function (a) {
	return {$: 'Upload', a: a};
};
var $elm$browser$Debugger$Main$upload = function (popout) {
	return A2(
		$elm$core$Task$perform,
		$elm$browser$Debugger$Main$Upload,
		_Debugger_upload(popout));
};
var $elm$browser$Debugger$Overlay$BadMetadata = function (a) {
	return {$: 'BadMetadata', a: a};
};
var $elm$browser$Debugger$Overlay$badMetadata = $elm$browser$Debugger$Overlay$BadMetadata;
var $elm$browser$Debugger$Main$withGoodMetadata = F2(
	function (model, func) {
		var _v0 = model.metadata;
		if (_v0.$ === 'Ok') {
			var metadata = _v0.a;
			return func(metadata);
		} else {
			var error = _v0.a;
			return _Utils_Tuple2(
				_Utils_update(
					model,
					{
						overlay: $elm$browser$Debugger$Overlay$badMetadata(error)
					}),
				$elm$core$Platform$Cmd$none);
		}
	});
var $elm$browser$Debugger$Main$wrapUpdate = F3(
	function (update, msg, model) {
		wrapUpdate:
		while (true) {
			switch (msg.$) {
				case 'NoOp':
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				case 'UserMsg':
					var userMsg = msg.a;
					var userModel = $elm$browser$Debugger$Main$getLatestModel(model.state);
					var newHistory = A3($elm$browser$Debugger$History$add, userMsg, userModel, model.history);
					var _v1 = A2(update, userMsg, userModel);
					var newUserModel = _v1.a;
					var userCmds = _v1.b;
					var commands = A2($elm$core$Platform$Cmd$map, $elm$browser$Debugger$Main$UserMsg, userCmds);
					var _v2 = model.state;
					if (_v2.$ === 'Running') {
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									expandoModel: A2($elm$browser$Debugger$Expando$merge, newUserModel, model.expandoModel),
									expandoMsg: A2($elm$browser$Debugger$Expando$merge, userMsg, model.expandoMsg),
									history: newHistory,
									state: $elm$browser$Debugger$Main$Running(newUserModel)
								}),
							$elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										commands,
										$elm$browser$Debugger$Main$scroll(model.popout)
									])));
					} else {
						var index = _v2.a;
						var indexModel = _v2.b;
						var history = _v2.e;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									history: newHistory,
									state: A5($elm$browser$Debugger$Main$Paused, index, indexModel, newUserModel, userMsg, history)
								}),
							commands);
					}
				case 'TweakExpandoMsg':
					var eMsg = msg.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								expandoMsg: A2($elm$browser$Debugger$Expando$update, eMsg, model.expandoMsg)
							}),
						$elm$core$Platform$Cmd$none);
				case 'TweakExpandoModel':
					var eMsg = msg.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								expandoModel: A2($elm$browser$Debugger$Expando$update, eMsg, model.expandoModel)
							}),
						$elm$core$Platform$Cmd$none);
				case 'Resume':
					var _v3 = model.state;
					if (_v3.$ === 'Running') {
						return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
					} else {
						var userModel = _v3.c;
						var userMsg = _v3.d;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									expandoModel: A2($elm$browser$Debugger$Expando$merge, userModel, model.expandoModel),
									expandoMsg: A2($elm$browser$Debugger$Expando$merge, userMsg, model.expandoMsg),
									state: $elm$browser$Debugger$Main$Running(userModel)
								}),
							$elm$browser$Debugger$Main$scroll(model.popout));
					}
				case 'Jump':
					var index = msg.a;
					return _Utils_Tuple2(
						A3($elm$browser$Debugger$Main$jumpUpdate, update, index, model),
						$elm$core$Platform$Cmd$none);
				case 'SliderJump':
					var index = msg.a;
					return _Utils_Tuple2(
						A3($elm$browser$Debugger$Main$jumpUpdate, update, index, model),
						A2(
							$elm$browser$Debugger$Main$scrollTo,
							$elm$browser$Debugger$History$idForMessageIndex(index),
							model.popout));
				case 'Open':
					return _Utils_Tuple2(
						model,
						A2(
							$elm$core$Task$perform,
							$elm$core$Basics$always($elm$browser$Debugger$Main$NoOp),
							_Debugger_open(model.popout)));
				case 'Up':
					var _v4 = model.state;
					if (_v4.$ === 'Running') {
						return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
					} else {
						var i = _v4.a;
						var history = _v4.e;
						var targetIndex = i + 1;
						if (_Utils_cmp(
							targetIndex,
							$elm$browser$Debugger$History$size(history)) < 0) {
							var $temp$update = update,
								$temp$msg = $elm$browser$Debugger$Main$SliderJump(targetIndex),
								$temp$model = model;
							update = $temp$update;
							msg = $temp$msg;
							model = $temp$model;
							continue wrapUpdate;
						} else {
							var $temp$update = update,
								$temp$msg = $elm$browser$Debugger$Main$Resume,
								$temp$model = model;
							update = $temp$update;
							msg = $temp$msg;
							model = $temp$model;
							continue wrapUpdate;
						}
					}
				case 'Down':
					var _v5 = model.state;
					if (_v5.$ === 'Running') {
						var $temp$update = update,
							$temp$msg = $elm$browser$Debugger$Main$Jump(
							$elm$browser$Debugger$History$size(model.history) - 1),
							$temp$model = model;
						update = $temp$update;
						msg = $temp$msg;
						model = $temp$model;
						continue wrapUpdate;
					} else {
						var index = _v5.a;
						if (index > 0) {
							var $temp$update = update,
								$temp$msg = $elm$browser$Debugger$Main$SliderJump(index - 1),
								$temp$model = model;
							update = $temp$update;
							msg = $temp$msg;
							model = $temp$model;
							continue wrapUpdate;
						} else {
							return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
						}
					}
				case 'Import':
					return A2(
						$elm$browser$Debugger$Main$withGoodMetadata,
						model,
						function (_v6) {
							return _Utils_Tuple2(
								model,
								$elm$browser$Debugger$Main$upload(model.popout));
						});
				case 'Export':
					return A2(
						$elm$browser$Debugger$Main$withGoodMetadata,
						model,
						function (metadata) {
							return _Utils_Tuple2(
								model,
								A2($elm$browser$Debugger$Main$download, metadata, model.history));
						});
				case 'Upload':
					var jsonString = msg.a;
					return A2(
						$elm$browser$Debugger$Main$withGoodMetadata,
						model,
						function (metadata) {
							var _v7 = A2($elm$browser$Debugger$Overlay$assessImport, metadata, jsonString);
							if (_v7.$ === 'Err') {
								var newOverlay = _v7.a;
								return _Utils_Tuple2(
									_Utils_update(
										model,
										{overlay: newOverlay}),
									$elm$core$Platform$Cmd$none);
							} else {
								var rawHistory = _v7.a;
								return A3($elm$browser$Debugger$Main$loadNewHistory, rawHistory, update, model);
							}
						});
				case 'OverlayMsg':
					var overlayMsg = msg.a;
					var _v8 = A2($elm$browser$Debugger$Overlay$close, overlayMsg, model.overlay);
					if (_v8.$ === 'Nothing') {
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{overlay: $elm$browser$Debugger$Overlay$none}),
							$elm$core$Platform$Cmd$none);
					} else {
						var rawHistory = _v8.a;
						return A3($elm$browser$Debugger$Main$loadNewHistory, rawHistory, update, model);
					}
				case 'SwapLayout':
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								layout: $elm$browser$Debugger$Main$swapLayout(model.layout)
							}),
						$elm$core$Platform$Cmd$none);
				case 'DragStart':
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								layout: A2($elm$browser$Debugger$Main$setDragStatus, $elm$browser$Debugger$Main$Moving, model.layout)
							}),
						$elm$core$Platform$Cmd$none);
				case 'Drag':
					var info = msg.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								layout: A2($elm$browser$Debugger$Main$drag, info, model.layout)
							}),
						$elm$core$Platform$Cmd$none);
				default:
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								layout: A2($elm$browser$Debugger$Main$setDragStatus, $elm$browser$Debugger$Main$Static, model.layout)
							}),
						$elm$core$Platform$Cmd$none);
			}
		}
	});
var $elm$browser$Browser$External = function (a) {
	return {$: 'External', a: a};
};
var $elm$browser$Browser$Internal = function (a) {
	return {$: 'Internal', a: a};
};
var $elm$browser$Browser$Dom$NotFound = function (a) {
	return {$: 'NotFound', a: a};
};
var $elm$url$Url$Http = {$: 'Http'};
var $elm$url$Url$Https = {$: 'Https'};
var $elm$url$Url$Url = F6(
	function (protocol, host, port_, path, query, fragment) {
		return {fragment: fragment, host: host, path: path, port_: port_, protocol: protocol, query: query};
	});
var $elm$core$String$dropLeft = F2(
	function (n, string) {
		return (n < 1) ? string : A3(
			$elm$core$String$slice,
			n,
			$elm$core$String$length(string),
			string);
	});
var $elm$core$String$indexes = _String_indexes;
var $elm$core$String$isEmpty = function (string) {
	return string === '';
};
var $elm$url$Url$chompBeforePath = F5(
	function (protocol, path, params, frag, str) {
		if ($elm$core$String$isEmpty(str) || A2($elm$core$String$contains, '@', str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, ':', str);
			if (!_v0.b) {
				return $elm$core$Maybe$Just(
					A6($elm$url$Url$Url, protocol, str, $elm$core$Maybe$Nothing, path, params, frag));
			} else {
				if (!_v0.b.b) {
					var i = _v0.a;
					var _v1 = $elm$core$String$toInt(
						A2($elm$core$String$dropLeft, i + 1, str));
					if (_v1.$ === 'Nothing') {
						return $elm$core$Maybe$Nothing;
					} else {
						var port_ = _v1;
						return $elm$core$Maybe$Just(
							A6(
								$elm$url$Url$Url,
								protocol,
								A2($elm$core$String$left, i, str),
								port_,
								path,
								params,
								frag));
					}
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}
		}
	});
var $elm$url$Url$chompBeforeQuery = F4(
	function (protocol, params, frag, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '/', str);
			if (!_v0.b) {
				return A5($elm$url$Url$chompBeforePath, protocol, '/', params, frag, str);
			} else {
				var i = _v0.a;
				return A5(
					$elm$url$Url$chompBeforePath,
					protocol,
					A2($elm$core$String$dropLeft, i, str),
					params,
					frag,
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$url$Url$chompBeforeFragment = F3(
	function (protocol, frag, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '?', str);
			if (!_v0.b) {
				return A4($elm$url$Url$chompBeforeQuery, protocol, $elm$core$Maybe$Nothing, frag, str);
			} else {
				var i = _v0.a;
				return A4(
					$elm$url$Url$chompBeforeQuery,
					protocol,
					$elm$core$Maybe$Just(
						A2($elm$core$String$dropLeft, i + 1, str)),
					frag,
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$url$Url$chompAfterProtocol = F2(
	function (protocol, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '#', str);
			if (!_v0.b) {
				return A3($elm$url$Url$chompBeforeFragment, protocol, $elm$core$Maybe$Nothing, str);
			} else {
				var i = _v0.a;
				return A3(
					$elm$url$Url$chompBeforeFragment,
					protocol,
					$elm$core$Maybe$Just(
						A2($elm$core$String$dropLeft, i + 1, str)),
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$core$String$startsWith = _String_startsWith;
var $elm$url$Url$fromString = function (str) {
	return A2($elm$core$String$startsWith, 'http://', str) ? A2(
		$elm$url$Url$chompAfterProtocol,
		$elm$url$Url$Http,
		A2($elm$core$String$dropLeft, 7, str)) : (A2($elm$core$String$startsWith, 'https://', str) ? A2(
		$elm$url$Url$chompAfterProtocol,
		$elm$url$Url$Https,
		A2($elm$core$String$dropLeft, 8, str)) : $elm$core$Maybe$Nothing);
};
var $elm$core$Basics$never = function (_v0) {
	never:
	while (true) {
		var nvr = _v0.a;
		var $temp$_v0 = nvr;
		_v0 = $temp$_v0;
		continue never;
	}
};
var $elm$browser$Browser$element = _Browser_element;
var $author$project$Main$Top = {$: 'Top'};
var $rakutentech$r10$R10$FormTypes$NoIcon = {$: 'NoIcon'};
var $rakutentech$r10$R10$FormTypes$TextMultiline = {$: 'TextMultiline'};
var $rakutentech$r10$R10$FormTypes$TextPlain = {$: 'TextPlain'};
var $rakutentech$r10$R10$FormTypes$TypeText = function (a) {
	return {$: 'TypeText', a: a};
};
var $rakutentech$r10$R10$Form$Internal$Conf$EntityField = function (a) {
	return {$: 'EntityField', a: a};
};
var $rakutentech$r10$R10$Form$Internal$Conf$EntityMulti = F2(
	function (a, b) {
		return {$: 'EntityMulti', a: a, b: b};
	});
var $rakutentech$r10$R10$Form$Internal$Conf$EntityNormal = F2(
	function (a, b) {
		return {$: 'EntityNormal', a: a, b: b};
	});
var $rakutentech$r10$R10$Form$Internal$Conf$EntitySubTitle = F2(
	function (a, b) {
		return {$: 'EntitySubTitle', a: a, b: b};
	});
var $rakutentech$r10$R10$Form$Internal$Conf$EntityTitle = F2(
	function (a, b) {
		return {$: 'EntityTitle', a: a, b: b};
	});
var $rakutentech$r10$R10$Form$Internal$Conf$EntityWithBorder = F2(
	function (a, b) {
		return {$: 'EntityWithBorder', a: a, b: b};
	});
var $rakutentech$r10$R10$Form$Internal$Conf$EntityWithTabs = F2(
	function (a, b) {
		return {$: 'EntityWithTabs', a: a, b: b};
	});
var $rakutentech$r10$R10$Form$Internal$Conf$EntityWrappable = F2(
	function (a, b) {
		return {$: 'EntityWrappable', a: a, b: b};
	});
var $rakutentech$r10$R10$Form$entity = {field: $rakutentech$r10$R10$Form$Internal$Conf$EntityField, multi: $rakutentech$r10$R10$Form$Internal$Conf$EntityMulti, normal: $rakutentech$r10$R10$Form$Internal$Conf$EntityNormal, subTitle: $rakutentech$r10$R10$Form$Internal$Conf$EntitySubTitle, title: $rakutentech$r10$R10$Form$Internal$Conf$EntityTitle, withBorder: $rakutentech$r10$R10$Form$Internal$Conf$EntityWithBorder, withTabs: $rakutentech$r10$R10$Form$Internal$Conf$EntityWithTabs, wrappable: $rakutentech$r10$R10$Form$Internal$Conf$EntityWrappable};
var $elm$core$Set$Set_elm_builtin = function (a) {
	return {$: 'Set_elm_builtin', a: a};
};
var $elm$core$Set$empty = $elm$core$Set$Set_elm_builtin($elm$core$Dict$empty);
var $rakutentech$r10$R10$Form$Internal$QtySubmitAttempted$QtySubmitAttempted = function (a) {
	return {$: 'QtySubmitAttempted', a: a};
};
var $rakutentech$r10$R10$Form$Internal$QtySubmitAttempted$fromInt = function (_int) {
	return $rakutentech$r10$R10$Form$Internal$QtySubmitAttempted$QtySubmitAttempted(_int);
};
var $rakutentech$r10$R10$Form$Internal$State$init = {
	active: $elm$core$Maybe$Nothing,
	activeTabs: $elm$core$Dict$empty,
	changesSinceLastSubmissions: false,
	fieldsState: $elm$core$Dict$empty,
	focused: $elm$core$Maybe$Nothing,
	multiplicableQuantities: $elm$core$Dict$empty,
	qtySubmitAttempted: $rakutentech$r10$R10$Form$Internal$QtySubmitAttempted$fromInt(0),
	removed: $elm$core$Set$empty
};
var $rakutentech$r10$R10$Form$initState = $rakutentech$r10$R10$Form$Internal$State$init;
var $rakutentech$r10$R10$Form$Internal$FieldConf$AllOf = function (a) {
	return {$: 'AllOf', a: a};
};
var $rakutentech$r10$R10$Form$Internal$FieldConf$Dependant = F2(
	function (a, b) {
		return {$: 'Dependant', a: a, b: b};
	});
var $rakutentech$r10$R10$Form$Internal$FieldConf$Empty = {$: 'Empty'};
var $rakutentech$r10$R10$Form$Internal$FieldConf$Equal = function (a) {
	return {$: 'Equal', a: a};
};
var $rakutentech$r10$R10$Form$Internal$FieldConf$MaxLength = function (a) {
	return {$: 'MaxLength', a: a};
};
var $rakutentech$r10$R10$Form$Internal$FieldConf$MinLength = function (a) {
	return {$: 'MinLength', a: a};
};
var $rakutentech$r10$R10$Form$Internal$FieldConf$NoValidation = {$: 'NoValidation'};
var $rakutentech$r10$R10$Form$Internal$FieldConf$Not = function (a) {
	return {$: 'Not', a: a};
};
var $rakutentech$r10$R10$Form$Internal$FieldConf$OneOf = function (a) {
	return {$: 'OneOf', a: a};
};
var $rakutentech$r10$R10$Form$Internal$FieldConf$Regex = function (a) {
	return {$: 'Regex', a: a};
};
var $rakutentech$r10$R10$Form$Internal$FieldConf$Required = {$: 'Required'};
var $rakutentech$r10$R10$Form$Internal$FieldConf$WithMsg = F2(
	function (a, b) {
		return {$: 'WithMsg', a: a, b: b};
	});
var $rakutentech$r10$R10$Form$validation = {allOf: $rakutentech$r10$R10$Form$Internal$FieldConf$AllOf, dependant: $rakutentech$r10$R10$Form$Internal$FieldConf$Dependant, empty: $rakutentech$r10$R10$Form$Internal$FieldConf$Empty, equal: $rakutentech$r10$R10$Form$Internal$FieldConf$Equal, maxLength: $rakutentech$r10$R10$Form$Internal$FieldConf$MaxLength, minLength: $rakutentech$r10$R10$Form$Internal$FieldConf$MinLength, noValidation: $rakutentech$r10$R10$Form$Internal$FieldConf$NoValidation, not: $rakutentech$r10$R10$Form$Internal$FieldConf$Not, oneOf: $rakutentech$r10$R10$Form$Internal$FieldConf$OneOf, regex: $rakutentech$r10$R10$Form$Internal$FieldConf$Regex, required: $rakutentech$r10$R10$Form$Internal$FieldConf$Required, withMsg: $rakutentech$r10$R10$Form$Internal$FieldConf$WithMsg};
var $author$project$Main$initForm = {
	conf: _List_fromArray(
		[
			$rakutentech$r10$R10$Form$entity.field(
			{
				autocomplete: $elm$core$Maybe$Nothing,
				clickableLabel: false,
				helperText: $elm$core$Maybe$Just('A number to identify the exercise. Number from 1 to 99 are reserved for [blah](https://example.com)'),
				id: 'id',
				idDom: $elm$core$Maybe$Nothing,
				label: 'ID',
				maxWidth: $elm$core$Maybe$Nothing,
				minWidth: $elm$core$Maybe$Nothing,
				requiredLabel: $elm$core$Maybe$Just('(Required)'),
				type_: $rakutentech$r10$R10$FormTypes$TypeText($rakutentech$r10$R10$FormTypes$TextPlain),
				validationSpecs: $elm$core$Maybe$Just(
					{
						pretendIsNotValidatedIfValid: true,
						showAlsoPassedValidation: false,
						validation: _List_fromArray(
							[$rakutentech$r10$R10$Form$validation.required]),
						validationIcon: $rakutentech$r10$R10$FormTypes$NoIcon
					})
			}),
			$rakutentech$r10$R10$Form$entity.field(
			{
				autocomplete: $elm$core$Maybe$Nothing,
				clickableLabel: false,
				helperText: $elm$core$Maybe$Just('The title of the exercise'),
				id: 'title',
				idDom: $elm$core$Maybe$Nothing,
				label: 'Title',
				maxWidth: $elm$core$Maybe$Nothing,
				minWidth: $elm$core$Maybe$Nothing,
				requiredLabel: $elm$core$Maybe$Just('(Required)'),
				type_: $rakutentech$r10$R10$FormTypes$TypeText($rakutentech$r10$R10$FormTypes$TextPlain),
				validationSpecs: $elm$core$Maybe$Just(
					{
						pretendIsNotValidatedIfValid: true,
						showAlsoPassedValidation: false,
						validation: _List_fromArray(
							[$rakutentech$r10$R10$Form$validation.required]),
						validationIcon: $rakutentech$r10$R10$FormTypes$NoIcon
					})
			}),
			$rakutentech$r10$R10$Form$entity.field(
			{
				autocomplete: $elm$core$Maybe$Nothing,
				clickableLabel: false,
				helperText: $elm$core$Maybe$Nothing,
				id: 'problem',
				idDom: $elm$core$Maybe$Nothing,
				label: 'Problem',
				maxWidth: $elm$core$Maybe$Nothing,
				minWidth: $elm$core$Maybe$Nothing,
				requiredLabel: $elm$core$Maybe$Just('(Required)'),
				type_: $rakutentech$r10$R10$FormTypes$TypeText($rakutentech$r10$R10$FormTypes$TextMultiline),
				validationSpecs: $elm$core$Maybe$Nothing
			})
		]),
	state: $rakutentech$r10$R10$Form$initState
};
var $author$project$Main$init = function (model) {
	return _Utils_Tuple2(
		{form: $author$project$Main$initForm, page: $author$project$Main$Top},
		$elm$core$Platform$Cmd$none);
};
var $elm$core$Platform$Sub$batch = _Platform_batch;
var $elm$core$Platform$Sub$none = $elm$core$Platform$Sub$batch(_List_Nil);
var $author$project$Main$ViewExercise = F2(
	function (a, b) {
		return {$: 'ViewExercise', a: a, b: b};
	});
var $author$project$Main$portLocalStoragePop = _Platform_incomingPort('portLocalStoragePop', $elm$json$Json$Decode$string);
var $author$project$Main$portLocalStoragePush = _Platform_outgoingPort('portLocalStoragePush', $elm$json$Json$Encode$string);
var $author$project$Main$onlyTests = function (qty) {
	return {
		init: _Utils_Tuple2(_Utils_Tuple0, $elm$core$Platform$Cmd$none),
		maybeView: $elm$core$Maybe$Nothing,
		portLocalStoragePop: $author$project$Main$portLocalStoragePop,
		portLocalStoragePush: $author$project$Main$portLocalStoragePush,
		subscriptions: function (_v0) {
			return $elm$core$Platform$Sub$none;
		},
		tests: function (_v1) {
			return _List_Nil;
		},
		update: F2(
			function (_v2, _v3) {
				return _Utils_Tuple2(_Utils_Tuple0, $elm$core$Platform$Cmd$none);
			})
	};
};
var $author$project$Exercises$andThen = F3(
	function (updater, msg, _v0) {
		var model = _v0.a;
		var cmd = _v0.b;
		var _v1 = A2(updater, msg, model);
		var modelNew = _v1.a;
		var cmdNew = _v1.b;
		return _Utils_Tuple2(
			modelNew,
			$elm$core$Platform$Cmd$batch(
				_List_fromArray(
					[cmd, cmdNew])));
	});
var $author$project$Internal$Data$PortLocalStoragePush = function (a) {
	return {$: 'PortLocalStoragePush', a: a};
};
var $elm$time$Time$Name = function (a) {
	return {$: 'Name', a: a};
};
var $elm$time$Time$Offset = function (a) {
	return {$: 'Offset', a: a};
};
var $elm$time$Time$Zone = F2(
	function (a, b) {
		return {$: 'Zone', a: a, b: b};
	});
var $elm$time$Time$customZone = $elm$time$Time$Zone;
var $elm$time$Time$Posix = function (a) {
	return {$: 'Posix', a: a};
};
var $elm$time$Time$millisToPosix = $elm$time$Time$Posix;
var $elm$time$Time$now = _Time_now($elm$time$Time$millisToPosix);
var $elm$core$List$filter = F2(
	function (isGood, list) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, xs) {
					return isGood(x) ? A2($elm$core$List$cons, x, xs) : xs;
				}),
			_List_Nil,
			list);
	});
var $author$project$Internal$Data$toLocalStorageRecord = F4(
	function (posix, tea, model, localStorageRecord) {
		var _v0 = localStorageRecord.solved;
		if (_v0.$ === 'Just') {
			return _Utils_update(
				localStorageRecord,
				{lastSeen: posix});
		} else {
			var testsTotal = $elm$core$List$length(
				tea.tests(model.modelExercise));
			var testsPassed = $elm$core$List$length(
				A2(
					$elm$core$List$filter,
					$elm$core$Basics$eq($elm$core$Maybe$Nothing),
					model.failureReasons));
			return _Utils_update(
				localStorageRecord,
				{
					firstSeen: _Utils_eq(
						localStorageRecord.firstSeen,
						$elm$time$Time$millisToPosix(0)) ? posix : localStorageRecord.firstSeen,
					lastSeen: posix,
					solved: _Utils_eq(testsTotal, testsPassed) ? $elm$core$Maybe$Just(posix) : $elm$core$Maybe$Nothing,
					testsPassed: testsPassed,
					testsTotal: testsTotal
				});
		}
	});
var $author$project$Internal$Data$toLocalStorage = F3(
	function (posix, tea, model) {
		var newLocalStorageRecord = A4($author$project$Internal$Data$toLocalStorageRecord, posix, tea, model, model.localStorageRecord);
		return A3($elm$core$Dict$insert, model.exerciseData.id, newLocalStorageRecord, model.localStorage);
	});
var $author$project$Exercises$saveLocalStorage = F2(
	function (tea, model) {
		return A2(
			$elm$core$Task$perform,
			$author$project$Internal$Data$PortLocalStoragePush,
			A2(
				$elm$core$Task$andThen,
				function (posix) {
					return $elm$core$Task$succeed(
						A3($author$project$Internal$Data$toLocalStorage, posix, tea, model));
				},
				$elm$time$Time$now));
	});
var $author$project$Exercises$updateLocalStorage = F3(
	function (tea, msg, model) {
		return _Utils_Tuple2(
			model,
			function () {
				switch (msg.$) {
					case 'PortLocalStoragePop':
						return $elm$core$Platform$Cmd$none;
					case 'PortLocalStoragePush':
						return $elm$core$Platform$Cmd$none;
					case 'UpdatePosix':
						return $elm$core$Platform$Cmd$none;
					case 'MenuOver':
						return $elm$core$Platform$Cmd$none;
					default:
						return A2($author$project$Exercises$saveLocalStorage, tea, model);
				}
			}());
	});
var $author$project$Internal$Data$MsgTEA = function (a) {
	return {$: 'MsgTEA', a: a};
};
var $author$project$Internal$Data$Show = function (a) {
	return {$: 'Show', a: a};
};
var $author$project$Internal$Data$ShowAll = {$: 'ShowAll'};
var $author$project$Internal$Data$ShowNone = {$: 'ShowNone'};
var $author$project$Exercises$changeHints = F2(
	function (model, newHints) {
		var localStorageRecord = model.localStorageRecord;
		return _Utils_Tuple2(
			_Utils_update(
				model,
				{
					localStorageRecord: _Utils_update(
						localStorageRecord,
						{hints: newHints})
				}),
			$elm$core$Platform$Cmd$none);
	});
var $author$project$Exercises$changeLocalStorage = F2(
	function (model, newLocalStorageRecord) {
		var localStorageRecord = model.localStorageRecord;
		return _Utils_Tuple2(
			_Utils_update(
				model,
				{
					localStorageRecord: newLocalStorageRecord(localStorageRecord)
				}),
			$elm$core$Platform$Cmd$none);
	});
var $author$project$Exercises$changeSolutions = F2(
	function (model, newSolutions) {
		var localStorageRecord = model.localStorageRecord;
		return _Utils_Tuple2(
			_Utils_update(
				model,
				{
					localStorageRecord: _Utils_update(
						localStorageRecord,
						{solutions: newSolutions})
				}),
			$elm$core$Platform$Cmd$none);
	});
var $author$project$Internal$Data$LocalStorageRecord = F9(
	function (hints, solutions, menuOpen, menuContent, firstSeen, lastSeen, solved, testsTotal, testsPassed) {
		return {firstSeen: firstSeen, hints: hints, lastSeen: lastSeen, menuContent: menuContent, menuOpen: menuOpen, solutions: solutions, solved: solved, testsPassed: testsPassed, testsTotal: testsTotal};
	});
var $elm$json$Json$Decode$bool = _Json_decodeBool;
var $elm$json$Json$Encode$bool = _Json_wrap;
var $miniBill$elm_codec$Codec$Codec = function (a) {
	return {$: 'Codec', a: a};
};
var $miniBill$elm_codec$Codec$build = F2(
	function (encoder_, decoder_) {
		return $miniBill$elm_codec$Codec$Codec(
			{decoder: decoder_, encoder: encoder_});
	});
var $miniBill$elm_codec$Codec$bool = A2($miniBill$elm_codec$Codec$build, $elm$json$Json$Encode$bool, $elm$json$Json$Decode$bool);
var $miniBill$elm_codec$Codec$buildObject = function (_v0) {
	var om = _v0.a;
	return $miniBill$elm_codec$Codec$Codec(
		{
			decoder: om.decoder,
			encoder: function (v) {
				return $elm$json$Json$Encode$object(
					om.encoder(v));
			}
		});
};
var $miniBill$elm_codec$Codec$decoder = function (_v0) {
	var m = _v0.a;
	return m.decoder;
};
var $miniBill$elm_codec$Codec$encoder = function (_v0) {
	var m = _v0.a;
	return m.encoder;
};
var $miniBill$elm_codec$Codec$map = F3(
	function (go, back, codec) {
		return $miniBill$elm_codec$Codec$Codec(
			{
				decoder: A2(
					$elm$json$Json$Decode$map,
					go,
					$miniBill$elm_codec$Codec$decoder(codec)),
				encoder: function (v) {
					return A2(
						$miniBill$elm_codec$Codec$encoder,
						codec,
						back(v));
				}
			});
	});
var $author$project$Internal$Data$menuContentToString = function (menuContent) {
	switch (menuContent.$) {
		case 'ContentHints':
			return 'ContentHints';
		case 'ContentSolutions':
			return 'ContentSolutions';
		case 'ContentHistory':
			return 'ContentHistory';
		case 'ContentOtherExercises':
			return 'ContentOtherExercises';
		case 'ContentHelp':
			return 'ContentHelp';
		default:
			return 'ContentContribute';
	}
};
var $miniBill$elm_codec$Codec$string = A2($miniBill$elm_codec$Codec$build, $elm$json$Json$Encode$string, $elm$json$Json$Decode$string);
var $author$project$Internal$Data$ContentContribute = {$: 'ContentContribute'};
var $author$project$Internal$Data$ContentHelp = {$: 'ContentHelp'};
var $author$project$Internal$Data$ContentHints = {$: 'ContentHints'};
var $author$project$Internal$Data$ContentHistory = {$: 'ContentHistory'};
var $author$project$Internal$Data$ContentOtherExercises = {$: 'ContentOtherExercises'};
var $author$project$Internal$Data$ContentSolutions = {$: 'ContentSolutions'};
var $author$project$Internal$Data$stringToMenuContent = function (string) {
	return _Utils_eq(
		string,
		$author$project$Internal$Data$menuContentToString($author$project$Internal$Data$ContentHints)) ? $author$project$Internal$Data$ContentHints : (_Utils_eq(
		string,
		$author$project$Internal$Data$menuContentToString($author$project$Internal$Data$ContentSolutions)) ? $author$project$Internal$Data$ContentSolutions : (_Utils_eq(
		string,
		$author$project$Internal$Data$menuContentToString($author$project$Internal$Data$ContentHistory)) ? $author$project$Internal$Data$ContentHistory : (_Utils_eq(
		string,
		$author$project$Internal$Data$menuContentToString($author$project$Internal$Data$ContentOtherExercises)) ? $author$project$Internal$Data$ContentOtherExercises : (_Utils_eq(
		string,
		$author$project$Internal$Data$menuContentToString($author$project$Internal$Data$ContentHelp)) ? $author$project$Internal$Data$ContentHelp : (_Utils_eq(
		string,
		$author$project$Internal$Data$menuContentToString($author$project$Internal$Data$ContentContribute)) ? $author$project$Internal$Data$ContentContribute : $author$project$Internal$Data$ContentContribute)))));
};
var $author$project$Internal$Codecs$codecMenuContent = A3($miniBill$elm_codec$Codec$map, $author$project$Internal$Data$stringToMenuContent, $author$project$Internal$Data$menuContentToString, $miniBill$elm_codec$Codec$string);
var $elm$json$Json$Encode$int = _Json_wrap;
var $miniBill$elm_codec$Codec$int = A2($miniBill$elm_codec$Codec$build, $elm$json$Json$Encode$int, $elm$json$Json$Decode$int);
var $elm$time$Time$posixToMillis = function (_v0) {
	var millis = _v0.a;
	return millis;
};
var $author$project$Internal$Codecs$codecPosix = A3($miniBill$elm_codec$Codec$map, $elm$time$Time$millisToPosix, $elm$time$Time$posixToMillis, $miniBill$elm_codec$Codec$int);
var $elm$json$Json$Decode$andThen = _Json_andThen;
var $elm$json$Json$Decode$fail = _Json_fail;
var $miniBill$elm_codec$Codec$buildCustom = function (_v0) {
	var am = _v0.a;
	return $miniBill$elm_codec$Codec$Codec(
		{
			decoder: A2(
				$elm$json$Json$Decode$andThen,
				function (tag) {
					var _v1 = A2($elm$core$Dict$get, tag, am.decoder);
					if (_v1.$ === 'Nothing') {
						return $elm$json$Json$Decode$fail('tag ' + (tag + 'did not match'));
					} else {
						var dec = _v1.a;
						return A2($elm$json$Json$Decode$field, 'args', dec);
					}
				},
				A2($elm$json$Json$Decode$field, 'tag', $elm$json$Json$Decode$string)),
			encoder: function (v) {
				return am.match(v);
			}
		});
};
var $miniBill$elm_codec$Codec$CustomCodec = function (a) {
	return {$: 'CustomCodec', a: a};
};
var $miniBill$elm_codec$Codec$custom = function (match) {
	return $miniBill$elm_codec$Codec$CustomCodec(
		{decoder: $elm$core$Dict$empty, match: match});
};
var $miniBill$elm_codec$Codec$composite = F3(
	function (enc, dec, _v0) {
		var codec = _v0.a;
		return $miniBill$elm_codec$Codec$Codec(
			{
				decoder: dec(codec.decoder),
				encoder: enc(codec.encoder)
			});
	});
var $elm$core$Set$insert = F2(
	function (key, _v0) {
		var dict = _v0.a;
		return $elm$core$Set$Set_elm_builtin(
			A3($elm$core$Dict$insert, key, _Utils_Tuple0, dict));
	});
var $elm$core$Set$fromList = function (list) {
	return A3($elm$core$List$foldl, $elm$core$Set$insert, $elm$core$Set$empty, list);
};
var $miniBill$elm_codec$Codec$set = A2(
	$miniBill$elm_codec$Codec$composite,
	function (e) {
		return A2(
			$elm$core$Basics$composeL,
			$elm$json$Json$Encode$list(e),
			$elm$core$Set$toList);
	},
	A2(
		$elm$core$Basics$composeL,
		$elm$json$Json$Decode$map($elm$core$Set$fromList),
		$elm$json$Json$Decode$list));
var $miniBill$elm_codec$Codec$variant = F4(
	function (name, matchPiece, decoderPiece, _v0) {
		var am = _v0.a;
		var enc = function (v) {
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'tag',
						$elm$json$Json$Encode$string(name)),
						_Utils_Tuple2(
						'args',
						A2($elm$json$Json$Encode$list, $elm$core$Basics$identity, v))
					]));
		};
		return $miniBill$elm_codec$Codec$CustomCodec(
			{
				decoder: A3($elm$core$Dict$insert, name, decoderPiece, am.decoder),
				match: am.match(
					matchPiece(enc))
			});
	});
var $miniBill$elm_codec$Codec$variant0 = F2(
	function (name, ctor) {
		return A3(
			$miniBill$elm_codec$Codec$variant,
			name,
			function (c) {
				return c(_List_Nil);
			},
			$elm$json$Json$Decode$succeed(ctor));
	});
var $elm$json$Json$Decode$index = _Json_decodeIndex;
var $miniBill$elm_codec$Codec$variant1 = F3(
	function (name, ctor, m1) {
		return A3(
			$miniBill$elm_codec$Codec$variant,
			name,
			F2(
				function (c, v) {
					return c(
						_List_fromArray(
							[
								A2($miniBill$elm_codec$Codec$encoder, m1, v)
							]));
				}),
			A2(
				$elm$json$Json$Decode$map,
				ctor,
				A2(
					$elm$json$Json$Decode$index,
					0,
					$miniBill$elm_codec$Codec$decoder(m1))));
	});
var $author$project$Internal$Codecs$codecShow = $miniBill$elm_codec$Codec$buildCustom(
	A4(
		$miniBill$elm_codec$Codec$variant1,
		'show',
		$author$project$Internal$Data$Show,
		$miniBill$elm_codec$Codec$set($miniBill$elm_codec$Codec$int),
		A3(
			$miniBill$elm_codec$Codec$variant0,
			'showNone',
			$author$project$Internal$Data$ShowNone,
			A3(
				$miniBill$elm_codec$Codec$variant0,
				'showAll',
				$author$project$Internal$Data$ShowAll,
				$miniBill$elm_codec$Codec$custom(
					F4(
						function (showAll, showNone, show, value) {
							switch (value.$) {
								case 'ShowAll':
									return showAll;
								case 'ShowNone':
									return showNone;
								default:
									var setInt = value.a;
									return show(setInt);
							}
						}))))));
var $miniBill$elm_codec$Codec$ObjectCodec = function (a) {
	return {$: 'ObjectCodec', a: a};
};
var $miniBill$elm_codec$Codec$field = F4(
	function (name, getter, codec, _v0) {
		var ocodec = _v0.a;
		return $miniBill$elm_codec$Codec$ObjectCodec(
			{
				decoder: A3(
					$elm$json$Json$Decode$map2,
					F2(
						function (f, x) {
							return f(x);
						}),
					ocodec.decoder,
					A2(
						$elm$json$Json$Decode$field,
						name,
						$miniBill$elm_codec$Codec$decoder(codec))),
				encoder: function (v) {
					return A2(
						$elm$core$List$cons,
						_Utils_Tuple2(
							name,
							A2(
								$miniBill$elm_codec$Codec$encoder,
								codec,
								getter(v))),
						ocodec.encoder(v));
				}
			});
	});
var $elm$json$Json$Decode$oneOf = _Json_oneOf;
var $elm$json$Json$Decode$maybe = function (decoder) {
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, decoder),
				$elm$json$Json$Decode$succeed($elm$core$Maybe$Nothing)
			]));
};
var $elm$json$Json$Encode$null = _Json_encodeNull;
var $miniBill$elm_codec$Codec$maybe = function (codec) {
	return $miniBill$elm_codec$Codec$Codec(
		{
			decoder: $elm$json$Json$Decode$maybe(
				$miniBill$elm_codec$Codec$decoder(codec)),
			encoder: function (v) {
				if (v.$ === 'Nothing') {
					return $elm$json$Json$Encode$null;
				} else {
					var x = v.a;
					return A2($miniBill$elm_codec$Codec$encoder, codec, x);
				}
			}
		});
};
var $miniBill$elm_codec$Codec$object = function (ctor) {
	return $miniBill$elm_codec$Codec$ObjectCodec(
		{
			decoder: $elm$json$Json$Decode$succeed(ctor),
			encoder: function (_v0) {
				return _List_Nil;
			}
		});
};
var $author$project$Internal$Codecs$codecLocalStorageRecord = $miniBill$elm_codec$Codec$buildObject(
	A4(
		$miniBill$elm_codec$Codec$field,
		'testsPassed',
		function ($) {
			return $.testsPassed;
		},
		$miniBill$elm_codec$Codec$int,
		A4(
			$miniBill$elm_codec$Codec$field,
			'testsTotal',
			function ($) {
				return $.testsTotal;
			},
			$miniBill$elm_codec$Codec$int,
			A4(
				$miniBill$elm_codec$Codec$field,
				'solved',
				function ($) {
					return $.solved;
				},
				$miniBill$elm_codec$Codec$maybe($author$project$Internal$Codecs$codecPosix),
				A4(
					$miniBill$elm_codec$Codec$field,
					'lastSeen',
					function ($) {
						return $.lastSeen;
					},
					$author$project$Internal$Codecs$codecPosix,
					A4(
						$miniBill$elm_codec$Codec$field,
						'firstSeen',
						function ($) {
							return $.firstSeen;
						},
						$author$project$Internal$Codecs$codecPosix,
						A4(
							$miniBill$elm_codec$Codec$field,
							'menuContent',
							function ($) {
								return $.menuContent;
							},
							$author$project$Internal$Codecs$codecMenuContent,
							A4(
								$miniBill$elm_codec$Codec$field,
								'menuOpen',
								function ($) {
									return $.menuOpen;
								},
								$miniBill$elm_codec$Codec$bool,
								A4(
									$miniBill$elm_codec$Codec$field,
									'solutions',
									function ($) {
										return $.solutions;
									},
									$author$project$Internal$Codecs$codecShow,
									A4(
										$miniBill$elm_codec$Codec$field,
										'hints',
										function ($) {
											return $.hints;
										},
										$author$project$Internal$Codecs$codecShow,
										$miniBill$elm_codec$Codec$object($author$project$Internal$Data$LocalStorageRecord)))))))))));
var $miniBill$elm_codec$Codec$list = A2($miniBill$elm_codec$Codec$composite, $elm$json$Json$Encode$list, $elm$json$Json$Decode$list);
var $miniBill$elm_codec$Codec$tuple = F2(
	function (m1, m2) {
		return $miniBill$elm_codec$Codec$Codec(
			{
				decoder: A3(
					$elm$json$Json$Decode$map2,
					F2(
						function (a, b) {
							return _Utils_Tuple2(a, b);
						}),
					A2(
						$elm$json$Json$Decode$index,
						0,
						$miniBill$elm_codec$Codec$decoder(m1)),
					A2(
						$elm$json$Json$Decode$index,
						1,
						$miniBill$elm_codec$Codec$decoder(m2))),
				encoder: function (_v0) {
					var v1 = _v0.a;
					var v2 = _v0.b;
					return A2(
						$elm$json$Json$Encode$list,
						$elm$core$Basics$identity,
						_List_fromArray(
							[
								A2($miniBill$elm_codec$Codec$encoder, m1, v1),
								A2($miniBill$elm_codec$Codec$encoder, m2, v2)
							]));
				}
			});
	});
var $author$project$Internal$Codecs$codecLocalStorageAsList = $miniBill$elm_codec$Codec$list(
	A2($miniBill$elm_codec$Codec$tuple, $miniBill$elm_codec$Codec$int, $author$project$Internal$Codecs$codecLocalStorageRecord));
var $miniBill$elm_codec$Codec$decodeString = function (codec) {
	return $elm$json$Json$Decode$decodeString(
		$miniBill$elm_codec$Codec$decoder(codec));
};
var $author$project$Exercises$f = function (showSet) {
	if (showSet.$ === 'Show') {
		var set = showSet.a;
		return set;
	} else {
		return $elm$core$Set$empty;
	}
};
var $elm_explorations$test$Test$Runner$getFailureReason = function (expectation) {
	if (expectation.$ === 'Pass') {
		return $elm$core$Maybe$Nothing;
	} else {
		var record = expectation.a;
		return $elm$core$Maybe$Just(record);
	}
};
var $author$project$Internal$Data$initLocalStorageRecord = {
	firstSeen: $elm$time$Time$millisToPosix(0),
	hints: $author$project$Internal$Data$ShowNone,
	lastSeen: $elm$time$Time$millisToPosix(0),
	menuContent: $author$project$Internal$Data$ContentOtherExercises,
	menuOpen: false,
	solutions: $author$project$Internal$Data$ShowNone,
	solved: $elm$core$Maybe$Nothing,
	testsPassed: 0,
	testsTotal: 0
};
var $miniBill$elm_codec$Codec$encodeToString = F2(
	function (indentation, codec) {
		return A2(
			$elm$core$Basics$composeR,
			$miniBill$elm_codec$Codec$encoder(codec),
			$elm$json$Json$Encode$encode(indentation));
	});
var $author$project$Exercises$localStorageToString = function (localStorage) {
	return A3(
		$miniBill$elm_codec$Codec$encodeToString,
		0,
		$author$project$Internal$Codecs$codecLocalStorageAsList,
		$elm$core$Dict$toList(localStorage));
};
var $elm$core$Set$remove = F2(
	function (key, _v0) {
		var dict = _v0.a;
		return $elm$core$Set$Set_elm_builtin(
			A2($elm$core$Dict$remove, key, dict));
	});
var $author$project$Exercises$updateMain = F3(
	function (tea, msg, model) {
		switch (msg.$) {
			case 'UpdatePosix':
				var posix = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{posixNow: posix}),
					$elm$core$Platform$Cmd$none);
			case 'ShowHint':
				var _int = msg.a;
				return A2(
					$author$project$Exercises$changeHints,
					model,
					$author$project$Internal$Data$Show(
						A2(
							$elm$core$Set$insert,
							_int,
							$author$project$Exercises$f(model.localStorageRecord.hints))));
			case 'ShowSolution':
				var _int = msg.a;
				return A2(
					$author$project$Exercises$changeSolutions,
					model,
					$author$project$Internal$Data$Show(
						A2(
							$elm$core$Set$insert,
							_int,
							$author$project$Exercises$f(model.localStorageRecord.solutions))));
			case 'HideHint':
				var _int = msg.a;
				return A2(
					$author$project$Exercises$changeHints,
					model,
					$author$project$Internal$Data$Show(
						A2(
							$elm$core$Set$remove,
							_int,
							$author$project$Exercises$f(model.localStorageRecord.hints))));
			case 'HideSolution':
				var _int = msg.a;
				return A2(
					$author$project$Exercises$changeSolutions,
					model,
					$author$project$Internal$Data$Show(
						A2(
							$elm$core$Set$remove,
							_int,
							$author$project$Exercises$f(model.localStorageRecord.solutions))));
			case 'ShowHintsAll':
				return A2($author$project$Exercises$changeHints, model, $author$project$Internal$Data$ShowAll);
			case 'ShowSolutionsAll':
				return A2($author$project$Exercises$changeSolutions, model, $author$project$Internal$Data$ShowAll);
			case 'ShowHintsNone':
				return A2($author$project$Exercises$changeHints, model, $author$project$Internal$Data$ShowNone);
			case 'ShowSolutionsNone':
				return A2($author$project$Exercises$changeSolutions, model, $author$project$Internal$Data$ShowNone);
			case 'MsgTEA':
				var msgExercise = msg.a;
				var _v1 = A2(tea.update, msgExercise, model.modelExercise);
				var modelExercise = _v1.a;
				var cmdTEA = _v1.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							failureReasons: A2(
								$elm$core$List$map,
								$elm_explorations$test$Test$Runner$getFailureReason,
								tea.tests(modelExercise)),
							modelExercise: modelExercise
						}),
					A2($elm$core$Platform$Cmd$map, $author$project$Internal$Data$MsgTEA, cmdTEA));
			case 'ChangeMenu':
				var menuContent = msg.a;
				return (_Utils_eq(menuContent, model.localStorageRecord.menuContent) && model.localStorageRecord.menuOpen) ? A2(
					$author$project$Exercises$changeLocalStorage,
					model,
					function (lsr) {
						return _Utils_update(
							lsr,
							{menuOpen: false});
					}) : A2(
					$author$project$Exercises$changeLocalStorage,
					model,
					function (lsr) {
						return _Utils_update(
							lsr,
							{menuContent: menuContent, menuOpen: true});
					});
			case 'MenuOver':
				var bool = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{menuOver: bool}),
					$elm$core$Platform$Cmd$none);
			case 'PortLocalStoragePop':
				var string = msg.a;
				var localStorage = function () {
					var _v2 = A2($miniBill$elm_codec$Codec$decodeString, $author$project$Internal$Codecs$codecLocalStorageAsList, string);
					if (_v2.$ === 'Ok') {
						var localStorageAsList = _v2.a;
						return $elm$core$Dict$fromList(localStorageAsList);
					} else {
						return $elm$core$Dict$empty;
					}
				}();
				var localStorageRecord = A2(
					$elm$core$Maybe$withDefault,
					$author$project$Internal$Data$initLocalStorageRecord,
					A2($elm$core$Dict$get, model.exerciseData.id, localStorage));
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{localStorage: localStorage, localStorageRecord: localStorageRecord}),
					$elm$core$Platform$Cmd$none);
			case 'PortLocalStoragePush':
				var localStorage = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{localStorage: localStorage}),
					tea.portLocalStoragePush(
						$author$project$Exercises$localStorageToString(localStorage)));
			case 'RemoveFromHistory':
				var id = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							localStorage: A2($elm$core$Dict$remove, id, model.localStorage),
							localStorageRecord: function () {
								if (_Utils_eq(id, model.exerciseData.id)) {
									var localStorageRecord = model.localStorageRecord;
									return A4(
										$author$project$Internal$Data$toLocalStorageRecord,
										model.posixNow,
										tea,
										model,
										_Utils_update(
											localStorageRecord,
											{
												firstSeen: $elm$time$Time$millisToPosix(0),
												lastSeen: $elm$time$Time$millisToPosix(0),
												solved: $elm$core$Maybe$Nothing,
												testsPassed: 0,
												testsTotal: 0
											}));
								} else {
									return model.localStorageRecord;
								}
							}()
						}),
					$elm$core$Platform$Cmd$none);
			case 'RemoveHistory':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{localStorage: $elm$core$Dict$empty}),
					$elm$core$Platform$Cmd$none);
			default:
				var width = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{width: width}),
					$elm$core$Platform$Cmd$none);
		}
	});
var $author$project$Internal$Data$UpdatePosix = function (a) {
	return {$: 'UpdatePosix', a: a};
};
var $author$project$Exercises$updatePosix = F2(
	function (msg, model) {
		if (msg.$ === 'UpdatePosix') {
			return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
		} else {
			return _Utils_Tuple2(
				model,
				A2($elm$core$Task$perform, $author$project$Internal$Data$UpdatePosix, $elm$time$Time$now));
		}
	});
var $author$project$Exercises$update = F3(
	function (tea, msg, model) {
		return A3(
			$author$project$Exercises$andThen,
			$author$project$Exercises$updatePosix,
			msg,
			A3(
				$author$project$Exercises$andThen,
				$author$project$Exercises$updateLocalStorage(tea),
				msg,
				A3(
					$author$project$Exercises$andThen,
					$author$project$Exercises$updateMain(tea),
					msg,
					_Utils_Tuple2(model, $elm$core$Platform$Cmd$none))));
	});
var $rakutentech$r10$R10$Form$Internal$Msg$OnPhoneMsg = F4(
	function (a, b, c, d) {
		return {$: 'OnPhoneMsg', a: a, b: b, c: c, d: d};
	});
var $rakutentech$r10$R10$Form$Internal$Msg$OnSingleMsg = F4(
	function (a, b, c, d) {
		return {$: 'OnSingleMsg', a: a, b: b, c: c, d: d};
	});
var $rakutentech$r10$R10$Form$Internal$Key$separator = '/';
var $rakutentech$r10$R10$Form$Internal$Key$toString = function (_v0) {
	var keys = _v0.a;
	return A2(
		$elm$core$String$join,
		$rakutentech$r10$R10$Form$Internal$Key$separator,
		$elm$core$List$reverse(keys));
};
var $rakutentech$r10$R10$Form$Internal$Update$onActivate = F2(
	function (key, formState) {
		return _Utils_update(
			formState,
			{
				active: $elm$core$Maybe$Just(
					$rakutentech$r10$R10$Form$Internal$Key$toString(key))
			});
	});
var $rakutentech$r10$R10$Form$Internal$FieldState$NotYetValidated = {$: 'NotYetValidated'};
var $rakutentech$r10$R10$Form$Internal$FieldState$init = {dirty: false, disabled: false, lostFocusOneOrMoreTime: false, scroll: 0, search: '', select: '', showPassword: false, validation: $rakutentech$r10$R10$Form$Internal$FieldState$NotYetValidated, value: ''};
var $rakutentech$r10$R10$Form$Internal$Update$stateWithDefault = function (maybeFieldState) {
	return A2($elm$core$Maybe$withDefault, $rakutentech$r10$R10$Form$Internal$FieldState$init, maybeFieldState);
};
var $rakutentech$r10$R10$Form$Internal$Update$helperUpdateSearch = F2(
	function (value, maybeFieldState) {
		var fieldState = $rakutentech$r10$R10$Form$Internal$Update$stateWithDefault(maybeFieldState);
		return $elm$core$Maybe$Just(
			_Utils_update(
				fieldState,
				{search: value}));
	});
var $rakutentech$r10$R10$Form$Internal$Dict$update = function (key) {
	return $elm$core$Dict$update(
		$rakutentech$r10$R10$Form$Internal$Key$toString(key));
};
var $rakutentech$r10$R10$Form$Internal$Update$onChangeSearch = F3(
	function (key, string, formState) {
		return _Utils_update(
			formState,
			{
				fieldsState: A3(
					$rakutentech$r10$R10$Form$Internal$Dict$update,
					key,
					$rakutentech$r10$R10$Form$Internal$Update$helperUpdateSearch(string),
					formState.fieldsState)
			});
	});
var $rakutentech$r10$R10$Form$Internal$Update$helperUpdateSelect = F2(
	function (value, maybeFieldState) {
		var fieldState = $rakutentech$r10$R10$Form$Internal$Update$stateWithDefault(maybeFieldState);
		return $elm$core$Maybe$Just(
			_Utils_update(
				fieldState,
				{select: value}));
	});
var $rakutentech$r10$R10$Form$Internal$Update$onChangeSelect = F3(
	function (key, string, formState) {
		return _Utils_update(
			formState,
			{
				fieldsState: A3(
					$rakutentech$r10$R10$Form$Internal$Dict$update,
					key,
					$rakutentech$r10$R10$Form$Internal$Update$helperUpdateSelect(string),
					formState.fieldsState)
			});
	});
var $rakutentech$r10$R10$Form$Internal$Update$helperUpdateDirty = function (maybeFieldState) {
	var fieldState = $rakutentech$r10$R10$Form$Internal$Update$stateWithDefault(maybeFieldState);
	return $elm$core$Maybe$Just(
		_Utils_update(
			fieldState,
			{dirty: true}));
};
var $rakutentech$r10$R10$Form$Internal$Update$helperUpdateValue = F2(
	function (value, maybeFieldState) {
		var fieldState = $rakutentech$r10$R10$Form$Internal$Update$stateWithDefault(maybeFieldState);
		return $elm$core$Maybe$Just(
			_Utils_update(
				fieldState,
				{value: value}));
	});
var $rakutentech$r10$R10$Form$Internal$FieldState$Validated = function (a) {
	return {$: 'Validated', a: a};
};
var $rakutentech$r10$R10$Form$Internal$Dict$get = function (key) {
	return $elm$core$Dict$get(
		$rakutentech$r10$R10$Form$Internal$Key$toString(key));
};
var $elm$core$List$head = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(x);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $rakutentech$r10$R10$Form$Internal$Key$headId = function (_v0) {
	var list = _v0.a;
	return A2(
		$elm$core$Maybe$withDefault,
		'CANNOT_FIND_THE_HEAD_ID_IN_AN_EMPTY_KEY',
		$elm$core$List$head(list));
};
var $elm$core$Maybe$map = F2(
	function (f, maybe) {
		if (maybe.$ === 'Just') {
			var value = maybe.a;
			return $elm$core$Maybe$Just(
				f(value));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $rakutentech$r10$R10$Form$Internal$FieldState$MessageErr = F2(
	function (a, b) {
		return {$: 'MessageErr', a: a, b: b};
	});
var $rakutentech$r10$R10$Form$Internal$FieldState$MessageOk = F2(
	function (a, b) {
		return {$: 'MessageOk', a: a, b: b};
	});
var $elm$core$List$any = F2(
	function (isOkay, list) {
		any:
		while (true) {
			if (!list.b) {
				return false;
			} else {
				var x = list.a;
				var xs = list.b;
				if (isOkay(x)) {
					return true;
				} else {
					var $temp$isOkay = isOkay,
						$temp$list = xs;
					isOkay = $temp$isOkay;
					list = $temp$list;
					continue any;
				}
			}
		}
	});
var $elm$core$List$all = F2(
	function (isOkay, list) {
		return !A2(
			$elm$core$List$any,
			A2($elm$core$Basics$composeL, $elm$core$Basics$not, isOkay),
			list);
	});
var $rakutentech$r10$R10$Form$Internal$Key$Key = function (a) {
	return {$: 'Key', a: a};
};
var $rakutentech$r10$R10$Form$Internal$Key$fromString = function (keyAsString) {
	return $rakutentech$r10$R10$Form$Internal$Key$Key(
		$elm$core$List$reverse(
			A2($elm$core$String$split, $rakutentech$r10$R10$Form$Internal$Key$separator, keyAsString)));
};
var $rakutentech$r10$R10$Form$Internal$Validation$isValid = function (outcome) {
	if (outcome.$ === 'MessageOk') {
		return true;
	} else {
		return false;
	}
};
var $rakutentech$r10$R10$Form$Internal$Key$fromList = function (list) {
	return $rakutentech$r10$R10$Form$Internal$Key$Key(
		A2(
			$elm$core$List$filter,
			A2($elm$core$Basics$composeL, $elm$core$Basics$not, $elm$core$String$isEmpty),
			list));
};
var $rakutentech$r10$R10$Form$Internal$Key$replaceLeaf = F2(
	function (newLeaf, _v0) {
		var keyList = _v0.a;
		return $elm$core$List$isEmpty(keyList) ? $rakutentech$r10$R10$Form$Internal$Key$fromList(keyList) : $rakutentech$r10$R10$Form$Internal$Key$fromList(
			A2(
				$elm$core$List$cons,
				newLeaf,
				A2($elm$core$List$drop, 1, keyList)));
	});
var $rakutentech$r10$R10$Form$Internal$Validation$skipValidationIfEmpty = F2(
	function (value, validationOutcome) {
		return $elm$core$String$isEmpty(value) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(validationOutcome);
	});
var $elm$core$String$trim = _String_trim;
var $rakutentech$r10$R10$Form$Internal$Translator$validationCodes = {allOf: 'ALL_OF', emailFormatInvalid: 'INVALID_EMAIL_FORMAT', emailFormatValid: 'VALID_EMAIL_FORMAT', empty: 'EMPTY', equalInvalid: 'INVALID_EQUAL', formatInvalid: 'INVALID_FORMAT', formatInvalidCharactersInvalid: 'INVALID_FORMAT_INVALID_CHARACTERS', formatNoNumberInvalid: 'INVALID_FORMAT_NO_NUMBER', formatNoSpecialCharactersInvalid: 'INVALID_FORMAT_NO_SPECIAL_CHARACTERS', formatNoUppercaseInvalid: 'INVALID_FORMAT_NO_UPPERCASE', formatValid: 'VALID_FORMAT', hexColorFormatInvalid: 'INVALID_HEX_COLOR_FORMAT', jsonFormatInvalid: 'INVALID_JSON_FORMAT', lengthTooLargeInvalid: 'INVALID_LENGTH_TOO_LARGE', lengthTooSmallInvalid: 'INVALID_LENGTH_TOO_SMALL', oneOf: 'ONE_OF', required: 'REQUIRED', requiredField: 'REQUIRED_FIELD', somethingWrong: 'SOMETHING_WENT_WRONG_DURING_VALIDATION', valueInvalid: 'INVALID_VALUE'};
var $rakutentech$r10$R10$Form$Internal$Validation$validateEmpty = function (value) {
	return $elm$core$String$isEmpty(value) ? A2($rakutentech$r10$R10$Form$Internal$FieldState$MessageOk, $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.empty, _List_Nil) : A2($rakutentech$r10$R10$Form$Internal$FieldState$MessageErr, $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.empty, _List_Nil);
};
var $rakutentech$r10$R10$Form$Internal$Validation$validateEqual = F3(
	function (value, dependantKey, formState) {
		var dependantValue = A2(
			$elm$core$Maybe$withDefault,
			'',
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.value;
				},
				A2($elm$core$Dict$get, dependantKey, formState.fieldsState)));
		return _Utils_eq(value, dependantValue) ? A2($rakutentech$r10$R10$Form$Internal$FieldState$MessageOk, $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.equalInvalid, _List_Nil) : A2($rakutentech$r10$R10$Form$Internal$FieldState$MessageErr, $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.equalInvalid, _List_Nil);
	});
var $rakutentech$r10$R10$Form$Internal$Validation$validateMaxLength = F2(
	function (value, length) {
		return (_Utils_cmp(
			$elm$core$String$length(value),
			length) > 0) ? A2(
			$rakutentech$r10$R10$Form$Internal$FieldState$MessageErr,
			$rakutentech$r10$R10$Form$Internal$Translator$validationCodes.lengthTooLargeInvalid,
			_List_fromArray(
				[
					$elm$core$String$fromInt(length)
				])) : A2(
			$rakutentech$r10$R10$Form$Internal$FieldState$MessageOk,
			$rakutentech$r10$R10$Form$Internal$Translator$validationCodes.lengthTooLargeInvalid,
			_List_fromArray(
				[
					$elm$core$String$fromInt(length)
				]));
	});
var $rakutentech$r10$R10$Form$Internal$Validation$validateMinLength = F2(
	function (value, length) {
		return (_Utils_cmp(
			$elm$core$String$length(value),
			length) < 0) ? A2(
			$rakutentech$r10$R10$Form$Internal$FieldState$MessageErr,
			$rakutentech$r10$R10$Form$Internal$Translator$validationCodes.lengthTooSmallInvalid,
			_List_fromArray(
				[
					$elm$core$String$fromInt(length)
				])) : A2(
			$rakutentech$r10$R10$Form$Internal$FieldState$MessageOk,
			$rakutentech$r10$R10$Form$Internal$Translator$validationCodes.lengthTooSmallInvalid,
			_List_fromArray(
				[
					$elm$core$String$fromInt(length)
				]));
	});
var $rakutentech$r10$R10$Form$Internal$Validation$NotValid = {$: 'NotValid'};
var $rakutentech$r10$R10$Form$Internal$Validation$Valid = {$: 'Valid'};
var $elm$regex$Regex$Match = F4(
	function (match, index, number, submatches) {
		return {index: index, match: match, number: number, submatches: submatches};
	});
var $elm$regex$Regex$contains = _Regex_contains;
var $elm$regex$Regex$fromStringWith = _Regex_fromStringWith;
var $elm$regex$Regex$fromString = function (string) {
	return A2(
		$elm$regex$Regex$fromStringWith,
		{caseInsensitive: false, multiline: false},
		string);
};
var $elm$regex$Regex$never = _Regex_never;
var $rakutentech$r10$R10$Form$Internal$Validation$runRegex = F2(
	function (pattern, value) {
		var regex = A2(
			$elm$core$Maybe$withDefault,
			$elm$regex$Regex$never,
			$elm$regex$Regex$fromString(pattern));
		return A2($elm$regex$Regex$contains, regex, value) ? $rakutentech$r10$R10$Form$Internal$Validation$Valid : $rakutentech$r10$R10$Form$Internal$Validation$NotValid;
	});
var $rakutentech$r10$R10$Form$Internal$Validation$validateRegex = F2(
	function (value, regex) {
		var _v0 = A2($rakutentech$r10$R10$Form$Internal$Validation$runRegex, regex, value);
		if (_v0.$ === 'Valid') {
			return A2($rakutentech$r10$R10$Form$Internal$FieldState$MessageOk, $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.formatInvalid, _List_Nil);
		} else {
			return A2($rakutentech$r10$R10$Form$Internal$FieldState$MessageErr, $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.formatInvalid, _List_Nil);
		}
	});
var $rakutentech$r10$R10$Form$Internal$Validation$validateRequired = function (value) {
	return $elm$core$String$isEmpty(value) ? A2($rakutentech$r10$R10$Form$Internal$FieldState$MessageErr, $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.required, _List_Nil) : A2($rakutentech$r10$R10$Form$Internal$FieldState$MessageOk, $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.required, _List_Nil);
};
var $rakutentech$r10$R10$Form$Internal$Validation$validateAllOf = F4(
	function (key, value, formState, validations) {
		var messages = A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			A2(
				$elm$core$List$map,
				A4($rakutentech$r10$R10$Form$Internal$Validation$validateValidationSpecs, 'validateAllOf', key, value, formState),
				validations));
		return $elm$core$List$isEmpty(messages) ? A2($rakutentech$r10$R10$Form$Internal$FieldState$MessageOk, $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.allOf, _List_Nil) : (A2($elm$core$List$all, $rakutentech$r10$R10$Form$Internal$Validation$isValid, messages) ? A2($rakutentech$r10$R10$Form$Internal$FieldState$MessageOk, $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.allOf, _List_Nil) : A2($rakutentech$r10$R10$Form$Internal$FieldState$MessageErr, $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.allOf, _List_Nil));
	});
var $rakutentech$r10$R10$Form$Internal$Validation$validateDependant = F4(
	function (key, dependantKey, formState, validation) {
		var newLeafKey = A2($rakutentech$r10$R10$Form$Internal$Key$replaceLeaf, dependantKey, key);
		var newLeafContextValue = A2(
			$elm$core$Maybe$map,
			function (rec) {
				return _Utils_Tuple2(rec.value, newLeafKey);
			},
			A2(
				$elm$core$Dict$get,
				$rakutentech$r10$R10$Form$Internal$Key$toString(newLeafKey),
				formState.fieldsState));
		var newFullKey = $rakutentech$r10$R10$Form$Internal$Key$fromString(dependantKey);
		var newFullContextValue = A2(
			$elm$core$Maybe$map,
			function (rec) {
				return _Utils_Tuple2(rec.value, newFullKey);
			},
			A2(
				$elm$core$Dict$get,
				$rakutentech$r10$R10$Form$Internal$Key$toString(newFullKey),
				formState.fieldsState));
		var defaultContextValue = _Utils_Tuple2('', newFullKey);
		var result = A2(
			$elm$core$Maybe$withDefault,
			A2($elm$core$Maybe$withDefault, defaultContextValue, newFullContextValue),
			newLeafContextValue);
		return function (_v5) {
			var newContextValue = _v5.a;
			var newKey = _v5.b;
			return A5($rakutentech$r10$R10$Form$Internal$Validation$validateValidationSpecs, 'validateDependant', newKey, newContextValue, formState, validation);
		}(result);
	});
var $rakutentech$r10$R10$Form$Internal$Validation$validateNot = F4(
	function (key, value, formState, validation) {
		var outcome = A5($rakutentech$r10$R10$Form$Internal$Validation$validateValidationSpecs, 'validateNot', key, value, formState, validation);
		if (outcome.$ === 'Just') {
			if (outcome.a.$ === 'MessageOk') {
				var _v3 = outcome.a;
				var a = _v3.a;
				var b = _v3.b;
				return $elm$core$Maybe$Just(
					A2($rakutentech$r10$R10$Form$Internal$FieldState$MessageErr, a, b));
			} else {
				var _v4 = outcome.a;
				var a = _v4.a;
				var b = _v4.b;
				return $elm$core$Maybe$Just(
					A2($rakutentech$r10$R10$Form$Internal$FieldState$MessageOk, a, b));
			}
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $rakutentech$r10$R10$Form$Internal$Validation$validateOneOf = F4(
	function (key, value, formState, validations) {
		var messages = A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			A2(
				$elm$core$List$map,
				A4($rakutentech$r10$R10$Form$Internal$Validation$validateValidationSpecs, 'validateOneOf', key, value, formState),
				validations));
		return $elm$core$List$isEmpty(messages) ? A2($rakutentech$r10$R10$Form$Internal$FieldState$MessageOk, $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.oneOf, _List_Nil) : (A2($elm$core$List$any, $rakutentech$r10$R10$Form$Internal$Validation$isValid, messages) ? A2($rakutentech$r10$R10$Form$Internal$FieldState$MessageOk, $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.oneOf, _List_Nil) : A2($rakutentech$r10$R10$Form$Internal$FieldState$MessageErr, $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.oneOf, _List_Nil));
	});
var $rakutentech$r10$R10$Form$Internal$Validation$validateValidationSpecs = F5(
	function (caller, key, value_, formState, validation) {
		var value = ($rakutentech$r10$R10$Form$Internal$Key$toString(key) === 'email') ? $elm$core$String$trim(value_) : value_;
		switch (validation.$) {
			case 'WithMsg':
				var msg = validation.a;
				var validation_ = validation.b;
				return A5($rakutentech$r10$R10$Form$Internal$Validation$validateWithMsg, key, value, msg, formState, validation_);
			case 'Dependant':
				var dependantKey = validation.a;
				var validation_ = validation.b;
				return A4($rakutentech$r10$R10$Form$Internal$Validation$validateDependant, key, dependantKey, formState, validation_);
			case 'OneOf':
				var validations = validation.a;
				return $elm$core$Maybe$Just(
					A4($rakutentech$r10$R10$Form$Internal$Validation$validateOneOf, key, value, formState, validations));
			case 'AllOf':
				var validations = validation.a;
				return $elm$core$Maybe$Just(
					A4($rakutentech$r10$R10$Form$Internal$Validation$validateAllOf, key, value, formState, validations));
			case 'Required':
				return $elm$core$Maybe$Just(
					$rakutentech$r10$R10$Form$Internal$Validation$validateRequired(value));
			case 'Empty':
				return $elm$core$Maybe$Just(
					$rakutentech$r10$R10$Form$Internal$Validation$validateEmpty(value));
			case 'Regex':
				var regex = validation.a;
				return A2(
					$rakutentech$r10$R10$Form$Internal$Validation$skipValidationIfEmpty,
					value,
					A2($rakutentech$r10$R10$Form$Internal$Validation$validateRegex, value, regex));
			case 'MinLength':
				var length = validation.a;
				return A2(
					$rakutentech$r10$R10$Form$Internal$Validation$skipValidationIfEmpty,
					value,
					A2($rakutentech$r10$R10$Form$Internal$Validation$validateMinLength, value, length));
			case 'MaxLength':
				var length = validation.a;
				return A2(
					$rakutentech$r10$R10$Form$Internal$Validation$skipValidationIfEmpty,
					value,
					A2($rakutentech$r10$R10$Form$Internal$Validation$validateMaxLength, value, length));
			case 'Equal':
				var dependantKey = validation.a;
				return A2(
					$rakutentech$r10$R10$Form$Internal$Validation$skipValidationIfEmpty,
					value,
					A3($rakutentech$r10$R10$Form$Internal$Validation$validateEqual, value, dependantKey, formState));
			case 'Not':
				var validation_ = validation.a;
				return A4($rakutentech$r10$R10$Form$Internal$Validation$validateNot, key, value, formState, validation_);
			default:
				return $elm$core$Maybe$Nothing;
		}
	});
var $rakutentech$r10$R10$Form$Internal$Validation$validateWithMsg = F5(
	function (key, value, msg, formState, validation) {
		var maybeMessage = A5($rakutentech$r10$R10$Form$Internal$Validation$validateValidationSpecs, 'validateWithMsg', key, value, formState, validation);
		if (maybeMessage.$ === 'Nothing') {
			return $elm$core$Maybe$Nothing;
		} else {
			var message = maybeMessage.a;
			return $rakutentech$r10$R10$Form$Internal$Validation$isValid(message) ? $elm$core$Maybe$Just(
				A2($rakutentech$r10$R10$Form$Internal$FieldState$MessageOk, msg.ok, _List_Nil)) : $elm$core$Maybe$Just(
				A2($rakutentech$r10$R10$Form$Internal$FieldState$MessageErr, msg.err, _List_Nil));
		}
	});
var $rakutentech$r10$R10$Form$Internal$Validation$validate = F5(
	function (formStateBeforeValidationFixer, key, maybeValidationSpec, formState, fieldState) {
		var newFormState = formState;
		var newFieldState = _Utils_update(
			fieldState,
			{
				value: A2(
					formStateBeforeValidationFixer,
					$rakutentech$r10$R10$Form$Internal$Key$headId(key),
					fieldState.value)
			});
		var isDisabled = A2(
			$elm$core$Maybe$withDefault,
			false,
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.disabled;
				},
				A2($rakutentech$r10$R10$Form$Internal$Dict$get, key, newFormState.fieldsState)));
		var validationSpec = isDisabled ? _List_fromArray(
			[$rakutentech$r10$R10$Form$Internal$FieldConf$NoValidation]) : A2(
			$elm$core$Maybe$withDefault,
			_List_fromArray(
				[$rakutentech$r10$R10$Form$Internal$FieldConf$NoValidation]),
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.validation;
				},
				maybeValidationSpec));
		var fieldIdAsString = $rakutentech$r10$R10$Form$Internal$Key$headId(key);
		return _Utils_update(
			fieldState,
			{
				validation: $rakutentech$r10$R10$Form$Internal$FieldState$Validated(
					A2(
						$elm$core$List$filterMap,
						$elm$core$Basics$identity,
						A2(
							$elm$core$List$map,
							A4($rakutentech$r10$R10$Form$Internal$Validation$validateValidationSpecs, 'validate', key, newFieldState.value, newFormState),
							validationSpec)))
			});
	});
var $rakutentech$r10$R10$Form$Internal$Update$helperValidateCreatingFieldsState = F5(
	function (formStateBeforeValidationFixer, key, maybeValidationSpec, formState, maybeFieldState) {
		var fieldState = $rakutentech$r10$R10$Form$Internal$Update$stateWithDefault(maybeFieldState);
		return $elm$core$Maybe$Just(
			A5(
				$rakutentech$r10$R10$Form$Internal$Validation$validate,
				formStateBeforeValidationFixer,
				key,
				maybeValidationSpec,
				formState,
				A2($elm$core$Maybe$withDefault, $rakutentech$r10$R10$Form$Internal$FieldState$init, maybeFieldState)));
	});
var $rakutentech$r10$R10$Form$Internal$QtySubmitAttempted$toInt = function (_v0) {
	var _int = _v0.a;
	return _int;
};
var $rakutentech$r10$R10$Form$Internal$Update$shouldValidationBeVisible = F2(
	function (qtySubmitAttempted, fieldState) {
		return fieldState.lostFocusOneOrMoreTime || ($rakutentech$r10$R10$Form$Internal$QtySubmitAttempted$toInt(qtySubmitAttempted) > 0);
	});
var $rakutentech$r10$R10$Form$Internal$Update$helperValidateOnChangeValue = F6(
	function (formStateBeforeValidationFixer, key, maybeValidationSpec, qtySubmitAttempted, formState, maybeFieldState) {
		var fieldState = $rakutentech$r10$R10$Form$Internal$Update$stateWithDefault(maybeFieldState);
		return A2($rakutentech$r10$R10$Form$Internal$Update$shouldValidationBeVisible, qtySubmitAttempted, fieldState) ? A5($rakutentech$r10$R10$Form$Internal$Update$helperValidateCreatingFieldsState, formStateBeforeValidationFixer, key, maybeValidationSpec, formState, maybeFieldState) : maybeFieldState;
	});
var $rakutentech$r10$R10$Form$Internal$Update$onChangeValue = F6(
	function (formStateBeforeValidationFixer, key, fieldConf, formConf, string, formState) {
		return _Utils_update(
			formState,
			{
				fieldsState: A3(
					$rakutentech$r10$R10$Form$Internal$Dict$update,
					key,
					A5($rakutentech$r10$R10$Form$Internal$Update$helperValidateOnChangeValue, formStateBeforeValidationFixer, key, fieldConf.validationSpecs, formState.qtySubmitAttempted, formState),
					A3(
						$rakutentech$r10$R10$Form$Internal$Dict$update,
						key,
						$rakutentech$r10$R10$Form$Internal$Update$helperUpdateDirty,
						A3(
							$rakutentech$r10$R10$Form$Internal$Dict$update,
							key,
							$rakutentech$r10$R10$Form$Internal$Update$helperUpdateValue(string),
							formState.fieldsState))),
				focused: $elm$core$Maybe$Just(
					$rakutentech$r10$R10$Form$Internal$Key$toString(key))
			});
	});
var $rakutentech$r10$R10$Form$Internal$Update$onDeactivate = function (formState) {
	return _Utils_update(
		formState,
		{active: $elm$core$Maybe$Nothing});
};
var $rakutentech$r10$R10$Form$Internal$Update$onGetFocus = F2(
	function (key, formState) {
		return _Utils_update(
			formState,
			{
				focused: $elm$core$Maybe$Just(
					$rakutentech$r10$R10$Form$Internal$Key$toString(key))
			});
	});
var $rakutentech$r10$R10$Form$Internal$Update$helperLostFocus = function (maybeFieldState) {
	var fieldState = $rakutentech$r10$R10$Form$Internal$Update$stateWithDefault(maybeFieldState);
	return $elm$core$Maybe$Just(
		_Utils_update(
			fieldState,
			{lostFocusOneOrMoreTime: true}));
};
var $rakutentech$r10$R10$Form$Internal$Update$onLoseFocus = F4(
	function (formStateBeforeValidationFixer, key, fieldConf, formState) {
		return _Utils_update(
			formState,
			{
				fieldsState: A3(
					$rakutentech$r10$R10$Form$Internal$Dict$update,
					key,
					A4($rakutentech$r10$R10$Form$Internal$Update$helperValidateCreatingFieldsState, formStateBeforeValidationFixer, key, fieldConf.validationSpecs, formState),
					A3($rakutentech$r10$R10$Form$Internal$Dict$update, key, $rakutentech$r10$R10$Form$Internal$Update$helperLostFocus, formState.fieldsState)),
				focused: $elm$core$Maybe$Nothing
			});
	});
var $rakutentech$r10$R10$Form$Internal$Update$helperUpdateScroll = F2(
	function (value, maybeScroll) {
		var fieldState = $rakutentech$r10$R10$Form$Internal$Update$stateWithDefault(maybeScroll);
		return $elm$core$Maybe$Just(
			_Utils_update(
				fieldState,
				{scroll: value}));
	});
var $rakutentech$r10$R10$Form$Internal$Update$onScroll = F3(
	function (key, scroll, formState) {
		return _Utils_update(
			formState,
			{
				fieldsState: A3(
					$rakutentech$r10$R10$Form$Internal$Dict$update,
					key,
					$rakutentech$r10$R10$Form$Internal$Update$helperUpdateScroll(scroll),
					formState.fieldsState)
			});
	});
var $rakutentech$r10$R10$Form$Internal$Update$copyComponentStateToFormState = function (_v0) {
	var formStateBeforeValidationFixer = _v0.formStateBeforeValidationFixer;
	var formState = _v0.formState;
	var key = _v0.key;
	var fieldConf = _v0.fieldConf;
	var formConf = _v0.formConf;
	var fieldState = _v0.fieldState;
	var singleModel = _v0.singleModel;
	var newSingleModel = _v0.newSingleModel;
	return ((!_Utils_eq(singleModel.opened, newSingleModel.opened)) ? (newSingleModel.opened ? $rakutentech$r10$R10$Form$Internal$Update$onActivate(key) : $rakutentech$r10$R10$Form$Internal$Update$onDeactivate) : $elm$core$Basics$identity)(
		((!_Utils_eq(singleModel.focused, newSingleModel.focused)) ? (newSingleModel.focused ? $rakutentech$r10$R10$Form$Internal$Update$onGetFocus(key) : A3($rakutentech$r10$R10$Form$Internal$Update$onLoseFocus, formStateBeforeValidationFixer, key, fieldConf)) : $elm$core$Basics$identity)(
			((!_Utils_eq(fieldState.scroll, newSingleModel.scroll)) ? A2($rakutentech$r10$R10$Form$Internal$Update$onScroll, key, newSingleModel.scroll) : $elm$core$Basics$identity)(
				((!_Utils_eq(fieldState.select, newSingleModel.select)) ? A2($rakutentech$r10$R10$Form$Internal$Update$onChangeSelect, key, newSingleModel.select) : $elm$core$Basics$identity)(
					((!_Utils_eq(fieldState.search, newSingleModel.search)) ? A2($rakutentech$r10$R10$Form$Internal$Update$onChangeSearch, key, newSingleModel.search) : $elm$core$Basics$identity)(
						((!_Utils_eq(fieldState.value, newSingleModel.value)) ? A5($rakutentech$r10$R10$Form$Internal$Update$onChangeValue, formStateBeforeValidationFixer, key, fieldConf, formConf, newSingleModel.value) : $elm$core$Basics$identity)(formState))))));
};
var $rakutentech$r10$R10$Form$Internal$Msg$isChangingValues = function (msg) {
	switch (msg.$) {
		case 'ChangeValue':
			return true;
		case 'AddEntity':
			return true;
		case 'RemoveEntity':
			return true;
		default:
			return false;
	}
};
var $rakutentech$r10$R10$Form$Internal$Msg$handleChangesSinceLastSubmissions = F2(
	function (changesSinceLastSubmissions, msg) {
		if (msg.$ === 'Submit') {
			return false;
		} else {
			return $rakutentech$r10$R10$Form$Internal$Msg$isChangingValues(msg) ? true : changesSinceLastSubmissions;
		}
	});
var $rakutentech$r10$R10$Form$Internal$Update$helperToggleShowPassword = function (maybeFieldState) {
	var fieldState = $rakutentech$r10$R10$Form$Internal$Update$stateWithDefault(maybeFieldState);
	return $elm$core$Maybe$Just(
		_Utils_update(
			fieldState,
			{showPassword: !fieldState.showPassword}));
};
var $rakutentech$r10$R10$Form$Internal$Dict$insert = function (key) {
	return $elm$core$Dict$insert(
		$rakutentech$r10$R10$Form$Internal$Key$toString(key));
};
var $rakutentech$r10$R10$Form$Internal$QtySubmitAttempted$increment = function (qtySubmitAttempted) {
	return $rakutentech$r10$R10$Form$Internal$QtySubmitAttempted$fromInt(
		$rakutentech$r10$R10$Form$Internal$QtySubmitAttempted$toInt(qtySubmitAttempted) + 1);
};
var $rakutentech$r10$R10$Form$Internal$Key$empty = $rakutentech$r10$R10$Form$Internal$Key$fromList(_List_Nil);
var $rakutentech$r10$R10$Form$Internal$Key$composeKey = F2(
	function (_v0, extraKey) {
		var keys = _v0.a;
		return $elm$core$String$isEmpty(extraKey) ? $rakutentech$r10$R10$Form$Internal$Key$Key(keys) : $rakutentech$r10$R10$Form$Internal$Key$Key(
			A2($elm$core$List$cons, extraKey, keys));
	});
var $elm$core$Dict$member = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$get, key, dict);
		if (_v0.$ === 'Just') {
			return true;
		} else {
			return false;
		}
	});
var $elm$core$Set$member = F2(
	function (key, _v0) {
		var dict = _v0.a;
		return A2($elm$core$Dict$member, key, dict);
	});
var $elm$core$List$repeatHelp = F3(
	function (result, n, value) {
		repeatHelp:
		while (true) {
			if (n <= 0) {
				return result;
			} else {
				var $temp$result = A2($elm$core$List$cons, value, result),
					$temp$n = n - 1,
					$temp$value = value;
				result = $temp$result;
				n = $temp$n;
				value = $temp$value;
				continue repeatHelp;
			}
		}
	});
var $elm$core$List$repeat = F2(
	function (n, value) {
		return A3($elm$core$List$repeatHelp, _List_Nil, n, value);
	});
var $rakutentech$r10$R10$Form$Internal$MakerForValidationKeys$maker = F2(
	function (key, form) {
		return $elm$core$List$concat(
			A2(
				$elm$core$List$map,
				function (entity) {
					switch (entity.$) {
						case 'EntityWrappable':
							var id = entity.a;
							var entities = entity.b;
							return A2(
								$rakutentech$r10$R10$Form$Internal$MakerForValidationKeys$maker,
								A2($rakutentech$r10$R10$Form$Internal$Key$composeKey, key, id),
								{conf: entities, state: form.state});
						case 'EntityWithBorder':
							var id = entity.a;
							var entities = entity.b;
							return A2(
								$rakutentech$r10$R10$Form$Internal$MakerForValidationKeys$maker,
								A2($rakutentech$r10$R10$Form$Internal$Key$composeKey, key, id),
								{conf: entities, state: form.state});
						case 'EntityNormal':
							var id = entity.a;
							var entities = entity.b;
							return A2(
								$rakutentech$r10$R10$Form$Internal$MakerForValidationKeys$maker,
								A2($rakutentech$r10$R10$Form$Internal$Key$composeKey, key, id),
								{conf: entities, state: form.state});
						case 'EntityWithTabs':
							var id = entity.a;
							var titleEntityList = entity.b;
							return A2(
								$rakutentech$r10$R10$Form$Internal$MakerForValidationKeys$maker,
								A2($rakutentech$r10$R10$Form$Internal$Key$composeKey, key, id),
								{
									conf: A2($elm$core$List$map, $elm$core$Tuple$second, titleEntityList),
									state: form.state
								});
						case 'EntityMulti':
							var entityId = entity.a;
							var entities = entity.b;
							return A2(
								$rakutentech$r10$R10$Form$Internal$MakerForValidationKeys$viewEntityMulti,
								A2($rakutentech$r10$R10$Form$Internal$Key$composeKey, key, entityId),
								{conf: entities, state: form.state});
						case 'EntityField':
							var fieldConf = entity.a;
							return _List_fromArray(
								[
									_Utils_Tuple2(
									A2($rakutentech$r10$R10$Form$Internal$Key$composeKey, key, fieldConf.id),
									fieldConf.validationSpecs)
								]);
						case 'EntityTitle':
							var entityId = entity.a;
							var textConf = entity.b;
							return _List_fromArray(
								[
									_Utils_Tuple2(
									A2($rakutentech$r10$R10$Form$Internal$Key$composeKey, key, entityId),
									textConf.validationSpecs)
								]);
						default:
							var entityId = entity.a;
							var textConf = entity.b;
							return _List_fromArray(
								[
									_Utils_Tuple2(
									A2($rakutentech$r10$R10$Form$Internal$Key$composeKey, key, entityId),
									textConf.validationSpecs)
								]);
					}
				},
				form.conf));
	});
var $rakutentech$r10$R10$Form$Internal$MakerForValidationKeys$viewEntityMulti = F2(
	function (key, form) {
		var quantity = A2(
			$elm$core$Maybe$withDefault,
			1,
			A2($rakutentech$r10$R10$Form$Internal$Dict$get, key, form.state.multiplicableQuantities));
		return $elm$core$List$concat(
			A2(
				$elm$core$List$indexedMap,
				F2(
					function (index, _v0) {
						var newKey = A2(
							$rakutentech$r10$R10$Form$Internal$Key$composeKey,
							key,
							$elm$core$String$fromInt(index));
						var removed = A2(
							$elm$core$Set$member,
							$rakutentech$r10$R10$Form$Internal$Key$toString(newKey),
							form.state.removed);
						return removed ? _List_Nil : A2($rakutentech$r10$R10$Form$Internal$MakerForValidationKeys$maker, newKey, form);
					}),
				A2($elm$core$List$repeat, quantity, _Utils_Tuple0)));
	});
var $rakutentech$r10$R10$Form$Internal$Update$allValidationKeysMaker = function (form) {
	return A2($rakutentech$r10$R10$Form$Internal$MakerForValidationKeys$maker, $rakutentech$r10$R10$Form$Internal$Key$empty, form);
};
var $rakutentech$r10$R10$Form$Internal$Update$runAllValidations = F4(
	function (formStateBeforeValidationFixer, allKeys, formState, fieldsState) {
		return A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, acc) {
					var key = _v0.a;
					var validationSpec = _v0.b;
					return A3(
						$rakutentech$r10$R10$Form$Internal$Dict$update,
						key,
						A4($rakutentech$r10$R10$Form$Internal$Update$helperValidateCreatingFieldsState, formStateBeforeValidationFixer, key, validationSpec, formState),
						acc);
				}),
			fieldsState,
			allKeys);
	});
var $rakutentech$r10$R10$Form$Internal$Update$validateEntireForm = F2(
	function (formStateBeforeValidationFixer, form) {
		var state = form.state;
		var allKeys = $rakutentech$r10$R10$Form$Internal$Update$allValidationKeysMaker(form);
		var newFieldsState = A4($rakutentech$r10$R10$Form$Internal$Update$runAllValidations, formStateBeforeValidationFixer, allKeys, form.state, form.state.fieldsState);
		return _Utils_update(
			state,
			{fieldsState: newFieldsState});
	});
var $rakutentech$r10$R10$Form$Internal$Update$submit = F2(
	function (formStateBeforeValidationFixer, form) {
		var newQtySubmitAttempted = $rakutentech$r10$R10$Form$Internal$QtySubmitAttempted$increment(form.state.qtySubmitAttempted);
		var newFieldsState = A2($rakutentech$r10$R10$Form$Internal$Update$validateEntireForm, formStateBeforeValidationFixer, form);
		return _Utils_update(
			newFieldsState,
			{qtySubmitAttempted: newQtySubmitAttempted});
	});
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Common$NoOp = {$: 'NoOp'};
var $elm$core$Maybe$andThen = F2(
	function (callback, maybeValue) {
		if (maybeValue.$ === 'Just') {
			var value = maybeValue.a;
			return callback(value);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $elm$core$Task$onError = _Scheduler_onError;
var $elm$core$Task$attempt = F2(
	function (resultToMessage, task) {
		return $elm$core$Task$command(
			$elm$core$Task$Perform(
				A2(
					$elm$core$Task$onError,
					A2(
						$elm$core$Basics$composeL,
						A2($elm$core$Basics$composeL, $elm$core$Task$succeed, resultToMessage),
						$elm$core$Result$Err),
					A2(
						$elm$core$Task$andThen,
						A2(
							$elm$core$Basics$composeL,
							A2($elm$core$Basics$composeL, $elm$core$Task$succeed, resultToMessage),
							$elm$core$Result$Ok),
						task))));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Common$dropdownContentId = function (key) {
	return 'dropdown-content-' + key;
};
var $rakutentech$r10$R10$Country$Afghanistan = {$: 'Afghanistan'};
var $rakutentech$r10$R10$Country$Albania = {$: 'Albania'};
var $rakutentech$r10$R10$Country$Algeria = {$: 'Algeria'};
var $rakutentech$r10$R10$Country$AmericanSamoa = {$: 'AmericanSamoa'};
var $rakutentech$r10$R10$Country$Andorra = {$: 'Andorra'};
var $rakutentech$r10$R10$Country$Angola = {$: 'Angola'};
var $rakutentech$r10$R10$Country$Anguilla = {$: 'Anguilla'};
var $rakutentech$r10$R10$Country$Antarctica = {$: 'Antarctica'};
var $rakutentech$r10$R10$Country$AntiguaandBarbuda = {$: 'AntiguaandBarbuda'};
var $rakutentech$r10$R10$Country$Argentina = {$: 'Argentina'};
var $rakutentech$r10$R10$Country$Armenia = {$: 'Armenia'};
var $rakutentech$r10$R10$Country$Aruba = {$: 'Aruba'};
var $rakutentech$r10$R10$Country$Australia = {$: 'Australia'};
var $rakutentech$r10$R10$Country$Austria = {$: 'Austria'};
var $rakutentech$r10$R10$Country$Azerbaijan = {$: 'Azerbaijan'};
var $rakutentech$r10$R10$Country$Bahamas = {$: 'Bahamas'};
var $rakutentech$r10$R10$Country$Bahrain = {$: 'Bahrain'};
var $rakutentech$r10$R10$Country$Bangladesh = {$: 'Bangladesh'};
var $rakutentech$r10$R10$Country$Barbados = {$: 'Barbados'};
var $rakutentech$r10$R10$Country$Belarus = {$: 'Belarus'};
var $rakutentech$r10$R10$Country$Belgium = {$: 'Belgium'};
var $rakutentech$r10$R10$Country$Belize = {$: 'Belize'};
var $rakutentech$r10$R10$Country$Benin = {$: 'Benin'};
var $rakutentech$r10$R10$Country$Bermuda = {$: 'Bermuda'};
var $rakutentech$r10$R10$Country$Bhutan = {$: 'Bhutan'};
var $rakutentech$r10$R10$Country$Bolivia = {$: 'Bolivia'};
var $rakutentech$r10$R10$Country$BosniaandHerzegovina = {$: 'BosniaandHerzegovina'};
var $rakutentech$r10$R10$Country$Botswana = {$: 'Botswana'};
var $rakutentech$r10$R10$Country$Brazil = {$: 'Brazil'};
var $rakutentech$r10$R10$Country$BritishIndianOceanTerritory = {$: 'BritishIndianOceanTerritory'};
var $rakutentech$r10$R10$Country$BritishVirginIslands = {$: 'BritishVirginIslands'};
var $rakutentech$r10$R10$Country$Brunei = {$: 'Brunei'};
var $rakutentech$r10$R10$Country$Bulgaria = {$: 'Bulgaria'};
var $rakutentech$r10$R10$Country$BurkinaFaso = {$: 'BurkinaFaso'};
var $rakutentech$r10$R10$Country$Burundi = {$: 'Burundi'};
var $rakutentech$r10$R10$Country$Cambodia = {$: 'Cambodia'};
var $rakutentech$r10$R10$Country$Cameroon = {$: 'Cameroon'};
var $rakutentech$r10$R10$Country$CapeVerde = {$: 'CapeVerde'};
var $rakutentech$r10$R10$Country$CaymanIslands = {$: 'CaymanIslands'};
var $rakutentech$r10$R10$Country$CentralAfricanRepublic = {$: 'CentralAfricanRepublic'};
var $rakutentech$r10$R10$Country$Chad = {$: 'Chad'};
var $rakutentech$r10$R10$Country$Chile = {$: 'Chile'};
var $rakutentech$r10$R10$Country$China = {$: 'China'};
var $rakutentech$r10$R10$Country$ChristmasIsland = {$: 'ChristmasIsland'};
var $rakutentech$r10$R10$Country$CocosIslands = {$: 'CocosIslands'};
var $rakutentech$r10$R10$Country$Colombia = {$: 'Colombia'};
var $rakutentech$r10$R10$Country$Comoros = {$: 'Comoros'};
var $rakutentech$r10$R10$Country$CookIslands = {$: 'CookIslands'};
var $rakutentech$r10$R10$Country$CostaRica = {$: 'CostaRica'};
var $rakutentech$r10$R10$Country$Croatia = {$: 'Croatia'};
var $rakutentech$r10$R10$Country$Cuba = {$: 'Cuba'};
var $rakutentech$r10$R10$Country$Curacao = {$: 'Curacao'};
var $rakutentech$r10$R10$Country$Cyprus = {$: 'Cyprus'};
var $rakutentech$r10$R10$Country$CzechRepublic = {$: 'CzechRepublic'};
var $rakutentech$r10$R10$Country$DemocraticRepublicoftheCongo = {$: 'DemocraticRepublicoftheCongo'};
var $rakutentech$r10$R10$Country$Denmark = {$: 'Denmark'};
var $rakutentech$r10$R10$Country$Djibouti = {$: 'Djibouti'};
var $rakutentech$r10$R10$Country$Dominica = {$: 'Dominica'};
var $rakutentech$r10$R10$Country$DominicanRepublic = {$: 'DominicanRepublic'};
var $rakutentech$r10$R10$Country$EastTimor = {$: 'EastTimor'};
var $rakutentech$r10$R10$Country$Ecuador = {$: 'Ecuador'};
var $rakutentech$r10$R10$Country$Egypt = {$: 'Egypt'};
var $rakutentech$r10$R10$Country$ElSalvador = {$: 'ElSalvador'};
var $rakutentech$r10$R10$Country$EquatorialGuinea = {$: 'EquatorialGuinea'};
var $rakutentech$r10$R10$Country$Eritrea = {$: 'Eritrea'};
var $rakutentech$r10$R10$Country$Estonia = {$: 'Estonia'};
var $rakutentech$r10$R10$Country$Ethiopia = {$: 'Ethiopia'};
var $rakutentech$r10$R10$Country$FalklandIslands = {$: 'FalklandIslands'};
var $rakutentech$r10$R10$Country$FaroeIslands = {$: 'FaroeIslands'};
var $rakutentech$r10$R10$Country$Fiji = {$: 'Fiji'};
var $rakutentech$r10$R10$Country$Finland = {$: 'Finland'};
var $rakutentech$r10$R10$Country$France = {$: 'France'};
var $rakutentech$r10$R10$Country$FrenchPolynesia = {$: 'FrenchPolynesia'};
var $rakutentech$r10$R10$Country$Gabon = {$: 'Gabon'};
var $rakutentech$r10$R10$Country$Gambia = {$: 'Gambia'};
var $rakutentech$r10$R10$Country$Georgia = {$: 'Georgia'};
var $rakutentech$r10$R10$Country$Germany = {$: 'Germany'};
var $rakutentech$r10$R10$Country$Ghana = {$: 'Ghana'};
var $rakutentech$r10$R10$Country$Gibraltar = {$: 'Gibraltar'};
var $rakutentech$r10$R10$Country$Greece = {$: 'Greece'};
var $rakutentech$r10$R10$Country$Greenland = {$: 'Greenland'};
var $rakutentech$r10$R10$Country$Grenada = {$: 'Grenada'};
var $rakutentech$r10$R10$Country$Guam = {$: 'Guam'};
var $rakutentech$r10$R10$Country$Guatemala = {$: 'Guatemala'};
var $rakutentech$r10$R10$Country$Guernsey = {$: 'Guernsey'};
var $rakutentech$r10$R10$Country$Guinea = {$: 'Guinea'};
var $rakutentech$r10$R10$Country$GuineaBissau = {$: 'GuineaBissau'};
var $rakutentech$r10$R10$Country$Guyana = {$: 'Guyana'};
var $rakutentech$r10$R10$Country$Haiti = {$: 'Haiti'};
var $rakutentech$r10$R10$Country$Honduras = {$: 'Honduras'};
var $rakutentech$r10$R10$Country$HongKong = {$: 'HongKong'};
var $rakutentech$r10$R10$Country$Hungary = {$: 'Hungary'};
var $rakutentech$r10$R10$Country$Iceland = {$: 'Iceland'};
var $rakutentech$r10$R10$Country$India = {$: 'India'};
var $rakutentech$r10$R10$Country$Indonesia = {$: 'Indonesia'};
var $rakutentech$r10$R10$Country$Iran = {$: 'Iran'};
var $rakutentech$r10$R10$Country$Iraq = {$: 'Iraq'};
var $rakutentech$r10$R10$Country$Ireland = {$: 'Ireland'};
var $rakutentech$r10$R10$Country$IsleofMan = {$: 'IsleofMan'};
var $rakutentech$r10$R10$Country$Israel = {$: 'Israel'};
var $rakutentech$r10$R10$Country$Italy = {$: 'Italy'};
var $rakutentech$r10$R10$Country$IvoryCoast = {$: 'IvoryCoast'};
var $rakutentech$r10$R10$Country$Jamaica = {$: 'Jamaica'};
var $rakutentech$r10$R10$Country$Japan = {$: 'Japan'};
var $rakutentech$r10$R10$Country$Jersey = {$: 'Jersey'};
var $rakutentech$r10$R10$Country$Jordan = {$: 'Jordan'};
var $rakutentech$r10$R10$Country$Kenya = {$: 'Kenya'};
var $rakutentech$r10$R10$Country$Kiribati = {$: 'Kiribati'};
var $rakutentech$r10$R10$Country$Kosovo = {$: 'Kosovo'};
var $rakutentech$r10$R10$Country$Kuwait = {$: 'Kuwait'};
var $rakutentech$r10$R10$Country$Kyrgyzstan = {$: 'Kyrgyzstan'};
var $rakutentech$r10$R10$Country$Laos = {$: 'Laos'};
var $rakutentech$r10$R10$Country$Latvia = {$: 'Latvia'};
var $rakutentech$r10$R10$Country$Lebanon = {$: 'Lebanon'};
var $rakutentech$r10$R10$Country$Lesotho = {$: 'Lesotho'};
var $rakutentech$r10$R10$Country$Liberia = {$: 'Liberia'};
var $rakutentech$r10$R10$Country$Libya = {$: 'Libya'};
var $rakutentech$r10$R10$Country$Liechtenstein = {$: 'Liechtenstein'};
var $rakutentech$r10$R10$Country$Lithuania = {$: 'Lithuania'};
var $rakutentech$r10$R10$Country$Luxembourg = {$: 'Luxembourg'};
var $rakutentech$r10$R10$Country$Macau = {$: 'Macau'};
var $rakutentech$r10$R10$Country$Macedonia = {$: 'Macedonia'};
var $rakutentech$r10$R10$Country$Madagascar = {$: 'Madagascar'};
var $rakutentech$r10$R10$Country$Malawi = {$: 'Malawi'};
var $rakutentech$r10$R10$Country$Malaysia = {$: 'Malaysia'};
var $rakutentech$r10$R10$Country$Maldives = {$: 'Maldives'};
var $rakutentech$r10$R10$Country$Mali = {$: 'Mali'};
var $rakutentech$r10$R10$Country$Malta = {$: 'Malta'};
var $rakutentech$r10$R10$Country$MarshallIslands = {$: 'MarshallIslands'};
var $rakutentech$r10$R10$Country$Mauritania = {$: 'Mauritania'};
var $rakutentech$r10$R10$Country$Mauritius = {$: 'Mauritius'};
var $rakutentech$r10$R10$Country$Mayotte = {$: 'Mayotte'};
var $rakutentech$r10$R10$Country$Mexico = {$: 'Mexico'};
var $rakutentech$r10$R10$Country$Micronesia = {$: 'Micronesia'};
var $rakutentech$r10$R10$Country$Moldova = {$: 'Moldova'};
var $rakutentech$r10$R10$Country$Monaco = {$: 'Monaco'};
var $rakutentech$r10$R10$Country$Mongolia = {$: 'Mongolia'};
var $rakutentech$r10$R10$Country$Montenegro = {$: 'Montenegro'};
var $rakutentech$r10$R10$Country$Montserrat = {$: 'Montserrat'};
var $rakutentech$r10$R10$Country$Morocco = {$: 'Morocco'};
var $rakutentech$r10$R10$Country$Mozambique = {$: 'Mozambique'};
var $rakutentech$r10$R10$Country$Myanmar = {$: 'Myanmar'};
var $rakutentech$r10$R10$Country$Namibia = {$: 'Namibia'};
var $rakutentech$r10$R10$Country$Nauru = {$: 'Nauru'};
var $rakutentech$r10$R10$Country$Nepal = {$: 'Nepal'};
var $rakutentech$r10$R10$Country$Netherlands = {$: 'Netherlands'};
var $rakutentech$r10$R10$Country$NewCaledonia = {$: 'NewCaledonia'};
var $rakutentech$r10$R10$Country$NewZealand = {$: 'NewZealand'};
var $rakutentech$r10$R10$Country$Nicaragua = {$: 'Nicaragua'};
var $rakutentech$r10$R10$Country$Niger = {$: 'Niger'};
var $rakutentech$r10$R10$Country$Nigeria = {$: 'Nigeria'};
var $rakutentech$r10$R10$Country$Niue = {$: 'Niue'};
var $rakutentech$r10$R10$Country$NorthKorea = {$: 'NorthKorea'};
var $rakutentech$r10$R10$Country$NorthernMarianaIslands = {$: 'NorthernMarianaIslands'};
var $rakutentech$r10$R10$Country$Norway = {$: 'Norway'};
var $rakutentech$r10$R10$Country$Oman = {$: 'Oman'};
var $rakutentech$r10$R10$Country$Pakistan = {$: 'Pakistan'};
var $rakutentech$r10$R10$Country$Palau = {$: 'Palau'};
var $rakutentech$r10$R10$Country$Palestine = {$: 'Palestine'};
var $rakutentech$r10$R10$Country$Panama = {$: 'Panama'};
var $rakutentech$r10$R10$Country$PapuaNewGuinea = {$: 'PapuaNewGuinea'};
var $rakutentech$r10$R10$Country$Paraguay = {$: 'Paraguay'};
var $rakutentech$r10$R10$Country$Peru = {$: 'Peru'};
var $rakutentech$r10$R10$Country$Philippines = {$: 'Philippines'};
var $rakutentech$r10$R10$Country$Poland = {$: 'Poland'};
var $rakutentech$r10$R10$Country$Portugal = {$: 'Portugal'};
var $rakutentech$r10$R10$Country$PuertoRico = {$: 'PuertoRico'};
var $rakutentech$r10$R10$Country$Qatar = {$: 'Qatar'};
var $rakutentech$r10$R10$Country$RepublicoftheCongo = {$: 'RepublicoftheCongo'};
var $rakutentech$r10$R10$Country$Reunion = {$: 'Reunion'};
var $rakutentech$r10$R10$Country$Romania = {$: 'Romania'};
var $rakutentech$r10$R10$Country$Russia = {$: 'Russia'};
var $rakutentech$r10$R10$Country$Rwanda = {$: 'Rwanda'};
var $rakutentech$r10$R10$Country$SaintHelena = {$: 'SaintHelena'};
var $rakutentech$r10$R10$Country$SaintKittsandNevis = {$: 'SaintKittsandNevis'};
var $rakutentech$r10$R10$Country$SaintLucia = {$: 'SaintLucia'};
var $rakutentech$r10$R10$Country$SaintPierreandMiquelon = {$: 'SaintPierreandMiquelon'};
var $rakutentech$r10$R10$Country$SaintVincentandTheGrenadines = {$: 'SaintVincentandTheGrenadines'};
var $rakutentech$r10$R10$Country$Samoa = {$: 'Samoa'};
var $rakutentech$r10$R10$Country$SanMarino = {$: 'SanMarino'};
var $rakutentech$r10$R10$Country$SaoTomeandPrincipe = {$: 'SaoTomeandPrincipe'};
var $rakutentech$r10$R10$Country$SaudiArabia = {$: 'SaudiArabia'};
var $rakutentech$r10$R10$Country$Senegal = {$: 'Senegal'};
var $rakutentech$r10$R10$Country$Serbia = {$: 'Serbia'};
var $rakutentech$r10$R10$Country$Seychelles = {$: 'Seychelles'};
var $rakutentech$r10$R10$Country$SierraLeone = {$: 'SierraLeone'};
var $rakutentech$r10$R10$Country$Singapore = {$: 'Singapore'};
var $rakutentech$r10$R10$Country$SintMaarten = {$: 'SintMaarten'};
var $rakutentech$r10$R10$Country$Slovakia = {$: 'Slovakia'};
var $rakutentech$r10$R10$Country$Slovenia = {$: 'Slovenia'};
var $rakutentech$r10$R10$Country$SolomonIslands = {$: 'SolomonIslands'};
var $rakutentech$r10$R10$Country$Somalia = {$: 'Somalia'};
var $rakutentech$r10$R10$Country$SouthAfrica = {$: 'SouthAfrica'};
var $rakutentech$r10$R10$Country$SouthKorea = {$: 'SouthKorea'};
var $rakutentech$r10$R10$Country$SouthSudan = {$: 'SouthSudan'};
var $rakutentech$r10$R10$Country$Spain = {$: 'Spain'};
var $rakutentech$r10$R10$Country$SriLanka = {$: 'SriLanka'};
var $rakutentech$r10$R10$Country$Sudan = {$: 'Sudan'};
var $rakutentech$r10$R10$Country$Suriname = {$: 'Suriname'};
var $rakutentech$r10$R10$Country$SvalbardandJanMayen = {$: 'SvalbardandJanMayen'};
var $rakutentech$r10$R10$Country$Swaziland = {$: 'Swaziland'};
var $rakutentech$r10$R10$Country$Sweden = {$: 'Sweden'};
var $rakutentech$r10$R10$Country$Switzerland = {$: 'Switzerland'};
var $rakutentech$r10$R10$Country$Syria = {$: 'Syria'};
var $rakutentech$r10$R10$Country$Taiwan = {$: 'Taiwan'};
var $rakutentech$r10$R10$Country$Tajikistan = {$: 'Tajikistan'};
var $rakutentech$r10$R10$Country$Tanzania = {$: 'Tanzania'};
var $rakutentech$r10$R10$Country$Thailand = {$: 'Thailand'};
var $rakutentech$r10$R10$Country$Togo = {$: 'Togo'};
var $rakutentech$r10$R10$Country$Tokelau = {$: 'Tokelau'};
var $rakutentech$r10$R10$Country$Tonga = {$: 'Tonga'};
var $rakutentech$r10$R10$Country$TrinidadandTobago = {$: 'TrinidadandTobago'};
var $rakutentech$r10$R10$Country$Tunisia = {$: 'Tunisia'};
var $rakutentech$r10$R10$Country$Turkey = {$: 'Turkey'};
var $rakutentech$r10$R10$Country$Turkmenistan = {$: 'Turkmenistan'};
var $rakutentech$r10$R10$Country$TurksandCaicosIslands = {$: 'TurksandCaicosIslands'};
var $rakutentech$r10$R10$Country$Tuvalu = {$: 'Tuvalu'};
var $rakutentech$r10$R10$Country$USVirginIslands = {$: 'USVirginIslands'};
var $rakutentech$r10$R10$Country$Uganda = {$: 'Uganda'};
var $rakutentech$r10$R10$Country$Ukraine = {$: 'Ukraine'};
var $rakutentech$r10$R10$Country$UnitedArabEmirates = {$: 'UnitedArabEmirates'};
var $rakutentech$r10$R10$Country$UnitedKingdom = {$: 'UnitedKingdom'};
var $rakutentech$r10$R10$Country$UnitedStates = {$: 'UnitedStates'};
var $rakutentech$r10$R10$Country$Uruguay = {$: 'Uruguay'};
var $rakutentech$r10$R10$Country$Uzbekistan = {$: 'Uzbekistan'};
var $rakutentech$r10$R10$Country$Vanuatu = {$: 'Vanuatu'};
var $rakutentech$r10$R10$Country$Vatican = {$: 'Vatican'};
var $rakutentech$r10$R10$Country$Venezuela = {$: 'Venezuela'};
var $rakutentech$r10$R10$Country$Vietnam = {$: 'Vietnam'};
var $rakutentech$r10$R10$Country$WallisandFutuna = {$: 'WallisandFutuna'};
var $rakutentech$r10$R10$Country$Yemen = {$: 'Yemen'};
var $rakutentech$r10$R10$Country$Zambia = {$: 'Zambia'};
var $rakutentech$r10$R10$Country$Zimbabwe = {$: 'Zimbabwe'};
var $rakutentech$r10$R10$Country$fromCountryTelCode = function (code) {
	switch (code) {
		case '+93':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Afghanistan);
		case '+355':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Albania);
		case '+213':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Algeria);
		case '+1684':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$AmericanSamoa);
		case '+376':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Andorra);
		case '+244':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Angola);
		case '+1264':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Anguilla);
		case '+672':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Antarctica);
		case '+1268':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$AntiguaandBarbuda);
		case '+54':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Argentina);
		case '+374':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Armenia);
		case '+297':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Aruba);
		case '+61':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Australia);
		case '+43':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Austria);
		case '+994':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Azerbaijan);
		case '+1242':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Bahamas);
		case '+973':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Bahrain);
		case '+880':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Bangladesh);
		case '+1246':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Barbados);
		case '+375':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Belarus);
		case '+32':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Belgium);
		case '+501':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Belize);
		case '+229':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Benin);
		case '+1441':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Bermuda);
		case '+975':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Bhutan);
		case '+591':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Bolivia);
		case '+387':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$BosniaandHerzegovina);
		case '+267':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Botswana);
		case '+55':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Brazil);
		case '+246':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$BritishIndianOceanTerritory);
		case '+1284':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$BritishVirginIslands);
		case '+673':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Brunei);
		case '+359':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Bulgaria);
		case '+226':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$BurkinaFaso);
		case '+257':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Burundi);
		case '+855':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Cambodia);
		case '+237':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Cameroon);
		case '+238':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$CapeVerde);
		case '+1345':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$CaymanIslands);
		case '+236':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$CentralAfricanRepublic);
		case '+235':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Chad);
		case '+56':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Chile);
		case '+86':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$China);
		case '+6189164':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$ChristmasIsland);
		case '+6189162':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$CocosIslands);
		case '+57':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Colombia);
		case '+269':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Comoros);
		case '+682':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$CookIslands);
		case '+506':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$CostaRica);
		case '+385':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Croatia);
		case '+53':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Cuba);
		case '+599':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Curacao);
		case '+357':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Cyprus);
		case '+420':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$CzechRepublic);
		case '+243':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$DemocraticRepublicoftheCongo);
		case '+45':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Denmark);
		case '+253':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Djibouti);
		case '+1767':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Dominica);
		case '+1809':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$DominicanRepublic);
		case '+1829':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$DominicanRepublic);
		case '+1849':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$DominicanRepublic);
		case '+670':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$EastTimor);
		case '+593':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Ecuador);
		case '+20':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Egypt);
		case '+503':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$ElSalvador);
		case '+240':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$EquatorialGuinea);
		case '+291':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Eritrea);
		case '+372':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Estonia);
		case '+251':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Ethiopia);
		case '+500':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$FalklandIslands);
		case '+298':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$FaroeIslands);
		case '+679':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Fiji);
		case '+358':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Finland);
		case '+33':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$France);
		case '+689':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$FrenchPolynesia);
		case '+241':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Gabon);
		case '+220':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Gambia);
		case '+995':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Georgia);
		case '+49':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Germany);
		case '+233':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Ghana);
		case '+350':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Gibraltar);
		case '+30':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Greece);
		case '+299':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Greenland);
		case '+1473':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Grenada);
		case '+1671':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Guam);
		case '+502':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Guatemala);
		case '+441481':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Guernsey);
		case '+224':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Guinea);
		case '+245':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$GuineaBissau);
		case '+592':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Guyana);
		case '+509':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Haiti);
		case '+504':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Honduras);
		case '+852':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$HongKong);
		case '+36':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Hungary);
		case '+354':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Iceland);
		case '+91':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$India);
		case '+62':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Indonesia);
		case '+98':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Iran);
		case '+964':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Iraq);
		case '+353':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Ireland);
		case '+441624':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$IsleofMan);
		case '+972':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Israel);
		case '+39':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Italy);
		case '+225':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$IvoryCoast);
		case '+1876':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Jamaica);
		case '+81':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Japan);
		case '+441534':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Jersey);
		case '+962':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Jordan);
		case '+254':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Kenya);
		case '+686':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Kiribati);
		case '+383':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Kosovo);
		case '+965':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Kuwait);
		case '+996':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Kyrgyzstan);
		case '+856':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Laos);
		case '+371':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Latvia);
		case '+961':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Lebanon);
		case '+266':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Lesotho);
		case '+231':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Liberia);
		case '+218':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Libya);
		case '+423':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Liechtenstein);
		case '+370':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Lithuania);
		case '+352':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Luxembourg);
		case '+853':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Macau);
		case '+389':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Macedonia);
		case '+261':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Madagascar);
		case '+265':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Malawi);
		case '+60':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Malaysia);
		case '+960':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Maldives);
		case '+223':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Mali);
		case '+356':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Malta);
		case '+692':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$MarshallIslands);
		case '+222':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Mauritania);
		case '+230':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Mauritius);
		case '+262269':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Mayotte);
		case '+262639':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Mayotte);
		case '+52':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Mexico);
		case '+691':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Micronesia);
		case '+373':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Moldova);
		case '+377':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Monaco);
		case '+976':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Mongolia);
		case '+382':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Montenegro);
		case '+1664':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Montserrat);
		case '+212':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Morocco);
		case '+258':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Mozambique);
		case '+95':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Myanmar);
		case '+264':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Namibia);
		case '+674':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Nauru);
		case '+977':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Nepal);
		case '+31':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Netherlands);
		case '+687':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$NewCaledonia);
		case '+64':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$NewZealand);
		case '+505':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Nicaragua);
		case '+227':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Niger);
		case '+234':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Nigeria);
		case '+683':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Niue);
		case '+850':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$NorthKorea);
		case '+1670':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$NorthernMarianaIslands);
		case '+47':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Norway);
		case '+968':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Oman);
		case '+92':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Pakistan);
		case '+680':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Palau);
		case '+970':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Palestine);
		case '+507':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Panama);
		case '+675':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$PapuaNewGuinea);
		case '+595':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Paraguay);
		case '+51':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Peru);
		case '+63':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Philippines);
		case '+48':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Poland);
		case '+351':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Portugal);
		case '+1787':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$PuertoRico);
		case '+1939':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$PuertoRico);
		case '+974':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Qatar);
		case '+242':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$RepublicoftheCongo);
		case '+262':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Reunion);
		case '+40':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Romania);
		case '+7':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Russia);
		case '+250':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Rwanda);
		case '+290':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SaintHelena);
		case '+1869':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SaintKittsandNevis);
		case '+1758':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SaintLucia);
		case '+508':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SaintPierreandMiquelon);
		case '+1784':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SaintVincentandTheGrenadines);
		case '+685':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Samoa);
		case '+378':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SanMarino);
		case '+239':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SaoTomeandPrincipe);
		case '+966':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SaudiArabia);
		case '+221':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Senegal);
		case '+381':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Serbia);
		case '+248':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Seychelles);
		case '+232':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SierraLeone);
		case '+65':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Singapore);
		case '+1721':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SintMaarten);
		case '+421':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Slovakia);
		case '+386':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Slovenia);
		case '+677':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SolomonIslands);
		case '+252':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Somalia);
		case '+27':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SouthAfrica);
		case '+82':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SouthKorea);
		case '+211':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SouthSudan);
		case '+34':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Spain);
		case '+94':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SriLanka);
		case '+249':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Sudan);
		case '+597':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Suriname);
		case '+4779':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SvalbardandJanMayen);
		case '+268':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Swaziland);
		case '+46':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Sweden);
		case '+41':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Switzerland);
		case '+963':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Syria);
		case '+886':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Taiwan);
		case '+992':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Tajikistan);
		case '+255':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Tanzania);
		case '+66':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Thailand);
		case '+228':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Togo);
		case '+690':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Tokelau);
		case '+676':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Tonga);
		case '+1868':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$TrinidadandTobago);
		case '+216':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Tunisia);
		case '+90':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Turkey);
		case '+993':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Turkmenistan);
		case '+1649':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$TurksandCaicosIslands);
		case '+688':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Tuvalu);
		case '+1340':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$USVirginIslands);
		case '+256':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Uganda);
		case '+380':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Ukraine);
		case '+971':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$UnitedArabEmirates);
		case '+44':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$UnitedKingdom);
		case '+1':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$UnitedStates);
		case '+598':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Uruguay);
		case '+998':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Uzbekistan);
		case '+678':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Vanuatu);
		case '+379':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Vatican);
		case '+58':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Venezuela);
		case '+84':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Vietnam);
		case '+681':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$WallisandFutuna);
		case '+967':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Yemen);
		case '+260':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Zambia);
		case '+263':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Zimbabwe);
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$String$replace = F3(
	function (before, after, string) {
		return A2(
			$elm$core$String$join,
			after,
			A2($elm$core$String$split, before, string));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Update$extractCountry = function (untrimmedString) {
	var str = A3($elm$core$String$replace, ' ', '', untrimmedString);
	return A2($elm$core$String$startsWith, '+', str) ? $elm$core$List$head(
		A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			A2(
				$elm$core$List$map,
				$rakutentech$r10$R10$Country$fromCountryTelCode,
				A2(
					$elm$core$List$map,
					function (i) {
						return A2($elm$core$String$left, i, str);
					},
					$elm$core$List$reverse(
						A2($elm$core$List$range, 2, 7)))))) : $elm$core$Maybe$Nothing;
};
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Common$dropdownSearchBoxId = function (key) {
	return 'dropdown-search-' + key;
};
var $elm$browser$Browser$Dom$focus = _Browser_call('focus');
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Update$focusSearchBoxCmd = F2(
	function (key, _v0) {
		var model = _v0.a;
		var cmd = _v0.b;
		return _Utils_Tuple2(
			model,
			$elm$core$Platform$Cmd$batch(
				_List_fromArray(
					[
						cmd,
						A2(
						$elm$core$Task$attempt,
						$elm$core$Basics$always($rakutentech$r10$R10$FormComponents$Internal$Phone$Common$NoOp),
						$elm$browser$Browser$Dom$focus(
							$rakutentech$r10$R10$FormComponents$Internal$Phone$Common$dropdownSearchBoxId(key)))
					])));
	});
var $rakutentech$r10$R10$Country$Canada = {$: 'Canada'};
var $rakutentech$r10$R10$Country$Kazakhstan = {$: 'Kazakhstan'};
var $rakutentech$r10$R10$Country$Pitcairn = {$: 'Pitcairn'};
var $rakutentech$r10$R10$Country$SaintBarthelemy = {$: 'SaintBarthelemy'};
var $rakutentech$r10$R10$Country$SaintMartin = {$: 'SaintMartin'};
var $rakutentech$r10$R10$Country$WesternSahara = {$: 'WesternSahara'};
var $rakutentech$r10$R10$Country$fromString = function (str) {
	switch (str) {
		case 'Afghanistan':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Afghanistan);
		case 'Albania':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Albania);
		case 'Algeria':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Algeria);
		case 'American Samoa':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$AmericanSamoa);
		case 'Andorra':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Andorra);
		case 'Angola':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Angola);
		case 'Anguilla':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Anguilla);
		case 'Antarctica':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Antarctica);
		case 'Antigua and Barbuda':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$AntiguaandBarbuda);
		case 'Argentina':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Argentina);
		case 'Armenia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Armenia);
		case 'Aruba':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Aruba);
		case 'Australia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Australia);
		case 'Austria':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Austria);
		case 'Azerbaijan':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Azerbaijan);
		case 'Bahamas':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Bahamas);
		case 'Bahrain':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Bahrain);
		case 'Bangladesh':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Bangladesh);
		case 'Barbados':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Barbados);
		case 'Belarus':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Belarus);
		case 'Belgium':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Belgium);
		case 'Belize':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Belize);
		case 'Benin':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Benin);
		case 'Bermuda':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Bermuda);
		case 'Bhutan':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Bhutan);
		case 'Bolivia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Bolivia);
		case 'Bosnia and Herzegovina':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$BosniaandHerzegovina);
		case 'Botswana':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Botswana);
		case 'Brazil':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Brazil);
		case 'British Indian Ocean Territory':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$BritishIndianOceanTerritory);
		case 'British Virgin Islands':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$BritishVirginIslands);
		case 'Brunei':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Brunei);
		case 'Bulgaria':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Bulgaria);
		case 'Burkina Faso':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$BurkinaFaso);
		case 'Burundi':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Burundi);
		case 'Cambodia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Cambodia);
		case 'Cameroon':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Cameroon);
		case 'Canada':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Canada);
		case 'Cape Verde':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$CapeVerde);
		case 'Cayman Islands':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$CaymanIslands);
		case 'Central African Republic':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$CentralAfricanRepublic);
		case 'Chad':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Chad);
		case 'Chile':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Chile);
		case 'China':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$China);
		case 'Christmas Island':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$ChristmasIsland);
		case 'Cocos Islands':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$CocosIslands);
		case 'Colombia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Colombia);
		case 'Comoros':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Comoros);
		case 'Cook Islands':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$CookIslands);
		case 'Costa Rica':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$CostaRica);
		case 'Croatia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Croatia);
		case 'Cuba':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Cuba);
		case 'Curacao':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Curacao);
		case 'Cyprus':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Cyprus);
		case 'Czech Republic':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$CzechRepublic);
		case 'Democratic Republic of the Congo':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$DemocraticRepublicoftheCongo);
		case 'Denmark':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Denmark);
		case 'Djibouti':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Djibouti);
		case 'Dominica':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Dominica);
		case 'Dominican Republic':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$DominicanRepublic);
		case 'East Timor':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$EastTimor);
		case 'Ecuador':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Ecuador);
		case 'Egypt':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Egypt);
		case 'El Salvador':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$ElSalvador);
		case 'Equatorial Guinea':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$EquatorialGuinea);
		case 'Eritrea':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Eritrea);
		case 'Estonia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Estonia);
		case 'Ethiopia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Ethiopia);
		case 'Falkland Islands':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$FalklandIslands);
		case 'Faroe Islands':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$FaroeIslands);
		case 'Fiji':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Fiji);
		case 'Finland':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Finland);
		case 'France':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$France);
		case 'French Polynesia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$FrenchPolynesia);
		case 'Gabon':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Gabon);
		case 'Gambia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Gambia);
		case 'Georgia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Georgia);
		case 'Germany':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Germany);
		case 'Ghana':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Ghana);
		case 'Gibraltar':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Gibraltar);
		case 'Greece':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Greece);
		case 'Greenland':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Greenland);
		case 'Grenada':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Grenada);
		case 'Guam':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Guam);
		case 'Guatemala':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Guatemala);
		case 'Guernsey':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Guernsey);
		case 'Guinea':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Guinea);
		case 'Guinea-Bissau':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$GuineaBissau);
		case 'Guyana':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Guyana);
		case 'Haiti':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Haiti);
		case 'Honduras':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Honduras);
		case 'Hong Kong':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$HongKong);
		case 'Hungary':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Hungary);
		case 'Iceland':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Iceland);
		case 'India':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$India);
		case 'Indonesia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Indonesia);
		case 'Iran':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Iran);
		case 'Iraq':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Iraq);
		case 'Ireland':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Ireland);
		case 'Isle of Man':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$IsleofMan);
		case 'Israel':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Israel);
		case 'Italy':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Italy);
		case 'Ivory Coast':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$IvoryCoast);
		case 'Jamaica':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Jamaica);
		case 'Japan':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Japan);
		case 'Jersey':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Jersey);
		case 'Jordan':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Jordan);
		case 'Kazakhstan':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Kazakhstan);
		case 'Kenya':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Kenya);
		case 'Kiribati':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Kiribati);
		case 'Kosovo':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Kosovo);
		case 'Kuwait':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Kuwait);
		case 'Kyrgyzstan':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Kyrgyzstan);
		case 'Laos':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Laos);
		case 'Latvia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Latvia);
		case 'Lebanon':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Lebanon);
		case 'Lesotho':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Lesotho);
		case 'Liberia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Liberia);
		case 'Libya':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Libya);
		case 'Liechtenstein':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Liechtenstein);
		case 'Lithuania':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Lithuania);
		case 'Luxembourg':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Luxembourg);
		case 'Macau':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Macau);
		case 'Macedonia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Macedonia);
		case 'Madagascar':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Madagascar);
		case 'Malawi':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Malawi);
		case 'Malaysia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Malaysia);
		case 'Maldives':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Maldives);
		case 'Mali':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Mali);
		case 'Malta':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Malta);
		case 'Marshall Islands':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$MarshallIslands);
		case 'Mauritania':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Mauritania);
		case 'Mauritius':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Mauritius);
		case 'Mayotte':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Mayotte);
		case 'Mexico':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Mexico);
		case 'Micronesia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Micronesia);
		case 'Moldova':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Moldova);
		case 'Monaco':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Monaco);
		case 'Mongolia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Mongolia);
		case 'Montenegro':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Montenegro);
		case 'Montserrat':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Montserrat);
		case 'Morocco':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Morocco);
		case 'Mozambique':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Mozambique);
		case 'Myanmar':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Myanmar);
		case 'Namibia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Namibia);
		case 'Nauru':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Nauru);
		case 'Nepal':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Nepal);
		case 'Netherlands':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Netherlands);
		case 'New Caledonia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$NewCaledonia);
		case 'New Zealand':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$NewZealand);
		case 'Nicaragua':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Nicaragua);
		case 'Niger':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Niger);
		case 'Nigeria':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Nigeria);
		case 'Niue':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Niue);
		case 'North Korea':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$NorthKorea);
		case 'Northern Mariana Islands':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$NorthernMarianaIslands);
		case 'Norway':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Norway);
		case 'Oman':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Oman);
		case 'Pakistan':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Pakistan);
		case 'Palau':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Palau);
		case 'Palestine':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Palestine);
		case 'Panama':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Panama);
		case 'Papua New Guinea':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$PapuaNewGuinea);
		case 'Paraguay':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Paraguay);
		case 'Peru':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Peru);
		case 'Philippines':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Philippines);
		case 'Pitcairn':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Pitcairn);
		case 'Poland':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Poland);
		case 'Portugal':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Portugal);
		case 'Puerto Rico':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$PuertoRico);
		case 'Qatar':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Qatar);
		case 'Republic of the Congo':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$RepublicoftheCongo);
		case 'Reunion':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Reunion);
		case 'Romania':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Romania);
		case 'Russia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Russia);
		case 'Rwanda':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Rwanda);
		case 'Saint Barthelemy':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SaintBarthelemy);
		case 'Saint Helena':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SaintHelena);
		case 'Saint Kitts and Nevis':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SaintKittsandNevis);
		case 'Saint Lucia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SaintLucia);
		case 'Saint Martin':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SaintMartin);
		case 'Saint Pierre and Miquelon':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SaintPierreandMiquelon);
		case 'Saint Vincent and The Grenadines':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SaintVincentandTheGrenadines);
		case 'Samoa':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Samoa);
		case 'San Marino':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SanMarino);
		case 'Sao Tome and Principe':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SaoTomeandPrincipe);
		case 'Saudi Arabia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SaudiArabia);
		case 'Senegal':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Senegal);
		case 'Serbia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Serbia);
		case 'Seychelles':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Seychelles);
		case 'Sierra Leone':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SierraLeone);
		case 'Singapore':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Singapore);
		case 'Sint Maarten':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SintMaarten);
		case 'Slovakia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Slovakia);
		case 'Slovenia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Slovenia);
		case 'Solomon Islands':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SolomonIslands);
		case 'Somalia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Somalia);
		case 'South Africa':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SouthAfrica);
		case 'South Korea':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SouthKorea);
		case 'South Sudan':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SouthSudan);
		case 'Spain':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Spain);
		case 'Sri Lanka':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SriLanka);
		case 'Sudan':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Sudan);
		case 'Suriname':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Suriname);
		case 'Svalbard and Jan Mayen':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SvalbardandJanMayen);
		case 'Swaziland':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Swaziland);
		case 'Sweden':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Sweden);
		case 'Switzerland':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Switzerland);
		case 'Syria':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Syria);
		case 'Taiwan':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Taiwan);
		case 'Tajikistan':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Tajikistan);
		case 'Tanzania':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Tanzania);
		case 'Thailand':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Thailand);
		case 'Togo':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Togo);
		case 'Tokelau':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Tokelau);
		case 'Tonga':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Tonga);
		case 'Trinidad and Tobago':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$TrinidadandTobago);
		case 'Tunisia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Tunisia);
		case 'Turkey':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Turkey);
		case 'Turkmenistan':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Turkmenistan);
		case 'Turks and Caicos Islands':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$TurksandCaicosIslands);
		case 'Tuvalu':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Tuvalu);
		case 'U.S. Virgin Islands':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$USVirginIslands);
		case 'Uganda':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Uganda);
		case 'Ukraine':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Ukraine);
		case 'United Arab Emirates':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$UnitedArabEmirates);
		case 'United Kingdom':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$UnitedKingdom);
		case 'United States':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$UnitedStates);
		case 'Uruguay':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Uruguay);
		case 'Uzbekistan':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Uzbekistan);
		case 'Vanuatu':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Vanuatu);
		case 'Vatican':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Vatican);
		case 'Venezuela':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Venezuela);
		case 'Vietnam':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Vietnam);
		case 'Wallis and Futuna':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$WallisandFutuna);
		case 'Western Sahara':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$WesternSahara);
		case 'Yemen':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Yemen);
		case 'Zambia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Zambia);
		case 'Zimbabwe':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Zimbabwe);
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $elm_community$string_extra$String$Extra$regexFromString = A2(
	$elm$core$Basics$composeR,
	$elm$regex$Regex$fromString,
	$elm$core$Maybe$withDefault($elm$regex$Regex$never));
var $elm$regex$Regex$replace = _Regex_replaceAtMost(_Regex_infinity);
var $elm_community$string_extra$String$Extra$clean = function (string) {
	return $elm$core$String$trim(
		A3(
			$elm$regex$Regex$replace,
			$elm_community$string_extra$String$Extra$regexFromString('\\s\\s+'),
			$elm$core$Basics$always(' '),
			string));
};
var $elm$core$String$dropRight = F2(
	function (n, string) {
		return (n < 1) ? string : A3($elm$core$String$slice, 0, -n, string);
	});
var $rakutentech$r10$R10$Country$generatePrefixes = F2(
	function (listPrefixes, telephone) {
		generatePrefixes:
		while (true) {
			if ($elm$core$String$length(telephone) <= 1) {
				return listPrefixes;
			} else {
				var $temp$listPrefixes = A2($elm$core$List$cons, telephone, listPrefixes),
					$temp$telephone = A2($elm$core$String$dropRight, 1, telephone);
				listPrefixes = $temp$listPrefixes;
				telephone = $temp$telephone;
				continue generatePrefixes;
			}
		}
	});
var $rakutentech$r10$R10$Country$fromTelephoneAsString = function (telephone) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (string, acc) {
				if (acc.$ === 'Just') {
					return acc;
				} else {
					return $rakutentech$r10$R10$Country$fromCountryTelCode(string);
				}
			}),
		$elm$core$Maybe$Nothing,
		$elm$core$List$reverse(
			A2(
				$rakutentech$r10$R10$Country$generatePrefixes,
				_List_Nil,
				A2(
					$elm$core$String$left,
					8,
					$elm_community$string_extra$String$Extra$clean(telephone)))));
};
var $elm_community$list_extra$List$Extra$getAt = F2(
	function (idx, xs) {
		return (idx < 0) ? $elm$core$Maybe$Nothing : $elm$core$List$head(
			A2($elm$core$List$drop, idx, xs));
	});
var $elm_community$list_extra$List$Extra$findIndexHelp = F3(
	function (index, predicate, list) {
		findIndexHelp:
		while (true) {
			if (!list.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var x = list.a;
				var xs = list.b;
				if (predicate(x)) {
					return $elm$core$Maybe$Just(index);
				} else {
					var $temp$index = index + 1,
						$temp$predicate = predicate,
						$temp$list = xs;
					index = $temp$index;
					predicate = $temp$predicate;
					list = $temp$list;
					continue findIndexHelp;
				}
			}
		}
	});
var $elm_community$list_extra$List$Extra$findIndex = $elm_community$list_extra$List$Extra$findIndexHelp(0);
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Update$getOptionIndex = F2(
	function (fieldOptions, value) {
		return A2(
			$elm_community$list_extra$List$Extra$findIndex,
			function (country) {
				return _Utils_eq(country, value);
			},
			fieldOptions);
	});
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Update$dropdownHingeHeight = 10;
var $elm$core$Basics$min = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) < 0) ? x : y;
	});
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Update$getDropdownHeight = F2(
	function (args, optionsCount) {
		var displayCount = A2(
			$elm$core$Basics$max,
			1,
			A2($elm$core$Basics$min, args.maxDisplayCount, optionsCount));
		var bottomHingeHeight = (_Utils_eq(displayCount, optionsCount) || (!optionsCount)) ? $rakutentech$r10$R10$FormComponents$Internal$Phone$Update$dropdownHingeHeight : 0;
		var dropdownHeight = ((args.selectOptionHeight * displayCount) + $rakutentech$r10$R10$FormComponents$Internal$Phone$Update$dropdownHingeHeight) + bottomHingeHeight;
		return dropdownHeight;
	});
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Update$getOptionY = F4(
	function (scroll, args, optionIndex, optionsCount) {
		if (_Utils_eq(optionIndex, -1)) {
			return scroll;
		} else {
			if (!optionIndex) {
				return 0.0;
			} else {
				var maxViewport = {
					bottom: scroll + A2($rakutentech$r10$R10$FormComponents$Internal$Phone$Update$getDropdownHeight, args, optionsCount),
					top: scroll
				};
				var bottomHingeHeight = _Utils_eq(optionIndex, optionsCount - 1) ? $rakutentech$r10$R10$FormComponents$Internal$Phone$Update$dropdownHingeHeight : 0;
				var optionY = ((optionIndex * args.selectOptionHeight) + $rakutentech$r10$R10$FormComponents$Internal$Phone$Update$dropdownHingeHeight) + bottomHingeHeight;
				return (_Utils_cmp(optionY, maxViewport.bottom) > -1) ? (optionY - (A2($rakutentech$r10$R10$FormComponents$Internal$Phone$Update$getDropdownHeight, args, optionsCount) - args.selectOptionHeight)) : ((_Utils_cmp(optionY, maxViewport.top) < 1) ? optionY : scroll);
			}
		}
	});
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Update$inboundIndex = F2(
	function (maxIdx, idx) {
		return ((idx < 0) || (_Utils_cmp(idx, maxIdx) > 0)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(idx);
	});
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Update$getNewSelectAndY_ = F5(
	function (step, defaultIndex, defaultCountry, model, args) {
		var maybeCountryValue = $rakutentech$r10$R10$Country$fromTelephoneAsString(model.value);
		var currentSelect = function () {
			var _v0 = $rakutentech$r10$R10$Country$fromString(model.select);
			if (_v0.$ === 'Nothing') {
				return maybeCountryValue;
			} else {
				var country = _v0.a;
				return $elm$core$Maybe$Just(country);
			}
		}();
		var currentIndex = A2(
			$elm$core$Maybe$andThen,
			$rakutentech$r10$R10$FormComponents$Internal$Phone$Update$getOptionIndex(args.filteredFieldOption),
			currentSelect);
		var newIndex = A2(
			$elm$core$Maybe$withDefault,
			defaultIndex,
			A2(
				$elm$core$Maybe$andThen,
				$rakutentech$r10$R10$FormComponents$Internal$Phone$Update$inboundIndex(
					$elm$core$List$length(args.filteredFieldOption) - 1),
				A2(
					$elm$core$Maybe$map,
					function (index) {
						return index + step;
					},
					currentIndex)));
		var newSelect = A2(
			$elm$core$Maybe$withDefault,
			defaultCountry,
			A2($elm_community$list_extra$List$Extra$getAt, newIndex, args.filteredFieldOption));
		var newY = A4(
			$rakutentech$r10$R10$FormComponents$Internal$Phone$Update$getOptionY,
			model.scroll,
			args,
			newIndex,
			$elm$core$List$length(args.filteredFieldOption));
		return _Utils_Tuple2(newSelect, newY);
	});
var $rakutentech$r10$R10$Country$listHead = $rakutentech$r10$R10$Country$Afghanistan;
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Update$getNextNewSelectAndY = F2(
	function (model, args) {
		return A5($rakutentech$r10$R10$FormComponents$Internal$Phone$Update$getNewSelectAndY_, 1, 0, $rakutentech$r10$R10$Country$listHead, model, args);
	});
var $rakutentech$r10$R10$Country$listTail = $rakutentech$r10$R10$Country$Zimbabwe;
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Update$getPrevNewSelectAndY = F2(
	function (model, args) {
		return A5(
			$rakutentech$r10$R10$FormComponents$Internal$Phone$Update$getNewSelectAndY_,
			-1,
			$elm$core$List$length(args.filteredFieldOption) - 1,
			$rakutentech$r10$R10$Country$listTail,
			model,
			args);
	});
var $elm$core$List$member = F2(
	function (x, xs) {
		return A2(
			$elm$core$List$any,
			function (a) {
				return _Utils_eq(a, x);
			},
			xs);
	});
var $elm$browser$Browser$Dom$setViewportOf = _Browser_setViewportOf;
var $rakutentech$r10$R10$Country$toString = function (country) {
	switch (country.$) {
		case 'Afghanistan':
			return 'Afghanistan';
		case 'Albania':
			return 'Albania';
		case 'Algeria':
			return 'Algeria';
		case 'AmericanSamoa':
			return 'American Samoa';
		case 'Andorra':
			return 'Andorra';
		case 'Angola':
			return 'Angola';
		case 'Anguilla':
			return 'Anguilla';
		case 'Antarctica':
			return 'Antarctica';
		case 'AntiguaandBarbuda':
			return 'Antigua and Barbuda';
		case 'Argentina':
			return 'Argentina';
		case 'Armenia':
			return 'Armenia';
		case 'Aruba':
			return 'Aruba';
		case 'Australia':
			return 'Australia';
		case 'Austria':
			return 'Austria';
		case 'Azerbaijan':
			return 'Azerbaijan';
		case 'Bahamas':
			return 'Bahamas';
		case 'Bahrain':
			return 'Bahrain';
		case 'Bangladesh':
			return 'Bangladesh';
		case 'Barbados':
			return 'Barbados';
		case 'Belarus':
			return 'Belarus';
		case 'Belgium':
			return 'Belgium';
		case 'Belize':
			return 'Belize';
		case 'Benin':
			return 'Benin';
		case 'Bermuda':
			return 'Bermuda';
		case 'Bhutan':
			return 'Bhutan';
		case 'Bolivia':
			return 'Bolivia';
		case 'BosniaandHerzegovina':
			return 'Bosnia and Herzegovina';
		case 'Botswana':
			return 'Botswana';
		case 'Brazil':
			return 'Brazil';
		case 'BritishIndianOceanTerritory':
			return 'British Indian Ocean Territory';
		case 'BritishVirginIslands':
			return 'British Virgin Islands';
		case 'Brunei':
			return 'Brunei';
		case 'Bulgaria':
			return 'Bulgaria';
		case 'BurkinaFaso':
			return 'Burkina Faso';
		case 'Burundi':
			return 'Burundi';
		case 'Cambodia':
			return 'Cambodia';
		case 'Cameroon':
			return 'Cameroon';
		case 'Canada':
			return 'Canada';
		case 'CapeVerde':
			return 'Cape Verde';
		case 'CaymanIslands':
			return 'Cayman Islands';
		case 'CentralAfricanRepublic':
			return 'Central African Republic';
		case 'Chad':
			return 'Chad';
		case 'Chile':
			return 'Chile';
		case 'China':
			return 'China';
		case 'ChristmasIsland':
			return 'Christmas Island';
		case 'CocosIslands':
			return 'Cocos Islands';
		case 'Colombia':
			return 'Colombia';
		case 'Comoros':
			return 'Comoros';
		case 'CookIslands':
			return 'Cook Islands';
		case 'CostaRica':
			return 'Costa Rica';
		case 'Croatia':
			return 'Croatia';
		case 'Cuba':
			return 'Cuba';
		case 'Curacao':
			return 'Curacao';
		case 'Cyprus':
			return 'Cyprus';
		case 'CzechRepublic':
			return 'Czech Republic';
		case 'DemocraticRepublicoftheCongo':
			return 'Democratic Republic of the Congo';
		case 'Denmark':
			return 'Denmark';
		case 'Djibouti':
			return 'Djibouti';
		case 'Dominica':
			return 'Dominica';
		case 'DominicanRepublic':
			return 'Dominican Republic';
		case 'EastTimor':
			return 'East Timor';
		case 'Ecuador':
			return 'Ecuador';
		case 'Egypt':
			return 'Egypt';
		case 'ElSalvador':
			return 'El Salvador';
		case 'EquatorialGuinea':
			return 'Equatorial Guinea';
		case 'Eritrea':
			return 'Eritrea';
		case 'Estonia':
			return 'Estonia';
		case 'Ethiopia':
			return 'Ethiopia';
		case 'FalklandIslands':
			return 'Falkland Islands';
		case 'FaroeIslands':
			return 'Faroe Islands';
		case 'Fiji':
			return 'Fiji';
		case 'Finland':
			return 'Finland';
		case 'France':
			return 'France';
		case 'FrenchPolynesia':
			return 'French Polynesia';
		case 'Gabon':
			return 'Gabon';
		case 'Gambia':
			return 'Gambia';
		case 'Georgia':
			return 'Georgia';
		case 'Germany':
			return 'Germany';
		case 'Ghana':
			return 'Ghana';
		case 'Gibraltar':
			return 'Gibraltar';
		case 'Greece':
			return 'Greece';
		case 'Greenland':
			return 'Greenland';
		case 'Grenada':
			return 'Grenada';
		case 'Guam':
			return 'Guam';
		case 'Guatemala':
			return 'Guatemala';
		case 'Guernsey':
			return 'Guernsey';
		case 'Guinea':
			return 'Guinea';
		case 'GuineaBissau':
			return 'Guinea-Bissau';
		case 'Guyana':
			return 'Guyana';
		case 'Haiti':
			return 'Haiti';
		case 'Honduras':
			return 'Honduras';
		case 'HongKong':
			return 'Hong Kong';
		case 'Hungary':
			return 'Hungary';
		case 'Iceland':
			return 'Iceland';
		case 'India':
			return 'India';
		case 'Indonesia':
			return 'Indonesia';
		case 'Iran':
			return 'Iran';
		case 'Iraq':
			return 'Iraq';
		case 'Ireland':
			return 'Ireland';
		case 'IsleofMan':
			return 'Isle of Man';
		case 'Israel':
			return 'Israel';
		case 'Italy':
			return 'Italy';
		case 'IvoryCoast':
			return 'Ivory Coast';
		case 'Jamaica':
			return 'Jamaica';
		case 'Japan':
			return 'Japan';
		case 'Jersey':
			return 'Jersey';
		case 'Jordan':
			return 'Jordan';
		case 'Kazakhstan':
			return 'Kazakhstan';
		case 'Kenya':
			return 'Kenya';
		case 'Kiribati':
			return 'Kiribati';
		case 'Kosovo':
			return 'Kosovo';
		case 'Kuwait':
			return 'Kuwait';
		case 'Kyrgyzstan':
			return 'Kyrgyzstan';
		case 'Laos':
			return 'Laos';
		case 'Latvia':
			return 'Latvia';
		case 'Lebanon':
			return 'Lebanon';
		case 'Lesotho':
			return 'Lesotho';
		case 'Liberia':
			return 'Liberia';
		case 'Libya':
			return 'Libya';
		case 'Liechtenstein':
			return 'Liechtenstein';
		case 'Lithuania':
			return 'Lithuania';
		case 'Luxembourg':
			return 'Luxembourg';
		case 'Macau':
			return 'Macau';
		case 'Macedonia':
			return 'Macedonia';
		case 'Madagascar':
			return 'Madagascar';
		case 'Malawi':
			return 'Malawi';
		case 'Malaysia':
			return 'Malaysia';
		case 'Maldives':
			return 'Maldives';
		case 'Mali':
			return 'Mali';
		case 'Malta':
			return 'Malta';
		case 'MarshallIslands':
			return 'Marshall Islands';
		case 'Mauritania':
			return 'Mauritania';
		case 'Mauritius':
			return 'Mauritius';
		case 'Mayotte':
			return 'Mayotte';
		case 'Mexico':
			return 'Mexico';
		case 'Micronesia':
			return 'Micronesia';
		case 'Moldova':
			return 'Moldova';
		case 'Monaco':
			return 'Monaco';
		case 'Mongolia':
			return 'Mongolia';
		case 'Montenegro':
			return 'Montenegro';
		case 'Montserrat':
			return 'Montserrat';
		case 'Morocco':
			return 'Morocco';
		case 'Mozambique':
			return 'Mozambique';
		case 'Myanmar':
			return 'Myanmar';
		case 'Namibia':
			return 'Namibia';
		case 'Nauru':
			return 'Nauru';
		case 'Nepal':
			return 'Nepal';
		case 'Netherlands':
			return 'Netherlands';
		case 'NewCaledonia':
			return 'New Caledonia';
		case 'NewZealand':
			return 'New Zealand';
		case 'Nicaragua':
			return 'Nicaragua';
		case 'Niger':
			return 'Niger';
		case 'Nigeria':
			return 'Nigeria';
		case 'Niue':
			return 'Niue';
		case 'NorthKorea':
			return 'North Korea';
		case 'NorthernMarianaIslands':
			return 'Northern Mariana Islands';
		case 'Norway':
			return 'Norway';
		case 'Oman':
			return 'Oman';
		case 'Pakistan':
			return 'Pakistan';
		case 'Palau':
			return 'Palau';
		case 'Palestine':
			return 'Palestine';
		case 'Panama':
			return 'Panama';
		case 'PapuaNewGuinea':
			return 'Papua New Guinea';
		case 'Paraguay':
			return 'Paraguay';
		case 'Peru':
			return 'Peru';
		case 'Philippines':
			return 'Philippines';
		case 'Pitcairn':
			return 'Pitcairn';
		case 'Poland':
			return 'Poland';
		case 'Portugal':
			return 'Portugal';
		case 'PuertoRico':
			return 'Puerto Rico';
		case 'Qatar':
			return 'Qatar';
		case 'RepublicoftheCongo':
			return 'Republic of the Congo';
		case 'Reunion':
			return 'Reunion';
		case 'Romania':
			return 'Romania';
		case 'Russia':
			return 'Russia';
		case 'Rwanda':
			return 'Rwanda';
		case 'SaintBarthelemy':
			return 'Saint Barthelemy';
		case 'SaintHelena':
			return 'Saint Helena';
		case 'SaintKittsandNevis':
			return 'Saint Kitts and Nevis';
		case 'SaintLucia':
			return 'Saint Lucia';
		case 'SaintMartin':
			return 'Saint Martin';
		case 'SaintPierreandMiquelon':
			return 'Saint Pierre and Miquelon';
		case 'SaintVincentandTheGrenadines':
			return 'Saint Vincent and The Grenadines';
		case 'Samoa':
			return 'Samoa';
		case 'SanMarino':
			return 'San Marino';
		case 'SaoTomeandPrincipe':
			return 'Sao Tome and Principe';
		case 'SaudiArabia':
			return 'Saudi Arabia';
		case 'Senegal':
			return 'Senegal';
		case 'Serbia':
			return 'Serbia';
		case 'Seychelles':
			return 'Seychelles';
		case 'SierraLeone':
			return 'Sierra Leone';
		case 'Singapore':
			return 'Singapore';
		case 'SintMaarten':
			return 'Sint Maarten';
		case 'Slovakia':
			return 'Slovakia';
		case 'Slovenia':
			return 'Slovenia';
		case 'SolomonIslands':
			return 'Solomon Islands';
		case 'Somalia':
			return 'Somalia';
		case 'SouthAfrica':
			return 'South Africa';
		case 'SouthKorea':
			return 'South Korea';
		case 'SouthSudan':
			return 'South Sudan';
		case 'Spain':
			return 'Spain';
		case 'SriLanka':
			return 'Sri Lanka';
		case 'Sudan':
			return 'Sudan';
		case 'Suriname':
			return 'Suriname';
		case 'SvalbardandJanMayen':
			return 'Svalbard and Jan Mayen';
		case 'Swaziland':
			return 'Swaziland';
		case 'Sweden':
			return 'Sweden';
		case 'Switzerland':
			return 'Switzerland';
		case 'Syria':
			return 'Syria';
		case 'Taiwan':
			return 'Taiwan';
		case 'Tajikistan':
			return 'Tajikistan';
		case 'Tanzania':
			return 'Tanzania';
		case 'Thailand':
			return 'Thailand';
		case 'Togo':
			return 'Togo';
		case 'Tokelau':
			return 'Tokelau';
		case 'Tonga':
			return 'Tonga';
		case 'TrinidadandTobago':
			return 'Trinidad and Tobago';
		case 'Tunisia':
			return 'Tunisia';
		case 'Turkey':
			return 'Turkey';
		case 'Turkmenistan':
			return 'Turkmenistan';
		case 'TurksandCaicosIslands':
			return 'Turks and Caicos Islands';
		case 'Tuvalu':
			return 'Tuvalu';
		case 'USVirginIslands':
			return 'U.S. Virgin Islands';
		case 'Uganda':
			return 'Uganda';
		case 'Ukraine':
			return 'Ukraine';
		case 'UnitedArabEmirates':
			return 'United Arab Emirates';
		case 'UnitedKingdom':
			return 'United Kingdom';
		case 'UnitedStates':
			return 'United States';
		case 'Uruguay':
			return 'Uruguay';
		case 'Uzbekistan':
			return 'Uzbekistan';
		case 'Vanuatu':
			return 'Vanuatu';
		case 'Vatican':
			return 'Vatican';
		case 'Venezuela':
			return 'Venezuela';
		case 'Vietnam':
			return 'Vietnam';
		case 'WallisandFutuna':
			return 'Wallis and Futuna';
		case 'WesternSahara':
			return 'Western Sahara';
		case 'Yemen':
			return 'Yemen';
		case 'Zambia':
			return 'Zambia';
		default:
			return 'Zimbabwe';
	}
};
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Update$onArrowHelper = F4(
	function (model, key, country, _float) {
		return _Utils_Tuple2(
			_Utils_update(
				model,
				{
					scroll: _float,
					select: $rakutentech$r10$R10$Country$toString(country)
				}),
			A2(
				$elm$core$Task$attempt,
				$elm$core$Basics$always($rakutentech$r10$R10$FormComponents$Internal$Phone$Common$NoOp),
				A3(
					$elm$browser$Browser$Dom$setViewportOf,
					$rakutentech$r10$R10$FormComponents$Internal$Phone$Common$dropdownContentId(key),
					0,
					_float)));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Update$onOpenHelper = F3(
	function (model, key, _float) {
		return _Utils_Tuple2(
			_Utils_update(
				model,
				{opened: true, scroll: _float}),
			A2(
				$elm$core$Task$attempt,
				$elm$core$Basics$always($rakutentech$r10$R10$FormComponents$Internal$Phone$Common$NoOp),
				A3(
					$elm$browser$Browser$Dom$setViewportOf,
					$rakutentech$r10$R10$FormComponents$Internal$Phone$Common$dropdownContentId(key),
					0,
					_float)));
	});
var $rakutentech$r10$R10$Country$toCountryTelCode = function (country) {
	switch (country.$) {
		case 'Afghanistan':
			return '+93';
		case 'Albania':
			return '+355';
		case 'Algeria':
			return '+213';
		case 'AmericanSamoa':
			return '+1684';
		case 'Andorra':
			return '+376';
		case 'Angola':
			return '+244';
		case 'Anguilla':
			return '+1264';
		case 'Antarctica':
			return '+672';
		case 'AntiguaandBarbuda':
			return '+1268';
		case 'Argentina':
			return '+54';
		case 'Armenia':
			return '+374';
		case 'Aruba':
			return '+297';
		case 'Australia':
			return '+61';
		case 'Austria':
			return '+43';
		case 'Azerbaijan':
			return '+994';
		case 'Bahamas':
			return '+1242';
		case 'Bahrain':
			return '+973';
		case 'Bangladesh':
			return '+880';
		case 'Barbados':
			return '+1246';
		case 'Belarus':
			return '+375';
		case 'Belgium':
			return '+32';
		case 'Belize':
			return '+501';
		case 'Benin':
			return '+229';
		case 'Bermuda':
			return '+1441';
		case 'Bhutan':
			return '+975';
		case 'Bolivia':
			return '+591';
		case 'BosniaandHerzegovina':
			return '+387';
		case 'Botswana':
			return '+267';
		case 'Brazil':
			return '+55';
		case 'BritishIndianOceanTerritory':
			return '+246';
		case 'BritishVirginIslands':
			return '+1284';
		case 'Brunei':
			return '+673';
		case 'Bulgaria':
			return '+359';
		case 'BurkinaFaso':
			return '+226';
		case 'Burundi':
			return '+257';
		case 'Cambodia':
			return '+855';
		case 'Cameroon':
			return '+237';
		case 'Canada':
			return '+1';
		case 'CapeVerde':
			return '+238';
		case 'CaymanIslands':
			return '+1345';
		case 'CentralAfricanRepublic':
			return '+236';
		case 'Chad':
			return '+235';
		case 'Chile':
			return '+56';
		case 'China':
			return '+86';
		case 'ChristmasIsland':
			return '+6189164';
		case 'CocosIslands':
			return '+6189162';
		case 'Colombia':
			return '+57';
		case 'Comoros':
			return '+269';
		case 'CookIslands':
			return '+682';
		case 'CostaRica':
			return '+506';
		case 'Croatia':
			return '+385';
		case 'Cuba':
			return '+53';
		case 'Curacao':
			return '+599';
		case 'Cyprus':
			return '+357';
		case 'CzechRepublic':
			return '+420';
		case 'DemocraticRepublicoftheCongo':
			return '+243';
		case 'Denmark':
			return '+45';
		case 'Djibouti':
			return '+253';
		case 'Dominica':
			return '+1767';
		case 'DominicanRepublic':
			return '+1809';
		case 'EastTimor':
			return '+670';
		case 'Ecuador':
			return '+593';
		case 'Egypt':
			return '+20';
		case 'ElSalvador':
			return '+503';
		case 'EquatorialGuinea':
			return '+240';
		case 'Eritrea':
			return '+291';
		case 'Estonia':
			return '+372';
		case 'Ethiopia':
			return '+251';
		case 'FalklandIslands':
			return '+500';
		case 'FaroeIslands':
			return '+298';
		case 'Fiji':
			return '+679';
		case 'Finland':
			return '+358';
		case 'France':
			return '+33';
		case 'FrenchPolynesia':
			return '+689';
		case 'Gabon':
			return '+241';
		case 'Gambia':
			return '+220';
		case 'Georgia':
			return '+995';
		case 'Germany':
			return '+49';
		case 'Ghana':
			return '+233';
		case 'Gibraltar':
			return '+350';
		case 'Greece':
			return '+30';
		case 'Greenland':
			return '+299';
		case 'Grenada':
			return '+1473';
		case 'Guam':
			return '+1671';
		case 'Guatemala':
			return '+502';
		case 'Guernsey':
			return '+441481';
		case 'Guinea':
			return '+224';
		case 'GuineaBissau':
			return '+245';
		case 'Guyana':
			return '+592';
		case 'Haiti':
			return '+509';
		case 'Honduras':
			return '+504';
		case 'HongKong':
			return '+852';
		case 'Hungary':
			return '+36';
		case 'Iceland':
			return '+354';
		case 'India':
			return '+91';
		case 'Indonesia':
			return '+62';
		case 'Iran':
			return '+98';
		case 'Iraq':
			return '+964';
		case 'Ireland':
			return '+353';
		case 'IsleofMan':
			return '+441624';
		case 'Israel':
			return '+972';
		case 'Italy':
			return '+39';
		case 'IvoryCoast':
			return '+225';
		case 'Jamaica':
			return '+1876';
		case 'Japan':
			return '+81';
		case 'Jersey':
			return '+441534';
		case 'Jordan':
			return '+962';
		case 'Kazakhstan':
			return '+7';
		case 'Kenya':
			return '+254';
		case 'Kiribati':
			return '+686';
		case 'Kosovo':
			return '+383';
		case 'Kuwait':
			return '+965';
		case 'Kyrgyzstan':
			return '+996';
		case 'Laos':
			return '+856';
		case 'Latvia':
			return '+371';
		case 'Lebanon':
			return '+961';
		case 'Lesotho':
			return '+266';
		case 'Liberia':
			return '+231';
		case 'Libya':
			return '+218';
		case 'Liechtenstein':
			return '+423';
		case 'Lithuania':
			return '+370';
		case 'Luxembourg':
			return '+352';
		case 'Macau':
			return '+853';
		case 'Macedonia':
			return '+389';
		case 'Madagascar':
			return '+261';
		case 'Malawi':
			return '+265';
		case 'Malaysia':
			return '+60';
		case 'Maldives':
			return '+960';
		case 'Mali':
			return '+223';
		case 'Malta':
			return '+356';
		case 'MarshallIslands':
			return '+692';
		case 'Mauritania':
			return '+222';
		case 'Mauritius':
			return '+230';
		case 'Mayotte':
			return '+262';
		case 'Mexico':
			return '+52';
		case 'Micronesia':
			return '+691';
		case 'Moldova':
			return '+373';
		case 'Monaco':
			return '+377';
		case 'Mongolia':
			return '+976';
		case 'Montenegro':
			return '+382';
		case 'Montserrat':
			return '+1664';
		case 'Morocco':
			return '+212';
		case 'Mozambique':
			return '+258';
		case 'Myanmar':
			return '+95';
		case 'Namibia':
			return '+264';
		case 'Nauru':
			return '+674';
		case 'Nepal':
			return '+977';
		case 'Netherlands':
			return '+31';
		case 'NewCaledonia':
			return '+687';
		case 'NewZealand':
			return '+64';
		case 'Nicaragua':
			return '+505';
		case 'Niger':
			return '+227';
		case 'Nigeria':
			return '+234';
		case 'Niue':
			return '+683';
		case 'NorthKorea':
			return '+850';
		case 'NorthernMarianaIslands':
			return '+1670';
		case 'Norway':
			return '+47';
		case 'Oman':
			return '+968';
		case 'Pakistan':
			return '+92';
		case 'Palau':
			return '+680';
		case 'Palestine':
			return '+970';
		case 'Panama':
			return '+507';
		case 'PapuaNewGuinea':
			return '+675';
		case 'Paraguay':
			return '+595';
		case 'Peru':
			return '+51';
		case 'Philippines':
			return '+63';
		case 'Pitcairn':
			return '+64';
		case 'Poland':
			return '+48';
		case 'Portugal':
			return '+351';
		case 'PuertoRico':
			return '+1787';
		case 'Qatar':
			return '+974';
		case 'RepublicoftheCongo':
			return '+242';
		case 'Reunion':
			return '+262';
		case 'Romania':
			return '+40';
		case 'Russia':
			return '+7';
		case 'Rwanda':
			return '+250';
		case 'SaintBarthelemy':
			return '+590';
		case 'SaintHelena':
			return '+290';
		case 'SaintKittsandNevis':
			return '+1869';
		case 'SaintLucia':
			return '+1758';
		case 'SaintMartin':
			return '+590';
		case 'SaintPierreandMiquelon':
			return '+508';
		case 'SaintVincentandTheGrenadines':
			return '+1784';
		case 'Samoa':
			return '+685';
		case 'SanMarino':
			return '+378';
		case 'SaoTomeandPrincipe':
			return '+239';
		case 'SaudiArabia':
			return '+966';
		case 'Senegal':
			return '+221';
		case 'Serbia':
			return '+381';
		case 'Seychelles':
			return '+248';
		case 'SierraLeone':
			return '+232';
		case 'Singapore':
			return '+65';
		case 'SintMaarten':
			return '+1721';
		case 'Slovakia':
			return '+421';
		case 'Slovenia':
			return '+386';
		case 'SolomonIslands':
			return '+677';
		case 'Somalia':
			return '+252';
		case 'SouthAfrica':
			return '+27';
		case 'SouthKorea':
			return '+82';
		case 'SouthSudan':
			return '+211';
		case 'Spain':
			return '+34';
		case 'SriLanka':
			return '+94';
		case 'Sudan':
			return '+249';
		case 'Suriname':
			return '+597';
		case 'SvalbardandJanMayen':
			return '+47';
		case 'Swaziland':
			return '+268';
		case 'Sweden':
			return '+46';
		case 'Switzerland':
			return '+41';
		case 'Syria':
			return '+963';
		case 'Taiwan':
			return '+886';
		case 'Tajikistan':
			return '+992';
		case 'Tanzania':
			return '+255';
		case 'Thailand':
			return '+66';
		case 'Togo':
			return '+228';
		case 'Tokelau':
			return '+690';
		case 'Tonga':
			return '+676';
		case 'TrinidadandTobago':
			return '+1868';
		case 'Tunisia':
			return '+216';
		case 'Turkey':
			return '+90';
		case 'Turkmenistan':
			return '+993';
		case 'TurksandCaicosIslands':
			return '+1649';
		case 'Tuvalu':
			return '+688';
		case 'USVirginIslands':
			return '+1340';
		case 'Uganda':
			return '+256';
		case 'Ukraine':
			return '+380';
		case 'UnitedArabEmirates':
			return '+971';
		case 'UnitedKingdom':
			return '+44';
		case 'UnitedStates':
			return '+1';
		case 'Uruguay':
			return '+598';
		case 'Uzbekistan':
			return '+998';
		case 'Vanuatu':
			return '+678';
		case 'Vatican':
			return '+379';
		case 'Venezuela':
			return '+58';
		case 'Vietnam':
			return '+84';
		case 'WallisandFutuna':
			return '+681';
		case 'WesternSahara':
			return '+212';
		case 'Yemen':
			return '+967';
		case 'Zambia':
			return '+260';
		default:
			return '+263';
	}
};
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Update$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'NoOp':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'OnFocus':
				var value = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{focused: true, value: value}),
					$elm$core$Platform$Cmd$none);
			case 'OnLoseFocus':
				var value = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{focused: false, opened: false, search: '', select: '', value: value}),
					$elm$core$Platform$Cmd$none);
			case 'OnScroll':
				var scroll = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{scroll: scroll}),
					$elm$core$Platform$Cmd$none);
			case 'OnEsc':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{opened: false, search: ''}),
					$elm$core$Platform$Cmd$none);
			case 'OnValueChange':
				var key = msg.a;
				var args = msg.b;
				var newValue_ = msg.c;
				var maybeCountryValue = $rakutentech$r10$R10$Country$fromTelephoneAsString(model.value);
				var newValue = function (v) {
					return _Utils_ap(v, newValue_);
				}(
					A2(
						$elm$core$Maybe$withDefault,
						'',
						A2($elm$core$Maybe$map, $rakutentech$r10$R10$Country$toCountryTelCode, maybeCountryValue)));
				var hasCurrentCountryCode = function () {
					if (maybeCountryValue.$ === 'Just') {
						var countryValue = maybeCountryValue.a;
						return A2(
							$elm$core$String$startsWith,
							$rakutentech$r10$R10$Country$toCountryTelCode(countryValue),
							A3($elm$core$String$replace, ' ', '', newValue));
					} else {
						return false;
					}
				}();
				var newCountryValue = function () {
					if (hasCurrentCountryCode) {
						return maybeCountryValue;
					} else {
						var codeFromVal = $rakutentech$r10$R10$FormComponents$Internal$Phone$Update$extractCountry(newValue);
						return (!_Utils_eq(codeFromVal, $elm$core$Maybe$Nothing)) ? codeFromVal : maybeCountryValue;
					}
				}();
				var newY = _Utils_eq(newCountryValue, maybeCountryValue) ? model.scroll : A2(
					$elm$core$Maybe$withDefault,
					model.scroll,
					A2(
						$elm$core$Maybe$map,
						function (newIndex) {
							return A4(
								$rakutentech$r10$R10$FormComponents$Internal$Phone$Update$getOptionY,
								model.scroll,
								args,
								newIndex,
								$elm$core$List$length(args.filteredFieldOption));
						},
						A2(
							$elm$core$Maybe$andThen,
							$rakutentech$r10$R10$FormComponents$Internal$Phone$Update$getOptionIndex(args.filteredFieldOption),
							newCountryValue)));
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{scroll: newY, value: newValue}),
					A2(
						$elm$core$Task$attempt,
						$elm$core$Basics$always($rakutentech$r10$R10$FormComponents$Internal$Phone$Common$NoOp),
						A3(
							$elm$browser$Browser$Dom$setViewportOf,
							$rakutentech$r10$R10$FormComponents$Internal$Phone$Common$dropdownContentId(key),
							0,
							newY)));
			case 'OnSearch':
				var args = msg.a;
				var newSearch = msg.b;
				var isSelectInsideCountryOptions = A2(
					$elm$core$Maybe$withDefault,
					false,
					A2(
						$elm$core$Maybe$map,
						function (s) {
							return A2($elm$core$List$member, s, args.filteredFieldOption);
						},
						$rakutentech$r10$R10$Country$fromString(model.select)));
				var newSelect = isSelectInsideCountryOptions ? $rakutentech$r10$R10$Country$fromString(model.select) : $elm$core$List$head(args.filteredFieldOption);
				var maybeNewIndex = A2(
					$elm$core$Maybe$andThen,
					$rakutentech$r10$R10$FormComponents$Internal$Phone$Update$getOptionIndex(args.filteredFieldOption),
					newSelect);
				var newY = A2(
					$elm$core$Maybe$withDefault,
					model.scroll,
					A2(
						$elm$core$Maybe$map,
						function (newIndex) {
							return A4(
								$rakutentech$r10$R10$FormComponents$Internal$Phone$Update$getOptionY,
								model.scroll,
								args,
								newIndex,
								$elm$core$List$length(args.filteredFieldOption));
						},
						maybeNewIndex));
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							scroll: newY,
							search: newSearch,
							select: A2(
								$elm$core$Maybe$withDefault,
								'',
								A2($elm$core$Maybe$map, $rakutentech$r10$R10$Country$toString, newSelect))
						}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								A2(
								$elm$core$Task$attempt,
								$elm$core$Basics$always($rakutentech$r10$R10$FormComponents$Internal$Phone$Common$NoOp),
								A3(
									$elm$browser$Browser$Dom$setViewportOf,
									$rakutentech$r10$R10$FormComponents$Internal$Phone$Common$dropdownContentId(args.key),
									0,
									newY))
							])));
			case 'OnOptionSelect':
				var newCountry = msg.a;
				var newCode = $rakutentech$r10$R10$Country$toCountryTelCode(newCountry);
				var maybeCountryValue = $rakutentech$r10$R10$Country$fromTelephoneAsString(model.value);
				var newValue = function () {
					if (maybeCountryValue.$ === 'Just') {
						var oldCountry = maybeCountryValue.a;
						var oldCode = $rakutentech$r10$R10$Country$toCountryTelCode(oldCountry);
						return A3(
							$elm$core$String$replace,
							'  ',
							' ',
							A3(
								$elm$core$String$replace,
								oldCode,
								newCode,
								A3($elm$core$String$replace, ' ', '', model.value)));
					} else {
						return _Utils_ap(newCode + ' ', model.value);
					}
				}();
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{opened: false, search: '', select: '', value: newValue}),
					$elm$core$Platform$Cmd$none);
			case 'OnInputClick':
				var args = msg.a;
				return model.opened ? _Utils_Tuple2(
					_Utils_update(
						model,
						{opened: false, scroll: args.selectedY}),
					$elm$core$Platform$Cmd$none) : A2(
					$rakutentech$r10$R10$FormComponents$Internal$Phone$Update$focusSearchBoxCmd,
					args.key,
					A3($rakutentech$r10$R10$FormComponents$Internal$Phone$Update$onOpenHelper, model, args.key, args.selectedY));
			case 'OnArrowUp':
				var args = msg.a;
				return model.opened ? function (_v3) {
					var newValue = _v3.a;
					var newY = _v3.b;
					return A4($rakutentech$r10$R10$FormComponents$Internal$Phone$Update$onArrowHelper, model, args.key, newValue, newY);
				}(
					A2($rakutentech$r10$R10$FormComponents$Internal$Phone$Update$getPrevNewSelectAndY, model, args)) : A3($rakutentech$r10$R10$FormComponents$Internal$Phone$Update$onOpenHelper, model, args.key, model.scroll);
			default:
				var args = msg.a;
				return model.opened ? function (_v4) {
					var newValue = _v4.a;
					var newY = _v4.b;
					return A4($rakutentech$r10$R10$FormComponents$Internal$Phone$Update$onArrowHelper, model, args.key, newValue, newY);
				}(
					A2($rakutentech$r10$R10$FormComponents$Internal$Phone$Update$getNextNewSelectAndY, model, args)) : A3($rakutentech$r10$R10$FormComponents$Internal$Phone$Update$onOpenHelper, model, args.key, model.scroll);
		}
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$Common$NoOp = {$: 'NoOp'};
var $rakutentech$r10$R10$FormComponents$Internal$Single$Common$dropdownContentId = function (key) {
	return 'single-dropdown-content-' + key;
};
var $rakutentech$r10$R10$FormComponents$Internal$Single$Update$getOptionIndex = F2(
	function (filteredOptions, value) {
		return A2(
			$elm_community$list_extra$List$Extra$findIndex,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.value;
				},
				$elm$core$Basics$eq(value)),
			filteredOptions);
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$Update$dropdownHingeHeight = 10;
var $rakutentech$r10$R10$FormComponents$Internal$Single$Update$getDropdownHeight = F2(
	function (args, optionsCount) {
		var displayCount = A2(
			$elm$core$Basics$max,
			1,
			A2($elm$core$Basics$min, args.maxDisplayCount, optionsCount));
		var bottomHingeHeight = (_Utils_eq(displayCount, optionsCount) || (!optionsCount)) ? $rakutentech$r10$R10$FormComponents$Internal$Single$Update$dropdownHingeHeight : 0;
		var dropdownHeight = ((args.selectOptionHeight * displayCount) + $rakutentech$r10$R10$FormComponents$Internal$Single$Update$dropdownHingeHeight) + bottomHingeHeight;
		return dropdownHeight;
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$Update$getOptionY = F4(
	function (scroll, args, optionIndex, optionsCount) {
		if (_Utils_eq(optionIndex, -1)) {
			return scroll;
		} else {
			if (!optionIndex) {
				return 0.0;
			} else {
				var maxViewport = {
					bottom: scroll + A2($rakutentech$r10$R10$FormComponents$Internal$Single$Update$getDropdownHeight, args, optionsCount),
					top: scroll
				};
				var bottomHingeHeight = _Utils_eq(optionIndex, optionsCount - 1) ? $rakutentech$r10$R10$FormComponents$Internal$Single$Update$dropdownHingeHeight : 0;
				var optionY = ((optionIndex * args.selectOptionHeight) + $rakutentech$r10$R10$FormComponents$Internal$Single$Update$dropdownHingeHeight) + bottomHingeHeight;
				return (_Utils_cmp(optionY, maxViewport.bottom) > -1) ? (optionY - (A2($rakutentech$r10$R10$FormComponents$Internal$Single$Update$getDropdownHeight, args, optionsCount) - args.selectOptionHeight)) : ((_Utils_cmp(optionY, maxViewport.top) < 1) ? optionY : scroll);
			}
		}
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$Update$inboundIndex = F2(
	function (maxIdx, idx) {
		return ((idx < 0) || (_Utils_cmp(idx, maxIdx) > 0)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(idx);
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$Update$getNewSelectAndY_ = F4(
	function (step, _default, model, args) {
		var select = $elm$core$String$isEmpty(model.select) ? model.value : model.select;
		var newIndex = A2(
			$elm$core$Maybe$withDefault,
			_default,
			A2(
				$elm$core$Maybe$andThen,
				$rakutentech$r10$R10$FormComponents$Internal$Single$Update$inboundIndex(
					$elm$core$List$length(args.filteredFieldOption) - 1),
				A2(
					$elm$core$Maybe$map,
					function (index) {
						return index + step;
					},
					A2($rakutentech$r10$R10$FormComponents$Internal$Single$Update$getOptionIndex, args.filteredFieldOption, select))));
		var newValue = A2(
			$elm$core$Maybe$withDefault,
			'',
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.value;
				},
				A2($elm_community$list_extra$List$Extra$getAt, newIndex, args.filteredFieldOption)));
		var newY = A4(
			$rakutentech$r10$R10$FormComponents$Internal$Single$Update$getOptionY,
			model.scroll,
			args,
			newIndex,
			$elm$core$List$length(args.filteredFieldOption));
		return _Utils_Tuple2(newValue, newY);
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$Update$getNextNewSelectAndY = F2(
	function (model, args) {
		return A4($rakutentech$r10$R10$FormComponents$Internal$Single$Update$getNewSelectAndY_, 1, 0, model, args);
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$Update$getPrevNewSelectAndY = F2(
	function (model, args) {
		return A4(
			$rakutentech$r10$R10$FormComponents$Internal$Single$Update$getNewSelectAndY_,
			-1,
			$elm$core$List$length(args.filteredFieldOption) - 1,
			model,
			args);
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$Update$onArrowHelper = F4(
	function (key, model, value, _float) {
		return _Utils_Tuple2(
			_Utils_update(
				model,
				{scroll: _float, select: value}),
			A2(
				$elm$core$Task$attempt,
				$elm$core$Basics$always($rakutentech$r10$R10$FormComponents$Internal$Single$Common$NoOp),
				A3(
					$elm$browser$Browser$Dom$setViewportOf,
					$rakutentech$r10$R10$FormComponents$Internal$Single$Common$dropdownContentId(key),
					0,
					_float)));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$Common$singleSearchBoxId = function (key) {
	return 'single-dropdown-search-' + key;
};
var $rakutentech$r10$R10$FormComponents$Internal$Single$Update$onOpenHelper = F3(
	function (key, model, _float) {
		return _Utils_Tuple2(
			_Utils_update(
				model,
				{opened: true, scroll: _float}),
			$elm$core$Platform$Cmd$batch(
				_List_fromArray(
					[
						A2(
						$elm$core$Task$attempt,
						$elm$core$Basics$always($rakutentech$r10$R10$FormComponents$Internal$Single$Common$NoOp),
						A3(
							$elm$browser$Browser$Dom$setViewportOf,
							$rakutentech$r10$R10$FormComponents$Internal$Single$Common$dropdownContentId(key),
							0,
							_float)),
						A2(
						$elm$core$Task$attempt,
						$elm$core$Basics$always($rakutentech$r10$R10$FormComponents$Internal$Single$Common$NoOp),
						$elm$browser$Browser$Dom$focus(
							$rakutentech$r10$R10$FormComponents$Internal$Single$Common$singleSearchBoxId(key)))
					])));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$Update$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'NoOp':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'OnFocus':
				var value = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{focused: true, value: value}),
					$elm$core$Platform$Cmd$none);
			case 'OnLoseFocus':
				var value = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{focused: false, opened: false, search: '', select: '', value: value}),
					$elm$core$Platform$Cmd$none);
			case 'OnScroll':
				var scroll = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{scroll: scroll}),
					$elm$core$Platform$Cmd$none);
			case 'OnEsc':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{opened: false, search: ''}),
					$elm$core$Platform$Cmd$none);
			case 'OnSearch':
				var args = msg.a;
				var newSearch = msg.b;
				var isSelectInsideCountryOptions = A2(
					$elm$core$List$any,
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.value;
						},
						$elm$core$Basics$eq(model.select)),
					args.filteredFieldOption);
				var newSelect = isSelectInsideCountryOptions ? model.select : A2(
					$elm$core$Maybe$withDefault,
					'',
					A2(
						$elm$core$Maybe$map,
						function ($) {
							return $.value;
						},
						$elm$core$List$head(args.filteredFieldOption)));
				var maybeNewIndex = A2($rakutentech$r10$R10$FormComponents$Internal$Single$Update$getOptionIndex, args.filteredFieldOption, newSelect);
				var newY = A2(
					$elm$core$Maybe$withDefault,
					model.scroll,
					A2(
						$elm$core$Maybe$map,
						function (newIndex) {
							return A4(
								$rakutentech$r10$R10$FormComponents$Internal$Single$Update$getOptionY,
								model.scroll,
								args,
								newIndex,
								$elm$core$List$length(args.filteredFieldOption));
						},
						maybeNewIndex));
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{scroll: newY, search: newSearch, select: newSelect}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								A2(
								$elm$core$Task$attempt,
								$elm$core$Basics$always($rakutentech$r10$R10$FormComponents$Internal$Single$Common$NoOp),
								A3(
									$elm$browser$Browser$Dom$setViewportOf,
									$rakutentech$r10$R10$FormComponents$Internal$Single$Common$dropdownContentId(args.key),
									0,
									newY))
							])));
			case 'OnOptionSelect':
				var value = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{opened: false, search: '', select: '', value: value}),
					$elm$core$Platform$Cmd$none);
			case 'OnInputClick':
				var args = msg.a;
				return model.opened ? _Utils_Tuple2(
					_Utils_update(
						model,
						{opened: false, scroll: args.selectedY}),
					$elm$core$Platform$Cmd$none) : A3($rakutentech$r10$R10$FormComponents$Internal$Single$Update$onOpenHelper, args.key, model, args.selectedY);
			case 'OnArrowUp':
				var args = msg.a;
				return model.opened ? function (_v1) {
					var newValue = _v1.a;
					var newY = _v1.b;
					return A4($rakutentech$r10$R10$FormComponents$Internal$Single$Update$onArrowHelper, args.key, model, newValue, newY);
				}(
					A2($rakutentech$r10$R10$FormComponents$Internal$Single$Update$getPrevNewSelectAndY, model, args)) : A3($rakutentech$r10$R10$FormComponents$Internal$Single$Update$onOpenHelper, args.key, model, model.scroll);
			case 'OnArrowDown':
				var args = msg.a;
				return model.opened ? function (_v2) {
					var newValue = _v2.a;
					var newY = _v2.b;
					return A4($rakutentech$r10$R10$FormComponents$Internal$Single$Update$onArrowHelper, args.key, model, newValue, newY);
				}(
					A2($rakutentech$r10$R10$FormComponents$Internal$Single$Update$getNextNewSelectAndY, model, args)) : A3($rakutentech$r10$R10$FormComponents$Internal$Single$Update$onOpenHelper, args.key, model, model.scroll);
			default:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{value: ''}),
					$elm$core$Platform$Cmd$none);
		}
	});
var $rakutentech$r10$R10$Form$Internal$Update$update = F3(
	function (formStateBeforeValidationFixer, msg, formStateBeforeHandleChangesSinceLastSubmissions) {
		var formState = _Utils_update(
			formStateBeforeHandleChangesSinceLastSubmissions,
			{
				changesSinceLastSubmissions: A2($rakutentech$r10$R10$Form$Internal$Msg$handleChangesSinceLastSubmissions, formStateBeforeHandleChangesSinceLastSubmissions.changesSinceLastSubmissions, msg)
			});
		switch (msg.$) {
			case 'NoOp':
				return _Utils_Tuple2(formState, $elm$core$Platform$Cmd$none);
			case 'Submit':
				var formConf = msg.a;
				return _Utils_Tuple2(
					A2(
						$rakutentech$r10$R10$Form$Internal$Update$submit,
						formStateBeforeValidationFixer,
						{conf: formConf, state: formState}),
					$elm$core$Platform$Cmd$none);
			case 'GetFocus':
				var key = msg.a;
				return _Utils_Tuple2(
					A2($rakutentech$r10$R10$Form$Internal$Update$onGetFocus, key, formState),
					$elm$core$Platform$Cmd$none);
			case 'LoseFocus':
				var key = msg.a;
				var fieldConf = msg.b;
				return _Utils_Tuple2(
					A4($rakutentech$r10$R10$Form$Internal$Update$onLoseFocus, formStateBeforeValidationFixer, key, fieldConf, formState),
					$elm$core$Platform$Cmd$none);
			case 'TogglePasswordShow':
				var key = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						formState,
						{
							fieldsState: A3($rakutentech$r10$R10$Form$Internal$Dict$update, key, $rakutentech$r10$R10$Form$Internal$Update$helperToggleShowPassword, formState.fieldsState)
						}),
					$elm$core$Platform$Cmd$none);
			case 'ChangeTab':
				var key = msg.a;
				var string = msg.b;
				return _Utils_Tuple2(
					_Utils_update(
						formState,
						{
							activeTabs: A3($rakutentech$r10$R10$Form$Internal$Dict$insert, key, string, formState.activeTabs)
						}),
					$elm$core$Platform$Cmd$none);
			case 'AddEntity':
				var key = msg.a;
				var presentQuantity = A2(
					$elm$core$Maybe$withDefault,
					1,
					A2($rakutentech$r10$R10$Form$Internal$Dict$get, key, formState.multiplicableQuantities));
				return _Utils_Tuple2(
					_Utils_update(
						formState,
						{
							multiplicableQuantities: A3($rakutentech$r10$R10$Form$Internal$Dict$insert, key, presentQuantity + 1, formState.multiplicableQuantities)
						}),
					$elm$core$Platform$Cmd$none);
			case 'RemoveEntity':
				var key = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						formState,
						{
							removed: A2(
								$elm$core$Set$insert,
								$rakutentech$r10$R10$Form$Internal$Key$toString(key),
								formState.removed)
						}),
					$elm$core$Platform$Cmd$none);
			case 'ChangeValue':
				var key = msg.a;
				var fieldConf = msg.b;
				var formConf = msg.c;
				var string = msg.d;
				return _Utils_Tuple2(
					A6($rakutentech$r10$R10$Form$Internal$Update$onChangeValue, formStateBeforeValidationFixer, key, fieldConf, formConf, string, formState),
					$elm$core$Platform$Cmd$none);
			case 'OnSingleMsg':
				var key = msg.a;
				var fieldConf = msg.b;
				var formConf = msg.c;
				var singleMsg = msg.d;
				var fieldState = $rakutentech$r10$R10$Form$Internal$Update$stateWithDefault(
					A2($rakutentech$r10$R10$Form$Internal$Dict$get, key, formState.fieldsState));
				var singleModel = {
					focused: _Utils_eq(
						formState.focused,
						$elm$core$Maybe$Just(
							$rakutentech$r10$R10$Form$Internal$Key$toString(key))),
					opened: _Utils_eq(
						formState.active,
						$elm$core$Maybe$Just(
							$rakutentech$r10$R10$Form$Internal$Key$toString(key))),
					scroll: fieldState.scroll,
					search: fieldState.search,
					select: fieldState.select,
					value: fieldState.value
				};
				var _v1 = A2($rakutentech$r10$R10$FormComponents$Internal$Single$Update$update, singleMsg, singleModel);
				var newSingleModel = _v1.a;
				var singleCmd = _v1.b;
				var newFormState = $rakutentech$r10$R10$Form$Internal$Update$copyComponentStateToFormState(
					{fieldConf: fieldConf, fieldState: fieldState, formConf: formConf, formState: formState, formStateBeforeValidationFixer: formStateBeforeValidationFixer, key: key, newSingleModel: newSingleModel, singleModel: singleModel});
				return _Utils_Tuple2(
					newFormState,
					A2(
						$elm$core$Platform$Cmd$map,
						A3($rakutentech$r10$R10$Form$Internal$Msg$OnSingleMsg, key, fieldConf, formConf),
						singleCmd));
			default:
				var key = msg.a;
				var fieldConf = msg.b;
				var formConf = msg.c;
				var phoneMsg = msg.d;
				var fieldState = $rakutentech$r10$R10$Form$Internal$Update$stateWithDefault(
					A2($rakutentech$r10$R10$Form$Internal$Dict$get, key, formState.fieldsState));
				var singleModel = {
					focused: _Utils_eq(
						formState.focused,
						$elm$core$Maybe$Just(
							$rakutentech$r10$R10$Form$Internal$Key$toString(key))),
					opened: _Utils_eq(
						formState.active,
						$elm$core$Maybe$Just(
							$rakutentech$r10$R10$Form$Internal$Key$toString(key))),
					scroll: fieldState.scroll,
					search: fieldState.search,
					select: fieldState.select,
					value: fieldState.value
				};
				var _v2 = A2($rakutentech$r10$R10$FormComponents$Internal$Phone$Update$update, phoneMsg, singleModel);
				var newSingleModel = _v2.a;
				var singleCmd = _v2.b;
				var newFormState = $rakutentech$r10$R10$Form$Internal$Update$copyComponentStateToFormState(
					{fieldConf: fieldConf, fieldState: fieldState, formConf: formConf, formState: formState, formStateBeforeValidationFixer: formStateBeforeValidationFixer, key: key, newSingleModel: newSingleModel, singleModel: singleModel});
				return _Utils_Tuple2(
					newFormState,
					A2(
						$elm$core$Platform$Cmd$map,
						A3($rakutentech$r10$R10$Form$Internal$Msg$OnPhoneMsg, key, fieldConf, formConf),
						singleCmd));
		}
	});
var $rakutentech$r10$R10$Form$update = $rakutentech$r10$R10$Form$Internal$Update$update;
var $author$project$Main$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'MsgForm':
				var msgForm = msg.a;
				var form = model.form;
				var newForm = _Utils_update(
					form,
					{
						state: A3(
							$rakutentech$r10$R10$Form$update,
							F2(
								function (_v1, s) {
									return s;
								}),
							msgForm,
							form.state).a
					});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{form: newForm}),
					$elm$core$Platform$Cmd$none);
			case 'ChangePage':
				var page = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{page: page}),
					$elm$core$Platform$Cmd$none);
			default:
				var exerciseMsg = msg.a;
				var _v2 = model.page;
				if (_v2.$ === 'ViewExercise') {
					var exerciseData = _v2.a;
					var exerciseModel = _v2.b;
					var _v3 = A3(
						$author$project$Exercises$update,
						$author$project$Main$onlyTests(
							$elm$core$List$length(exerciseData.tests)),
						exerciseMsg,
						exerciseModel);
					var newModel = _v3.a;
					var cmd = _v3.b;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								page: A2($author$project$Main$ViewExercise, exerciseData, newModel)
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
		}
	});
var $author$project$Main$ChangePage = function (a) {
	return {$: 'ChangePage', a: a};
};
var $author$project$Main$ExercisesMsg = function (a) {
	return {$: 'ExercisesMsg', a: a};
};
var $author$project$Main$Index = {$: 'Index'};
var $author$project$Main$MsgForm = function (a) {
	return {$: 'MsgForm', a: a};
};
var $author$project$Main$PageOutput = {$: 'PageOutput'};
var $author$project$Main$ViewEllie = function (a) {
	return {$: 'ViewEllie', a: a};
};
var $author$project$Main$ViewJson = function (a) {
	return {$: 'ViewJson', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$AlignY = function (a) {
	return {$: 'AlignY', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Top = {$: 'Top'};
var $mdgriffith$elm_ui$Element$alignTop = $mdgriffith$elm_ui$Internal$Model$AlignY($mdgriffith$elm_ui$Internal$Model$Top);
var $lucamug$elm_ui_with_context$Element$WithContext$Internal$Attribute = function (a) {
	return {$: 'Attribute', a: a};
};
var $lucamug$elm_ui_with_context$Element$WithContext$attribute = function (elem) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$Attribute(
		function (_v0) {
			return elem;
		});
};
var $lucamug$elm_ui_with_context$Element$WithContext$alignTop = $lucamug$elm_ui_with_context$Element$WithContext$attribute($mdgriffith$elm_ui$Element$alignTop);
var $mdgriffith$elm_ui$Internal$Model$Attr = function (a) {
	return {$: 'Attr', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Button = {$: 'Button'};
var $mdgriffith$elm_ui$Internal$Model$Describe = function (a) {
	return {$: 'Describe', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Unkeyed = function (a) {
	return {$: 'Unkeyed', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$AsEl = {$: 'AsEl'};
var $mdgriffith$elm_ui$Internal$Model$asEl = $mdgriffith$elm_ui$Internal$Model$AsEl;
var $mdgriffith$elm_ui$Internal$Style$classes = {above: 'a', active: 'atv', alignBottom: 'ab', alignCenterX: 'cx', alignCenterY: 'cy', alignContainerBottom: 'acb', alignContainerCenterX: 'accx', alignContainerCenterY: 'accy', alignContainerRight: 'acr', alignLeft: 'al', alignRight: 'ar', alignTop: 'at', alignedHorizontally: 'ah', alignedVertically: 'av', any: 's', behind: 'bh', below: 'b', bold: 'w7', borderDashed: 'bd', borderDotted: 'bdt', borderNone: 'bn', borderSolid: 'bs', capturePointerEvents: 'cpe', clip: 'cp', clipX: 'cpx', clipY: 'cpy', column: 'c', container: 'ctr', contentBottom: 'cb', contentCenterX: 'ccx', contentCenterY: 'ccy', contentLeft: 'cl', contentRight: 'cr', contentTop: 'ct', cursorPointer: 'cptr', cursorText: 'ctxt', focus: 'fcs', focusedWithin: 'focus-within', fullSize: 'fs', grid: 'g', hasBehind: 'hbh', heightContent: 'hc', heightExact: 'he', heightFill: 'hf', heightFillPortion: 'hfp', hover: 'hv', imageContainer: 'ic', inFront: 'fr', inputLabel: 'lbl', inputMultiline: 'iml', inputMultilineFiller: 'imlf', inputMultilineParent: 'imlp', inputMultilineWrapper: 'implw', inputText: 'it', italic: 'i', link: 'lnk', nearby: 'nb', noTextSelection: 'notxt', onLeft: 'ol', onRight: 'or', opaque: 'oq', overflowHidden: 'oh', page: 'pg', paragraph: 'p', passPointerEvents: 'ppe', root: 'ui', row: 'r', scrollbars: 'sb', scrollbarsX: 'sbx', scrollbarsY: 'sby', seButton: 'sbt', single: 'e', sizeByCapital: 'cap', spaceEvenly: 'sev', strike: 'sk', text: 't', textCenter: 'tc', textExtraBold: 'w8', textExtraLight: 'w2', textHeavy: 'w9', textJustify: 'tj', textJustifyAll: 'tja', textLeft: 'tl', textLight: 'w3', textMedium: 'w5', textNormalWeight: 'w4', textRight: 'tr', textSemiBold: 'w6', textThin: 'w1', textUnitalicized: 'tun', transition: 'ts', transparent: 'clr', underline: 'u', widthContent: 'wc', widthExact: 'we', widthFill: 'wf', widthFillPortion: 'wfp', wrapped: 'wrp'};
var $elm$html$Html$Attributes$boolProperty = F2(
	function (key, bool) {
		return A2(
			_VirtualDom_property,
			key,
			$elm$json$Json$Encode$bool(bool));
	});
var $elm$html$Html$Attributes$disabled = $elm$html$Html$Attributes$boolProperty('disabled');
var $mdgriffith$elm_ui$Internal$Model$Generic = {$: 'Generic'};
var $mdgriffith$elm_ui$Internal$Model$div = $mdgriffith$elm_ui$Internal$Model$Generic;
var $mdgriffith$elm_ui$Internal$Model$NoNearbyChildren = {$: 'NoNearbyChildren'};
var $mdgriffith$elm_ui$Internal$Model$columnClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.column);
var $mdgriffith$elm_ui$Internal$Model$gridClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.grid);
var $mdgriffith$elm_ui$Internal$Model$pageClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.page);
var $mdgriffith$elm_ui$Internal$Model$paragraphClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.paragraph);
var $mdgriffith$elm_ui$Internal$Model$rowClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.row);
var $mdgriffith$elm_ui$Internal$Model$singleClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.single);
var $mdgriffith$elm_ui$Internal$Model$contextClasses = function (context) {
	switch (context.$) {
		case 'AsRow':
			return $mdgriffith$elm_ui$Internal$Model$rowClass;
		case 'AsColumn':
			return $mdgriffith$elm_ui$Internal$Model$columnClass;
		case 'AsEl':
			return $mdgriffith$elm_ui$Internal$Model$singleClass;
		case 'AsGrid':
			return $mdgriffith$elm_ui$Internal$Model$gridClass;
		case 'AsParagraph':
			return $mdgriffith$elm_ui$Internal$Model$paragraphClass;
		default:
			return $mdgriffith$elm_ui$Internal$Model$pageClass;
	}
};
var $mdgriffith$elm_ui$Internal$Model$Keyed = function (a) {
	return {$: 'Keyed', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$NoStyleSheet = {$: 'NoStyleSheet'};
var $mdgriffith$elm_ui$Internal$Model$Styled = function (a) {
	return {$: 'Styled', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Unstyled = function (a) {
	return {$: 'Unstyled', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$addChildren = F2(
	function (existing, nearbyChildren) {
		switch (nearbyChildren.$) {
			case 'NoNearbyChildren':
				return existing;
			case 'ChildrenBehind':
				var behind = nearbyChildren.a;
				return _Utils_ap(behind, existing);
			case 'ChildrenInFront':
				var inFront = nearbyChildren.a;
				return _Utils_ap(existing, inFront);
			default:
				var behind = nearbyChildren.a;
				var inFront = nearbyChildren.b;
				return _Utils_ap(
					behind,
					_Utils_ap(existing, inFront));
		}
	});
var $mdgriffith$elm_ui$Internal$Model$addKeyedChildren = F3(
	function (key, existing, nearbyChildren) {
		switch (nearbyChildren.$) {
			case 'NoNearbyChildren':
				return existing;
			case 'ChildrenBehind':
				var behind = nearbyChildren.a;
				return _Utils_ap(
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						behind),
					existing);
			case 'ChildrenInFront':
				var inFront = nearbyChildren.a;
				return _Utils_ap(
					existing,
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						inFront));
			default:
				var behind = nearbyChildren.a;
				var inFront = nearbyChildren.b;
				return _Utils_ap(
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						behind),
					_Utils_ap(
						existing,
						A2(
							$elm$core$List$map,
							function (x) {
								return _Utils_Tuple2(key, x);
							},
							inFront)));
		}
	});
var $mdgriffith$elm_ui$Internal$Model$AsParagraph = {$: 'AsParagraph'};
var $mdgriffith$elm_ui$Internal$Model$asParagraph = $mdgriffith$elm_ui$Internal$Model$AsParagraph;
var $mdgriffith$elm_ui$Internal$Flag$Flag = function (a) {
	return {$: 'Flag', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$Second = function (a) {
	return {$: 'Second', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$flag = function (i) {
	return (i > 31) ? $mdgriffith$elm_ui$Internal$Flag$Second(1 << (i - 32)) : $mdgriffith$elm_ui$Internal$Flag$Flag(1 << i);
};
var $mdgriffith$elm_ui$Internal$Flag$alignBottom = $mdgriffith$elm_ui$Internal$Flag$flag(41);
var $mdgriffith$elm_ui$Internal$Flag$alignRight = $mdgriffith$elm_ui$Internal$Flag$flag(40);
var $mdgriffith$elm_ui$Internal$Flag$centerX = $mdgriffith$elm_ui$Internal$Flag$flag(42);
var $mdgriffith$elm_ui$Internal$Flag$centerY = $mdgriffith$elm_ui$Internal$Flag$flag(43);
var $mdgriffith$elm_ui$Internal$Model$lengthClassName = function (x) {
	switch (x.$) {
		case 'Px':
			var px = x.a;
			return $elm$core$String$fromInt(px) + 'px';
		case 'Content':
			return 'auto';
		case 'Fill':
			var i = x.a;
			return $elm$core$String$fromInt(i) + 'fr';
		case 'Min':
			var min = x.a;
			var len = x.b;
			return 'min' + ($elm$core$String$fromInt(min) + $mdgriffith$elm_ui$Internal$Model$lengthClassName(len));
		default:
			var max = x.a;
			var len = x.b;
			return 'max' + ($elm$core$String$fromInt(max) + $mdgriffith$elm_ui$Internal$Model$lengthClassName(len));
	}
};
var $elm$core$Basics$round = _Basics_round;
var $mdgriffith$elm_ui$Internal$Model$floatClass = function (x) {
	return $elm$core$String$fromInt(
		$elm$core$Basics$round(x * 255));
};
var $mdgriffith$elm_ui$Internal$Model$transformClass = function (transform) {
	switch (transform.$) {
		case 'Untransformed':
			return $elm$core$Maybe$Nothing;
		case 'Moved':
			var _v1 = transform.a;
			var x = _v1.a;
			var y = _v1.b;
			var z = _v1.c;
			return $elm$core$Maybe$Just(
				'mv-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(x) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(y) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(z))))));
		default:
			var _v2 = transform.a;
			var tx = _v2.a;
			var ty = _v2.b;
			var tz = _v2.c;
			var _v3 = transform.b;
			var sx = _v3.a;
			var sy = _v3.b;
			var sz = _v3.c;
			var _v4 = transform.c;
			var ox = _v4.a;
			var oy = _v4.b;
			var oz = _v4.c;
			var angle = transform.d;
			return $elm$core$Maybe$Just(
				'tfrm-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(tx) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(ty) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(tz) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sx) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sy) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sz) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(ox) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(oy) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(oz) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(angle))))))))))))))))))));
	}
};
var $mdgriffith$elm_ui$Internal$Model$getStyleName = function (style) {
	switch (style.$) {
		case 'Shadows':
			var name = style.a;
			return name;
		case 'Transparency':
			var name = style.a;
			var o = style.b;
			return name;
		case 'Style':
			var _class = style.a;
			return _class;
		case 'FontFamily':
			var name = style.a;
			return name;
		case 'FontSize':
			var i = style.a;
			return 'font-size-' + $elm$core$String$fromInt(i);
		case 'Single':
			var _class = style.a;
			return _class;
		case 'Colored':
			var _class = style.a;
			return _class;
		case 'SpacingStyle':
			var cls = style.a;
			var x = style.b;
			var y = style.c;
			return cls;
		case 'PaddingStyle':
			var cls = style.a;
			var top = style.b;
			var right = style.c;
			var bottom = style.d;
			var left = style.e;
			return cls;
		case 'BorderWidth':
			var cls = style.a;
			var top = style.b;
			var right = style.c;
			var bottom = style.d;
			var left = style.e;
			return cls;
		case 'GridTemplateStyle':
			var template = style.a;
			return 'grid-rows-' + (A2(
				$elm$core$String$join,
				'-',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.rows)) + ('-cols-' + (A2(
				$elm$core$String$join,
				'-',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.columns)) + ('-space-x-' + ($mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.a) + ('-space-y-' + $mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.b)))))));
		case 'GridPosition':
			var pos = style.a;
			return 'gp grid-pos-' + ($elm$core$String$fromInt(pos.row) + ('-' + ($elm$core$String$fromInt(pos.col) + ('-' + ($elm$core$String$fromInt(pos.width) + ('-' + $elm$core$String$fromInt(pos.height)))))));
		case 'PseudoSelector':
			var selector = style.a;
			var subStyle = style.b;
			var name = function () {
				switch (selector.$) {
					case 'Focus':
						return 'fs';
					case 'Hover':
						return 'hv';
					default:
						return 'act';
				}
			}();
			return A2(
				$elm$core$String$join,
				' ',
				A2(
					$elm$core$List$map,
					function (sty) {
						var _v1 = $mdgriffith$elm_ui$Internal$Model$getStyleName(sty);
						if (_v1 === '') {
							return '';
						} else {
							var styleName = _v1;
							return styleName + ('-' + name);
						}
					},
					subStyle));
		default:
			var x = style.a;
			return A2(
				$elm$core$Maybe$withDefault,
				'',
				$mdgriffith$elm_ui$Internal$Model$transformClass(x));
	}
};
var $mdgriffith$elm_ui$Internal$Model$reduceStyles = F2(
	function (style, nevermind) {
		var cache = nevermind.a;
		var existing = nevermind.b;
		var styleName = $mdgriffith$elm_ui$Internal$Model$getStyleName(style);
		return A2($elm$core$Set$member, styleName, cache) ? nevermind : _Utils_Tuple2(
			A2($elm$core$Set$insert, styleName, cache),
			A2($elm$core$List$cons, style, existing));
	});
var $mdgriffith$elm_ui$Internal$Model$Property = F2(
	function (a, b) {
		return {$: 'Property', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$Style = F2(
	function (a, b) {
		return {$: 'Style', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$dot = function (c) {
	return '.' + c;
};
var $mdgriffith$elm_ui$Internal$Model$formatColor = function (_v0) {
	var red = _v0.a;
	var green = _v0.b;
	var blue = _v0.c;
	var alpha = _v0.d;
	return 'rgba(' + ($elm$core$String$fromInt(
		$elm$core$Basics$round(red * 255)) + ((',' + $elm$core$String$fromInt(
		$elm$core$Basics$round(green * 255))) + ((',' + $elm$core$String$fromInt(
		$elm$core$Basics$round(blue * 255))) + (',' + ($elm$core$String$fromFloat(alpha) + ')')))));
};
var $mdgriffith$elm_ui$Internal$Model$formatBoxShadow = function (shadow) {
	return A2(
		$elm$core$String$join,
		' ',
		A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			_List_fromArray(
				[
					shadow.inset ? $elm$core$Maybe$Just('inset') : $elm$core$Maybe$Nothing,
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.offset.a) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.offset.b) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.blur) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.size) + 'px'),
					$elm$core$Maybe$Just(
					$mdgriffith$elm_ui$Internal$Model$formatColor(shadow.color))
				])));
};
var $elm$core$Tuple$mapFirst = F2(
	function (func, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			func(x),
			y);
	});
var $elm$core$Tuple$mapSecond = F2(
	function (func, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			x,
			func(y));
	});
var $mdgriffith$elm_ui$Internal$Model$renderFocusStyle = function (focus) {
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Model$Style,
			$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.focusedWithin) + ':focus-within',
			A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'border-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.borderColor),
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'background-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.backgroundColor),
						A2(
						$elm$core$Maybe$map,
						function (shadow) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'box-shadow',
								$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(
									{
										blur: shadow.blur,
										color: shadow.color,
										inset: false,
										offset: A2(
											$elm$core$Tuple$mapSecond,
											$elm$core$Basics$toFloat,
											A2($elm$core$Tuple$mapFirst, $elm$core$Basics$toFloat, shadow.offset)),
										size: shadow.size
									}));
						},
						focus.shadow),
						$elm$core$Maybe$Just(
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'outline', 'none'))
					]))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$Style,
			$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + (':focus .focusable, ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + '.focusable:focus')),
			A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'border-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.borderColor),
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'background-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.backgroundColor),
						A2(
						$elm$core$Maybe$map,
						function (shadow) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'box-shadow',
								$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(
									{
										blur: shadow.blur,
										color: shadow.color,
										inset: false,
										offset: A2(
											$elm$core$Tuple$mapSecond,
											$elm$core$Basics$toFloat,
											A2($elm$core$Tuple$mapFirst, $elm$core$Basics$toFloat, shadow.offset)),
										size: shadow.size
									}));
						},
						focus.shadow),
						$elm$core$Maybe$Just(
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'outline', 'none'))
					])))
		]);
};
var $elm$virtual_dom$VirtualDom$property = F2(
	function (key, value) {
		return A2(
			_VirtualDom_property,
			_VirtualDom_noInnerHtmlOrFormAction(key),
			_VirtualDom_noJavaScriptOrHtmlUri(value));
	});
var $mdgriffith$elm_ui$Internal$Style$AllChildren = F2(
	function (a, b) {
		return {$: 'AllChildren', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Batch = function (a) {
	return {$: 'Batch', a: a};
};
var $mdgriffith$elm_ui$Internal$Style$Child = F2(
	function (a, b) {
		return {$: 'Child', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Class = F2(
	function (a, b) {
		return {$: 'Class', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Descriptor = F2(
	function (a, b) {
		return {$: 'Descriptor', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Left = {$: 'Left'};
var $mdgriffith$elm_ui$Internal$Style$Prop = F2(
	function (a, b) {
		return {$: 'Prop', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Right = {$: 'Right'};
var $mdgriffith$elm_ui$Internal$Style$Self = function (a) {
	return {$: 'Self', a: a};
};
var $mdgriffith$elm_ui$Internal$Style$Supports = F2(
	function (a, b) {
		return {$: 'Supports', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Content = function (a) {
	return {$: 'Content', a: a};
};
var $mdgriffith$elm_ui$Internal$Style$Bottom = {$: 'Bottom'};
var $mdgriffith$elm_ui$Internal$Style$CenterX = {$: 'CenterX'};
var $mdgriffith$elm_ui$Internal$Style$CenterY = {$: 'CenterY'};
var $mdgriffith$elm_ui$Internal$Style$Top = {$: 'Top'};
var $mdgriffith$elm_ui$Internal$Style$alignments = _List_fromArray(
	[$mdgriffith$elm_ui$Internal$Style$Top, $mdgriffith$elm_ui$Internal$Style$Bottom, $mdgriffith$elm_ui$Internal$Style$Right, $mdgriffith$elm_ui$Internal$Style$Left, $mdgriffith$elm_ui$Internal$Style$CenterX, $mdgriffith$elm_ui$Internal$Style$CenterY]);
var $mdgriffith$elm_ui$Internal$Style$contentName = function (desc) {
	switch (desc.a.$) {
		case 'Top':
			var _v1 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentTop);
		case 'Bottom':
			var _v2 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentBottom);
		case 'Right':
			var _v3 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentRight);
		case 'Left':
			var _v4 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentLeft);
		case 'CenterX':
			var _v5 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentCenterX);
		default:
			var _v6 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY);
	}
};
var $mdgriffith$elm_ui$Internal$Style$selfName = function (desc) {
	switch (desc.a.$) {
		case 'Top':
			var _v1 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignTop);
		case 'Bottom':
			var _v2 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignBottom);
		case 'Right':
			var _v3 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignRight);
		case 'Left':
			var _v4 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignLeft);
		case 'CenterX':
			var _v5 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterX);
		default:
			var _v6 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY);
	}
};
var $mdgriffith$elm_ui$Internal$Style$describeAlignment = function (values) {
	var createDescription = function (alignment) {
		var _v0 = values(alignment);
		var content = _v0.a;
		var indiv = _v0.b;
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$contentName(
					$mdgriffith$elm_ui$Internal$Style$Content(alignment)),
				content),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$selfName(
							$mdgriffith$elm_ui$Internal$Style$Self(alignment)),
						indiv)
					]))
			]);
	};
	return $mdgriffith$elm_ui$Internal$Style$Batch(
		A2($elm$core$List$concatMap, createDescription, $mdgriffith$elm_ui$Internal$Style$alignments));
};
var $mdgriffith$elm_ui$Internal$Style$elDescription = _List_fromArray(
	[
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'column'),
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre'),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Descriptor,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hasBehind),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '-1')
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Descriptor,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.seButton),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'auto !important')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightContent),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthContent),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
			])),
		$mdgriffith$elm_ui$Internal$Style$describeAlignment(
		function (alignment) {
			switch (alignment.$) {
				case 'Top':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', '0 !important')
							]));
				case 'Bottom':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', '0 !important')
							]));
				case 'Right':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
							]));
				case 'Left':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
							]));
				case 'CenterX':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
							]));
				default:
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto')
									]))
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
							]));
			}
		})
	]);
var $mdgriffith$elm_ui$Internal$Style$gridAlignments = function (values) {
	var createDescription = function (alignment) {
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$selfName(
							$mdgriffith$elm_ui$Internal$Style$Self(alignment)),
						values(alignment))
					]))
			]);
	};
	return $mdgriffith$elm_ui$Internal$Style$Batch(
		A2($elm$core$List$concatMap, createDescription, $mdgriffith$elm_ui$Internal$Style$alignments));
};
var $mdgriffith$elm_ui$Internal$Style$Above = {$: 'Above'};
var $mdgriffith$elm_ui$Internal$Style$Behind = {$: 'Behind'};
var $mdgriffith$elm_ui$Internal$Style$Below = {$: 'Below'};
var $mdgriffith$elm_ui$Internal$Style$OnLeft = {$: 'OnLeft'};
var $mdgriffith$elm_ui$Internal$Style$OnRight = {$: 'OnRight'};
var $mdgriffith$elm_ui$Internal$Style$Within = {$: 'Within'};
var $mdgriffith$elm_ui$Internal$Style$locations = function () {
	var loc = $mdgriffith$elm_ui$Internal$Style$Above;
	var _v0 = function () {
		switch (loc.$) {
			case 'Above':
				return _Utils_Tuple0;
			case 'Below':
				return _Utils_Tuple0;
			case 'OnRight':
				return _Utils_Tuple0;
			case 'OnLeft':
				return _Utils_Tuple0;
			case 'Within':
				return _Utils_Tuple0;
			default:
				return _Utils_Tuple0;
		}
	}();
	return _List_fromArray(
		[$mdgriffith$elm_ui$Internal$Style$Above, $mdgriffith$elm_ui$Internal$Style$Below, $mdgriffith$elm_ui$Internal$Style$OnRight, $mdgriffith$elm_ui$Internal$Style$OnLeft, $mdgriffith$elm_ui$Internal$Style$Within, $mdgriffith$elm_ui$Internal$Style$Behind]);
}();
var $mdgriffith$elm_ui$Internal$Style$baseSheet = _List_fromArray(
	[
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		'html,body',
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'padding', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		_Utils_ap(
			$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
			_Utils_ap(
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.imageContainer))),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'img',
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'max-height', '100%'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'object-fit', 'cover')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'img',
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'max-width', '100%'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'object-fit', 'cover')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ':focus',
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'outline', 'none')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.root),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'min-height', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				_Utils_ap(
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill)),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inFront),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.nearby),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'fixed'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.nearby),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'relative'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
				$mdgriffith$elm_ui$Internal$Style$elDescription),
				$mdgriffith$elm_ui$Internal$Style$Batch(
				function (fn) {
					return A2($elm$core$List$map, fn, $mdgriffith$elm_ui$Internal$Style$locations);
				}(
					function (loc) {
						switch (loc.$) {
							case 'Above':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.above),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'bottom', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
												])),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
												])),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 'Below':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.below),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'bottom', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												])),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
												]))
										]));
							case 'OnRight':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onRight),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 'OnLeft':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onLeft),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'right', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 'Within':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inFront),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							default:
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
						}
					}))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'relative'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'resize', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'box-sizing', 'border-box'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'padding', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-width', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'solid'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-size', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'color', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-family', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'line-height', '1'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'inherit'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.wrapped),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-wrap', 'wrap')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.noTextSelection),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-moz-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-webkit-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-ms-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'user-select', 'none')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cursorPointer),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'pointer')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cursorText),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'text')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.passPointerEvents),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none !important')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.capturePointerEvents),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto !important')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.transparent),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.opaque),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.hover, $mdgriffith$elm_ui$Internal$Style$classes.transparent)) + ':hover',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.hover, $mdgriffith$elm_ui$Internal$Style$classes.opaque)) + ':hover',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.focus, $mdgriffith$elm_ui$Internal$Style$classes.transparent)) + ':focus',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.focus, $mdgriffith$elm_ui$Internal$Style$classes.opaque)) + ':focus',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.active, $mdgriffith$elm_ui$Internal$Style$classes.transparent)) + ':active',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.active, $mdgriffith$elm_ui$Internal$Style$classes.opaque)) + ':active',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.transition),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Prop,
						'transition',
						A2(
							$elm$core$String$join,
							', ',
							A2(
								$elm$core$List$map,
								function (x) {
									return x + ' 160ms';
								},
								_List_fromArray(
									['transform', 'opacity', 'filter', 'background-color', 'color', 'font-size']))))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.scrollbars),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.scrollbarsX),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-x', 'auto'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.scrollbarsY),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-y', 'auto'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.column),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.clip),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.clipX),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-x', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.clipY),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-y', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthContent),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', 'auto')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderNone),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-width', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderDashed),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'dashed')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderDotted),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'dotted')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderSolid),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'solid')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-block')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputText),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'line-height', '1.05'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'background', 'transparent'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'inherit')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
				$mdgriffith$elm_ui$Internal$Style$elDescription),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', '0%'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthExact),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.link),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFillPortion),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.container),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerRight,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterX),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-left', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterX),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-right', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:only-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX + ' ~ u'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerRight + (' ~ s.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX)),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
											]));
								case 'Bottom':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
											]));
								case 'Right':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
											]),
										_List_Nil);
								case 'Left':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
											]),
										_List_Nil);
								case 'CenterX':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
											]),
										_List_Nil);
								default:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
											]));
							}
						}),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.spaceEvenly),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'space-between')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputLabel),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'baseline')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.column),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'column'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthContent),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerBottom,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', '0 !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', '0 !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:only-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY + ' ~ u'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerBottom + (' ~ s.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY)),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto')
											]));
								case 'Bottom':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto')
											]));
								case 'Right':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
											]));
								case 'Left':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
											]));
								case 'CenterX':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
											]));
								default:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
											]),
										_List_Nil);
							}
						}),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.container),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.spaceEvenly),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'space-between')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.grid),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', '-ms-grid'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'.gp',
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Supports,
						_Utils_Tuple2('display', 'grid'),
						_List_fromArray(
							[
								_Utils_Tuple2('display', 'grid')
							])),
						$mdgriffith$elm_ui$Internal$Style$gridAlignments(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
										]);
								case 'Bottom':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
										]);
								case 'Right':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
										]);
								case 'Left':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
										]);
								case 'CenterX':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
										]);
								default:
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
										]);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.page),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any + ':first-child'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot(
							$mdgriffith$elm_ui$Internal$Style$classes.any + ($mdgriffith$elm_ui$Internal$Style$selfName(
								$mdgriffith$elm_ui$Internal$Style$Self($mdgriffith$elm_ui$Internal$Style$Left)) + (':first-child + .' + $mdgriffith$elm_ui$Internal$Style$classes.any))),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot(
							$mdgriffith$elm_ui$Internal$Style$classes.any + ($mdgriffith$elm_ui$Internal$Style$selfName(
								$mdgriffith$elm_ui$Internal$Style$Self($mdgriffith$elm_ui$Internal$Style$Right)) + (':first-child + .' + $mdgriffith$elm_ui$Internal$Style$classes.any))),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Bottom':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Right':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'right'),
												A2(
												$mdgriffith$elm_ui$Internal$Style$Descriptor,
												'::after',
												_List_fromArray(
													[
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', '\"\"'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'table'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'clear', 'both')
													]))
											]));
								case 'Left':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'left'),
												A2(
												$mdgriffith$elm_ui$Internal$Style$Descriptor,
												'::after',
												_List_fromArray(
													[
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', '\"\"'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'table'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'clear', 'both')
													]))
											]));
								case 'CenterX':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								default:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultiline),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap !important'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'background-color', 'transparent')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineWrapper),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineParent),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap !important'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'text'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineFiller),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'color', 'transparent')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.paragraph),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-wrap', 'break-word'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hasBehind),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '-1')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$AllChildren,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$AllChildren,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.paragraph),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								'::after',
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', 'none')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								'::before',
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', 'none')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$AllChildren,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthExact),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-block')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inFront),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.above),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.below),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onRight),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onLeft),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.column),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-flex')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.grid),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-grid')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Bottom':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Right':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'right')
											]));
								case 'Left':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'left')
											]));
								case 'CenterX':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								default:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				'.hidden',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'none')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textThin),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '100')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textExtraLight),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '200')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textLight),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '300')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textNormalWeight),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '400')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textMedium),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '500')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textSemiBold),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '600')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.bold),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '700')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textExtraBold),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '800')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textHeavy),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '900')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.italic),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'italic')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.strike),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'line-through')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.underline),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'underline'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip-ink', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip', 'ink')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				_Utils_ap(
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.underline),
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.strike)),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'line-through underline'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip-ink', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip', 'ink')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textUnitalicized),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'normal')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textJustify),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'justify')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textJustifyAll),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'justify-all')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textCenter),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'center')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textRight),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'right')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textLeft),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'left')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				'.modal',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'fixed'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none')
					]))
			]))
	]);
var $mdgriffith$elm_ui$Internal$Style$fontVariant = function (_var) {
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Style$Class,
			'.v-' + _var,
			_List_fromArray(
				[
					A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', '\"' + (_var + '\"'))
				])),
			A2(
			$mdgriffith$elm_ui$Internal$Style$Class,
			'.v-' + (_var + '-off'),
			_List_fromArray(
				[
					A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', '\"' + (_var + '\" 0'))
				]))
		]);
};
var $mdgriffith$elm_ui$Internal$Style$commonValues = $elm$core$List$concat(
	_List_fromArray(
		[
			A2(
			$elm$core$List$map,
			function (x) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.border-' + $elm$core$String$fromInt(x),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'border-width',
							$elm$core$String$fromInt(x) + 'px')
						]));
			},
			A2($elm$core$List$range, 0, 6)),
			A2(
			$elm$core$List$map,
			function (i) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.font-size-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'font-size',
							$elm$core$String$fromInt(i) + 'px')
						]));
			},
			A2($elm$core$List$range, 8, 32)),
			A2(
			$elm$core$List$map,
			function (i) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.p-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'padding',
							$elm$core$String$fromInt(i) + 'px')
						]));
			},
			A2($elm$core$List$range, 0, 24)),
			_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Class,
				'.v-smcp',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-variant', 'small-caps')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Class,
				'.v-smcp-off',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-variant', 'normal')
					]))
			]),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('zero'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('onum'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('liga'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('dlig'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('ordn'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('tnum'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('afrc'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('frac')
		]));
var $mdgriffith$elm_ui$Internal$Style$explainer = '\n.explain {\n    border: 6px solid rgb(174, 121, 15) !important;\n}\n.explain > .' + ($mdgriffith$elm_ui$Internal$Style$classes.any + (' {\n    border: 4px dashed rgb(0, 151, 167) !important;\n}\n\n.ctr {\n    border: none !important;\n}\n.explain > .ctr > .' + ($mdgriffith$elm_ui$Internal$Style$classes.any + ' {\n    border: 4px dashed rgb(0, 151, 167) !important;\n}\n\n')));
var $mdgriffith$elm_ui$Internal$Style$inputTextReset = '\ninput[type="search"],\ninput[type="search"]::-webkit-search-decoration,\ninput[type="search"]::-webkit-search-cancel-button,\ninput[type="search"]::-webkit-search-results-button,\ninput[type="search"]::-webkit-search-results-decoration {\n  -webkit-appearance:none;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$sliderReset = '\ninput[type=range] {\n  -webkit-appearance: none; \n  background: transparent;\n  position:absolute;\n  left:0;\n  top:0;\n  z-index:10;\n  width: 100%;\n  outline: dashed 1px;\n  height: 100%;\n  opacity: 0;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$thumbReset = '\ninput[type=range]::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range]::-moz-range-thumb {\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range]::-ms-thumb {\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range][orient=vertical]{\n    writing-mode: bt-lr; /* IE */\n    -webkit-appearance: slider-vertical;  /* WebKit */\n}\n';
var $mdgriffith$elm_ui$Internal$Style$trackReset = '\ninput[type=range]::-moz-range-track {\n    background: transparent;\n    cursor: pointer;\n}\ninput[type=range]::-ms-track {\n    background: transparent;\n    cursor: pointer;\n}\ninput[type=range]::-webkit-slider-runnable-track {\n    background: transparent;\n    cursor: pointer;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$overrides = '@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row) + (' > ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + (' { flex-basis: auto !important; } ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row) + (' > ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.container) + (' { flex-basis: auto !important; }}' + ($mdgriffith$elm_ui$Internal$Style$inputTextReset + ($mdgriffith$elm_ui$Internal$Style$sliderReset + ($mdgriffith$elm_ui$Internal$Style$trackReset + ($mdgriffith$elm_ui$Internal$Style$thumbReset + $mdgriffith$elm_ui$Internal$Style$explainer)))))))))))))));
var $elm$core$String$concat = function (strings) {
	return A2($elm$core$String$join, '', strings);
};
var $mdgriffith$elm_ui$Internal$Style$Intermediate = function (a) {
	return {$: 'Intermediate', a: a};
};
var $mdgriffith$elm_ui$Internal$Style$emptyIntermediate = F2(
	function (selector, closing) {
		return $mdgriffith$elm_ui$Internal$Style$Intermediate(
			{closing: closing, others: _List_Nil, props: _List_Nil, selector: selector});
	});
var $mdgriffith$elm_ui$Internal$Style$renderRules = F2(
	function (_v0, rulesToRender) {
		var parent = _v0.a;
		var generateIntermediates = F2(
			function (rule, rendered) {
				switch (rule.$) {
					case 'Prop':
						var name = rule.a;
						var val = rule.b;
						return _Utils_update(
							rendered,
							{
								props: A2(
									$elm$core$List$cons,
									_Utils_Tuple2(name, val),
									rendered.props)
							});
					case 'Supports':
						var _v2 = rule.a;
						var prop = _v2.a;
						var value = _v2.b;
						var props = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Style$Intermediate(
										{closing: '\n}', others: _List_Nil, props: props, selector: '@supports (' + (prop + (':' + (value + (') {' + parent.selector))))}),
									rendered.others)
							});
					case 'Adjacent':
						var selector = rule.a;
						var adjRules = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector + (' + ' + selector), ''),
										adjRules),
									rendered.others)
							});
					case 'Child':
						var child = rule.a;
						var childRules = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector + (' > ' + child), ''),
										childRules),
									rendered.others)
							});
					case 'AllChildren':
						var child = rule.a;
						var childRules = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector + (' ' + child), ''),
										childRules),
									rendered.others)
							});
					case 'Descriptor':
						var descriptor = rule.a;
						var descriptorRules = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2(
											$mdgriffith$elm_ui$Internal$Style$emptyIntermediate,
											_Utils_ap(parent.selector, descriptor),
											''),
										descriptorRules),
									rendered.others)
							});
					default:
						var batched = rule.a;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector, ''),
										batched),
									rendered.others)
							});
				}
			});
		return $mdgriffith$elm_ui$Internal$Style$Intermediate(
			A3($elm$core$List$foldr, generateIntermediates, parent, rulesToRender));
	});
var $mdgriffith$elm_ui$Internal$Style$renderCompact = function (styleClasses) {
	var renderValues = function (values) {
		return $elm$core$String$concat(
			A2(
				$elm$core$List$map,
				function (_v3) {
					var x = _v3.a;
					var y = _v3.b;
					return x + (':' + (y + ';'));
				},
				values));
	};
	var renderClass = function (rule) {
		var _v2 = rule.props;
		if (!_v2.b) {
			return '';
		} else {
			return rule.selector + ('{' + (renderValues(rule.props) + (rule.closing + '}')));
		}
	};
	var renderIntermediate = function (_v0) {
		var rule = _v0.a;
		return _Utils_ap(
			renderClass(rule),
			$elm$core$String$concat(
				A2($elm$core$List$map, renderIntermediate, rule.others)));
	};
	return $elm$core$String$concat(
		A2(
			$elm$core$List$map,
			renderIntermediate,
			A3(
				$elm$core$List$foldr,
				F2(
					function (_v1, existing) {
						var name = _v1.a;
						var styleRules = _v1.b;
						return A2(
							$elm$core$List$cons,
							A2(
								$mdgriffith$elm_ui$Internal$Style$renderRules,
								A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, name, ''),
								styleRules),
							existing);
					}),
				_List_Nil,
				styleClasses)));
};
var $mdgriffith$elm_ui$Internal$Style$rules = _Utils_ap(
	$mdgriffith$elm_ui$Internal$Style$overrides,
	$mdgriffith$elm_ui$Internal$Style$renderCompact(
		_Utils_ap($mdgriffith$elm_ui$Internal$Style$baseSheet, $mdgriffith$elm_ui$Internal$Style$commonValues)));
var $mdgriffith$elm_ui$Internal$Model$staticRoot = function (opts) {
	var _v0 = opts.mode;
	switch (_v0.$) {
		case 'Layout':
			return A3(
				$elm$virtual_dom$VirtualDom$node,
				'div',
				_List_Nil,
				_List_fromArray(
					[
						A3(
						$elm$virtual_dom$VirtualDom$node,
						'style',
						_List_Nil,
						_List_fromArray(
							[
								$elm$virtual_dom$VirtualDom$text($mdgriffith$elm_ui$Internal$Style$rules)
							]))
					]));
		case 'NoStaticStyleSheet':
			return $elm$virtual_dom$VirtualDom$text('');
		default:
			return A3(
				$elm$virtual_dom$VirtualDom$node,
				'elm-ui-static-rules',
				_List_fromArray(
					[
						A2(
						$elm$virtual_dom$VirtualDom$property,
						'rules',
						$elm$json$Json$Encode$string($mdgriffith$elm_ui$Internal$Style$rules))
					]),
				_List_Nil);
	}
};
var $mdgriffith$elm_ui$Internal$Model$fontName = function (font) {
	switch (font.$) {
		case 'Serif':
			return 'serif';
		case 'SansSerif':
			return 'sans-serif';
		case 'Monospace':
			return 'monospace';
		case 'Typeface':
			var name = font.a;
			return '\"' + (name + '\"');
		case 'ImportFont':
			var name = font.a;
			var url = font.b;
			return '\"' + (name + '\"');
		default:
			var name = font.a.name;
			return '\"' + (name + '\"');
	}
};
var $mdgriffith$elm_ui$Internal$Model$isSmallCaps = function (_var) {
	switch (_var.$) {
		case 'VariantActive':
			var name = _var.a;
			return name === 'smcp';
		case 'VariantOff':
			var name = _var.a;
			return false;
		default:
			var name = _var.a;
			var index = _var.b;
			return (name === 'smcp') && (index === 1);
	}
};
var $mdgriffith$elm_ui$Internal$Model$hasSmallCaps = function (typeface) {
	if (typeface.$ === 'FontWith') {
		var font = typeface.a;
		return A2($elm$core$List$any, $mdgriffith$elm_ui$Internal$Model$isSmallCaps, font.variants);
	} else {
		return false;
	}
};
var $mdgriffith$elm_ui$Internal$Model$renderProps = F3(
	function (force, _v0, existing) {
		var key = _v0.a;
		var val = _v0.b;
		return force ? (existing + ('\n  ' + (key + (': ' + (val + ' !important;'))))) : (existing + ('\n  ' + (key + (': ' + (val + ';')))));
	});
var $mdgriffith$elm_ui$Internal$Model$renderStyle = F4(
	function (options, maybePseudo, selector, props) {
		if (maybePseudo.$ === 'Nothing') {
			return _List_fromArray(
				[
					selector + ('{' + (A3(
					$elm$core$List$foldl,
					$mdgriffith$elm_ui$Internal$Model$renderProps(false),
					'',
					props) + '\n}'))
				]);
		} else {
			var pseudo = maybePseudo.a;
			switch (pseudo.$) {
				case 'Hover':
					var _v2 = options.hover;
					switch (_v2.$) {
						case 'NoHover':
							return _List_Nil;
						case 'ForceHover':
							return _List_fromArray(
								[
									selector + ('-hv {' + (A3(
									$elm$core$List$foldl,
									$mdgriffith$elm_ui$Internal$Model$renderProps(true),
									'',
									props) + '\n}'))
								]);
						default:
							return _List_fromArray(
								[
									selector + ('-hv:hover {' + (A3(
									$elm$core$List$foldl,
									$mdgriffith$elm_ui$Internal$Model$renderProps(false),
									'',
									props) + '\n}'))
								]);
					}
				case 'Focus':
					var renderedProps = A3(
						$elm$core$List$foldl,
						$mdgriffith$elm_ui$Internal$Model$renderProps(false),
						'',
						props);
					return _List_fromArray(
						[selector + ('-fs:focus {' + (renderedProps + '\n}')), ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.any + (':focus ' + (selector + '-fs  {')))) + (renderedProps + '\n}'), (selector + '-fs:focus-within {') + (renderedProps + '\n}'), ('.focusable-parent:focus ~ ' + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + (selector + '-fs {'))))) + (renderedProps + '\n}')]);
				default:
					return _List_fromArray(
						[
							selector + ('-act:active {' + (A3(
							$elm$core$List$foldl,
							$mdgriffith$elm_ui$Internal$Model$renderProps(false),
							'',
							props) + '\n}'))
						]);
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$renderVariant = function (_var) {
	switch (_var.$) {
		case 'VariantActive':
			var name = _var.a;
			return '\"' + (name + '\"');
		case 'VariantOff':
			var name = _var.a;
			return '\"' + (name + '\" 0');
		default:
			var name = _var.a;
			var index = _var.b;
			return '\"' + (name + ('\" ' + $elm$core$String$fromInt(index)));
	}
};
var $mdgriffith$elm_ui$Internal$Model$renderVariants = function (typeface) {
	if (typeface.$ === 'FontWith') {
		var font = typeface.a;
		return $elm$core$Maybe$Just(
			A2(
				$elm$core$String$join,
				', ',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$renderVariant, font.variants)));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$transformValue = function (transform) {
	switch (transform.$) {
		case 'Untransformed':
			return $elm$core$Maybe$Nothing;
		case 'Moved':
			var _v1 = transform.a;
			var x = _v1.a;
			var y = _v1.b;
			var z = _v1.c;
			return $elm$core$Maybe$Just(
				'translate3d(' + ($elm$core$String$fromFloat(x) + ('px, ' + ($elm$core$String$fromFloat(y) + ('px, ' + ($elm$core$String$fromFloat(z) + 'px)'))))));
		default:
			var _v2 = transform.a;
			var tx = _v2.a;
			var ty = _v2.b;
			var tz = _v2.c;
			var _v3 = transform.b;
			var sx = _v3.a;
			var sy = _v3.b;
			var sz = _v3.c;
			var _v4 = transform.c;
			var ox = _v4.a;
			var oy = _v4.b;
			var oz = _v4.c;
			var angle = transform.d;
			var translate = 'translate3d(' + ($elm$core$String$fromFloat(tx) + ('px, ' + ($elm$core$String$fromFloat(ty) + ('px, ' + ($elm$core$String$fromFloat(tz) + 'px)')))));
			var scale = 'scale3d(' + ($elm$core$String$fromFloat(sx) + (', ' + ($elm$core$String$fromFloat(sy) + (', ' + ($elm$core$String$fromFloat(sz) + ')')))));
			var rotate = 'rotate3d(' + ($elm$core$String$fromFloat(ox) + (', ' + ($elm$core$String$fromFloat(oy) + (', ' + ($elm$core$String$fromFloat(oz) + (', ' + ($elm$core$String$fromFloat(angle) + 'rad)')))))));
			return $elm$core$Maybe$Just(translate + (' ' + (scale + (' ' + rotate))));
	}
};
var $mdgriffith$elm_ui$Internal$Model$renderStyleRule = F3(
	function (options, rule, maybePseudo) {
		switch (rule.$) {
			case 'Style':
				var selector = rule.a;
				var props = rule.b;
				return A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, selector, props);
			case 'Shadows':
				var name = rule.a;
				var prop = rule.b;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + name,
					_List_fromArray(
						[
							A2($mdgriffith$elm_ui$Internal$Model$Property, 'box-shadow', prop)
						]));
			case 'Transparency':
				var name = rule.a;
				var transparency = rule.b;
				var opacity = A2(
					$elm$core$Basics$max,
					0,
					A2($elm$core$Basics$min, 1, 1 - transparency));
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + name,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'opacity',
							$elm$core$String$fromFloat(opacity))
						]));
			case 'FontSize':
				var i = rule.a;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.font-size-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'font-size',
							$elm$core$String$fromInt(i) + 'px')
						]));
			case 'FontFamily':
				var name = rule.a;
				var typefaces = rule.b;
				var features = A2(
					$elm$core$String$join,
					', ',
					A2($elm$core$List$filterMap, $mdgriffith$elm_ui$Internal$Model$renderVariants, typefaces));
				var families = _List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Model$Property,
						'font-family',
						A2(
							$elm$core$String$join,
							', ',
							A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$fontName, typefaces))),
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'font-feature-settings', features),
						A2(
						$mdgriffith$elm_ui$Internal$Model$Property,
						'font-variant',
						A2($elm$core$List$any, $mdgriffith$elm_ui$Internal$Model$hasSmallCaps, typefaces) ? 'small-caps' : 'normal')
					]);
				return A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, '.' + name, families);
			case 'Single':
				var _class = rule.a;
				var prop = rule.b;
				var val = rule.c;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + _class,
					_List_fromArray(
						[
							A2($mdgriffith$elm_ui$Internal$Model$Property, prop, val)
						]));
			case 'Colored':
				var _class = rule.a;
				var prop = rule.b;
				var color = rule.c;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + _class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							prop,
							$mdgriffith$elm_ui$Internal$Model$formatColor(color))
						]));
			case 'SpacingStyle':
				var cls = rule.a;
				var x = rule.b;
				var y = rule.c;
				var yPx = $elm$core$String$fromInt(y) + 'px';
				var xPx = $elm$core$String$fromInt(x) + 'px';
				var single = '.' + $mdgriffith$elm_ui$Internal$Style$classes.single;
				var row = '.' + $mdgriffith$elm_ui$Internal$Style$classes.row;
				var wrappedRow = '.' + ($mdgriffith$elm_ui$Internal$Style$classes.wrapped + row);
				var right = '.' + $mdgriffith$elm_ui$Internal$Style$classes.alignRight;
				var paragraph = '.' + $mdgriffith$elm_ui$Internal$Style$classes.paragraph;
				var page = '.' + $mdgriffith$elm_ui$Internal$Style$classes.page;
				var left = '.' + $mdgriffith$elm_ui$Internal$Style$classes.alignLeft;
				var halfY = $elm$core$String$fromFloat(y / 2) + 'px';
				var halfX = $elm$core$String$fromFloat(x / 2) + 'px';
				var column = '.' + $mdgriffith$elm_ui$Internal$Style$classes.column;
				var _class = '.' + cls;
				var any = '.' + $mdgriffith$elm_ui$Internal$Style$classes.any;
				return $elm$core$List$concat(
					_List_fromArray(
						[
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (row + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (wrappedRow + (' > ' + any)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin', halfY + (' ' + halfX))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (column + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-top', yPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-top', yPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + left)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-right', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + right)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_Utils_ap(_class, paragraph),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'line-height',
									'calc(1em + ' + ($elm$core$String$fromInt(y) + 'px)'))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							'textarea' + (any + _class),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'line-height',
									'calc(1em + ' + ($elm$core$String$fromInt(y) + 'px)')),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'height',
									'calc(100% + ' + ($elm$core$String$fromInt(y) + 'px)'))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + (' > ' + left)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-right', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + (' > ' + right)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + '::after'),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'content', '\'\''),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'display', 'block'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'height', '0'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'width', '0'),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'margin-top',
									$elm$core$String$fromInt((-1) * ((y / 2) | 0)) + 'px')
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + '::before'),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'content', '\'\''),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'display', 'block'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'height', '0'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'width', '0'),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'margin-bottom',
									$elm$core$String$fromInt((-1) * ((y / 2) | 0)) + 'px')
								]))
						]));
			case 'PaddingStyle':
				var cls = rule.a;
				var top = rule.b;
				var right = rule.c;
				var bottom = rule.d;
				var left = rule.e;
				var _class = '.' + cls;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					_class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'padding',
							$elm$core$String$fromFloat(top) + ('px ' + ($elm$core$String$fromFloat(right) + ('px ' + ($elm$core$String$fromFloat(bottom) + ('px ' + ($elm$core$String$fromFloat(left) + 'px')))))))
						]));
			case 'BorderWidth':
				var cls = rule.a;
				var top = rule.b;
				var right = rule.c;
				var bottom = rule.d;
				var left = rule.e;
				var _class = '.' + cls;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					_class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'border-width',
							$elm$core$String$fromInt(top) + ('px ' + ($elm$core$String$fromInt(right) + ('px ' + ($elm$core$String$fromInt(bottom) + ('px ' + ($elm$core$String$fromInt(left) + 'px')))))))
						]));
			case 'GridTemplateStyle':
				var template = rule.a;
				var toGridLengthHelper = F3(
					function (minimum, maximum, x) {
						toGridLengthHelper:
						while (true) {
							switch (x.$) {
								case 'Px':
									var px = x.a;
									return $elm$core$String$fromInt(px) + 'px';
								case 'Content':
									var _v2 = _Utils_Tuple2(minimum, maximum);
									if (_v2.a.$ === 'Nothing') {
										if (_v2.b.$ === 'Nothing') {
											var _v3 = _v2.a;
											var _v4 = _v2.b;
											return 'max-content';
										} else {
											var _v6 = _v2.a;
											var maxSize = _v2.b.a;
											return 'minmax(max-content, ' + ($elm$core$String$fromInt(maxSize) + 'px)');
										}
									} else {
										if (_v2.b.$ === 'Nothing') {
											var minSize = _v2.a.a;
											var _v5 = _v2.b;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + 'max-content)'));
										} else {
											var minSize = _v2.a.a;
											var maxSize = _v2.b.a;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(maxSize) + 'px)')));
										}
									}
								case 'Fill':
									var i = x.a;
									var _v7 = _Utils_Tuple2(minimum, maximum);
									if (_v7.a.$ === 'Nothing') {
										if (_v7.b.$ === 'Nothing') {
											var _v8 = _v7.a;
											var _v9 = _v7.b;
											return $elm$core$String$fromInt(i) + 'fr';
										} else {
											var _v11 = _v7.a;
											var maxSize = _v7.b.a;
											return 'minmax(max-content, ' + ($elm$core$String$fromInt(maxSize) + 'px)');
										}
									} else {
										if (_v7.b.$ === 'Nothing') {
											var minSize = _v7.a.a;
											var _v10 = _v7.b;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(i) + ('fr' + 'fr)'))));
										} else {
											var minSize = _v7.a.a;
											var maxSize = _v7.b.a;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(maxSize) + 'px)')));
										}
									}
								case 'Min':
									var m = x.a;
									var len = x.b;
									var $temp$minimum = $elm$core$Maybe$Just(m),
										$temp$maximum = maximum,
										$temp$x = len;
									minimum = $temp$minimum;
									maximum = $temp$maximum;
									x = $temp$x;
									continue toGridLengthHelper;
								default:
									var m = x.a;
									var len = x.b;
									var $temp$minimum = minimum,
										$temp$maximum = $elm$core$Maybe$Just(m),
										$temp$x = len;
									minimum = $temp$minimum;
									maximum = $temp$maximum;
									x = $temp$x;
									continue toGridLengthHelper;
							}
						}
					});
				var toGridLength = function (x) {
					return A3(toGridLengthHelper, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing, x);
				};
				var xSpacing = toGridLength(template.spacing.a);
				var ySpacing = toGridLength(template.spacing.b);
				var rows = function (x) {
					return 'grid-template-rows: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						' ',
						A2($elm$core$List$map, toGridLength, template.rows)));
				var msRows = function (x) {
					return '-ms-grid-rows: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						ySpacing,
						A2($elm$core$List$map, toGridLength, template.columns)));
				var msColumns = function (x) {
					return '-ms-grid-columns: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						ySpacing,
						A2($elm$core$List$map, toGridLength, template.columns)));
				var gapY = 'grid-row-gap:' + (toGridLength(template.spacing.b) + ';');
				var gapX = 'grid-column-gap:' + (toGridLength(template.spacing.a) + ';');
				var columns = function (x) {
					return 'grid-template-columns: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						' ',
						A2($elm$core$List$map, toGridLength, template.columns)));
				var _class = '.grid-rows-' + (A2(
					$elm$core$String$join,
					'-',
					A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.rows)) + ('-cols-' + (A2(
					$elm$core$String$join,
					'-',
					A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.columns)) + ('-space-x-' + ($mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.a) + ('-space-y-' + $mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.b)))))));
				var modernGrid = _class + ('{' + (columns + (rows + (gapX + (gapY + '}')))));
				var supports = '@supports (display:grid) {' + (modernGrid + '}');
				var base = _class + ('{' + (msColumns + (msRows + '}')));
				return _List_fromArray(
					[base, supports]);
			case 'GridPosition':
				var position = rule.a;
				var msPosition = A2(
					$elm$core$String$join,
					' ',
					_List_fromArray(
						[
							'-ms-grid-row: ' + ($elm$core$String$fromInt(position.row) + ';'),
							'-ms-grid-row-span: ' + ($elm$core$String$fromInt(position.height) + ';'),
							'-ms-grid-column: ' + ($elm$core$String$fromInt(position.col) + ';'),
							'-ms-grid-column-span: ' + ($elm$core$String$fromInt(position.width) + ';')
						]));
				var modernPosition = A2(
					$elm$core$String$join,
					' ',
					_List_fromArray(
						[
							'grid-row: ' + ($elm$core$String$fromInt(position.row) + (' / ' + ($elm$core$String$fromInt(position.row + position.height) + ';'))),
							'grid-column: ' + ($elm$core$String$fromInt(position.col) + (' / ' + ($elm$core$String$fromInt(position.col + position.width) + ';')))
						]));
				var _class = '.grid-pos-' + ($elm$core$String$fromInt(position.row) + ('-' + ($elm$core$String$fromInt(position.col) + ('-' + ($elm$core$String$fromInt(position.width) + ('-' + $elm$core$String$fromInt(position.height)))))));
				var modernGrid = _class + ('{' + (modernPosition + '}'));
				var supports = '@supports (display:grid) {' + (modernGrid + '}');
				var base = _class + ('{' + (msPosition + '}'));
				return _List_fromArray(
					[base, supports]);
			case 'PseudoSelector':
				var _class = rule.a;
				var styles = rule.b;
				var renderPseudoRule = function (style) {
					return A3(
						$mdgriffith$elm_ui$Internal$Model$renderStyleRule,
						options,
						style,
						$elm$core$Maybe$Just(_class));
				};
				return A2($elm$core$List$concatMap, renderPseudoRule, styles);
			default:
				var transform = rule.a;
				var val = $mdgriffith$elm_ui$Internal$Model$transformValue(transform);
				var _class = $mdgriffith$elm_ui$Internal$Model$transformClass(transform);
				var _v12 = _Utils_Tuple2(_class, val);
				if ((_v12.a.$ === 'Just') && (_v12.b.$ === 'Just')) {
					var cls = _v12.a.a;
					var v = _v12.b.a;
					return A4(
						$mdgriffith$elm_ui$Internal$Model$renderStyle,
						options,
						maybePseudo,
						'.' + cls,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Model$Property, 'transform', v)
							]));
				} else {
					return _List_Nil;
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$encodeStyles = F2(
	function (options, stylesheet) {
		return $elm$json$Json$Encode$object(
			A2(
				$elm$core$List$map,
				function (style) {
					var styled = A3($mdgriffith$elm_ui$Internal$Model$renderStyleRule, options, style, $elm$core$Maybe$Nothing);
					return _Utils_Tuple2(
						$mdgriffith$elm_ui$Internal$Model$getStyleName(style),
						A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, styled));
				},
				stylesheet));
	});
var $mdgriffith$elm_ui$Internal$Model$bracket = F2(
	function (selector, rules) {
		var renderPair = function (_v0) {
			var name = _v0.a;
			var val = _v0.b;
			return name + (': ' + (val + ';'));
		};
		return selector + (' {' + (A2(
			$elm$core$String$join,
			'',
			A2($elm$core$List$map, renderPair, rules)) + '}'));
	});
var $mdgriffith$elm_ui$Internal$Model$fontRule = F3(
	function (name, modifier, _v0) {
		var parentAdj = _v0.a;
		var textAdjustment = _v0.b;
		return _List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Model$bracket, '.' + (name + ('.' + (modifier + (', ' + ('.' + (name + (' .' + modifier))))))), parentAdj),
				A2($mdgriffith$elm_ui$Internal$Model$bracket, '.' + (name + ('.' + (modifier + ('> .' + ($mdgriffith$elm_ui$Internal$Style$classes.text + (', .' + (name + (' .' + (modifier + (' > .' + $mdgriffith$elm_ui$Internal$Style$classes.text)))))))))), textAdjustment)
			]);
	});
var $mdgriffith$elm_ui$Internal$Model$renderFontAdjustmentRule = F3(
	function (fontToAdjust, _v0, otherFontName) {
		var full = _v0.a;
		var capital = _v0.b;
		var name = _Utils_eq(fontToAdjust, otherFontName) ? fontToAdjust : (otherFontName + (' .' + fontToAdjust));
		return A2(
			$elm$core$String$join,
			' ',
			_Utils_ap(
				A3($mdgriffith$elm_ui$Internal$Model$fontRule, name, $mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital, capital),
				A3($mdgriffith$elm_ui$Internal$Model$fontRule, name, $mdgriffith$elm_ui$Internal$Style$classes.fullSize, full)));
	});
var $mdgriffith$elm_ui$Internal$Model$renderNullAdjustmentRule = F2(
	function (fontToAdjust, otherFontName) {
		var name = _Utils_eq(fontToAdjust, otherFontName) ? fontToAdjust : (otherFontName + (' .' + fontToAdjust));
		return A2(
			$elm$core$String$join,
			' ',
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Internal$Model$bracket,
					'.' + (name + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital + (', ' + ('.' + (name + (' .' + $mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital))))))),
					_List_fromArray(
						[
							_Utils_Tuple2('line-height', '1')
						])),
					A2(
					$mdgriffith$elm_ui$Internal$Model$bracket,
					'.' + (name + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital + ('> .' + ($mdgriffith$elm_ui$Internal$Style$classes.text + (', .' + (name + (' .' + ($mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital + (' > .' + $mdgriffith$elm_ui$Internal$Style$classes.text)))))))))),
					_List_fromArray(
						[
							_Utils_Tuple2('vertical-align', '0'),
							_Utils_Tuple2('line-height', '1')
						]))
				]));
	});
var $mdgriffith$elm_ui$Internal$Model$adjust = F3(
	function (size, height, vertical) {
		return {height: height / size, size: size, vertical: vertical};
	});
var $elm$core$List$maximum = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(
			A3($elm$core$List$foldl, $elm$core$Basics$max, x, xs));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$List$minimum = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(
			A3($elm$core$List$foldl, $elm$core$Basics$min, x, xs));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$convertAdjustment = function (adjustment) {
	var lines = _List_fromArray(
		[adjustment.capital, adjustment.baseline, adjustment.descender, adjustment.lowercase]);
	var lineHeight = 1.5;
	var normalDescender = (lineHeight - 1) / 2;
	var oldMiddle = lineHeight / 2;
	var descender = A2(
		$elm$core$Maybe$withDefault,
		adjustment.descender,
		$elm$core$List$minimum(lines));
	var newBaseline = A2(
		$elm$core$Maybe$withDefault,
		adjustment.baseline,
		$elm$core$List$minimum(
			A2(
				$elm$core$List$filter,
				function (x) {
					return !_Utils_eq(x, descender);
				},
				lines)));
	var base = lineHeight;
	var ascender = A2(
		$elm$core$Maybe$withDefault,
		adjustment.capital,
		$elm$core$List$maximum(lines));
	var capitalSize = 1 / (ascender - newBaseline);
	var capitalVertical = 1 - ascender;
	var fullSize = 1 / (ascender - descender);
	var fullVertical = 1 - ascender;
	var newCapitalMiddle = ((ascender - newBaseline) / 2) + newBaseline;
	var newFullMiddle = ((ascender - descender) / 2) + descender;
	return {
		capital: A3($mdgriffith$elm_ui$Internal$Model$adjust, capitalSize, ascender - newBaseline, capitalVertical),
		full: A3($mdgriffith$elm_ui$Internal$Model$adjust, fullSize, ascender - descender, fullVertical)
	};
};
var $mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules = function (converted) {
	return _Utils_Tuple2(
		_List_fromArray(
			[
				_Utils_Tuple2('display', 'block')
			]),
		_List_fromArray(
			[
				_Utils_Tuple2('display', 'inline-block'),
				_Utils_Tuple2(
				'line-height',
				$elm$core$String$fromFloat(converted.height)),
				_Utils_Tuple2(
				'vertical-align',
				$elm$core$String$fromFloat(converted.vertical) + 'em'),
				_Utils_Tuple2(
				'font-size',
				$elm$core$String$fromFloat(converted.size) + 'em')
			]));
};
var $mdgriffith$elm_ui$Internal$Model$typefaceAdjustment = function (typefaces) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (face, found) {
				if (found.$ === 'Nothing') {
					if (face.$ === 'FontWith') {
						var _with = face.a;
						var _v2 = _with.adjustment;
						if (_v2.$ === 'Nothing') {
							return found;
						} else {
							var adjustment = _v2.a;
							return $elm$core$Maybe$Just(
								_Utils_Tuple2(
									$mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules(
										function ($) {
											return $.full;
										}(
											$mdgriffith$elm_ui$Internal$Model$convertAdjustment(adjustment))),
									$mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules(
										function ($) {
											return $.capital;
										}(
											$mdgriffith$elm_ui$Internal$Model$convertAdjustment(adjustment)))));
						}
					} else {
						return found;
					}
				} else {
					return found;
				}
			}),
		$elm$core$Maybe$Nothing,
		typefaces);
};
var $mdgriffith$elm_ui$Internal$Model$renderTopLevelValues = function (rules) {
	var withImport = function (font) {
		if (font.$ === 'ImportFont') {
			var url = font.b;
			return $elm$core$Maybe$Just('@import url(\'' + (url + '\');'));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	};
	var fontImports = function (_v2) {
		var name = _v2.a;
		var typefaces = _v2.b;
		var imports = A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$filterMap, withImport, typefaces));
		return imports;
	};
	var allNames = A2($elm$core$List$map, $elm$core$Tuple$first, rules);
	var fontAdjustments = function (_v1) {
		var name = _v1.a;
		var typefaces = _v1.b;
		var _v0 = $mdgriffith$elm_ui$Internal$Model$typefaceAdjustment(typefaces);
		if (_v0.$ === 'Nothing') {
			return A2(
				$elm$core$String$join,
				'',
				A2(
					$elm$core$List$map,
					$mdgriffith$elm_ui$Internal$Model$renderNullAdjustmentRule(name),
					allNames));
		} else {
			var adjustment = _v0.a;
			return A2(
				$elm$core$String$join,
				'',
				A2(
					$elm$core$List$map,
					A2($mdgriffith$elm_ui$Internal$Model$renderFontAdjustmentRule, name, adjustment),
					allNames));
		}
	};
	return _Utils_ap(
		A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$map, fontImports, rules)),
		A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$map, fontAdjustments, rules)));
};
var $mdgriffith$elm_ui$Internal$Model$topLevelValue = function (rule) {
	if (rule.$ === 'FontFamily') {
		var name = rule.a;
		var typefaces = rule.b;
		return $elm$core$Maybe$Just(
			_Utils_Tuple2(name, typefaces));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$toStyleSheetString = F2(
	function (options, stylesheet) {
		var combine = F2(
			function (style, rendered) {
				return {
					rules: _Utils_ap(
						rendered.rules,
						A3($mdgriffith$elm_ui$Internal$Model$renderStyleRule, options, style, $elm$core$Maybe$Nothing)),
					topLevel: function () {
						var _v1 = $mdgriffith$elm_ui$Internal$Model$topLevelValue(style);
						if (_v1.$ === 'Nothing') {
							return rendered.topLevel;
						} else {
							var topLevel = _v1.a;
							return A2($elm$core$List$cons, topLevel, rendered.topLevel);
						}
					}()
				};
			});
		var _v0 = A3(
			$elm$core$List$foldl,
			combine,
			{rules: _List_Nil, topLevel: _List_Nil},
			stylesheet);
		var topLevel = _v0.topLevel;
		var rules = _v0.rules;
		return _Utils_ap(
			$mdgriffith$elm_ui$Internal$Model$renderTopLevelValues(topLevel),
			$elm$core$String$concat(rules));
	});
var $mdgriffith$elm_ui$Internal$Model$toStyleSheet = F2(
	function (options, styleSheet) {
		var _v0 = options.mode;
		switch (_v0.$) {
			case 'Layout':
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'div',
					_List_Nil,
					_List_fromArray(
						[
							A3(
							$elm$virtual_dom$VirtualDom$node,
							'style',
							_List_Nil,
							_List_fromArray(
								[
									$elm$virtual_dom$VirtualDom$text(
									A2($mdgriffith$elm_ui$Internal$Model$toStyleSheetString, options, styleSheet))
								]))
						]));
			case 'NoStaticStyleSheet':
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'div',
					_List_Nil,
					_List_fromArray(
						[
							A3(
							$elm$virtual_dom$VirtualDom$node,
							'style',
							_List_Nil,
							_List_fromArray(
								[
									$elm$virtual_dom$VirtualDom$text(
									A2($mdgriffith$elm_ui$Internal$Model$toStyleSheetString, options, styleSheet))
								]))
						]));
			default:
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'elm-ui-rules',
					_List_fromArray(
						[
							A2(
							$elm$virtual_dom$VirtualDom$property,
							'rules',
							A2($mdgriffith$elm_ui$Internal$Model$encodeStyles, options, styleSheet))
						]),
					_List_Nil);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$embedKeyed = F4(
	function (_static, opts, styles, children) {
		var dynamicStyleSheet = A2(
			$mdgriffith$elm_ui$Internal$Model$toStyleSheet,
			opts,
			A3(
				$elm$core$List$foldl,
				$mdgriffith$elm_ui$Internal$Model$reduceStyles,
				_Utils_Tuple2(
					$elm$core$Set$empty,
					$mdgriffith$elm_ui$Internal$Model$renderFocusStyle(opts.focus)),
				styles).b);
		return _static ? A2(
			$elm$core$List$cons,
			_Utils_Tuple2(
				'static-stylesheet',
				$mdgriffith$elm_ui$Internal$Model$staticRoot(opts)),
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2('dynamic-stylesheet', dynamicStyleSheet),
				children)) : A2(
			$elm$core$List$cons,
			_Utils_Tuple2('dynamic-stylesheet', dynamicStyleSheet),
			children);
	});
var $mdgriffith$elm_ui$Internal$Model$embedWith = F4(
	function (_static, opts, styles, children) {
		var dynamicStyleSheet = A2(
			$mdgriffith$elm_ui$Internal$Model$toStyleSheet,
			opts,
			A3(
				$elm$core$List$foldl,
				$mdgriffith$elm_ui$Internal$Model$reduceStyles,
				_Utils_Tuple2(
					$elm$core$Set$empty,
					$mdgriffith$elm_ui$Internal$Model$renderFocusStyle(opts.focus)),
				styles).b);
		return _static ? A2(
			$elm$core$List$cons,
			$mdgriffith$elm_ui$Internal$Model$staticRoot(opts),
			A2($elm$core$List$cons, dynamicStyleSheet, children)) : A2($elm$core$List$cons, dynamicStyleSheet, children);
	});
var $mdgriffith$elm_ui$Internal$Flag$heightBetween = $mdgriffith$elm_ui$Internal$Flag$flag(45);
var $mdgriffith$elm_ui$Internal$Flag$heightFill = $mdgriffith$elm_ui$Internal$Flag$flag(37);
var $mdgriffith$elm_ui$Internal$Flag$present = F2(
	function (myFlag, _v0) {
		var fieldOne = _v0.a;
		var fieldTwo = _v0.b;
		if (myFlag.$ === 'Flag') {
			var first = myFlag.a;
			return _Utils_eq(first & fieldOne, first);
		} else {
			var second = myFlag.a;
			return _Utils_eq(second & fieldTwo, second);
		}
	});
var $elm$html$Html$s = _VirtualDom_node('s');
var $elm$html$Html$u = _VirtualDom_node('u');
var $mdgriffith$elm_ui$Internal$Flag$widthBetween = $mdgriffith$elm_ui$Internal$Flag$flag(44);
var $mdgriffith$elm_ui$Internal$Flag$widthFill = $mdgriffith$elm_ui$Internal$Flag$flag(39);
var $mdgriffith$elm_ui$Internal$Model$finalizeNode = F6(
	function (has, node, attributes, children, embedMode, parentContext) {
		var createNode = F2(
			function (nodeName, attrs) {
				if (children.$ === 'Keyed') {
					var keyed = children.a;
					return A3(
						$elm$virtual_dom$VirtualDom$keyedNode,
						nodeName,
						attrs,
						function () {
							switch (embedMode.$) {
								case 'NoStyleSheet':
									return keyed;
								case 'OnlyDynamic':
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedKeyed, false, opts, styles, keyed);
								default:
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedKeyed, true, opts, styles, keyed);
							}
						}());
				} else {
					var unkeyed = children.a;
					return A2(
						function () {
							switch (nodeName) {
								case 'div':
									return $elm$html$Html$div;
								case 'p':
									return $elm$html$Html$p;
								default:
									return $elm$virtual_dom$VirtualDom$node(nodeName);
							}
						}(),
						attrs,
						function () {
							switch (embedMode.$) {
								case 'NoStyleSheet':
									return unkeyed;
								case 'OnlyDynamic':
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedWith, false, opts, styles, unkeyed);
								default:
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedWith, true, opts, styles, unkeyed);
							}
						}());
				}
			});
		var html = function () {
			switch (node.$) {
				case 'Generic':
					return A2(createNode, 'div', attributes);
				case 'NodeName':
					var nodeName = node.a;
					return A2(createNode, nodeName, attributes);
				default:
					var nodeName = node.a;
					var internal = node.b;
					return A3(
						$elm$virtual_dom$VirtualDom$node,
						nodeName,
						attributes,
						_List_fromArray(
							[
								A2(
								createNode,
								internal,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.single))
									]))
							]));
			}
		}();
		switch (parentContext.$) {
			case 'AsRow':
				return (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$widthFill, has) && (!A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$widthBetween, has))) ? html : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$alignRight, has) ? A2(
					$elm$html$Html$u,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.container, $mdgriffith$elm_ui$Internal$Style$classes.contentCenterY, $mdgriffith$elm_ui$Internal$Style$classes.alignContainerRight])))
						]),
					_List_fromArray(
						[html])) : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$centerX, has) ? A2(
					$elm$html$Html$s,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.container, $mdgriffith$elm_ui$Internal$Style$classes.contentCenterY, $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX])))
						]),
					_List_fromArray(
						[html])) : html));
			case 'AsColumn':
				return (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$heightFill, has) && (!A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$heightBetween, has))) ? html : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$centerY, has) ? A2(
					$elm$html$Html$s,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.container, $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY])))
						]),
					_List_fromArray(
						[html])) : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$alignBottom, has) ? A2(
					$elm$html$Html$u,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.container, $mdgriffith$elm_ui$Internal$Style$classes.alignContainerBottom])))
						]),
					_List_fromArray(
						[html])) : html));
			default:
				return html;
		}
	});
var $mdgriffith$elm_ui$Internal$Model$textElementClasses = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.text + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.widthContent + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.heightContent)))));
var $mdgriffith$elm_ui$Internal$Model$textElement = function (str) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Model$textElementClasses)
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(str)
			]));
};
var $mdgriffith$elm_ui$Internal$Model$textElementFillClasses = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.text + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.widthFill + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.heightFill)))));
var $mdgriffith$elm_ui$Internal$Model$textElementFill = function (str) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Model$textElementFillClasses)
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(str)
			]));
};
var $mdgriffith$elm_ui$Internal$Model$createElement = F3(
	function (context, children, rendered) {
		var gatherKeyed = F2(
			function (_v8, _v9) {
				var key = _v8.a;
				var child = _v8.b;
				var htmls = _v9.a;
				var existingStyles = _v9.b;
				switch (child.$) {
					case 'Unstyled':
						var html = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									html(context)),
								htmls),
							existingStyles) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									html(context)),
								htmls),
							existingStyles);
					case 'Styled':
						var styled = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context)),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles)) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context)),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles));
					case 'Text':
						var str = child.a;
						return _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									_Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asEl) ? $mdgriffith$elm_ui$Internal$Model$textElementFill(str) : $mdgriffith$elm_ui$Internal$Model$textElement(str)),
								htmls),
							existingStyles);
					default:
						return _Utils_Tuple2(htmls, existingStyles);
				}
			});
		var gather = F2(
			function (child, _v6) {
				var htmls = _v6.a;
				var existingStyles = _v6.b;
				switch (child.$) {
					case 'Unstyled':
						var html = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								html(context),
								htmls),
							existingStyles) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								html(context),
								htmls),
							existingStyles);
					case 'Styled':
						var styled = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles)) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles));
					case 'Text':
						var str = child.a;
						return _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asEl) ? $mdgriffith$elm_ui$Internal$Model$textElementFill(str) : $mdgriffith$elm_ui$Internal$Model$textElement(str),
								htmls),
							existingStyles);
					default:
						return _Utils_Tuple2(htmls, existingStyles);
				}
			});
		if (children.$ === 'Keyed') {
			var keyedChildren = children.a;
			var _v1 = A3(
				$elm$core$List$foldr,
				gatherKeyed,
				_Utils_Tuple2(_List_Nil, _List_Nil),
				keyedChildren);
			var keyed = _v1.a;
			var styles = _v1.b;
			var newStyles = $elm$core$List$isEmpty(styles) ? rendered.styles : _Utils_ap(rendered.styles, styles);
			if (!newStyles.b) {
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A5(
						$mdgriffith$elm_ui$Internal$Model$finalizeNode,
						rendered.has,
						rendered.node,
						rendered.attributes,
						$mdgriffith$elm_ui$Internal$Model$Keyed(
							A3($mdgriffith$elm_ui$Internal$Model$addKeyedChildren, 'nearby-element-pls', keyed, rendered.children)),
						$mdgriffith$elm_ui$Internal$Model$NoStyleSheet));
			} else {
				var allStyles = newStyles;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						html: A4(
							$mdgriffith$elm_ui$Internal$Model$finalizeNode,
							rendered.has,
							rendered.node,
							rendered.attributes,
							$mdgriffith$elm_ui$Internal$Model$Keyed(
								A3($mdgriffith$elm_ui$Internal$Model$addKeyedChildren, 'nearby-element-pls', keyed, rendered.children))),
						styles: allStyles
					});
			}
		} else {
			var unkeyedChildren = children.a;
			var _v3 = A3(
				$elm$core$List$foldr,
				gather,
				_Utils_Tuple2(_List_Nil, _List_Nil),
				unkeyedChildren);
			var unkeyed = _v3.a;
			var styles = _v3.b;
			var newStyles = $elm$core$List$isEmpty(styles) ? rendered.styles : _Utils_ap(rendered.styles, styles);
			if (!newStyles.b) {
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A5(
						$mdgriffith$elm_ui$Internal$Model$finalizeNode,
						rendered.has,
						rendered.node,
						rendered.attributes,
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							A2($mdgriffith$elm_ui$Internal$Model$addChildren, unkeyed, rendered.children)),
						$mdgriffith$elm_ui$Internal$Model$NoStyleSheet));
			} else {
				var allStyles = newStyles;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						html: A4(
							$mdgriffith$elm_ui$Internal$Model$finalizeNode,
							rendered.has,
							rendered.node,
							rendered.attributes,
							$mdgriffith$elm_ui$Internal$Model$Unkeyed(
								A2($mdgriffith$elm_ui$Internal$Model$addChildren, unkeyed, rendered.children))),
						styles: allStyles
					});
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Single = F3(
	function (a, b, c) {
		return {$: 'Single', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Model$Transform = function (a) {
	return {$: 'Transform', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$Field = F2(
	function (a, b) {
		return {$: 'Field', a: a, b: b};
	});
var $elm$core$Bitwise$or = _Bitwise_or;
var $mdgriffith$elm_ui$Internal$Flag$add = F2(
	function (myFlag, _v0) {
		var one = _v0.a;
		var two = _v0.b;
		if (myFlag.$ === 'Flag') {
			var first = myFlag.a;
			return A2($mdgriffith$elm_ui$Internal$Flag$Field, first | one, two);
		} else {
			var second = myFlag.a;
			return A2($mdgriffith$elm_ui$Internal$Flag$Field, one, second | two);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$ChildrenBehind = function (a) {
	return {$: 'ChildrenBehind', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront = F2(
	function (a, b) {
		return {$: 'ChildrenBehindAndInFront', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$ChildrenInFront = function (a) {
	return {$: 'ChildrenInFront', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$nearbyElement = F2(
	function (location, elem) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class(
					function () {
						switch (location.$) {
							case 'Above':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.above]));
							case 'Below':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.below]));
							case 'OnRight':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.onRight]));
							case 'OnLeft':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.onLeft]));
							case 'InFront':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.inFront]));
							default:
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.behind]));
						}
					}())
				]),
			_List_fromArray(
				[
					function () {
					switch (elem.$) {
						case 'Empty':
							return $elm$virtual_dom$VirtualDom$text('');
						case 'Text':
							var str = elem.a;
							return $mdgriffith$elm_ui$Internal$Model$textElement(str);
						case 'Unstyled':
							var html = elem.a;
							return html($mdgriffith$elm_ui$Internal$Model$asEl);
						default:
							var styled = elem.a;
							return A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, $mdgriffith$elm_ui$Internal$Model$asEl);
					}
				}()
				]));
	});
var $mdgriffith$elm_ui$Internal$Model$addNearbyElement = F3(
	function (location, elem, existing) {
		var nearby = A2($mdgriffith$elm_ui$Internal$Model$nearbyElement, location, elem);
		switch (existing.$) {
			case 'NoNearbyChildren':
				if (location.$ === 'Behind') {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenBehind(
						_List_fromArray(
							[nearby]));
				} else {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenInFront(
						_List_fromArray(
							[nearby]));
				}
			case 'ChildrenBehind':
				var existingBehind = existing.a;
				if (location.$ === 'Behind') {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenBehind(
						A2($elm$core$List$cons, nearby, existingBehind));
				} else {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						existingBehind,
						_List_fromArray(
							[nearby]));
				}
			case 'ChildrenInFront':
				var existingInFront = existing.a;
				if (location.$ === 'Behind') {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						_List_fromArray(
							[nearby]),
						existingInFront);
				} else {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenInFront(
						A2($elm$core$List$cons, nearby, existingInFront));
				}
			default:
				var existingBehind = existing.a;
				var existingInFront = existing.b;
				if (location.$ === 'Behind') {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						A2($elm$core$List$cons, nearby, existingBehind),
						existingInFront);
				} else {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						existingBehind,
						A2($elm$core$List$cons, nearby, existingInFront));
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Embedded = F2(
	function (a, b) {
		return {$: 'Embedded', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$NodeName = function (a) {
	return {$: 'NodeName', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$addNodeName = F2(
	function (newNode, old) {
		switch (old.$) {
			case 'Generic':
				return $mdgriffith$elm_ui$Internal$Model$NodeName(newNode);
			case 'NodeName':
				var name = old.a;
				return A2($mdgriffith$elm_ui$Internal$Model$Embedded, name, newNode);
			default:
				var x = old.a;
				var y = old.b;
				return A2($mdgriffith$elm_ui$Internal$Model$Embedded, x, y);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$alignXName = function (align) {
	switch (align.$) {
		case 'Left':
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedHorizontally + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignLeft);
		case 'Right':
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedHorizontally + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignRight);
		default:
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedHorizontally + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignCenterX);
	}
};
var $mdgriffith$elm_ui$Internal$Model$alignYName = function (align) {
	switch (align.$) {
		case 'Top':
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedVertically + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignTop);
		case 'Bottom':
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedVertically + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignBottom);
		default:
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedVertically + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignCenterY);
	}
};
var $mdgriffith$elm_ui$Internal$Model$FullTransform = F4(
	function (a, b, c, d) {
		return {$: 'FullTransform', a: a, b: b, c: c, d: d};
	});
var $mdgriffith$elm_ui$Internal$Model$Moved = function (a) {
	return {$: 'Moved', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$composeTransformation = F2(
	function (transform, component) {
		switch (transform.$) {
			case 'Untransformed':
				switch (component.$) {
					case 'MoveX':
						var x = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, 0, 0));
					case 'MoveY':
						var y = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(0, y, 0));
					case 'MoveZ':
						var z = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(0, 0, z));
					case 'MoveXYZ':
						var xyz = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(xyz);
					case 'Rotate':
						var xyz = component.a;
						var angle = component.b;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(0, 0, 0),
							_Utils_Tuple3(1, 1, 1),
							xyz,
							angle);
					default:
						var xyz = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(0, 0, 0),
							xyz,
							_Utils_Tuple3(0, 0, 1),
							0);
				}
			case 'Moved':
				var moved = transform.a;
				var x = moved.a;
				var y = moved.b;
				var z = moved.c;
				switch (component.$) {
					case 'MoveX':
						var newX = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(newX, y, z));
					case 'MoveY':
						var newY = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, newY, z));
					case 'MoveZ':
						var newZ = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, y, newZ));
					case 'MoveXYZ':
						var xyz = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(xyz);
					case 'Rotate':
						var xyz = component.a;
						var angle = component.b;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							moved,
							_Utils_Tuple3(1, 1, 1),
							xyz,
							angle);
					default:
						var scale = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							moved,
							scale,
							_Utils_Tuple3(0, 0, 1),
							0);
				}
			default:
				var moved = transform.a;
				var x = moved.a;
				var y = moved.b;
				var z = moved.c;
				var scaled = transform.b;
				var origin = transform.c;
				var angle = transform.d;
				switch (component.$) {
					case 'MoveX':
						var newX = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(newX, y, z),
							scaled,
							origin,
							angle);
					case 'MoveY':
						var newY = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(x, newY, z),
							scaled,
							origin,
							angle);
					case 'MoveZ':
						var newZ = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(x, y, newZ),
							scaled,
							origin,
							angle);
					case 'MoveXYZ':
						var newMove = component.a;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, newMove, scaled, origin, angle);
					case 'Rotate':
						var newOrigin = component.a;
						var newAngle = component.b;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, moved, scaled, newOrigin, newAngle);
					default:
						var newScale = component.a;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, moved, newScale, origin, angle);
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Flag$height = $mdgriffith$elm_ui$Internal$Flag$flag(7);
var $mdgriffith$elm_ui$Internal$Flag$heightContent = $mdgriffith$elm_ui$Internal$Flag$flag(36);
var $mdgriffith$elm_ui$Internal$Flag$merge = F2(
	function (_v0, _v1) {
		var one = _v0.a;
		var two = _v0.b;
		var three = _v1.a;
		var four = _v1.b;
		return A2($mdgriffith$elm_ui$Internal$Flag$Field, one | three, two | four);
	});
var $mdgriffith$elm_ui$Internal$Flag$none = A2($mdgriffith$elm_ui$Internal$Flag$Field, 0, 0);
var $mdgriffith$elm_ui$Internal$Model$renderHeight = function (h) {
	switch (h.$) {
		case 'Px':
			var px = h.a;
			var val = $elm$core$String$fromInt(px);
			var name = 'height-px-' + val;
			return _Utils_Tuple3(
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Style$classes.heightExact + (' ' + name),
				_List_fromArray(
					[
						A3($mdgriffith$elm_ui$Internal$Model$Single, name, 'height', val + 'px')
					]));
		case 'Content':
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightContent, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.heightContent,
				_List_Nil);
		case 'Fill':
			var portion = h.a;
			return (portion === 1) ? _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.heightFill,
				_List_Nil) : _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.heightFillPortion + (' height-fill-' + $elm$core$String$fromInt(portion)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						$mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.column + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
							'height-fill-' + $elm$core$String$fromInt(portion))))),
						'flex-grow',
						$elm$core$String$fromInt(portion * 100000))
					]));
		case 'Min':
			var minSize = h.a;
			var len = h.b;
			var cls = 'min-height-' + $elm$core$String$fromInt(minSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'min-height',
				$elm$core$String$fromInt(minSize) + 'px');
			var _v1 = $mdgriffith$elm_ui$Internal$Model$renderHeight(len);
			var newFlag = _v1.a;
			var newAttrs = _v1.b;
			var newStyle = _v1.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
		default:
			var maxSize = h.a;
			var len = h.b;
			var cls = 'max-height-' + $elm$core$String$fromInt(maxSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'max-height',
				$elm$core$String$fromInt(maxSize) + 'px');
			var _v2 = $mdgriffith$elm_ui$Internal$Model$renderHeight(len);
			var newFlag = _v2.a;
			var newAttrs = _v2.b;
			var newStyle = _v2.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
	}
};
var $mdgriffith$elm_ui$Internal$Flag$widthContent = $mdgriffith$elm_ui$Internal$Flag$flag(38);
var $mdgriffith$elm_ui$Internal$Model$renderWidth = function (w) {
	switch (w.$) {
		case 'Px':
			var px = w.a;
			return _Utils_Tuple3(
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Style$classes.widthExact + (' width-px-' + $elm$core$String$fromInt(px)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						'width-px-' + $elm$core$String$fromInt(px),
						'width',
						$elm$core$String$fromInt(px) + 'px')
					]));
		case 'Content':
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthContent, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.widthContent,
				_List_Nil);
		case 'Fill':
			var portion = w.a;
			return (portion === 1) ? _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.widthFill,
				_List_Nil) : _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion + (' width-fill-' + $elm$core$String$fromInt(portion)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						$mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.row + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
							'width-fill-' + $elm$core$String$fromInt(portion))))),
						'flex-grow',
						$elm$core$String$fromInt(portion * 100000))
					]));
		case 'Min':
			var minSize = w.a;
			var len = w.b;
			var cls = 'min-width-' + $elm$core$String$fromInt(minSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'min-width',
				$elm$core$String$fromInt(minSize) + 'px');
			var _v1 = $mdgriffith$elm_ui$Internal$Model$renderWidth(len);
			var newFlag = _v1.a;
			var newAttrs = _v1.b;
			var newStyle = _v1.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
		default:
			var maxSize = w.a;
			var len = w.b;
			var cls = 'max-width-' + $elm$core$String$fromInt(maxSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'max-width',
				$elm$core$String$fromInt(maxSize) + 'px');
			var _v2 = $mdgriffith$elm_ui$Internal$Model$renderWidth(len);
			var newFlag = _v2.a;
			var newAttrs = _v2.b;
			var newStyle = _v2.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
	}
};
var $mdgriffith$elm_ui$Internal$Flag$borderWidth = $mdgriffith$elm_ui$Internal$Flag$flag(27);
var $mdgriffith$elm_ui$Internal$Model$skippable = F2(
	function (flag, style) {
		if (_Utils_eq(flag, $mdgriffith$elm_ui$Internal$Flag$borderWidth)) {
			if (style.$ === 'Single') {
				var val = style.c;
				switch (val) {
					case '0px':
						return true;
					case '1px':
						return true;
					case '2px':
						return true;
					case '3px':
						return true;
					case '4px':
						return true;
					case '5px':
						return true;
					case '6px':
						return true;
					default:
						return false;
				}
			} else {
				return false;
			}
		} else {
			switch (style.$) {
				case 'FontSize':
					var i = style.a;
					return (i >= 8) && (i <= 32);
				case 'PaddingStyle':
					var name = style.a;
					var t = style.b;
					var r = style.c;
					var b = style.d;
					var l = style.e;
					return _Utils_eq(t, b) && (_Utils_eq(t, r) && (_Utils_eq(t, l) && ((t >= 0) && (t <= 24))));
				default:
					return false;
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Flag$width = $mdgriffith$elm_ui$Internal$Flag$flag(6);
var $mdgriffith$elm_ui$Internal$Flag$xAlign = $mdgriffith$elm_ui$Internal$Flag$flag(30);
var $mdgriffith$elm_ui$Internal$Flag$yAlign = $mdgriffith$elm_ui$Internal$Flag$flag(29);
var $mdgriffith$elm_ui$Internal$Model$gatherAttrRecursive = F8(
	function (classes, node, has, transform, styles, attrs, children, elementAttrs) {
		gatherAttrRecursive:
		while (true) {
			if (!elementAttrs.b) {
				var _v1 = $mdgriffith$elm_ui$Internal$Model$transformClass(transform);
				if (_v1.$ === 'Nothing') {
					return {
						attributes: A2(
							$elm$core$List$cons,
							$elm$html$Html$Attributes$class(classes),
							attrs),
						children: children,
						has: has,
						node: node,
						styles: styles
					};
				} else {
					var _class = _v1.a;
					return {
						attributes: A2(
							$elm$core$List$cons,
							$elm$html$Html$Attributes$class(classes + (' ' + _class)),
							attrs),
						children: children,
						has: has,
						node: node,
						styles: A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$Transform(transform),
							styles)
					};
				}
			} else {
				var attribute = elementAttrs.a;
				var remaining = elementAttrs.b;
				switch (attribute.$) {
					case 'NoAttribute':
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = styles,
							$temp$attrs = attrs,
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'Class':
						var flag = attribute.a;
						var exactClassName = attribute.b;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, flag, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = exactClassName + (' ' + classes),
								$temp$node = node,
								$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
					case 'Attr':
						var actualAttribute = attribute.a;
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = styles,
							$temp$attrs = A2($elm$core$List$cons, actualAttribute, attrs),
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'StyleClass':
						var flag = attribute.a;
						var style = attribute.b;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, flag, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							if (A2($mdgriffith$elm_ui$Internal$Model$skippable, flag, style)) {
								var $temp$classes = $mdgriffith$elm_ui$Internal$Model$getStyleName(style) + (' ' + classes),
									$temp$node = node,
									$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							} else {
								var $temp$classes = $mdgriffith$elm_ui$Internal$Model$getStyleName(style) + (' ' + classes),
									$temp$node = node,
									$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
									$temp$transform = transform,
									$temp$styles = A2($elm$core$List$cons, style, styles),
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							}
						}
					case 'TransformComponent':
						var flag = attribute.a;
						var component = attribute.b;
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
							$temp$transform = A2($mdgriffith$elm_ui$Internal$Model$composeTransformation, transform, component),
							$temp$styles = styles,
							$temp$attrs = attrs,
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'Width':
						var width = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$width, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							switch (width.$) {
								case 'Px':
									var px = width.a;
									var $temp$classes = ($mdgriffith$elm_ui$Internal$Style$classes.widthExact + (' width-px-' + $elm$core$String$fromInt(px))) + (' ' + classes),
										$temp$node = node,
										$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has),
										$temp$transform = transform,
										$temp$styles = A2(
										$elm$core$List$cons,
										A3(
											$mdgriffith$elm_ui$Internal$Model$Single,
											'width-px-' + $elm$core$String$fromInt(px),
											'width',
											$elm$core$String$fromInt(px) + 'px'),
										styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Content':
									var $temp$classes = classes + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.widthContent),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$add,
										$mdgriffith$elm_ui$Internal$Flag$widthContent,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Fill':
									var portion = width.a;
									if (portion === 1) {
										var $temp$classes = classes + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.widthFill),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$widthFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion + (' width-fill-' + $elm$core$String$fromInt(portion)))),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$widthFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
											$temp$transform = transform,
											$temp$styles = A2(
											$elm$core$List$cons,
											A3(
												$mdgriffith$elm_ui$Internal$Model$Single,
												$mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.row + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
													'width-fill-' + $elm$core$String$fromInt(portion))))),
												'flex-grow',
												$elm$core$String$fromInt(portion * 100000)),
											styles),
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								default:
									var _v4 = $mdgriffith$elm_ui$Internal$Model$renderWidth(width);
									var addToFlags = _v4.a;
									var newClass = _v4.b;
									var newStyles = _v4.c;
									var $temp$classes = classes + (' ' + newClass),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$merge,
										addToFlags,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
										$temp$transform = transform,
										$temp$styles = _Utils_ap(newStyles, styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
							}
						}
					case 'Height':
						var height = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$height, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							switch (height.$) {
								case 'Px':
									var px = height.a;
									var val = $elm$core$String$fromInt(px) + 'px';
									var name = 'height-px-' + val;
									var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.heightExact + (' ' + (name + (' ' + classes))),
										$temp$node = node,
										$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has),
										$temp$transform = transform,
										$temp$styles = A2(
										$elm$core$List$cons,
										A3($mdgriffith$elm_ui$Internal$Model$Single, name, 'height ', val),
										styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Content':
									var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.heightContent + (' ' + classes),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$add,
										$mdgriffith$elm_ui$Internal$Flag$heightContent,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Fill':
									var portion = height.a;
									if (portion === 1) {
										var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.heightFill + (' ' + classes),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$heightFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.heightFillPortion + (' height-fill-' + $elm$core$String$fromInt(portion)))),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$heightFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
											$temp$transform = transform,
											$temp$styles = A2(
											$elm$core$List$cons,
											A3(
												$mdgriffith$elm_ui$Internal$Model$Single,
												$mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.column + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
													'height-fill-' + $elm$core$String$fromInt(portion))))),
												'flex-grow',
												$elm$core$String$fromInt(portion * 100000)),
											styles),
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								default:
									var _v6 = $mdgriffith$elm_ui$Internal$Model$renderHeight(height);
									var addToFlags = _v6.a;
									var newClass = _v6.b;
									var newStyles = _v6.c;
									var $temp$classes = classes + (' ' + newClass),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$merge,
										addToFlags,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
										$temp$transform = transform,
										$temp$styles = _Utils_ap(newStyles, styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
							}
						}
					case 'Describe':
						var description = attribute.a;
						switch (description.$) {
							case 'Main':
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'main', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Navigation':
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'nav', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'ContentInfo':
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'footer', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Complementary':
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'aside', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Heading':
								var i = description.a;
								if (i <= 1) {
									var $temp$classes = classes,
										$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'h1', node),
										$temp$has = has,
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								} else {
									if (i < 7) {
										var $temp$classes = classes,
											$temp$node = A2(
											$mdgriffith$elm_ui$Internal$Model$addNodeName,
											'h' + $elm$core$String$fromInt(i),
											node),
											$temp$has = has,
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes,
											$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'h6', node),
											$temp$has = has,
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								}
							case 'Paragraph':
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Button':
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'role', 'button'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Label':
								var label = description.a;
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-label', label),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'LivePolite':
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-live', 'polite'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							default:
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-live', 'assertive'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
						}
					case 'Nearby':
						var location = attribute.a;
						var elem = attribute.b;
						var newStyles = function () {
							switch (elem.$) {
								case 'Empty':
									return styles;
								case 'Text':
									var str = elem.a;
									return styles;
								case 'Unstyled':
									var html = elem.a;
									return styles;
								default:
									var styled = elem.a;
									return _Utils_ap(styles, styled.styles);
							}
						}();
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = newStyles,
							$temp$attrs = attrs,
							$temp$children = A3($mdgriffith$elm_ui$Internal$Model$addNearbyElement, location, elem, children),
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'AlignX':
						var x = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$xAlign, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = $mdgriffith$elm_ui$Internal$Model$alignXName(x) + (' ' + classes),
								$temp$node = node,
								$temp$has = function (flags) {
								switch (x.$) {
									case 'CenterX':
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$centerX, flags);
									case 'Right':
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$alignRight, flags);
									default:
										return flags;
								}
							}(
								A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$xAlign, has)),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
					default:
						var y = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$yAlign, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = $mdgriffith$elm_ui$Internal$Model$alignYName(y) + (' ' + classes),
								$temp$node = node,
								$temp$has = function (flags) {
								switch (y.$) {
									case 'CenterY':
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$centerY, flags);
									case 'Bottom':
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$alignBottom, flags);
									default:
										return flags;
								}
							}(
								A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$yAlign, has)),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
				}
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Untransformed = {$: 'Untransformed'};
var $mdgriffith$elm_ui$Internal$Model$untransformed = $mdgriffith$elm_ui$Internal$Model$Untransformed;
var $mdgriffith$elm_ui$Internal$Model$element = F4(
	function (context, node, attributes, children) {
		return A3(
			$mdgriffith$elm_ui$Internal$Model$createElement,
			context,
			children,
			A8(
				$mdgriffith$elm_ui$Internal$Model$gatherAttrRecursive,
				$mdgriffith$elm_ui$Internal$Model$contextClasses(context),
				node,
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Model$untransformed,
				_List_Nil,
				_List_Nil,
				$mdgriffith$elm_ui$Internal$Model$NoNearbyChildren,
				$elm$core$List$reverse(attributes)));
	});
var $mdgriffith$elm_ui$Internal$Model$NoAttribute = {$: 'NoAttribute'};
var $mdgriffith$elm_ui$Element$Input$hasFocusStyle = function (attr) {
	if (((attr.$ === 'StyleClass') && (attr.b.$ === 'PseudoSelector')) && (attr.b.a.$ === 'Focus')) {
		var _v1 = attr.b;
		var _v2 = _v1.a;
		return true;
	} else {
		return false;
	}
};
var $mdgriffith$elm_ui$Internal$Model$htmlClass = function (cls) {
	return $mdgriffith$elm_ui$Internal$Model$Attr(
		$elm$html$Html$Attributes$class(cls));
};
var $mdgriffith$elm_ui$Element$Input$focusDefault = function (attrs) {
	return A2($elm$core$List$any, $mdgriffith$elm_ui$Element$Input$hasFocusStyle, attrs) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Internal$Model$htmlClass('focusable');
};
var $mdgriffith$elm_ui$Internal$Model$Height = function (a) {
	return {$: 'Height', a: a};
};
var $mdgriffith$elm_ui$Element$height = $mdgriffith$elm_ui$Internal$Model$Height;
var $mdgriffith$elm_ui$Element$Events$onClick = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Events$onClick);
var $mdgriffith$elm_ui$Element$Input$enter = 'Enter';
var $elm$virtual_dom$VirtualDom$MayPreventDefault = function (a) {
	return {$: 'MayPreventDefault', a: a};
};
var $elm$html$Html$Events$preventDefaultOn = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$MayPreventDefault(decoder));
	});
var $mdgriffith$elm_ui$Element$Input$onKey = F2(
	function (desiredCode, msg) {
		var decode = function (code) {
			return _Utils_eq(code, desiredCode) ? $elm$json$Json$Decode$succeed(msg) : $elm$json$Json$Decode$fail('Not the enter key');
		};
		var isKey = A2(
			$elm$json$Json$Decode$andThen,
			decode,
			A2($elm$json$Json$Decode$field, 'key', $elm$json$Json$Decode$string));
		return $mdgriffith$elm_ui$Internal$Model$Attr(
			A2(
				$elm$html$Html$Events$preventDefaultOn,
				'keyup',
				A2(
					$elm$json$Json$Decode$map,
					function (fired) {
						return _Utils_Tuple2(fired, true);
					},
					isKey)));
	});
var $mdgriffith$elm_ui$Element$Input$onEnter = function (msg) {
	return A2($mdgriffith$elm_ui$Element$Input$onKey, $mdgriffith$elm_ui$Element$Input$enter, msg);
};
var $mdgriffith$elm_ui$Internal$Model$Class = F2(
	function (a, b) {
		return {$: 'Class', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$cursor = $mdgriffith$elm_ui$Internal$Flag$flag(21);
var $mdgriffith$elm_ui$Element$pointer = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$cursor, $mdgriffith$elm_ui$Internal$Style$classes.cursorPointer);
var $mdgriffith$elm_ui$Internal$Model$Content = {$: 'Content'};
var $mdgriffith$elm_ui$Element$shrink = $mdgriffith$elm_ui$Internal$Model$Content;
var $elm$html$Html$Attributes$tabindex = function (n) {
	return A2(
		_VirtualDom_attribute,
		'tabIndex',
		$elm$core$String$fromInt(n));
};
var $mdgriffith$elm_ui$Internal$Model$Width = function (a) {
	return {$: 'Width', a: a};
};
var $mdgriffith$elm_ui$Element$width = $mdgriffith$elm_ui$Internal$Model$Width;
var $mdgriffith$elm_ui$Element$Input$button = F2(
	function (attrs, _v0) {
		var onPress = _v0.onPress;
		var label = _v0.label;
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentCenterX + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.seButton + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.noTextSelection)))))),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$pointer,
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$Input$focusDefault(attrs),
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$Button),
									A2(
										$elm$core$List$cons,
										$mdgriffith$elm_ui$Internal$Model$Attr(
											$elm$html$Html$Attributes$tabindex(0)),
										function () {
											if (onPress.$ === 'Nothing') {
												return A2(
													$elm$core$List$cons,
													$mdgriffith$elm_ui$Internal$Model$Attr(
														$elm$html$Html$Attributes$disabled(true)),
													attrs);
											} else {
												var msg = onPress.a;
												return A2(
													$elm$core$List$cons,
													$mdgriffith$elm_ui$Element$Events$onClick(msg),
													A2(
														$elm$core$List$cons,
														$mdgriffith$elm_ui$Element$Input$onEnter(msg),
														attrs));
											}
										}()))))))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var $lucamug$elm_ui_with_context$Element$WithContext$Internal$run = F2(
	function (context, _v0) {
		var f = _v0.a;
		return f(context);
	});
var $lucamug$elm_ui_with_context$Element$WithContext$Internal$Element = function (a) {
	return {$: 'Element', a: a};
};
var $lucamug$elm_ui_with_context$Element$WithContext$Internal$attributes = F2(
	function (context, attrs) {
		return A2(
			$elm$core$List$map,
			function (_v0) {
				var f = _v0.a;
				return f(context);
			},
			attrs);
	});
var $lucamug$elm_ui_with_context$Element$WithContext$Internal$wrapAttrs = F4(
	function (ctor, f, attrs, child) {
		return $lucamug$elm_ui_with_context$Element$WithContext$Internal$Element(
			function (context) {
				return A2(
					ctor,
					A2($lucamug$elm_ui_with_context$Element$WithContext$Internal$attributes, context, attrs),
					A2(f, context, child));
			});
	});
var $lucamug$elm_ui_with_context$Element$WithContext$Input$button = A2(
	$lucamug$elm_ui_with_context$Element$WithContext$Internal$wrapAttrs,
	$mdgriffith$elm_ui$Element$Input$button,
	F2(
		function (context, _v0) {
			var onPress = _v0.onPress;
			var label = _v0.label;
			return {
				label: A2($lucamug$elm_ui_with_context$Element$WithContext$Internal$run, context, label),
				onPress: onPress
			};
		}));
var $mdgriffith$elm_ui$Internal$Flag$overflow = $mdgriffith$elm_ui$Internal$Flag$flag(20);
var $mdgriffith$elm_ui$Element$clip = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.clip);
var $lucamug$elm_ui_with_context$Element$WithContext$clip = $lucamug$elm_ui_with_context$Element$WithContext$attribute($mdgriffith$elm_ui$Element$clip);
var $author$project$Internal$Data$ExerciseData = function (id) {
	return function (title) {
		return function (difficulty) {
			return function (categories) {
				return function (ellieId) {
					return function (reference) {
						return function (problem) {
							return function (example) {
								return function (tests) {
									return function (hints) {
										return function (dummySolution) {
											return function (solutions) {
												return {categories: categories, difficulty: difficulty, dummySolution: dummySolution, ellieId: ellieId, example: example, hints: hints, id: id, problem: problem, reference: reference, solutions: solutions, tests: tests, title: title};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $author$project$Internal$Data$difficultyToString = function (difficulty) {
	switch (difficulty.$) {
		case 'Easy':
			return 'easy';
		case 'Medium':
			return 'medium';
		case 'Hard':
			return 'hard';
		default:
			return '';
	}
};
var $author$project$Internal$Data$Easy = {$: 'Easy'};
var $author$project$Internal$Data$Hard = {$: 'Hard'};
var $author$project$Internal$Data$Medium = {$: 'Medium'};
var $author$project$Internal$Data$Undefined = {$: 'Undefined'};
var $author$project$Internal$Data$stringToDifficulty = function (string) {
	return _Utils_eq(
		string,
		$author$project$Internal$Data$difficultyToString($author$project$Internal$Data$Easy)) ? $author$project$Internal$Data$Easy : (_Utils_eq(
		string,
		$author$project$Internal$Data$difficultyToString($author$project$Internal$Data$Medium)) ? $author$project$Internal$Data$Medium : (_Utils_eq(
		string,
		$author$project$Internal$Data$difficultyToString($author$project$Internal$Data$Hard)) ? $author$project$Internal$Data$Hard : $author$project$Internal$Data$Undefined));
};
var $author$project$Internal$Codecs$codecDifficulty = A3($miniBill$elm_codec$Codec$map, $author$project$Internal$Data$stringToDifficulty, $author$project$Internal$Data$difficultyToString, $miniBill$elm_codec$Codec$string);
var $author$project$Internal$Codecs$codecExerciseData = $miniBill$elm_codec$Codec$buildObject(
	A4(
		$miniBill$elm_codec$Codec$field,
		'solutions',
		function ($) {
			return $.solutions;
		},
		$miniBill$elm_codec$Codec$list($miniBill$elm_codec$Codec$string),
		A4(
			$miniBill$elm_codec$Codec$field,
			'dummySolutions',
			function ($) {
				return $.dummySolution;
			},
			$miniBill$elm_codec$Codec$string,
			A4(
				$miniBill$elm_codec$Codec$field,
				'hints',
				function ($) {
					return $.hints;
				},
				$miniBill$elm_codec$Codec$list($miniBill$elm_codec$Codec$string),
				A4(
					$miniBill$elm_codec$Codec$field,
					'tests',
					function ($) {
						return $.tests;
					},
					$miniBill$elm_codec$Codec$list($miniBill$elm_codec$Codec$string),
					A4(
						$miniBill$elm_codec$Codec$field,
						'example',
						function ($) {
							return $.example;
						},
						$miniBill$elm_codec$Codec$string,
						A4(
							$miniBill$elm_codec$Codec$field,
							'problem',
							function ($) {
								return $.problem;
							},
							$miniBill$elm_codec$Codec$string,
							A4(
								$miniBill$elm_codec$Codec$field,
								'reference',
								function ($) {
									return $.reference;
								},
								$miniBill$elm_codec$Codec$string,
								A4(
									$miniBill$elm_codec$Codec$field,
									'ellieId',
									function ($) {
										return $.ellieId;
									},
									$miniBill$elm_codec$Codec$string,
									A4(
										$miniBill$elm_codec$Codec$field,
										'categories',
										function ($) {
											return $.categories;
										},
										$miniBill$elm_codec$Codec$list($miniBill$elm_codec$Codec$string),
										A4(
											$miniBill$elm_codec$Codec$field,
											'difficulty',
											function ($) {
												return $.difficulty;
											},
											$author$project$Internal$Codecs$codecDifficulty,
											A4(
												$miniBill$elm_codec$Codec$field,
												'title',
												function ($) {
													return $.title;
												},
												$miniBill$elm_codec$Codec$string,
												A4(
													$miniBill$elm_codec$Codec$field,
													'id',
													function ($) {
														return $.id;
													},
													$miniBill$elm_codec$Codec$int,
													$miniBill$elm_codec$Codec$object($author$project$Internal$Data$ExerciseData))))))))))))));
var $author$project$Exercises$codecExerciseData = $author$project$Internal$Codecs$codecExerciseData;
var $lucamug$elm_ui_with_context$Element$WithContext$Internal$attr = function (a) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$Attribute(
		function (_v0) {
			return a;
		});
};
var $mdgriffith$elm_ui$Internal$Model$Colored = F3(
	function (a, b, c) {
		return {$: 'Colored', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Model$StyleClass = F2(
	function (a, b) {
		return {$: 'StyleClass', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$borderColor = $mdgriffith$elm_ui$Internal$Flag$flag(28);
var $mdgriffith$elm_ui$Internal$Model$formatColorClass = function (_v0) {
	var red = _v0.a;
	var green = _v0.b;
	var blue = _v0.c;
	var alpha = _v0.d;
	return $mdgriffith$elm_ui$Internal$Model$floatClass(red) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(green) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(blue) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(alpha))))));
};
var $mdgriffith$elm_ui$Element$Border$color = function (clr) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'bc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(clr),
			'border-color',
			clr));
};
var $lucamug$elm_ui_with_context$Element$WithContext$Border$color = function (clr) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$attr(
		$mdgriffith$elm_ui$Element$Border$color(clr));
};
var $mdgriffith$elm_ui$Internal$Model$AsColumn = {$: 'AsColumn'};
var $mdgriffith$elm_ui$Internal$Model$asColumn = $mdgriffith$elm_ui$Internal$Model$AsColumn;
var $mdgriffith$elm_ui$Element$column = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asColumn,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentTop + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.contentLeft)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $lucamug$elm_ui_with_context$Element$WithContext$Internal$wrapContainer = F3(
	function (container, attrs, children) {
		return $lucamug$elm_ui_with_context$Element$WithContext$Internal$Element(
			function (context) {
				return A2(
					container,
					A2($lucamug$elm_ui_with_context$Element$WithContext$Internal$attributes, context, attrs),
					A2(
						$elm$core$List$map,
						$lucamug$elm_ui_with_context$Element$WithContext$Internal$run(context),
						children));
			});
	});
var $lucamug$elm_ui_with_context$Element$WithContext$column = $lucamug$elm_ui_with_context$Element$WithContext$Internal$wrapContainer($mdgriffith$elm_ui$Element$column);
var $author$project$Main$createExerciseJsonp = F2(
	function (ind, exerciseData) {
		return 'exerciseData = ' + A3($miniBill$elm_codec$Codec$encodeToString, ind, $author$project$Exercises$codecExerciseData, exerciseData);
	});
var $author$project$Internal$Data$Index = F5(
	function (id, title, difficulty, categories, ellieId) {
		return {categories: categories, difficulty: difficulty, ellieId: ellieId, id: id, title: title};
	});
var $author$project$Internal$Codecs$codecIndex = $miniBill$elm_codec$Codec$buildObject(
	A4(
		$miniBill$elm_codec$Codec$field,
		'ellieId',
		function ($) {
			return $.ellieId;
		},
		$miniBill$elm_codec$Codec$string,
		A4(
			$miniBill$elm_codec$Codec$field,
			'categories',
			function ($) {
				return $.categories;
			},
			$miniBill$elm_codec$Codec$list($miniBill$elm_codec$Codec$string),
			A4(
				$miniBill$elm_codec$Codec$field,
				'difficulty',
				function ($) {
					return $.difficulty;
				},
				$author$project$Internal$Codecs$codecDifficulty,
				A4(
					$miniBill$elm_codec$Codec$field,
					'title',
					function ($) {
						return $.title;
					},
					$miniBill$elm_codec$Codec$string,
					A4(
						$miniBill$elm_codec$Codec$field,
						'id',
						function ($) {
							return $.id;
						},
						$miniBill$elm_codec$Codec$int,
						$miniBill$elm_codec$Codec$object($author$project$Internal$Data$Index)))))));
var $author$project$Exercises$codecIndex = $author$project$Internal$Codecs$codecIndex;
var $author$project$Main$createIndex = F2(
	function (ind, listExerciseData) {
		return A3(
			$miniBill$elm_codec$Codec$encodeToString,
			ind,
			$miniBill$elm_codec$Codec$list($author$project$Exercises$codecIndex),
			A2(
				$elm$core$List$map,
				function (exerciseData) {
					return {categories: exerciseData.categories, difficulty: exerciseData.difficulty, ellieId: exerciseData.ellieId, id: exerciseData.id, title: exerciseData.title};
				},
				listExerciseData));
	});
var $author$project$Main$createIndexJsonp = F2(
	function (ind, listExerciseData) {
		return 'index = ' + A2($author$project$Main$createIndex, ind, listExerciseData);
	});
var $author$project$Main$Output = F2(
	function (fileName, content) {
		return {content: content, fileName: fileName};
	});
var $author$project$Main$codecOutput = $miniBill$elm_codec$Codec$buildObject(
	A4(
		$miniBill$elm_codec$Codec$field,
		'content',
		function ($) {
			return $.content;
		},
		$miniBill$elm_codec$Codec$string,
		A4(
			$miniBill$elm_codec$Codec$field,
			'fileName',
			function ($) {
				return $.fileName;
			},
			$miniBill$elm_codec$Codec$string,
			$miniBill$elm_codec$Codec$object($author$project$Main$Output))));
var $elm$core$String$cons = _String_cons;
var $elm$core$String$fromChar = function (_char) {
	return A2($elm$core$String$cons, _char, '');
};
var $elm$core$Bitwise$shiftRightBy = _Bitwise_shiftRightBy;
var $elm$core$String$repeatHelp = F3(
	function (n, chunk, result) {
		return (n <= 0) ? result : A3(
			$elm$core$String$repeatHelp,
			n >> 1,
			_Utils_ap(chunk, chunk),
			(!(n & 1)) ? result : _Utils_ap(result, chunk));
	});
var $elm$core$String$repeat = F2(
	function (n, chunk) {
		return A3($elm$core$String$repeatHelp, n, chunk, '');
	});
var $elm$core$String$padLeft = F3(
	function (n, _char, string) {
		return _Utils_ap(
			A2(
				$elm$core$String$repeat,
				n - $elm$core$String$length(string),
				$elm$core$String$fromChar(_char)),
			string);
	});
var $author$project$Main$createOutputs = F2(
	function (ind, listExerciseData) {
		return A3(
			$miniBill$elm_codec$Codec$encodeToString,
			ind,
			$miniBill$elm_codec$Codec$list($author$project$Main$codecOutput),
			A2(
				$elm$core$List$cons,
				{
					content: A2($author$project$Main$createIndexJsonp, ind, listExerciseData),
					fileName: 'index.js'
				},
				A2(
					$elm$core$List$map,
					function (exerciseData) {
						return {
							content: A2($author$project$Main$createExerciseJsonp, ind, exerciseData),
							fileName: A3(
								$elm$core$String$padLeft,
								3,
								_Utils_chr('0'),
								$elm$core$String$fromInt(exerciseData.id)) + '.js'
						};
					},
					listExerciseData)));
	});
var $mdgriffith$elm_ui$Element$el = F2(
	function (attrs, child) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					attrs)),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[child])));
	});
var $lucamug$elm_ui_with_context$Element$WithContext$el = A2($lucamug$elm_ui_with_context$Element$WithContext$Internal$wrapAttrs, $mdgriffith$elm_ui$Element$el, $lucamug$elm_ui_with_context$Element$WithContext$Internal$run);
var $lucamug$elm_ui_with_context$Element$WithContext$element = function (elem) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$Element(
		function (_v0) {
			return elem;
		});
};
var $rakutentech$r10$R10$Color$Internal$Primary$CrimsonRed = {$: 'CrimsonRed'};
var $rakutentech$r10$R10$Language$EN_US = {$: 'EN_US'};
var $rakutentech$r10$R10$Mode$Light = {$: 'Light'};
var $rakutentech$r10$R10$CountryCode$Others = function (a) {
	return {$: 'Others', a: a};
};
var $rakutentech$r10$R10$CountryCode$default = $rakutentech$r10$R10$CountryCode$Others('tw');
var $rakutentech$r10$R10$Context$emptyModel = {
	flags: {callCenterUrl: '', clientName: '', contactUsLanguageSupport: $elm$core$Dict$empty, cookiePolicyLink: '', countryCode: $rakutentech$r10$R10$CountryCode$default, debugger_formStyleAsString: '', debugger_transitionSpeed: 1, disableInternationalPrefixPhoneChange: false, displayPromoArea: false, emailDomainList: _List_Nil, externalError: $elm$core$Maybe$Nothing, isInternetExplorer: false, isOntouchendInDocument: false, loginLink: '', mode: $rakutentech$r10$R10$Mode$Light, notifyText: $elm$core$Maybe$Nothing, platform: '', primaryColor: $rakutentech$r10$R10$Color$Internal$Primary$CrimsonRed, privacyPolicyLink: '', referenceClientName: '', referenceExternalServiceName: '', registrationLink: '', seenAnnouncement: $elm$core$Maybe$Nothing, termsAndConditionsLink: '', urlStartOver: '', userAgent: ''},
	language: $rakutentech$r10$R10$Language$EN_US,
	url: {fragment: $elm$core$Maybe$Nothing, host: '', path: '', port_: $elm$core$Maybe$Nothing, protocol: $elm$url$Url$Https, query: $elm$core$Maybe$Nothing},
	windowSize: {width: 800}
};
var $rakutentech$r10$R10$Device$Android = {$: 'Android'};
var $rakutentech$r10$R10$Device$Chrome = {$: 'Chrome'};
var $rakutentech$r10$R10$Device$Firefox = {$: 'Firefox'};
var $rakutentech$r10$R10$Device$IE = {$: 'IE'};
var $rakutentech$r10$R10$Device$IOS = {$: 'IOS'};
var $rakutentech$r10$R10$Device$Opera = {$: 'Opera'};
var $rakutentech$r10$R10$Device$Other = {$: 'Other'};
var $rakutentech$r10$R10$Device$Safari = {$: 'Safari'};
var $rakutentech$r10$R10$Device$Unknown = {$: 'Unknown'};
var $rakutentech$r10$R10$Device$WindowsPhone = {$: 'WindowsPhone'};
var $rakutentech$r10$R10$Device$constructor = F3(
	function (userAgent, platform, isOntouchendInDocument) {
		var osRegex = function (string) {
			return A2(
				$elm$core$Maybe$withDefault,
				$elm$regex$Regex$never,
				A2(
					$elm$regex$Regex$fromStringWith,
					{caseInsensitive: true, multiline: false},
					string));
		};
		var ieRegex = A2(
			$elm$core$Maybe$withDefault,
			$elm$regex$Regex$never,
			$elm$regex$Regex$fromString('Trident.*rv:11\\.'));
		var iOSPlatformList = _List_fromArray(
			['iPad Simulator', 'iPhone Simulator', 'iPod Simulator', 'iPad', 'iPhone', 'iPod']);
		var os = A2(
			$elm$regex$Regex$contains,
			osRegex('windows phone'),
			userAgent) ? $rakutentech$r10$R10$Device$WindowsPhone : (A2(
			$elm$regex$Regex$contains,
			osRegex('android'),
			userAgent) ? $rakutentech$r10$R10$Device$Android : ((A2(
			$elm$core$List$any,
			$elm$core$Basics$eq(platform),
			iOSPlatformList) || (A2($elm$core$String$contains, 'Mac', userAgent) && isOntouchendInDocument)) ? $rakutentech$r10$R10$Device$IOS : $rakutentech$r10$R10$Device$Other));
		var browser = (A2($elm$core$String$contains, 'Opera', userAgent) || A2($elm$core$String$contains, 'OPR', userAgent)) ? $rakutentech$r10$R10$Device$Opera : (A2($elm$core$String$contains, 'Chrome', userAgent) ? $rakutentech$r10$R10$Device$Chrome : (A2($elm$core$String$contains, 'Safari', userAgent) ? $rakutentech$r10$R10$Device$Safari : (A2($elm$core$String$contains, 'Firefox', userAgent) ? $rakutentech$r10$R10$Device$Firefox : ((A2($elm$core$String$contains, 'MSIE ', userAgent) || A2($elm$regex$Regex$contains, ieRegex, userAgent)) ? $rakutentech$r10$R10$Device$IE : $rakutentech$r10$R10$Device$Unknown))));
		return _Utils_Tuple2(os, browser);
	});
var $rakutentech$r10$R10$When$Do = {$: 'Do'};
var $rakutentech$r10$R10$When$do = $rakutentech$r10$R10$When$Do;
var $rakutentech$r10$R10$Theme$fromFlags = function (flags) {
	return {mode: flags.mode, primaryColor: flags.primaryColor};
};
var $rakutentech$r10$R10$Context$isSmallScreen = function (model) {
	return model.windowSize.width < 350;
};
var $rakutentech$r10$R10$CountryCode$JP = {$: 'JP'};
var $rakutentech$r10$R10$Language$toString = function (language) {
	switch (language.$) {
		case 'Key':
			return 'key';
		case 'Lollipop':
			return 'lollipop';
		case 'EN_US':
			return 'en-US';
		case 'JA_JP':
			return 'ja-JP';
		case 'ZH_TW':
			return 'zh-TW';
		case 'ZH_CN':
			return 'zh-CN';
		case 'ES_ES':
			return 'es-ES';
		case 'FR_FR':
			return 'fr-FR';
		case 'DE_DE':
			return 'de-DE';
		case 'IT_IT':
			return 'it-IT';
		default:
			return 'uk-UA';
	}
};
var $rakutentech$r10$R10$Context$matchCallCenterValue = function (model) {
	var specialContactUrlForLanguage = A2(
		$elm$core$Maybe$withDefault,
		model.flags.callCenterUrl,
		A2(
			$elm$core$Dict$get,
			$rakutentech$r10$R10$Language$toString(model.language),
			model.flags.contactUsLanguageSupport));
	return _Utils_eq(model.flags.countryCode, $rakutentech$r10$R10$CountryCode$JP) ? specialContactUrlForLanguage : model.flags.callCenterUrl;
};
var $rakutentech$r10$R10$When$Otherwise = {$: 'Otherwise'};
var $rakutentech$r10$R10$When$otherwise = $rakutentech$r10$R10$When$Otherwise;
var $rakutentech$r10$R10$When$when = F5(
	function (a, _v0, b, _v1, c) {
		return a ? b : c;
	});
var $rakutentech$r10$R10$Context$fromModel = function (model) {
	return {
		callCenterUrl: $rakutentech$r10$R10$Context$matchCallCenterValue(model),
		clientName: model.flags.clientName,
		contactUsLanguageSupport: model.flags.contactUsLanguageSupport,
		cookiePolicyLink: model.flags.cookiePolicyLink,
		countryCode: model.flags.countryCode,
		currentUrl: model.url,
		debugger_formStyleAsString: model.flags.debugger_formStyleAsString,
		debugger_transitionSpeed: model.flags.debugger_transitionSpeed,
		defaultWidgetWidth: 500,
		disableInternationalPrefixPhoneChange: model.flags.disableInternationalPrefixPhoneChange,
		displayPromoArea: model.flags.displayPromoArea,
		emailDomainList: model.flags.emailDomainList,
		externalError: model.flags.externalError,
		inputFieldWithLargePattern_fontSize: A5(
			$rakutentech$r10$R10$When$when,
			$rakutentech$r10$R10$Context$isSmallScreen(model),
			$rakutentech$r10$R10$When$do,
			35,
			$rakutentech$r10$R10$When$otherwise,
			40),
		inputFieldWithLargePattern_height: A5(
			$rakutentech$r10$R10$When$when,
			$rakutentech$r10$R10$Context$isSmallScreen(model),
			$rakutentech$r10$R10$When$do,
			70,
			$rakutentech$r10$R10$When$otherwise,
			80),
		inputFieldWithLargePattern_letterSpacing: A5(
			$rakutentech$r10$R10$When$when,
			$rakutentech$r10$R10$Context$isSmallScreen(model),
			$rakutentech$r10$R10$When$do,
			5,
			$rakutentech$r10$R10$When$otherwise,
			10),
		inputFieldWithLargePattern_width: A5(
			$rakutentech$r10$R10$When$when,
			$rakutentech$r10$R10$Context$isSmallScreen(model),
			$rakutentech$r10$R10$When$do,
			200,
			$rakutentech$r10$R10$When$otherwise,
			240),
		language: model.language,
		mainPadding: A5(
			$rakutentech$r10$R10$When$when,
			$rakutentech$r10$R10$Context$isSmallScreen(model),
			$rakutentech$r10$R10$When$do,
			10,
			$rakutentech$r10$R10$When$otherwise,
			30),
		notifyText: A2($elm$core$Maybe$withDefault, '', model.flags.notifyText),
		privacyPolicyLink: model.flags.privacyPolicyLink,
		referenceClientName: (model.flags.referenceClientName === 'n/a (referenceClientName)') ? '' : model.flags.referenceClientName,
		referenceExternalServiceName: (model.flags.referenceExternalServiceName === 'n/a (referenceExternalServiceName)') ? '' : model.flags.referenceExternalServiceName,
		seenAnnouncement: model.flags.seenAnnouncement,
		specialWidgetWidth: 775,
		termsAndConditionsLink: model.flags.termsAndConditionsLink,
		theme: $rakutentech$r10$R10$Theme$fromFlags(model.flags),
		urlStartOver: model.flags.urlStartOver,
		userAgent: A3($rakutentech$r10$R10$Device$constructor, model.flags.userAgent, model.flags.platform, model.flags.isOntouchendInDocument),
		verticalSpacingBetweenItems: A5(
			$rakutentech$r10$R10$When$when,
			$rakutentech$r10$R10$Context$isSmallScreen(model),
			$rakutentech$r10$R10$When$do,
			20,
			$rakutentech$r10$R10$When$otherwise,
			25)
	};
};
var $rakutentech$r10$R10$Context$empty = $rakutentech$r10$R10$Context$fromModel($rakutentech$r10$R10$Context$emptyModel);
var $author$project$Exercises$difficulty = {easy: $author$project$Internal$Data$Easy, hard: $author$project$Internal$Data$Hard, medium: $author$project$Internal$Data$Medium, _undefined: $author$project$Internal$Data$Undefined};
var $author$project$Exercises$yourImplementationGoesHere = 'Your implementation goes here';
var $author$project$E001$exerciseData = {
	categories: _List_fromArray(
		['Lists', 'Recursion']),
	difficulty: $author$project$Exercises$difficulty.easy,
	dummySolution: 'last : List a -> Maybe a\nlast xs =\n    -- ' + ($author$project$Exercises$yourImplementationGoesHere + '\n    Nothing'),
	ellieId: 'dFhBMLPrtWsa1',
	example: 'last [ 1, 2, 3, 4 ] == Just 4\n\nlast [] == Nothing',
	hints: _List_fromArray(
		['Use recursion.', 'How can you leverage a List\'s `head` function to solve this problem?']),
	id: 1,
	problem: 'Write a function `last` that returns the last element of a list. An empty list doesn\'t have a last element, therefore `last` must return a `Maybe`.',
	reference: 'https://johncrane.gitbooks.io/ninety-nine-elm-problems/content/p/p01.html',
	solutions: _List_fromArray(
		['Recursive search for the last element.\n```\nlast : List a -> Maybe a\nlast list =\n    case list of\n        [] ->\n            Nothing\n\n        [ a ] ->\n            Just a\n\n        x :: xs ->\n            last xs\n```', 'Reverse and take the head.\n```\nlast : List a -> Maybe a\nlast list =\n    List.reverse list |> List.head\n```', '[Point-free style](https://en.wikipedia.org/wiki/Tacit_programming), reverse and take the head.\n```\nlast : List a -> Maybe a\nlast =\n    List.reverse >> List.head\n```', 'Use `List.foldl`.\n```\nlast : List a -> Maybe a\nlast list =\n    case list of\n        [] ->\n            Nothing\n\n        x :: xs ->\n            Just (List.foldl (\\y _ -> y) x xs)\n```']),
	tests: _List_fromArray(
		['last [ 1, 2, 3, 4 ] |> equal (Just 4)', 'last [ 1 ] |> equal (Just 1)', 'last [] |> equal Nothing', 'last [ \'a\', \'b\', \'c\' ] |> equal (Just \'c\')']),
	title: 'Returns the last element of a list'
};
var $author$project$E002$exerciseData = {
	categories: _List_fromArray(
		['Lists', 'Recursion']),
	difficulty: $author$project$Exercises$difficulty.easy,
	dummySolution: 'penultimate : List a -> Maybe a\npenultimate list =\n    -- ' + ($author$project$Exercises$yourImplementationGoesHere + '\n    Nothing'),
	ellieId: 'dFdvdf7wKmQa1',
	example: 'penultimate [ 1, 2, 3, 4 ] == Just 3\n\npenultimate [ \"a\" ] == Nothing',
	hints: _List_fromArray(
		['Use recursion.', 'What can you do to a list to make [List.head](https://package.elm-lang.org/packages/elm/core/latest/List#head) solve this problem?']),
	id: 2,
	problem: 'Implement the function `penultimate` to find the next to last element of a list.',
	reference: 'https://johncrane.gitbooks.io/ninety-nine-elm-problems/content/p/p02.html',
	solutions: _List_fromArray(
		['Recursive search for the last element\n```\npenultimate : List a -> Maybe a\npenultimate list =\n    case list of\n        [] ->\n            Nothing\n\n        [ y ] ->\n            Nothing\n\n        [ y, z ] ->\n            Just y\n\n        y :: ys ->\n            penultimate ys\n```', 'Reverse the list and take the head of the tail.\n```\npenultimate : List a -> Maybe a\npenultimate list =\n    case List.reverse list of\n        [] ->\n            Nothing\n\n        y :: ys ->\n            List.head ys\n```', 'Reverse the list, drop one and take the head.\n```\npenultimate : List a -> Maybe a\npenultimate list =\n    case List.drop 1 (List.reverse list) of\n        [] ->\n            Nothing\n\n        y :: ys ->\n            Just y\n```']),
	tests: _List_fromArray(
		['penultimate [ 1, 2, 3, 4 ] |> equal (Just 3)', 'penultimate [ 1, 2 ] |> equal (Just 1)', 'penultimate [ 1 ] |> equal Nothing', 'penultimate [] |> equal Nothing', 'penultimate [ "a", "b", "c" ] |> equal (Just "b")', 'penultimate [ "a" ] |> equal Nothing']),
	title: 'Find the next to last element of a list'
};
var $author$project$E023$exerciseData = {
	categories: _List_fromArray(
		['Randomness']),
	difficulty: $author$project$Exercises$difficulty.hard,
	dummySolution: 'randomSelect : Random.Seed -> Int -> List a -> ( List a, Random.Seed )\nrandomSelect seed n list =\n    -- ' + ($author$project$Exercises$yourImplementationGoesHere + '\n    ( [], seed )'),
	ellieId: 'dZgZqMHCKvWa1',
	example: 'randomSelect seed 3 ["Al", "Biff", "Cal", "Dee", "Ed", "Flip"]\n    == ["Cal", "Dee", "Al"]',
	hints: _List_fromArray(
		['[`getAt`](https://package.elm-lang.org/packages/elm-community/list-extra/latest/List-Extra#getAt) and [`removeAt`](https://package.elm-lang.org/packages/elm-community/list-extra/latest/List-Extra#removeAt) from `elm-community/list-extra` could prove useful.', 'A more Elm-ish solution would be to define a new `Random.Generator`.']),
	id: 23,
	problem: 'Extract a given number of randomly selected elements from a list.\n\nYou must use [Elm\'s Random](https://package.elm-lang.org/packages/elm/random/latest/) to implement `randomSelect`. Use [`Random.step`](https://package.elm-lang.org/packages/elm/random/latest/Random#step) to generate a pseudo-random number. `Random.step` takes a [`Generator`](https://package.elm-lang.org/packages/elm/random/latest/Random#Generator) and a [`Seed`](https://package.elm-lang.org/packages/elm/random/latest/Random#Seed). The seed is passed as a parameter to `randomSelect`. You will need to create a generator such as [`Random.int`](https://package.elm-lang.org/packages/elm/random/latest/Random#int).\n\n`Random.step` will return both a randomly generated value from the generator, and a new seed. You must use the new seed for subsequent random numbers.',
	reference: 'https://johncrane.gitbooks.io/ninety-nine-elm-problems/content/p/p23.html',
	solutions: _List_fromArray(
		['Using [`getAt`](https://package.elm-lang.org/packages/elm-community/list-extra/latest/List-Extra#getAt) and [`removeAt`](https://package.elm-lang.org/packages/elm-community/list-extra/latest/List-Extra#removeAt) from `elm-community/list-extra`.\n    \n```elm\nimport List.Extra\n\n\nrandomSelect : Random.Seed -> Int -> List a -> ( List a, Random.Seed )\nrandomSelect seed n list =\n    let\n        ( l, r, s ) =\n            randSelect n ( [], list, seed )\n    in\n    ( l, s )\n\n\nrandSelect : Int -> ( List a, List a, Random.Seed ) -> ( List a, List a, Random.Seed )\nrandSelect n ( l, r, seed ) =\n    if n > 0 then\n        let\n            ( idx, seed_ ) =\n                Random.step (Random.int 1 (List.length r)) seed\n\n            e =\n                List.Extra.getAt (idx - 1) r\n\n            r_ =\n                List.Extra.removeAt (idx - 1) r\n        in\n        case e of\n            Nothing ->\n                ( l, r, seed )\n\n            Just x ->\n                randSelect (n - 1) ( x :: l, r_, seed_ )\n\n    else\n        ( l, r, seed )\n```', 'Defining a new `Random.Generator`\n\n```elm\nmanyOf : Random.Seed -> Int -> List a -> List a -> ( List a, Random.Seed )\nmanyOf seed n source acc =\n    let\n        ( x, seed2 ) =\n            Random.step (select source) seed\n    in\n    if n < 1 then\n        ( acc, seed )\n\n    else\n        ( x\n            ++ Tuple.first\n                (manyOf seed2 (n - 1) (removeElements x source) acc)\n        , seed2\n        )\n\n\nrandomSelect : Random.Seed -> Int -> List a -> ( List a, Random.Seed )\nrandomSelect seed n source =\n    manyOf seed n source []\n\n\nremoveElements : List a -> List a -> List a\nremoveElements exclude source =\n    List.filter (\\x -> not (List.member x exclude)) source\n\n\nselect : List a -> Random.Generator (List a)\nselect list =\n    Random.map (\\y -> list |> List.drop y |> List.take 1) (Random.int 0 (List.length list - 1))\n```']),
	tests: _List_fromArray(
		['List.sort list1 |> equal (List.sort list2)', 'list2 |> notEqual list3', 'List.sort list4 |> equal (List.range 1 9)', 'List.sort list5 |> equal [ \"a\", \"b\" ]', 'list6 |> equal []', 'list7 |> equal []', 'list8 |> equal []']),
	title: 'Extract randomly selected elements from a list'
};
var $author$project$E090$exerciseData = {
	categories: _List_fromArray(
		['Puzzles', 'Recursion']),
	difficulty: $author$project$Exercises$difficulty.hard,
	dummySolution: 'queens : Int -> List (List Int)\nqueens n = \n    -- ' + ($author$project$Exercises$yourImplementationGoesHere + '\n    []'),
	ellieId: 'dZfrCXKY89Fa1',
	example: '',
	hints: _List_fromArray(
		['How about this idea? (from [Stack Overflow](https://stackoverflow.com/questions/19998153/algorithm-of-n-queens))\n            \n```            \ntry to place first queen\nsuccess\n   try to place second queen\n   success\n      try to place third queen\n      fail\n   try to place second queen in another position\n   success\n      try to place third queen\n      success\n         try to place fourth queen\n```\n']),
	id: 90,
	problem: 'The [Eight queens puzzle](https://en.wikipedia.org/wiki/Eight_queens_puzzle) is a classical puzzle in computer science. The objective is to place eight queens on a chessboard so that no two queens are attacking each other; that is no two queens are in the same row, the same column, or on the same diagonal. For example:\n\n![8 Queens Puzzle](https://elm-exercises.netlify.app/images/8-queens-puzzle.png)        \n        \nRepresent the positions of the queens as a list of numbers 1..N. Example: [4,2,7,3,6,8,5,1] means that the queen in the first column is in row 4, the queen in the second column is in row 2, etc.\n',
	reference: 'https://johncrane.gitbooks.io/ninety-nine-elm-problems/content/p/p90.html',
	solutions: _List_fromArray(
		['Solution by [lucamug](https://twitter.com/luca_mug) "inspired by" [rosettacode.org/wiki/N-queens_problem](http://rosettacode.org/wiki/N-queens_problem#Haskell) and [davidpomerenke/elm-problem-solving](https://package.elm-lang.org/packages/davidpomerenke/elm-problem-solving/latest/Problem-Example#queens).\n\n```\nqueens : Int -> List (List Int)\nqueens n =\n    oneMoreQueen n [] []\n        |> Tuple.second\n        |> List.map (List.map Tuple.second)\n\n\ntype alias State =\n    List ( Int, Int )\n\n\noneMoreQueen : Int -> List State -> State -> ( List State, List State )\noneMoreQueen boardSize solutions state =\n    let\n        y : Int\n        y =\n            List.length state\n    in\n    if y < boardSize then\n        List.range 0 (boardSize - 1)\n            |> List.filter (\\x -> not (isQueenUnderAttack y x state))\n            |> List.map (\\x -> ( y, x ) :: state)\n            |> List.map (oneMoreQueen boardSize solutions)\n            |> List.unzip\n            |> Tuple.mapBoth List.concat List.concat\n\n    else\n        ( [], state :: solutions )\n\n\nisQueenUnderAttack : Int -> Int -> State -> Bool\nisQueenUnderAttack y x state =\n    List.any\n        (\\( yy, xx ) ->\n            xx == x || yy == y || abs (yy - y) == abs (xx - x)\n        )\n        state\n```']),
	tests: _List_fromArray(
		['List.length (queens 8) |> equal 92', 'List.length (queens 7) |> equal 40', 'List.length (queens 6) |> equal 4', 'List.length (queens 5) |> equal 10', 'List.length (queens 4) |> equal 2', 'List.length (queens 3) |> equal 0', 'List.length (queens 2) |> equal 0', 'List.length (queens 1) |> equal 1', 'List.length (queens 0) |> equal 1']),
	title: 'The \"Eight queens puzzle\"'
};
var $author$project$E100$exerciseData = {
	categories: _List_fromArray(
		['Puzzles']),
	difficulty: $author$project$Exercises$difficulty.hard,
	dummySolution: 'queens : Int -> List (List Int)\nqueens n = \n    -- ' + ($author$project$Exercises$yourImplementationGoesHere + '\n    []'),
	ellieId: 'dZk36Lv5h4ca1',
	example: 'g o o o o o o o al == "goooooooal"\ng o al             == "goal"\ng al               == "gal\"',
	hints: _List_fromArray(
		['Would these type signatures be of any help?\n```\ng : (String -> a) -> a\n\no : String -> (String -> a) -> a\n\nal : String -> String\n```', 'There was some discussion in the Elm Slack channel about this puzzle, maybe you can get some [inspiration from that](https://elm-exercises.netlify.app/100/).']),
	id: 100,
	problem: 'Write three functions, `g`, `o`, and `al`, that can be called like in the example below to produce an appropriately enthusiastic goal announcement.',
	reference: 'https://github.com/carbonfive/functional-programming-weekly-challenge/tree/master/Week002',
	solutions: _List_fromArray(
		['By [hayleigh](https://elm-exercises.netlify.app/100/withsolution):\n\n\n\n```\ng : (String -> a) -> a\ng f =\n    f "g"\n\n\no : String -> (String -> a) -> a\no s f =\n    f (s ++ "o")\n\n\nal : String -> String\nal s =\n    s ++ "al"\n```']),
	tests: _List_fromArray(
		['g o o o o o o o al |> equal \"goooooooal\"', 'g o al |> equal \"goal\"', 'g al |> equal \"gal\"']),
	title: 'Fútbol announcer goal functions'
};
var $author$project$ListExercises$exercises = _List_fromArray(
	[$author$project$E001$exerciseData, $author$project$E002$exerciseData, $author$project$E023$exerciseData, $author$project$E090$exerciseData, $author$project$E100$exerciseData]);
var $mdgriffith$elm_ui$Internal$Model$Fill = function (a) {
	return {$: 'Fill', a: a};
};
var $mdgriffith$elm_ui$Element$fill = $mdgriffith$elm_ui$Internal$Model$Fill(1);
var $lucamug$elm_ui_with_context$Element$WithContext$fill = $mdgriffith$elm_ui$Element$fill;
var $mdgriffith$elm_ui$Element$fillPortion = $mdgriffith$elm_ui$Internal$Model$Fill;
var $lucamug$elm_ui_with_context$Element$WithContext$fillPortion = $mdgriffith$elm_ui$Element$fillPortion;
var $mdgriffith$elm_ui$Internal$Model$FocusStyleOption = function (a) {
	return {$: 'FocusStyleOption', a: a};
};
var $mdgriffith$elm_ui$Element$focusStyle = $mdgriffith$elm_ui$Internal$Model$FocusStyleOption;
var $lucamug$elm_ui_with_context$Element$WithContext$focusStyle = $mdgriffith$elm_ui$Element$focusStyle;
var $lucamug$elm_ui_with_context$Element$WithContext$Internal$attribute = function (a) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$Attribute(
		function (_v0) {
			return a;
		});
};
var $mdgriffith$elm_ui$Internal$Model$Heading = function (a) {
	return {$: 'Heading', a: a};
};
var $mdgriffith$elm_ui$Element$Region$heading = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Describe, $mdgriffith$elm_ui$Internal$Model$Heading);
var $lucamug$elm_ui_with_context$Element$WithContext$Region$heading = function (level) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$attribute(
		$mdgriffith$elm_ui$Element$Region$heading(level));
};
var $author$project$Internal$Data$emptyExerciseData = {categories: _List_Nil, difficulty: $author$project$Internal$Data$Undefined, dummySolution: '', ellieId: '', example: '', hints: _List_Nil, id: 0, problem: '', reference: '', solutions: _List_Nil, tests: _List_Nil, title: 'Error loading exercise data'};
var $author$project$Exercises$init = F2(
	function (tea, flags) {
		var modelExercise = tea.init.a;
		var localStorage = function () {
			var _v2 = A2($miniBill$elm_codec$Codec$decodeString, $author$project$Internal$Codecs$codecLocalStorageAsList, flags.localStorage);
			if (_v2.$ === 'Ok') {
				var localStorageAsList = _v2.a;
				return $elm$core$Dict$fromList(localStorageAsList);
			} else {
				return $elm$core$Dict$empty;
			}
		}();
		var index = function () {
			var _v1 = A2(
				$miniBill$elm_codec$Codec$decodeString,
				$miniBill$elm_codec$Codec$list($author$project$Internal$Codecs$codecIndex),
				flags.index);
			if (_v1.$ === 'Ok') {
				var i = _v1.a;
				return i;
			} else {
				return _List_Nil;
			}
		}();
		var exerciseData = function () {
			var _v0 = A2($miniBill$elm_codec$Codec$decodeString, $author$project$Internal$Codecs$codecExerciseData, flags.exerciseData);
			if (_v0.$ === 'Ok') {
				var ed = _v0.a;
				return ed;
			} else {
				return $author$project$Internal$Data$emptyExerciseData;
			}
		}();
		var localStorageRecord = A2(
			$elm$core$Maybe$withDefault,
			$author$project$Internal$Data$initLocalStorageRecord,
			A2($elm$core$Dict$get, exerciseData.id, localStorage));
		var model = {
			exerciseData: exerciseData,
			failureReasons: A2(
				$elm$core$List$map,
				$elm_explorations$test$Test$Runner$getFailureReason,
				tea.tests(modelExercise)),
			index: index,
			localStorage: localStorage,
			localStorageRecord: localStorageRecord,
			menuOver: false,
			modelExercise: modelExercise,
			posixNow: $elm$time$Time$millisToPosix(0),
			width: flags.width
		};
		return _Utils_Tuple2(
			model,
			A2($author$project$Exercises$saveLocalStorage, tea, model));
	});
var $mdgriffith$elm_ui$Internal$Model$OnlyDynamic = F2(
	function (a, b) {
		return {$: 'OnlyDynamic', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$StaticRootAndDynamic = F2(
	function (a, b) {
		return {$: 'StaticRootAndDynamic', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$AllowHover = {$: 'AllowHover'};
var $mdgriffith$elm_ui$Internal$Model$Layout = {$: 'Layout'};
var $mdgriffith$elm_ui$Internal$Model$Rgba = F4(
	function (a, b, c, d) {
		return {$: 'Rgba', a: a, b: b, c: c, d: d};
	});
var $mdgriffith$elm_ui$Internal$Model$focusDefaultStyle = {
	backgroundColor: $elm$core$Maybe$Nothing,
	borderColor: $elm$core$Maybe$Nothing,
	shadow: $elm$core$Maybe$Just(
		{
			blur: 0,
			color: A4($mdgriffith$elm_ui$Internal$Model$Rgba, 155 / 255, 203 / 255, 1, 1),
			offset: _Utils_Tuple2(0, 0),
			size: 3
		})
};
var $mdgriffith$elm_ui$Internal$Model$optionsToRecord = function (options) {
	var combine = F2(
		function (opt, record) {
			switch (opt.$) {
				case 'HoverOption':
					var hoverable = opt.a;
					var _v4 = record.hover;
					if (_v4.$ === 'Nothing') {
						return _Utils_update(
							record,
							{
								hover: $elm$core$Maybe$Just(hoverable)
							});
					} else {
						return record;
					}
				case 'FocusStyleOption':
					var focusStyle = opt.a;
					var _v5 = record.focus;
					if (_v5.$ === 'Nothing') {
						return _Utils_update(
							record,
							{
								focus: $elm$core$Maybe$Just(focusStyle)
							});
					} else {
						return record;
					}
				default:
					var renderMode = opt.a;
					var _v6 = record.mode;
					if (_v6.$ === 'Nothing') {
						return _Utils_update(
							record,
							{
								mode: $elm$core$Maybe$Just(renderMode)
							});
					} else {
						return record;
					}
			}
		});
	var andFinally = function (record) {
		return {
			focus: function () {
				var _v0 = record.focus;
				if (_v0.$ === 'Nothing') {
					return $mdgriffith$elm_ui$Internal$Model$focusDefaultStyle;
				} else {
					var focusable = _v0.a;
					return focusable;
				}
			}(),
			hover: function () {
				var _v1 = record.hover;
				if (_v1.$ === 'Nothing') {
					return $mdgriffith$elm_ui$Internal$Model$AllowHover;
				} else {
					var hoverable = _v1.a;
					return hoverable;
				}
			}(),
			mode: function () {
				var _v2 = record.mode;
				if (_v2.$ === 'Nothing') {
					return $mdgriffith$elm_ui$Internal$Model$Layout;
				} else {
					var actualMode = _v2.a;
					return actualMode;
				}
			}()
		};
	};
	return andFinally(
		A3(
			$elm$core$List$foldr,
			combine,
			{focus: $elm$core$Maybe$Nothing, hover: $elm$core$Maybe$Nothing, mode: $elm$core$Maybe$Nothing},
			options));
};
var $mdgriffith$elm_ui$Internal$Model$toHtml = F2(
	function (mode, el) {
		switch (el.$) {
			case 'Unstyled':
				var html = el.a;
				return html($mdgriffith$elm_ui$Internal$Model$asEl);
			case 'Styled':
				var styles = el.a.styles;
				var html = el.a.html;
				return A2(
					html,
					mode(styles),
					$mdgriffith$elm_ui$Internal$Model$asEl);
			case 'Text':
				var text = el.a;
				return $mdgriffith$elm_ui$Internal$Model$textElement(text);
			default:
				return $mdgriffith$elm_ui$Internal$Model$textElement('');
		}
	});
var $mdgriffith$elm_ui$Internal$Model$renderRoot = F3(
	function (optionList, attributes, child) {
		var options = $mdgriffith$elm_ui$Internal$Model$optionsToRecord(optionList);
		var embedStyle = function () {
			var _v0 = options.mode;
			if (_v0.$ === 'NoStaticStyleSheet') {
				return $mdgriffith$elm_ui$Internal$Model$OnlyDynamic(options);
			} else {
				return $mdgriffith$elm_ui$Internal$Model$StaticRootAndDynamic(options);
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Internal$Model$toHtml,
			embedStyle,
			A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asEl,
				$mdgriffith$elm_ui$Internal$Model$div,
				attributes,
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[child]))));
	});
var $mdgriffith$elm_ui$Internal$Model$FontFamily = F2(
	function (a, b) {
		return {$: 'FontFamily', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$FontSize = function (a) {
	return {$: 'FontSize', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$SansSerif = {$: 'SansSerif'};
var $mdgriffith$elm_ui$Internal$Model$Typeface = function (a) {
	return {$: 'Typeface', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$bgColor = $mdgriffith$elm_ui$Internal$Flag$flag(8);
var $mdgriffith$elm_ui$Internal$Flag$fontColor = $mdgriffith$elm_ui$Internal$Flag$flag(14);
var $mdgriffith$elm_ui$Internal$Flag$fontFamily = $mdgriffith$elm_ui$Internal$Flag$flag(5);
var $mdgriffith$elm_ui$Internal$Flag$fontSize = $mdgriffith$elm_ui$Internal$Flag$flag(4);
var $elm$core$String$toLower = _String_toLower;
var $elm$core$String$words = _String_words;
var $mdgriffith$elm_ui$Internal$Model$renderFontClassName = F2(
	function (font, current) {
		return _Utils_ap(
			current,
			function () {
				switch (font.$) {
					case 'Serif':
						return 'serif';
					case 'SansSerif':
						return 'sans-serif';
					case 'Monospace':
						return 'monospace';
					case 'Typeface':
						var name = font.a;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
					case 'ImportFont':
						var name = font.a;
						var url = font.b;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
					default:
						var name = font.a.name;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
				}
			}());
	});
var $mdgriffith$elm_ui$Internal$Model$rootStyle = function () {
	var families = _List_fromArray(
		[
			$mdgriffith$elm_ui$Internal$Model$Typeface('Open Sans'),
			$mdgriffith$elm_ui$Internal$Model$Typeface('Helvetica'),
			$mdgriffith$elm_ui$Internal$Model$Typeface('Verdana'),
			$mdgriffith$elm_ui$Internal$Model$SansSerif
		]);
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$bgColor,
			A3(
				$mdgriffith$elm_ui$Internal$Model$Colored,
				'bg-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(
					A4($mdgriffith$elm_ui$Internal$Model$Rgba, 1, 1, 1, 0)),
				'background-color',
				A4($mdgriffith$elm_ui$Internal$Model$Rgba, 1, 1, 1, 0))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontColor,
			A3(
				$mdgriffith$elm_ui$Internal$Model$Colored,
				'fc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(
					A4($mdgriffith$elm_ui$Internal$Model$Rgba, 0, 0, 0, 1)),
				'color',
				A4($mdgriffith$elm_ui$Internal$Model$Rgba, 0, 0, 0, 1))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontSize,
			$mdgriffith$elm_ui$Internal$Model$FontSize(20)),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontFamily,
			A2(
				$mdgriffith$elm_ui$Internal$Model$FontFamily,
				A3($elm$core$List$foldl, $mdgriffith$elm_ui$Internal$Model$renderFontClassName, 'font-', families),
				families))
		]);
}();
var $mdgriffith$elm_ui$Element$layoutWith = F3(
	function (_v0, attrs, child) {
		var options = _v0.options;
		return A3(
			$mdgriffith$elm_ui$Internal$Model$renderRoot,
			options,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass(
					A2(
						$elm$core$String$join,
						' ',
						_List_fromArray(
							[$mdgriffith$elm_ui$Internal$Style$classes.root, $mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single]))),
				_Utils_ap($mdgriffith$elm_ui$Internal$Model$rootStyle, attrs)),
			child);
	});
var $lucamug$elm_ui_with_context$Element$WithContext$layoutWith = F4(
	function (context, options, attrs, _v0) {
		var f = _v0.a;
		return A3(
			$mdgriffith$elm_ui$Element$layoutWith,
			options,
			A2($lucamug$elm_ui_with_context$Element$WithContext$Internal$attributes, context, attrs),
			f(context));
	});
var $mdgriffith$elm_ui$Internal$Model$Empty = {$: 'Empty'};
var $mdgriffith$elm_ui$Internal$Model$Text = function (a) {
	return {$: 'Text', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$map = F2(
	function (fn, el) {
		switch (el.$) {
			case 'Styled':
				var styled = el.a;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						html: F2(
							function (add, context) {
								return A2(
									$elm$virtual_dom$VirtualDom$map,
									fn,
									A2(styled.html, add, context));
							}),
						styles: styled.styles
					});
			case 'Unstyled':
				var html = el.a;
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A2(
						$elm$core$Basics$composeL,
						$elm$virtual_dom$VirtualDom$map(fn),
						html));
			case 'Text':
				var str = el.a;
				return $mdgriffith$elm_ui$Internal$Model$Text(str);
			default:
				return $mdgriffith$elm_ui$Internal$Model$Empty;
		}
	});
var $mdgriffith$elm_ui$Element$map = $mdgriffith$elm_ui$Internal$Model$map;
var $lucamug$elm_ui_with_context$Element$WithContext$map = F2(
	function (f, _v0) {
		var g = _v0.a;
		return $lucamug$elm_ui_with_context$Element$WithContext$Internal$Element(
			A2(
				$elm$core$Basics$composeR,
				g,
				$mdgriffith$elm_ui$Element$map(f)));
	});
var $mdgriffith$elm_ui$Internal$Model$PaddingStyle = F5(
	function (a, b, c, d, e) {
		return {$: 'PaddingStyle', a: a, b: b, c: c, d: d, e: e};
	});
var $mdgriffith$elm_ui$Internal$Flag$padding = $mdgriffith$elm_ui$Internal$Flag$flag(2);
var $mdgriffith$elm_ui$Element$padding = function (x) {
	var f = x;
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$padding,
		A5(
			$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
			'p-' + $elm$core$String$fromInt(x),
			f,
			f,
			f,
			f));
};
var $lucamug$elm_ui_with_context$Element$WithContext$padding = function (x) {
	return $lucamug$elm_ui_with_context$Element$WithContext$attribute(
		$mdgriffith$elm_ui$Element$padding(x));
};
var $mdgriffith$elm_ui$Internal$Model$Paragraph = {$: 'Paragraph'};
var $mdgriffith$elm_ui$Internal$Model$SpacingStyle = F3(
	function (a, b, c) {
		return {$: 'SpacingStyle', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Flag$spacing = $mdgriffith$elm_ui$Internal$Flag$flag(3);
var $mdgriffith$elm_ui$Internal$Model$spacingName = F2(
	function (x, y) {
		return 'spacing-' + ($elm$core$String$fromInt(x) + ('-' + $elm$core$String$fromInt(y)));
	});
var $mdgriffith$elm_ui$Element$spacing = function (x) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$spacing,
		A3(
			$mdgriffith$elm_ui$Internal$Model$SpacingStyle,
			A2($mdgriffith$elm_ui$Internal$Model$spacingName, x, x),
			x,
			x));
};
var $mdgriffith$elm_ui$Element$paragraph = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asParagraph,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$Paragraph),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$spacing(5),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $lucamug$elm_ui_with_context$Element$WithContext$paragraph = $lucamug$elm_ui_with_context$Element$WithContext$Internal$wrapContainer($mdgriffith$elm_ui$Element$paragraph);
var $mdgriffith$elm_ui$Element$rgba = $mdgriffith$elm_ui$Internal$Model$Rgba;
var $lucamug$elm_ui_with_context$Element$WithContext$rgba = $mdgriffith$elm_ui$Element$rgba;
var $mdgriffith$elm_ui$Internal$Model$AsRow = {$: 'AsRow'};
var $mdgriffith$elm_ui$Internal$Model$asRow = $mdgriffith$elm_ui$Internal$Model$AsRow;
var $mdgriffith$elm_ui$Element$row = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asRow,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentLeft + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.contentCenterY)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $lucamug$elm_ui_with_context$Element$WithContext$row = $lucamug$elm_ui_with_context$Element$WithContext$Internal$wrapContainer($mdgriffith$elm_ui$Element$row);
var $mdgriffith$elm_ui$Internal$Model$boxShadowClass = function (shadow) {
	return $elm$core$String$concat(
		_List_fromArray(
			[
				shadow.inset ? 'box-inset' : 'box-',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.offset.a) + 'px',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.offset.b) + 'px',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.blur) + 'px',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.size) + 'px',
				$mdgriffith$elm_ui$Internal$Model$formatColorClass(shadow.color)
			]));
};
var $mdgriffith$elm_ui$Internal$Flag$shadows = $mdgriffith$elm_ui$Internal$Flag$flag(19);
var $mdgriffith$elm_ui$Element$Border$shadow = function (almostShade) {
	var shade = {blur: almostShade.blur, color: almostShade.color, inset: false, offset: almostShade.offset, size: almostShade.size};
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$shadows,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Single,
			$mdgriffith$elm_ui$Internal$Model$boxShadowClass(shade),
			'box-shadow',
			$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(shade)));
};
var $lucamug$elm_ui_with_context$Element$WithContext$Border$shadow = function (almostShade) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$attr(
		$mdgriffith$elm_ui$Element$Border$shadow(almostShade));
};
var $mdgriffith$elm_ui$Element$Font$size = function (i) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$fontSize,
		$mdgriffith$elm_ui$Internal$Model$FontSize(i));
};
var $lucamug$elm_ui_with_context$Element$WithContext$Font$size = function (i) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$attr(
		$mdgriffith$elm_ui$Element$Font$size(i));
};
var $lucamug$elm_ui_with_context$Element$WithContext$spacing = function (x) {
	return $lucamug$elm_ui_with_context$Element$WithContext$attribute(
		$mdgriffith$elm_ui$Element$spacing(x));
};
var $mdgriffith$elm_ui$Element$text = function (content) {
	return $mdgriffith$elm_ui$Internal$Model$Text(content);
};
var $lucamug$elm_ui_with_context$Element$WithContext$text = function (content) {
	return $lucamug$elm_ui_with_context$Element$WithContext$element(
		$mdgriffith$elm_ui$Element$text(content));
};
var $mdgriffith$elm_ui$Internal$Model$unstyled = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Unstyled, $elm$core$Basics$always);
var $mdgriffith$elm_ui$Element$html = $mdgriffith$elm_ui$Internal$Model$unstyled;
var $lucamug$elm_ui_with_context$Element$WithContext$html = function (child) {
	return $lucamug$elm_ui_with_context$Element$WithContext$element(
		$mdgriffith$elm_ui$Element$html(child));
};
var $elm$html$Html$textarea = _VirtualDom_node('textarea');
var $author$project$Main$textarea = F2(
	function (attrs, string) {
		return A2(
			$lucamug$elm_ui_with_context$Element$WithContext$el,
			attrs,
			$lucamug$elm_ui_with_context$Element$WithContext$html(
				A2(
					$elm$html$Html$textarea,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'height', '600px'),
							A2($elm$html$Html$Attributes$style, 'padding', '10px')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(string)
						]))));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Style$Filled = {$: 'Filled'};
var $rakutentech$r10$R10$FormComponents$Internal$Style$default = $rakutentech$r10$R10$FormComponents$Internal$Style$Filled;
var $rakutentech$r10$R10$Form$defaultStyle = $rakutentech$r10$R10$FormComponents$Internal$Style$default;
var $rakutentech$r10$R10$Form$Internal$Translator$translator = F2(
	function (_v0, validationCode) {
		return A2(
			$elm$core$Maybe$withDefault,
			validationCode,
			A2(
				$elm$core$Dict$get,
				validationCode,
				$elm$core$Dict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2($rakutentech$r10$R10$Form$Internal$Translator$validationCodes.emailFormatInvalid, 'Invalid email format'),
							_Utils_Tuple2($rakutentech$r10$R10$Form$Internal$Translator$validationCodes.emailFormatValid, 'Valid email format'),
							_Utils_Tuple2($rakutentech$r10$R10$Form$Internal$Translator$validationCodes.formatInvalid, 'Invalid format'),
							_Utils_Tuple2($rakutentech$r10$R10$Form$Internal$Translator$validationCodes.formatValid, 'Valid format'),
							_Utils_Tuple2($rakutentech$r10$R10$Form$Internal$Translator$validationCodes.formatInvalidCharactersInvalid, 'Cannot contain spaces or special language characters'),
							_Utils_Tuple2($rakutentech$r10$R10$Form$Internal$Translator$validationCodes.formatNoNumberInvalid, 'Must contain a digit (ex: 1, 2, etc.)'),
							_Utils_Tuple2($rakutentech$r10$R10$Form$Internal$Translator$validationCodes.formatNoSpecialCharactersInvalid, 'Must contain a special character (ex: !, @, #, etc.)'),
							_Utils_Tuple2($rakutentech$r10$R10$Form$Internal$Translator$validationCodes.formatNoUppercaseInvalid, 'Must contain a capital letter (ex: A, B, etc.)'),
							_Utils_Tuple2($rakutentech$r10$R10$Form$Internal$Translator$validationCodes.hexColorFormatInvalid, 'Invalid hex color'),
							_Utils_Tuple2($rakutentech$r10$R10$Form$Internal$Translator$validationCodes.jsonFormatInvalid, 'Invalid json format'),
							_Utils_Tuple2($rakutentech$r10$R10$Form$Internal$Translator$validationCodes.lengthTooLargeInvalid, 'Maximum allowed length is {0} characters'),
							_Utils_Tuple2($rakutentech$r10$R10$Form$Internal$Translator$validationCodes.lengthTooSmallInvalid, 'Minimum allowed length is {0} characters'),
							_Utils_Tuple2($rakutentech$r10$R10$Form$Internal$Translator$validationCodes.required, 'Required'),
							_Utils_Tuple2($rakutentech$r10$R10$Form$Internal$Translator$validationCodes.empty, 'Empty'),
							_Utils_Tuple2($rakutentech$r10$R10$Form$Internal$Translator$validationCodes.requiredField, '(Required)'),
							_Utils_Tuple2($rakutentech$r10$R10$Form$Internal$Translator$validationCodes.somethingWrong, 'Something wrong'),
							_Utils_Tuple2($rakutentech$r10$R10$Form$Internal$Translator$validationCodes.equalInvalid, 'Value should be equal'),
							_Utils_Tuple2($rakutentech$r10$R10$Form$Internal$Translator$validationCodes.valueInvalid, 'This is not a valid selection'),
							_Utils_Tuple2($rakutentech$r10$R10$Form$Internal$Translator$validationCodes.allOf, 'One of the validations have failed'),
							_Utils_Tuple2($rakutentech$r10$R10$Form$Internal$Translator$validationCodes.oneOf, 'All of the validations have failed')
						]))));
	});
var $rakutentech$r10$R10$Form$defaultTranslator = $rakutentech$r10$R10$Form$Internal$Translator$translator;
var $avh4$elm_color$Color$RgbaSpace = F4(
	function (a, b, c, d) {
		return {$: 'RgbaSpace', a: a, b: b, c: c, d: d};
	});
var $avh4$elm_color$Color$scaleFrom255 = function (c) {
	return c / 255;
};
var $avh4$elm_color$Color$rgb255 = F3(
	function (r, g, b) {
		return A4(
			$avh4$elm_color$Color$RgbaSpace,
			$avh4$elm_color$Color$scaleFrom255(r),
			$avh4$elm_color$Color$scaleFrom255(g),
			$avh4$elm_color$Color$scaleFrom255(b),
			1.0);
	});
var $rakutentech$r10$R10$FormComponents$Internal$UI$Palette$black = A3($avh4$elm_color$Color$rgb255, 0, 0, 0);
var $rakutentech$r10$R10$FormComponents$Internal$UI$Palette$gray = A3($avh4$elm_color$Color$rgb255, 130, 130, 130);
var $rakutentech$r10$R10$FormComponents$Internal$UI$Palette$grayLightest = A3($avh4$elm_color$Color$rgb255, 247, 247, 247);
var $rakutentech$r10$R10$FormComponents$Internal$UI$Palette$pink = A3($avh4$elm_color$Color$rgb255, 255, 51, 102);
var $rakutentech$r10$R10$FormComponents$Internal$UI$Palette$pinkVariant = A3($avh4$elm_color$Color$rgb255, 255, 111, 147);
var $rakutentech$r10$R10$FormComponents$Internal$UI$Palette$success = A3($avh4$elm_color$Color$rgb255, 6, 153, 7);
var $rakutentech$r10$R10$FormComponents$Internal$UI$Palette$warning = A3($avh4$elm_color$Color$rgb255, 255, 145, 0);
var $rakutentech$r10$R10$FormComponents$Internal$UI$Palette$white = A3($avh4$elm_color$Color$rgb255, 255, 255, 255);
var $rakutentech$r10$R10$FormComponents$Internal$UI$Palette$light = {background: $rakutentech$r10$R10$FormComponents$Internal$UI$Palette$grayLightest, border: $rakutentech$r10$R10$FormComponents$Internal$UI$Palette$gray, error: $rakutentech$r10$R10$FormComponents$Internal$UI$Palette$warning, onPrimary: $rakutentech$r10$R10$FormComponents$Internal$UI$Palette$white, onSurface: $rakutentech$r10$R10$FormComponents$Internal$UI$Palette$black, primary: $rakutentech$r10$R10$FormComponents$Internal$UI$Palette$pink, primaryVariant: $rakutentech$r10$R10$FormComponents$Internal$UI$Palette$pinkVariant, success: $rakutentech$r10$R10$FormComponents$Internal$UI$Palette$success, surface: $rakutentech$r10$R10$FormComponents$Internal$UI$Palette$white};
var $rakutentech$r10$R10$Form$Internal$Msg$RemoveEntity = function (a) {
	return {$: 'RemoveEntity', a: a};
};
var $rakutentech$r10$R10$FormComponents$Internal$Validations$PretendIsNotYetValidated = {$: 'PretendIsNotYetValidated'};
var $rakutentech$r10$R10$FormComponents$Internal$Validations$Validated = function (a) {
	return {$: 'Validated', a: a};
};
var $rakutentech$r10$R10$FormComponents$Internal$Validations$MessageErr = function (a) {
	return {$: 'MessageErr', a: a};
};
var $rakutentech$r10$R10$FormComponents$Internal$Validations$MessageOk = function (a) {
	return {$: 'MessageOk', a: a};
};
var $elm$core$Tuple$pair = F2(
	function (a, b) {
		return _Utils_Tuple2(a, b);
	});
var $rakutentech$r10$R10$Form$Internal$ValidationCode$regexBracket = function (index) {
	return A2(
		$elm$core$Maybe$withDefault,
		$elm$regex$Regex$never,
		A2(
			$elm$regex$Regex$fromStringWith,
			{caseInsensitive: true, multiline: true},
			'\\{' + ($elm$core$String$fromInt(index) + '\\}')));
};
var $rakutentech$r10$R10$Form$Internal$ValidationCode$replacer = F2(
	function (_v0, acc) {
		var index = _v0.a;
		var value = _v0.b;
		return A3(
			$elm$regex$Regex$replace,
			$rakutentech$r10$R10$Form$Internal$ValidationCode$regexBracket(index),
			function (_v1) {
				return value;
			},
			acc);
	});
var $rakutentech$r10$R10$Form$Internal$ValidationCode$replaceBrackets = F2(
	function (values, target) {
		return A3(
			$elm$core$List$foldl,
			$rakutentech$r10$R10$Form$Internal$ValidationCode$replacer,
			target,
			A2($elm$core$List$indexedMap, $elm$core$Tuple$pair, values));
	});
var $rakutentech$r10$R10$Form$Internal$ValidationCode$fromValidationCodeToMessageWithReplacedValues = F3(
	function (validationCode, bracketsArgs, translator_) {
		var translated = translator_(validationCode);
		return $elm$core$List$isEmpty(bracketsArgs) ? translated : A2($rakutentech$r10$R10$Form$Internal$ValidationCode$replaceBrackets, bracketsArgs, translated);
	});
var $rakutentech$r10$R10$Form$Internal$Converter$fromValidationOutcomeToValidationMessage = F2(
	function (validationOutcome, translator) {
		if (validationOutcome.$ === 'MessageOk') {
			var validationCode = validationOutcome.a;
			var validationPayload = validationOutcome.b;
			return $rakutentech$r10$R10$FormComponents$Internal$Validations$MessageOk(
				A3($rakutentech$r10$R10$Form$Internal$ValidationCode$fromValidationCodeToMessageWithReplacedValues, validationCode, validationPayload, translator));
		} else {
			var validationCode = validationOutcome.a;
			var validationPayload = validationOutcome.b;
			return $rakutentech$r10$R10$FormComponents$Internal$Validations$MessageErr(
				A3($rakutentech$r10$R10$Form$Internal$ValidationCode$fromValidationCodeToMessageWithReplacedValues, validationCode, validationPayload, translator));
		}
	});
var $rakutentech$r10$R10$Form$Internal$Converter$fromFieldStateValidationToComponentValidation = F3(
	function (maybeValidationSpecs, validation, translator) {
		if (validation.$ === 'NotYetValidated') {
			return $rakutentech$r10$R10$FormComponents$Internal$Validations$PretendIsNotYetValidated;
		} else {
			var listValidationOutcome_ = validation.a;
			var showAlsoPassedValidation = A2(
				$elm$core$Maybe$withDefault,
				false,
				A2(
					$elm$core$Maybe$map,
					function ($) {
						return $.showAlsoPassedValidation;
					},
					maybeValidationSpecs));
			var pretendIsNotValidatedIfValid = A2(
				$elm$core$Maybe$withDefault,
				false,
				A2(
					$elm$core$Maybe$map,
					function ($) {
						return $.pretendIsNotValidatedIfValid;
					},
					maybeValidationSpecs));
			var listAllButTwoOkMessages = A2(
				$elm$core$List$filter,
				function (validationOutcome) {
					if (validationOutcome.$ === 'MessageOk') {
						var validationCode = validationOutcome.a;
						switch (validationCode) {
							case 'INVALID_LENGTH_TOO_LARGE':
								return false;
							case 'REQUIRED':
								return false;
							default:
								return true;
						}
					} else {
						return true;
					}
				},
				listValidationOutcome_);
			var listOnlyErrors = A2(
				$elm$core$List$filter,
				function (validationOutcome) {
					if (validationOutcome.$ === 'MessageOk') {
						return false;
					} else {
						return true;
					}
				},
				listAllButTwoOkMessages);
			return showAlsoPassedValidation ? $rakutentech$r10$R10$FormComponents$Internal$Validations$Validated(
				A2(
					$elm$core$List$map,
					function (err) {
						return A2($rakutentech$r10$R10$Form$Internal$Converter$fromValidationOutcomeToValidationMessage, err, translator);
					},
					listAllButTwoOkMessages)) : ((pretendIsNotValidatedIfValid && (!$elm$core$List$length(listOnlyErrors))) ? $rakutentech$r10$R10$FormComponents$Internal$Validations$PretendIsNotYetValidated : $rakutentech$r10$R10$FormComponents$Internal$Validations$Validated(
				A2(
					$elm$core$List$map,
					function (err) {
						return A2($rakutentech$r10$R10$Form$Internal$Converter$fromValidationOutcomeToValidationMessage, err, translator);
					},
					listOnlyErrors)));
		}
	});
var $rakutentech$r10$R10$Form$Internal$FieldConf$initValidationSpecs = {
	pretendIsNotValidatedIfValid: false,
	showAlsoPassedValidation: false,
	validation: _List_fromArray(
		[$rakutentech$r10$R10$Form$Internal$FieldConf$NoValidation]),
	validationIcon: $rakutentech$r10$R10$FormTypes$NoIcon
};
var $rakutentech$r10$R10$Form$Internal$FieldConf$init = {
	autocomplete: $elm$core$Maybe$Nothing,
	clickableLabel: true,
	helperText: $elm$core$Maybe$Nothing,
	id: '',
	idDom: $elm$core$Maybe$Nothing,
	label: '',
	maxWidth: $elm$core$Maybe$Nothing,
	minWidth: $elm$core$Maybe$Nothing,
	requiredLabel: $elm$core$Maybe$Nothing,
	type_: $rakutentech$r10$R10$FormTypes$TypeText($rakutentech$r10$R10$FormTypes$TextPlain),
	validationSpecs: $elm$core$Maybe$Just($rakutentech$r10$R10$Form$Internal$FieldConf$initValidationSpecs)
};
var $rakutentech$r10$R10$Form$Internal$MakerForView$getFieldConfig = function (entity) {
	if (entity.$ === 'EntityField') {
		var fieldConf = entity.a;
		return fieldConf;
	} else {
		return $rakutentech$r10$R10$Form$Internal$FieldConf$init;
	}
};
var $lucamug$elm_ui_with_context$Element$WithContext$height = function (l) {
	return $lucamug$elm_ui_with_context$Element$WithContext$attribute(
		$mdgriffith$elm_ui$Element$height(l));
};
var $mdgriffith$elm_ui$Internal$Model$Transparency = F2(
	function (a, b) {
		return {$: 'Transparency', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$transparency = $mdgriffith$elm_ui$Internal$Flag$flag(0);
var $mdgriffith$elm_ui$Element$alpha = function (o) {
	var transparency = function (x) {
		return 1 - x;
	}(
		A2(
			$elm$core$Basics$min,
			1.0,
			A2($elm$core$Basics$max, 0.0, o)));
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$transparency,
		A2(
			$mdgriffith$elm_ui$Internal$Model$Transparency,
			'transparency-' + $mdgriffith$elm_ui$Internal$Model$floatClass(transparency),
			transparency));
};
var $lucamug$elm_ui_with_context$Element$WithContext$attr = function (elem) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$Attribute(
		function (_v0) {
			return elem;
		});
};
var $lucamug$elm_ui_with_context$Element$WithContext$alpha = function (o) {
	return $lucamug$elm_ui_with_context$Element$WithContext$attr(
		$mdgriffith$elm_ui$Element$alpha(o));
};
var $mdgriffith$elm_ui$Element$clipY = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.clipY);
var $lucamug$elm_ui_with_context$Element$WithContext$clipY = $lucamug$elm_ui_with_context$Element$WithContext$attribute($mdgriffith$elm_ui$Element$clipY);
var $rakutentech$r10$R10$FormComponents$Internal$UI$genericSpacing = 8;
var $mdgriffith$elm_ui$Element$htmlAttribute = $mdgriffith$elm_ui$Internal$Model$Attr;
var $lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute = function (child) {
	return $lucamug$elm_ui_with_context$Element$WithContext$attribute(
		$mdgriffith$elm_ui$Element$htmlAttribute(child));
};
var $mdgriffith$elm_ui$Element$none = $mdgriffith$elm_ui$Internal$Model$Empty;
var $lucamug$elm_ui_with_context$Element$WithContext$none = $lucamug$elm_ui_with_context$Element$WithContext$element($mdgriffith$elm_ui$Element$none);
var $mdgriffith$elm_ui$Internal$Model$paddingName = F4(
	function (top, right, bottom, left) {
		return 'pad-' + ($elm$core$String$fromInt(top) + ('-' + ($elm$core$String$fromInt(right) + ('-' + ($elm$core$String$fromInt(bottom) + ('-' + $elm$core$String$fromInt(left)))))));
	});
var $mdgriffith$elm_ui$Element$paddingEach = function (_v0) {
	var top = _v0.top;
	var right = _v0.right;
	var bottom = _v0.bottom;
	var left = _v0.left;
	if (_Utils_eq(top, right) && (_Utils_eq(top, bottom) && _Utils_eq(top, left))) {
		var topFloat = top;
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$padding,
			A5(
				$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
				'p-' + $elm$core$String$fromInt(top),
				topFloat,
				topFloat,
				topFloat,
				topFloat));
	} else {
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$padding,
			A5(
				$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
				A4($mdgriffith$elm_ui$Internal$Model$paddingName, top, right, bottom, left),
				top,
				right,
				bottom,
				left));
	}
};
var $lucamug$elm_ui_with_context$Element$WithContext$paddingEach = function (paddings) {
	return $lucamug$elm_ui_with_context$Element$WithContext$attribute(
		$mdgriffith$elm_ui$Element$paddingEach(paddings));
};
var $elm$core$String$endsWith = _String_endsWith;
var $elm$core$String$toFloat = _String_toFloat;
var $rakutentech$r10$R10$Transition$parseSubUnit = F2(
	function (ratio, subUnit) {
		if (A2($elm$core$String$endsWith, 'ms', subUnit)) {
			var _v0 = $elm$core$String$toFloat(
				'0' + A2($elm$core$String$dropRight, 2, subUnit));
			if (_v0.$ === 'Just') {
				var value = _v0.a;
				return $elm$core$String$fromFloat(value * ratio) + 'ms';
			} else {
				return subUnit;
			}
		} else {
			if (A2($elm$core$String$endsWith, 's', subUnit)) {
				var _v1 = $elm$core$String$toFloat(
					'0' + A2($elm$core$String$dropRight, 1, subUnit));
				if (_v1.$ === 'Just') {
					var value = _v1.a;
					return $elm$core$String$fromFloat(value * ratio) + 's';
				} else {
					return subUnit;
				}
			} else {
				return subUnit;
			}
		}
	});
var $rakutentech$r10$R10$Transition$parseUnit = F2(
	function (ratio, unit) {
		return A2(
			$elm$core$String$join,
			' ',
			A2(
				$elm$core$List$map,
				$rakutentech$r10$R10$Transition$parseSubUnit(ratio),
				A2($elm$core$String$split, ' ', unit)));
	});
var $rakutentech$r10$R10$Transition$parseCharacteristics = F2(
	function (ratio, characteristics) {
		return A2(
			$elm$core$String$join,
			',',
			A2(
				$elm$core$List$map,
				$rakutentech$r10$R10$Transition$parseUnit(ratio),
				A2(
					$elm$core$String$split,
					',',
					$elm_community$string_extra$String$Extra$clean(characteristics))));
	});
var $lucamug$elm_ui_with_context$Element$WithContext$Internal$runAttr = F2(
	function (context, _v0) {
		var f = _v0.a;
		return f(context);
	});
var $lucamug$elm_ui_with_context$Element$WithContext$withContextAttribute = function (f) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$Attribute(
		function (context) {
			return A2(
				$lucamug$elm_ui_with_context$Element$WithContext$Internal$runAttr,
				context,
				f(context));
		});
};
var $rakutentech$r10$R10$Transition$transition = function (characteristics) {
	return $lucamug$elm_ui_with_context$Element$WithContext$withContextAttribute(
		function (c) {
			return $lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
				A2(
					$elm$html$Html$Attributes$style,
					'transition',
					A2($rakutentech$r10$R10$Transition$parseCharacteristics, c.debugger_transitionSpeed, characteristics)));
		});
};
var $rakutentech$r10$R10$FormComponents$Internal$Validations$animatedList = function (elements) {
	var transition = $rakutentech$r10$R10$Transition$transition('all 0.15s ease-in, opacity 0.15s 0.2s ease-in');
	var wrappedLine = A2(
		$lucamug$elm_ui_with_context$Element$WithContext$el,
		_List_fromArray(
			[
				$lucamug$elm_ui_with_context$Element$WithContext$padding(0),
				$lucamug$elm_ui_with_context$Element$WithContext$alpha(0),
				$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
				A2($elm$html$Html$Attributes$style, 'min-height', '0px')),
				$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
				A2($elm$html$Html$Attributes$style, 'max-height', '0px')),
				$lucamug$elm_ui_with_context$Element$WithContext$Font$size(0),
				transition
			]),
		$lucamug$elm_ui_with_context$Element$WithContext$none);
	var expandedLine = $lucamug$elm_ui_with_context$Element$WithContext$el(
		_List_fromArray(
			[
				$lucamug$elm_ui_with_context$Element$WithContext$paddingEach(
				{bottom: 0, left: 0, right: 0, top: 6}),
				$lucamug$elm_ui_with_context$Element$WithContext$Font$size(14),
				$lucamug$elm_ui_with_context$Element$WithContext$alpha(1),
				$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
				A2($elm$html$Html$Attributes$style, 'min-height', '24px')),
				$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
				A2($elm$html$Html$Attributes$style, 'max-height', '64px')),
				transition,
				$lucamug$elm_ui_with_context$Element$WithContext$clipY
			]));
	return A2(
		$lucamug$elm_ui_with_context$Element$WithContext$column,
		_Utils_ap(
			_List_fromArray(
				[$lucamug$elm_ui_with_context$Element$WithContext$alignTop, transition]),
			($elm$core$List$length(elements) > 0) ? _List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$paddingEach(
					{bottom: 0, left: 0, right: 0, top: $rakutentech$r10$R10$FormComponents$Internal$UI$genericSpacing})
				]) : _List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$padding(0)
				])),
		_Utils_ap(
			A2($elm$core$List$map, expandedLine, elements),
			A2($elm$core$List$repeat, 5, wrappedLine)));
};
var $mdgriffith$elm_ui$Element$Font$color = function (fontColor) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$fontColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'fc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(fontColor),
			'color',
			fontColor));
};
var $lucamug$elm_ui_with_context$Element$WithContext$Font$color = function (fontColor) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$attr(
		$mdgriffith$elm_ui$Element$Font$color(fontColor));
};
var $mdgriffith$elm_ui$Element$fromRgb = function (clr) {
	return A4($mdgriffith$elm_ui$Internal$Model$Rgba, clr.red, clr.green, clr.blue, clr.alpha);
};
var $lucamug$elm_ui_with_context$Element$WithContext$fromRgb = $mdgriffith$elm_ui$Element$fromRgb;
var $avh4$elm_color$Color$toRgba = function (_v0) {
	var r = _v0.a;
	var g = _v0.b;
	var b = _v0.c;
	var a = _v0.d;
	return {alpha: a, blue: b, green: g, red: r};
};
var $rakutentech$r10$R10$FormComponents$Internal$UI$Color$fromPaletteColor = A2($elm$core$Basics$composeR, $avh4$elm_color$Color$toRgba, $lucamug$elm_ui_with_context$Element$WithContext$fromRgb);
var $rakutentech$r10$R10$FormComponents$Internal$UI$Color$error = A2(
	$elm$core$Basics$composeR,
	function ($) {
		return $.error;
	},
	$rakutentech$r10$R10$FormComponents$Internal$UI$Color$fromPaletteColor);
var $rakutentech$r10$R10$FormComponents$Internal$UI$Color$success = A2(
	$elm$core$Basics$composeR,
	function ($) {
		return $.success;
	},
	$rakutentech$r10$R10$FormComponents$Internal$UI$Color$fromPaletteColor);
var $mdgriffith$elm_ui$Internal$Flag$fontWeight = $mdgriffith$elm_ui$Internal$Flag$flag(13);
var $mdgriffith$elm_ui$Element$Font$bold = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontWeight, $mdgriffith$elm_ui$Internal$Style$classes.bold);
var $lucamug$elm_ui_with_context$Element$WithContext$Font$bold = $lucamug$elm_ui_with_context$Element$WithContext$Internal$attribute($mdgriffith$elm_ui$Element$Font$bold);
var $rakutentech$r10$R10$SimpleMarkdown$elementBoldGenerator = function (string) {
	return A2(
		$lucamug$elm_ui_with_context$Element$WithContext$el,
		_List_fromArray(
			[$lucamug$elm_ui_with_context$Element$WithContext$Font$bold]),
		$lucamug$elm_ui_with_context$Element$WithContext$text(string));
};
var $rakutentech$r10$R10$SimpleMarkdown$elementLabelGenerator = function (string) {
	return $lucamug$elm_ui_with_context$Element$WithContext$text(string);
};
var $mdgriffith$elm_ui$Internal$Model$Focus = {$: 'Focus'};
var $mdgriffith$elm_ui$Internal$Model$PseudoSelector = F2(
	function (a, b) {
		return {$: 'PseudoSelector', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$focus = $mdgriffith$elm_ui$Internal$Flag$flag(31);
var $mdgriffith$elm_ui$Internal$Model$AlignX = function (a) {
	return {$: 'AlignX', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Nearby = F2(
	function (a, b) {
		return {$: 'Nearby', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$TransformComponent = F2(
	function (a, b) {
		return {$: 'TransformComponent', a: a, b: b};
	});
var $elm$virtual_dom$VirtualDom$mapAttribute = _VirtualDom_mapAttribute;
var $mdgriffith$elm_ui$Internal$Model$mapAttrFromStyle = F2(
	function (fn, attr) {
		switch (attr.$) {
			case 'NoAttribute':
				return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
			case 'Describe':
				var description = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Describe(description);
			case 'AlignX':
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$AlignX(x);
			case 'AlignY':
				var y = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$AlignY(y);
			case 'Width':
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Width(x);
			case 'Height':
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Height(x);
			case 'Class':
				var x = attr.a;
				var y = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$Class, x, y);
			case 'StyleClass':
				var flag = attr.a;
				var style = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$StyleClass, flag, style);
			case 'Nearby':
				var location = attr.a;
				var elem = attr.b;
				return A2(
					$mdgriffith$elm_ui$Internal$Model$Nearby,
					location,
					A2($mdgriffith$elm_ui$Internal$Model$map, fn, elem));
			case 'Attr':
				var htmlAttr = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Attr(
					A2($elm$virtual_dom$VirtualDom$mapAttribute, fn, htmlAttr));
			default:
				var fl = attr.a;
				var trans = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$TransformComponent, fl, trans);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$removeNever = function (style) {
	return A2($mdgriffith$elm_ui$Internal$Model$mapAttrFromStyle, $elm$core$Basics$never, style);
};
var $mdgriffith$elm_ui$Internal$Model$unwrapDecsHelper = F2(
	function (attr, _v0) {
		var styles = _v0.a;
		var trans = _v0.b;
		var _v1 = $mdgriffith$elm_ui$Internal$Model$removeNever(attr);
		switch (_v1.$) {
			case 'StyleClass':
				var style = _v1.b;
				return _Utils_Tuple2(
					A2($elm$core$List$cons, style, styles),
					trans);
			case 'TransformComponent':
				var flag = _v1.a;
				var component = _v1.b;
				return _Utils_Tuple2(
					styles,
					A2($mdgriffith$elm_ui$Internal$Model$composeTransformation, trans, component));
			default:
				return _Utils_Tuple2(styles, trans);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$unwrapDecorations = function (attrs) {
	var _v0 = A3(
		$elm$core$List$foldl,
		$mdgriffith$elm_ui$Internal$Model$unwrapDecsHelper,
		_Utils_Tuple2(_List_Nil, $mdgriffith$elm_ui$Internal$Model$Untransformed),
		attrs);
	var styles = _v0.a;
	var transform = _v0.b;
	return A2(
		$elm$core$List$cons,
		$mdgriffith$elm_ui$Internal$Model$Transform(transform),
		styles);
};
var $mdgriffith$elm_ui$Element$focused = function (decs) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$focus,
		A2(
			$mdgriffith$elm_ui$Internal$Model$PseudoSelector,
			$mdgriffith$elm_ui$Internal$Model$Focus,
			$mdgriffith$elm_ui$Internal$Model$unwrapDecorations(decs)));
};
var $lucamug$elm_ui_with_context$Element$WithContext$focused = function (decs) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$Attribute(
		function (context) {
			return $mdgriffith$elm_ui$Element$focused(
				A2(
					$elm$core$List$map,
					function (_v0) {
						var f = _v0.a;
						return f(context);
					},
					decs));
		});
};
var $mdgriffith$elm_ui$Element$Border$innerShadow = function (almostShade) {
	var shade = {blur: almostShade.blur, color: almostShade.color, inset: true, offset: almostShade.offset, size: almostShade.size};
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$shadows,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Single,
			$mdgriffith$elm_ui$Internal$Model$boxShadowClass(shade),
			'box-shadow',
			$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(shade)));
};
var $lucamug$elm_ui_with_context$Element$WithContext$Border$innerShadow = function (almostShade) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$attr(
		$mdgriffith$elm_ui$Element$Border$innerShadow(almostShade));
};
var $elm$html$Html$Attributes$rel = _VirtualDom_attribute('rel');
var $elm$html$Html$Attributes$target = $elm$html$Html$Attributes$stringProperty('target');
var $mdgriffith$elm_ui$Element$newTabLink = F2(
	function (attrs, _v0) {
		var url = _v0.url;
		var label = _v0.label;
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$NodeName('a'),
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Attr(
					$elm$html$Html$Attributes$href(url)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Internal$Model$Attr(
						$elm$html$Html$Attributes$rel('noopener noreferrer')),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Internal$Model$Attr(
							$elm$html$Html$Attributes$target('_blank')),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentCenterX + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.link)))),
									attrs)))))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var $lucamug$elm_ui_with_context$Element$WithContext$newTabLink = A2(
	$lucamug$elm_ui_with_context$Element$WithContext$Internal$wrapAttrs,
	$mdgriffith$elm_ui$Element$newTabLink,
	F2(
		function (context, _v0) {
			var url = _v0.url;
			var label = _v0.label;
			return {
				label: A2($lucamug$elm_ui_with_context$Element$WithContext$Internal$run, context, label),
				url: url
			};
		}));
var $mdgriffith$elm_ui$Element$rgb = F3(
	function (r, g, b) {
		return A4($mdgriffith$elm_ui$Internal$Model$Rgba, r, g, b, 1);
	});
var $lucamug$elm_ui_with_context$Element$WithContext$rgb = $mdgriffith$elm_ui$Element$rgb;
var $mdgriffith$elm_ui$Internal$Flag$borderRound = $mdgriffith$elm_ui$Internal$Flag$flag(17);
var $mdgriffith$elm_ui$Element$Border$rounded = function (radius) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderRound,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Single,
			'br-' + $elm$core$String$fromInt(radius),
			'border-radius',
			$elm$core$String$fromInt(radius) + 'px'));
};
var $lucamug$elm_ui_with_context$Element$WithContext$Border$rounded = function (radius) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$attribute(
		$mdgriffith$elm_ui$Element$Border$rounded(radius));
};
var $rakutentech$r10$R10$SimpleMarkdown$elementLinkGeneratorAdvanced = F3(
	function (attrs, linkLabel, url) {
		return A2(
			$lucamug$elm_ui_with_context$Element$WithContext$newTabLink,
			_Utils_ap(
				_List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$Border$rounded(4),
						$lucamug$elm_ui_with_context$Element$WithContext$focused(
						_List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$Border$innerShadow(
								{
									blur: 1,
									color: A3($lucamug$elm_ui_with_context$Element$WithContext$rgb, 0.7, 0.7, 0.7),
									offset: _Utils_Tuple2(0, 0),
									size: 1
								})
							])),
						$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
						$elm$html$Html$Attributes$tabindex(0))
					]),
				attrs.link),
			{
				label: $rakutentech$r10$R10$SimpleMarkdown$elementLabelGenerator(linkLabel),
				url: url
			});
	});
var $rakutentech$r10$R10$SimpleMarkdown$elementTextGenerator = function (string) {
	return $lucamug$elm_ui_with_context$Element$WithContext$text(string);
};
var $rakutentech$r10$R10$SimpleMarkdown$MarkDownText = function (a) {
	return {$: 'MarkDownText', a: a};
};
var $elm$regex$Regex$find = _Regex_findAtMost(_Regex_infinity);
var $rakutentech$r10$R10$SimpleMarkdown$MarkDownBold = function (a) {
	return {$: 'MarkDownBold', a: a};
};
var $rakutentech$r10$R10$SimpleMarkdown$markDownParseBoldData = function (data) {
	var text1 = A2(
		$elm$core$Maybe$withDefault,
		'',
		$elm$core$List$head(data));
	return $rakutentech$r10$R10$SimpleMarkdown$MarkDownBold(text1);
};
var $rakutentech$r10$R10$SimpleMarkdown$regexForBold = $elm$regex$Regex$fromString('\\*\\*([^*]*)\\*\\*');
var $elm$regex$Regex$split = _Regex_splitAtMost(_Regex_infinity);
var $rakutentech$r10$R10$SimpleMarkdown$parseTextForBold = function (text) {
	var _v0 = function () {
		var _v1 = $rakutentech$r10$R10$SimpleMarkdown$regexForBold;
		if (_v1.$ === 'Just') {
			var regex = _v1.a;
			return _Utils_Tuple2(
				A2($elm$regex$Regex$find, regex, text),
				A2($elm$regex$Regex$split, regex, text));
		} else {
			return _Utils_Tuple2(_List_Nil, _List_Nil);
		}
	}();
	var find = _v0.a;
	var split = _v0.b;
	return $elm$core$List$concat(
		A2(
			$elm$core$List$indexedMap,
			F2(
				function (index, splitted) {
					var maybeGetFinding = function () {
						var _v3 = A2(
							$elm$core$Array$get,
							index,
							$elm$core$Array$fromList(find));
						if (_v3.$ === 'Just') {
							var match = _v3.a;
							return $elm$core$Maybe$Just(
								A2(
									$elm$core$List$map,
									function (item_) {
										if (item_.$ === 'Just') {
											var i = item_.a;
											return i;
										} else {
											return '';
										}
									},
									match.submatches));
						} else {
							return $elm$core$Maybe$Nothing;
						}
					}();
					if (maybeGetFinding.$ === 'Just') {
						var getFinding = maybeGetFinding.a;
						return _List_fromArray(
							[
								$rakutentech$r10$R10$SimpleMarkdown$MarkDownText(splitted),
								$rakutentech$r10$R10$SimpleMarkdown$markDownParseBoldData(getFinding)
							]);
					} else {
						return _List_fromArray(
							[
								$rakutentech$r10$R10$SimpleMarkdown$MarkDownText(splitted)
							]);
					}
				}),
			split));
};
var $rakutentech$r10$R10$SimpleMarkdown$MarkDownLink = F2(
	function (a, b) {
		return {$: 'MarkDownLink', a: a, b: b};
	});
var $elm$core$List$tail = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(xs);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $rakutentech$r10$R10$SimpleMarkdown$markDownParseLinkData = function (data) {
	var text2 = A2(
		$elm$core$Maybe$withDefault,
		'',
		$elm$core$List$head(
			A2(
				$elm$core$Maybe$withDefault,
				_List_Nil,
				$elm$core$List$tail(data))));
	var text1 = A2(
		$elm$core$Maybe$withDefault,
		'',
		$elm$core$List$head(data));
	return A2($rakutentech$r10$R10$SimpleMarkdown$MarkDownLink, text1, text2);
};
var $rakutentech$r10$R10$SimpleMarkdown$regexForLinks = $elm$regex$Regex$fromString('\\[([^\\[\\]]+)\\]\\(([^()]+)\\)');
var $rakutentech$r10$R10$SimpleMarkdown$parseTextForLinks = function (text) {
	var _v0 = function () {
		var _v1 = $rakutentech$r10$R10$SimpleMarkdown$regexForLinks;
		if (_v1.$ === 'Just') {
			var regex = _v1.a;
			return _Utils_Tuple2(
				A2($elm$regex$Regex$find, regex, text),
				A2($elm$regex$Regex$split, regex, text));
		} else {
			return _Utils_Tuple2(_List_Nil, _List_Nil);
		}
	}();
	var find = _v0.a;
	var split = _v0.b;
	return $elm$core$List$concat(
		A2(
			$elm$core$List$indexedMap,
			F2(
				function (index, splitted) {
					var maybeGetFinding = function () {
						var _v3 = A2(
							$elm$core$Array$get,
							index,
							$elm$core$Array$fromList(find));
						if (_v3.$ === 'Just') {
							var match = _v3.a;
							return $elm$core$Maybe$Just(
								A2(
									$elm$core$List$map,
									function (item_) {
										if (item_.$ === 'Just') {
											var i = item_.a;
											return i;
										} else {
											return '';
										}
									},
									match.submatches));
						} else {
							return $elm$core$Maybe$Nothing;
						}
					}();
					if (maybeGetFinding.$ === 'Just') {
						var getFinding = maybeGetFinding.a;
						return _List_fromArray(
							[
								$rakutentech$r10$R10$SimpleMarkdown$MarkDownText(splitted),
								$rakutentech$r10$R10$SimpleMarkdown$markDownParseLinkData(getFinding)
							]);
					} else {
						return _List_fromArray(
							[
								$rakutentech$r10$R10$SimpleMarkdown$MarkDownText(splitted)
							]);
					}
				}),
			split));
};
var $rakutentech$r10$R10$SimpleMarkdown$markdown = F4(
	function (boldGenerator, textGenerator, linkGenerator, string) {
		var step1 = $rakutentech$r10$R10$SimpleMarkdown$parseTextForLinks(string);
		var step2 = $elm$core$List$concat(
			A2(
				$elm$core$List$map,
				function (item) {
					if (item.$ === 'MarkDownText') {
						var string_ = item.a;
						return $rakutentech$r10$R10$SimpleMarkdown$parseTextForBold(string_);
					} else {
						return _List_fromArray(
							[item]);
					}
				},
				step1));
		return A2(
			$elm$core$List$map,
			function (item) {
				switch (item.$) {
					case 'MarkDownText':
						var text = item.a;
						return textGenerator(text);
					case 'MarkDownBold':
						var text = item.a;
						return boldGenerator(text);
					default:
						var linkLabel = item.a;
						var url = item.b;
						return A2(linkGenerator, linkLabel, url);
				}
			},
			step2);
	});
var $rakutentech$r10$R10$SimpleMarkdown$elementMarkdownAdvanced = F2(
	function (attrs, string) {
		return A4(
			$rakutentech$r10$R10$SimpleMarkdown$markdown,
			$rakutentech$r10$R10$SimpleMarkdown$elementBoldGenerator,
			$rakutentech$r10$R10$SimpleMarkdown$elementTextGenerator,
			$rakutentech$r10$R10$SimpleMarkdown$elementLinkGeneratorAdvanced(attrs),
			string);
	});
var $avh4$elm_color$Color$fromRgba = function (components) {
	return A4($avh4$elm_color$Color$RgbaSpace, components.red, components.green, components.blue, components.alpha);
};
var $rakutentech$r10$R10$FormComponents$Internal$UI$Palette$withOpacity = function (opacity) {
	return A2(
		$elm$core$Basics$composeR,
		$avh4$elm_color$Color$toRgba,
		A2(
			$elm$core$Basics$composeR,
			function (rgba) {
				return _Utils_update(
					rgba,
					{alpha: opacity});
			},
			$avh4$elm_color$Color$fromRgba));
};
var $rakutentech$r10$R10$FormComponents$Internal$UI$Color$onSurfaceA = F2(
	function (alpha, palette) {
		return $rakutentech$r10$R10$FormComponents$Internal$UI$Color$fromPaletteColor(
			A2($rakutentech$r10$R10$FormComponents$Internal$UI$Palette$withOpacity, alpha, palette.onSurface));
	});
var $rakutentech$r10$R10$FormComponents$Internal$UI$Color$label = $rakutentech$r10$R10$FormComponents$Internal$UI$Color$onSurfaceA(1);
var $rakutentech$r10$R10$FormComponents$Internal$UI$Color$primary = A2(
	$elm$core$Basics$composeR,
	function ($) {
		return $.primary;
	},
	$rakutentech$r10$R10$FormComponents$Internal$UI$Color$fromPaletteColor);
var $rakutentech$r10$R10$FormComponents$Internal$UI$viewHelperText = F3(
	function (palette, attrs, maybeHelperText) {
		if (maybeHelperText.$ === 'Just') {
			var helperText = maybeHelperText.a;
			return A2(
				$lucamug$elm_ui_with_context$Element$WithContext$paragraph,
				_Utils_ap(
					_List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
							$elm$html$Html$Attributes$id('ie-flex-fix-320')),
							$lucamug$elm_ui_with_context$Element$WithContext$Font$color(
							$rakutentech$r10$R10$FormComponents$Internal$UI$Color$label(palette))
						]),
					attrs),
				A2(
					$rakutentech$r10$R10$SimpleMarkdown$elementMarkdownAdvanced,
					{
						link: _List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$Font$color(
								$rakutentech$r10$R10$FormComponents$Internal$UI$Color$primary(palette))
							])
					},
					helperText));
		} else {
			return $lucamug$elm_ui_with_context$Element$WithContext$none;
		}
	});
var $elm$svg$Svg$Attributes$d = _VirtualDom_attribute('d');
var $elm$svg$Svg$Attributes$fill = _VirtualDom_attribute('fill');
var $elm$svg$Svg$Attributes$fillRule = _VirtualDom_attribute('fill-rule');
var $elm$svg$Svg$trustedNode = _VirtualDom_nodeNS('http://www.w3.org/2000/svg');
var $elm$svg$Svg$path = $elm$svg$Svg$trustedNode('path');
var $noahzgordon$elm_color_extra$Color$Convert$cssColorString = F2(
	function (kind, values) {
		return kind + ('(' + (A2($elm$core$String$join, ', ', values) + ')'));
	});
var $noahzgordon$elm_color_extra$Color$Convert$colorToCssRgba = function (cl) {
	var _v0 = $avh4$elm_color$Color$toRgba(cl);
	var red = _v0.red;
	var green = _v0.green;
	var blue = _v0.blue;
	var alpha = _v0.alpha;
	return A2(
		$noahzgordon$elm_color_extra$Color$Convert$cssColorString,
		'rgba',
		_List_fromArray(
			[
				$elm$core$String$fromFloat(red * 255),
				$elm$core$String$fromFloat(green * 255),
				$elm$core$String$fromFloat(blue * 255),
				$elm$core$String$fromFloat(alpha)
			]));
};
var $mdgriffith$elm_ui$Element$toRgb = function (_v0) {
	var r = _v0.a;
	var g = _v0.b;
	var b = _v0.c;
	var a = _v0.d;
	return {alpha: a, blue: b, green: g, red: r};
};
var $lucamug$elm_ui_with_context$Element$WithContext$toRgb = $mdgriffith$elm_ui$Element$toRgb;
var $rakutentech$r10$R10$Color$Utils$toColorColor = function (elementColor) {
	var _v0 = $lucamug$elm_ui_with_context$Element$WithContext$toRgb(elementColor);
	var red = _v0.red;
	var green = _v0.green;
	var blue = _v0.blue;
	var alpha = _v0.alpha;
	return $avh4$elm_color$Color$fromRgba(
		{alpha: alpha, blue: blue, green: green, red: red});
};
var $rakutentech$r10$R10$Color$Utils$toCssRgba = function (elementColor) {
	return $noahzgordon$elm_color_extra$Color$Convert$colorToCssRgba(
		$rakutentech$r10$R10$Color$Utils$toColorColor(elementColor));
};
var $elm$html$Html$Attributes$attribute = $elm$virtual_dom$VirtualDom$attribute;
var $elm$svg$Svg$Attributes$preserveAspectRatio = _VirtualDom_attribute('preserveAspectRatio');
var $elm$svg$Svg$svg = $elm$svg$Svg$trustedNode('svg');
var $elm$svg$Svg$Attributes$height = _VirtualDom_attribute('height');
var $elm$core$Maybe$map4 = F5(
	function (func, ma, mb, mc, md) {
		if (ma.$ === 'Nothing') {
			return $elm$core$Maybe$Nothing;
		} else {
			var a = ma.a;
			if (mb.$ === 'Nothing') {
				return $elm$core$Maybe$Nothing;
			} else {
				var b = mb.a;
				if (mc.$ === 'Nothing') {
					return $elm$core$Maybe$Nothing;
				} else {
					var c = mc.a;
					if (md.$ === 'Nothing') {
						return $elm$core$Maybe$Nothing;
					} else {
						var d = md.a;
						return $elm$core$Maybe$Just(
							A4(func, a, b, c, d));
					}
				}
			}
		}
	});
var $elm$svg$Svg$Attributes$width = _VirtualDom_attribute('width');
var $rakutentech$r10$R10$Svg$Utils$svgSize_ = F2(
	function (viewbox, ySize) {
		var _v0 = A2($elm$core$String$split, ' ', viewbox);
		if ((((_v0.b && _v0.b.b) && _v0.b.b.b) && _v0.b.b.b.b) && (!_v0.b.b.b.b.b)) {
			var x = _v0.a;
			var _v1 = _v0.b;
			var y = _v1.a;
			var _v2 = _v1.b;
			var dx = _v2.a;
			var _v3 = _v2.b;
			var dy = _v3.a;
			return A2(
				$elm$core$Maybe$withDefault,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$height(
						$elm$core$String$fromInt(ySize))
					]),
				A5(
					$elm$core$Maybe$map4,
					F4(
						function (_v4, _v5, dx_, dy_) {
							var xSize = (dx_ * ySize) / dy_;
							return _List_fromArray(
								[
									$elm$svg$Svg$Attributes$height(
									$elm$core$String$fromInt(ySize)),
									$elm$svg$Svg$Attributes$width(
									$elm$core$String$fromFloat(xSize))
								]);
						}),
					$elm$core$String$toFloat(x),
					$elm$core$String$toFloat(y),
					$elm$core$String$toFloat(dx),
					$elm$core$String$toFloat(dy)));
		} else {
			return _List_fromArray(
				[
					$elm$svg$Svg$Attributes$height(
					$elm$core$String$fromInt(ySize))
				]);
		}
	});
var $elm$svg$Svg$Attributes$version = _VirtualDom_attribute('version');
var $elm$svg$Svg$Attributes$viewBox = _VirtualDom_attribute('viewBox');
var $rakutentech$r10$R10$Svg$Utils$wrapperWithViewbox_ = F3(
	function (viewbox, ySize, listSvg) {
		return A2(
			$elm$svg$Svg$svg,
			_Utils_ap(
				_List_fromArray(
					[
						A2($elm$html$Html$Attributes$attribute, 'xmlns', 'http://www.w3.org/2000/svg'),
						A2($elm$html$Html$Attributes$attribute, 'xmlns:xlink', 'http://www.w3.org/1999/xlink'),
						$elm$svg$Svg$Attributes$version('1.1'),
						$elm$svg$Svg$Attributes$preserveAspectRatio('xMinYMin slice'),
						$elm$svg$Svg$Attributes$viewBox(viewbox),
						A2($elm$html$Html$Attributes$attribute, 'focusable', 'false')
					]),
				A2($rakutentech$r10$R10$Svg$Utils$svgSize_, viewbox, ySize)),
			listSvg);
	});
var $rakutentech$r10$R10$Svg$Utils$wrapperWithViewbox = F4(
	function (attrs, viewbox, size, listSvg) {
		return A2(
			$lucamug$elm_ui_with_context$Element$WithContext$el,
			attrs,
			$lucamug$elm_ui_with_context$Element$WithContext$html(
				A3($rakutentech$r10$R10$Svg$Utils$wrapperWithViewbox_, viewbox, size, listSvg)));
	});
var $rakutentech$r10$R10$Svg$Utils$wrapper32 = F3(
	function (attrs, size, listSvg) {
		return A4($rakutentech$r10$R10$Svg$Utils$wrapperWithViewbox, attrs, '0 0 32 32', size, listSvg);
	});
var $rakutentech$r10$R10$Svg$Icons$check = F3(
	function (attrs, cl, size) {
		return A3(
			$rakutentech$r10$R10$Svg$Utils$wrapper32,
			attrs,
			size,
			_List_fromArray(
				[
					A2(
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$fill('none'),
							$elm$svg$Svg$Attributes$d('M0 0h32v32H0z')
						]),
					_List_Nil),
					A2(
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$fill(
							$rakutentech$r10$R10$Color$Utils$toCssRgba(cl)),
							$elm$svg$Svg$Attributes$fillRule('evenodd'),
							$elm$svg$Svg$Attributes$d('M30 7l-1.41-1.41L11 23.17 3.41 15.6 2 17l9 9L30 7z')
						]),
					_List_Nil)
				]));
	});
var $rakutentech$r10$R10$Svg$IconsExtra$checkBold = F3(
	function (attrs, cl, size) {
		return A4(
			$rakutentech$r10$R10$Svg$Utils$wrapperWithViewbox,
			attrs,
			'0 0 24 24',
			size,
			_List_fromArray(
				[
					A2(
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$fill(
							$rakutentech$r10$R10$Color$Utils$toCssRgba(cl)),
							$elm$svg$Svg$Attributes$d('M9 16.17L5.53 12.7c-.39-.39-1.02-.39-1.41 0-.39.39-.39 1.02 0 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71c.39-.39.39-1.02 0-1.41-.39-.39-1.02-.39-1.41 0L9 16.17z')
						]),
					_List_Nil)
				]));
	});
var $rakutentech$r10$R10$Svg$IconsExtra$email = F3(
	function (attrs, cl, size) {
		return A4(
			$rakutentech$r10$R10$Svg$Utils$wrapperWithViewbox,
			attrs,
			'0 0 512 512',
			size,
			_List_fromArray(
				[
					A2(
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$fill(
							$rakutentech$r10$R10$Color$Utils$toCssRgba(cl)),
							$elm$svg$Svg$Attributes$d('M486.4 59.7H25.6A25.6 25.6 0 000 85.3v341.4a25.6 25.6 0 0025.6 25.6h460.8a25.6 25.6 0 0025.6-25.6V85.3a25.6 25.6 0 00-25.6-25.6zm8.5 367c0 4.7-3.8 8.5-8.5 8.5H25.6a8.5 8.5 0 01-8.5-8.5V85.3c0-4.7 3.8-8.5 8.5-8.5h460.8c4.7 0 8.5 3.8 8.5 8.5v341.4z')
						]),
					_List_Nil),
					A2(
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$fill(
							$rakutentech$r10$R10$Color$Utils$toCssRgba(cl)),
							$elm$svg$Svg$Attributes$d('M470 93.9c-2.2-.2-4.4.5-6.2 2L267 261.2a17 17 0 01-22 0L48.2 96a8.5 8.5 0 00-11 13L234 274.3a34 34 0 0044 0l196.8-165.4a8.5 8.5 0 00-4.7-15zM164.1 273.1c-3-.6-6.1.4-8.2 2.7l-119.5 128A8.5 8.5 0 1049 415.4l119.5-128a8.5 8.5 0 00-4.3-14.3zM356.1 275.8a8.5 8.5 0 10-12.5 11.6l119.5 128a8.5 8.5 0 0012.5-11.6L356 275.8z')
						]),
					_List_Nil)
				]));
	});
var $rakutentech$r10$R10$Svg$Icons$eye_ban_l = F3(
	function (attrs, cl, size) {
		return A3(
			$rakutentech$r10$R10$Svg$Utils$wrapper32,
			attrs,
			size,
			_List_fromArray(
				[
					A2(
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$fill('none'),
							$elm$svg$Svg$Attributes$d('M0 0h32v32H0z')
						]),
					_List_Nil),
					A2(
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$d('M24.5 23.09A18.85 18.85 0 0 0 30 16S26 6 16 6a13.55 13.55 0 0 0-6.8 1.78L3.2 1.8 1.8 3.2l5.7 5.7A18.85 18.85 0 0 0 2 16s4 10 14 10a13.55 13.55 0 0 0 6.8-1.78l5.99 5.98 1.41-1.41zM16 24c-7.1 0-10.72-5.88-11.8-8a16.43 16.43 0 0 1 4.72-5.66l2.91 2.9a5 5 0 0 0 6.92 6.93l2.57 2.57A11.65 11.65 0 0 1 16 24zm1.28-5.3A2.97 2.97 0 0 1 16 19a3 3 0 0 1-3-3 2.97 2.97 0 0 1 .3-1.28zm-2.57-5.4A2.97 2.97 0 0 1 16 13a3 3 0 0 1 3 3 2.97 2.97 0 0 1-.3 1.28l-2-1.99zm5.46 5.45a5 5 0 0 0-6.92-6.92l-2.57-2.57A11.65 11.65 0 0 1 16 8c7.1 0 10.72 5.88 11.8 8a16.43 16.43 0 0 1-4.72 5.66z'),
							$elm$svg$Svg$Attributes$fill(
							$rakutentech$r10$R10$Color$Utils$toCssRgba(cl))
						]),
					_List_Nil)
				]));
	});
var $rakutentech$r10$R10$Svg$IconsExtra$grid = F3(
	function (attrs, cl, size) {
		return A4(
			$rakutentech$r10$R10$Svg$Utils$wrapperWithViewbox,
			attrs,
			'0 0 24 24',
			size,
			_List_fromArray(
				[
					A2(
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$fill(
							$rakutentech$r10$R10$Color$Utils$toCssRgba(cl)),
							$elm$svg$Svg$Attributes$d('M6,8c1.1,0 2,-0.9 2,-2s-0.9,-2 -2,-2 -2,0.9 -2,2 0.9,2 2,2zM12,20c1.1,0 2,-0.9 2,-2s-0.9,-2 -2,-2 -2,0.9 -2,2 0.9,2 2,2zM6,20c1.1,0 2,-0.9 2,-2s-0.9,-2 -2,-2 -2,0.9 -2,2 0.9,2 2,2zM6,14c1.1,0 2,-0.9 2,-2s-0.9,-2 -2,-2 -2,0.9 -2,2 0.9,2 2,2zM12,14c1.1,0 2,-0.9 2,-2s-0.9,-2 -2,-2 -2,0.9 -2,2 0.9,2 2,2zM16,6c0,1.1 0.9,2 2,2s2,-0.9 2,-2 -0.9,-2 -2,-2 -2,0.9 -2,2zM12,8c1.1,0 2,-0.9 2,-2s-0.9,-2 -2,-2 -2,0.9 -2,2 0.9,2 2,2zM18,14c1.1,0 2,-0.9 2,-2s-0.9,-2 -2,-2 -2,0.9 -2,2 0.9,2 2,2zM18,20c1.1,0 2,-0.9 2,-2s-0.9,-2 -2,-2 -2,0.9 -2,2 0.9,2 2,2z')
						]),
					_List_Nil)
				]));
	});
var $rakutentech$r10$R10$Svg$IconsExtra$keyboardArrowDown = F3(
	function (attrs, cl, size) {
		return A4(
			$rakutentech$r10$R10$Svg$Utils$wrapperWithViewbox,
			attrs,
			'0 0 24 24',
			size,
			_List_fromArray(
				[
					A2(
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$fill(
							$rakutentech$r10$R10$Color$Utils$toCssRgba(cl)),
							$elm$svg$Svg$Attributes$d('M8.12 9.29L12 13.17l3.88-3.88c.39-.39 1.02-.39 1.41 0 .39.39.39 1.02 0 1.41l-4.59 4.59c-.39.39-1.02.39-1.41 0L6.7 10.7c-.39-.39-.39-1.02 0-1.41.39-.38 1.03-.39 1.42 0z')
						]),
					_List_Nil)
				]));
	});
var $rakutentech$r10$R10$Svg$Icons$notice_generic_l = F3(
	function (attrs, cl, size) {
		return A3(
			$rakutentech$r10$R10$Svg$Utils$wrapper32,
			attrs,
			size,
			_List_fromArray(
				[
					A2(
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$fill('none'),
							$elm$svg$Svg$Attributes$d('M0 0h32v32H0z')
						]),
					_List_Nil),
					A2(
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$d('M16 28a2 2 0 0 1-2-2h-2a4 4 0 0 0 8 0h-2a2 2 0 0 1-2 2zm10-8v-8a10 10 0 0 0-20 0v8a2 2 0 0 1-2 2v2h24v-2a2 2 0 0 1-2-2zM7.46 22A3.98 3.98 0 0 0 8 20v-8a8 8 0 0 1 16 0v8a3.98 3.98 0 0 0 .54 2z'),
							$elm$svg$Svg$Attributes$fill(
							$rakutentech$r10$R10$Color$Utils$toCssRgba(cl))
						]),
					_List_Nil)
				]));
	});
var $rakutentech$r10$R10$Svg$IconsExtra$search = F3(
	function (attrs, cl, size) {
		return A4(
			$rakutentech$r10$R10$Svg$Utils$wrapperWithViewbox,
			attrs,
			'0 0 24 24',
			size,
			_List_fromArray(
				[
					A2(
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$fill(
							$rakutentech$r10$R10$Color$Utils$toCssRgba(cl)),
							$elm$svg$Svg$Attributes$d('M15.5 14h-.79l-.28-.27c1.2-1.4 1.82-3.31 1.48-5.34-.47-2.78-2.79-5-5.59-5.34-4.23-.52-7.79 3.04-7.27 7.27.34 2.8 2.56 5.12 5.34 5.59 2.03.34 3.94-.28 5.34-1.48l.27.28v.79l4.25 4.25c.41.41 1.08.41 1.49 0 .41-.41.41-1.08 0-1.49L15.5 14zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z')
						]),
					_List_Nil)
				]));
	});
var $rakutentech$r10$R10$Svg$Icons$sign_warning_f = F3(
	function (attrs, cl, size) {
		return A3(
			$rakutentech$r10$R10$Svg$Utils$wrapper32,
			attrs,
			size,
			_List_fromArray(
				[
					A2(
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$fill('none'),
							$elm$svg$Svg$Attributes$d('M0 0h32v32H0z')
						]),
					_List_Nil),
					A2(
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$d('M29.82 25.94L17.25 3.72a1.45 1.45 0 0 0-2.5 0L2.18 25.94A1.4 1.4 0 0 0 3.43 28h25.14a1.4 1.4 0 0 0 1.25-2.06zM15 10h2v9h-2zm1 14a1.5 1.5 0 1 1 1.5-1.5A1.5 1.5 0 0 1 16 24z'),
							$elm$svg$Svg$Attributes$fill(
							$rakutentech$r10$R10$Color$Utils$toCssRgba(cl))
						]),
					_List_Nil)
				]));
	});
var $elm$svg$Svg$circle = $elm$svg$Svg$trustedNode('circle');
var $elm$svg$Svg$Attributes$cx = _VirtualDom_attribute('cx');
var $elm$svg$Svg$Attributes$cy = _VirtualDom_attribute('cy');
var $elm$svg$Svg$g = $elm$svg$Svg$trustedNode('g');
var $elm$svg$Svg$Attributes$r = _VirtualDom_attribute('r');
var $rakutentech$r10$R10$Svg$Icons$sign_warning_l = F3(
	function (attrs, cl, size) {
		return A3(
			$rakutentech$r10$R10$Svg$Utils$wrapper32,
			attrs,
			size,
			_List_fromArray(
				[
					A2(
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$fill('none'),
							$elm$svg$Svg$Attributes$d('M0 0h32v32H0z')
						]),
					_List_Nil),
					A2(
					$elm$svg$Svg$g,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$fill(
							$rakutentech$r10$R10$Color$Utils$toCssRgba(cl))
						]),
					_List_fromArray(
						[
							A2(
							$elm$svg$Svg$path,
							_List_fromArray(
								[
									$elm$svg$Svg$Attributes$d('M29.82 25.94L17.25 3.72a1.45 1.45 0 0 0-2.5 0L2.18 25.94A1.4 1.4 0 0 0 3.43 28h25.14a1.4 1.4 0 0 0 1.25-2.06zM4.44 26L16 5.57 27.56 26z')
								]),
							_List_Nil),
							A2(
							$elm$svg$Svg$path,
							_List_fromArray(
								[
									$elm$svg$Svg$Attributes$d('M15 10h2v9h-2z')
								]),
							_List_Nil),
							A2(
							$elm$svg$Svg$circle,
							_List_fromArray(
								[
									$elm$svg$Svg$Attributes$cx('16'),
									$elm$svg$Svg$Attributes$cy('22.5'),
									$elm$svg$Svg$Attributes$r('1.5')
								]),
							_List_Nil)
						]))
				]));
	});
var $rakutentech$r10$R10$Svg$IconsExtra$validation_check = F3(
	function (attrs, cl, size) {
		return A4(
			$rakutentech$r10$R10$Svg$Utils$wrapperWithViewbox,
			attrs,
			'0 0 24 24',
			size,
			_List_fromArray(
				[
					A2(
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$fill(
							$rakutentech$r10$R10$Color$Utils$toCssRgba(cl)),
							$elm$svg$Svg$Attributes$d('M9 16.2l-3.5-3.5c-.39-.39-1.01-.39-1.4 0-.39.39-.39 1.01 0 1.4l4.19 4.19c.39.39 1.02.39 1.41 0L20.3 7.7c.39-.39.39-1.01 0-1.4-.39-.39-1.01-.39-1.4 0L9 16.2z')
						]),
					_List_Nil)
				]));
	});
var $rakutentech$r10$R10$Svg$IconsExtra$validation_clear = F3(
	function (attrs, cl, size) {
		return A4(
			$rakutentech$r10$R10$Svg$Utils$wrapperWithViewbox,
			attrs,
			'2 2 20 20',
			size,
			_List_fromArray(
				[
					A2(
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$fill(
							$rakutentech$r10$R10$Color$Utils$toCssRgba(cl)),
							$elm$svg$Svg$Attributes$d('M18.3 5.71c-.39-.39-1.02-.39-1.41 0L12 10.59 7.11 5.7c-.39-.39-1.02-.39-1.41 0-.39.39-.39 1.02 0 1.41L10.59 12 5.7 16.89c-.39.39-.39 1.02 0 1.41.39.39 1.02.39 1.41 0L12 13.41l4.89 4.89c.39.39 1.02.39 1.41 0 .39-.39.39-1.02 0-1.41L13.41 12l4.89-4.89c.38-.38.38-1.02 0-1.4z')
						]),
					_List_Nil)
				]));
	});
var $rakutentech$r10$R10$Svg$IconsExtra$validation_error = F3(
	function (attrs, cl, size) {
		return A4(
			$rakutentech$r10$R10$Svg$Utils$wrapperWithViewbox,
			attrs,
			'0 0 24 24',
			size,
			_List_fromArray(
				[
					A2(
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$fill(
							$rakutentech$r10$R10$Color$Utils$toCssRgba(cl)),
							$elm$svg$Svg$Attributes$d('M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z')
						]),
					_List_Nil)
				]));
	});
var $rakutentech$r10$R10$FormComponents$Internal$UI$icons = {check: $rakutentech$r10$R10$Svg$Icons$check, checkBold: $rakutentech$r10$R10$Svg$IconsExtra$checkBold, combobox_arrow: $rakutentech$r10$R10$Svg$IconsExtra$keyboardArrowDown, eye_ban_l: $rakutentech$r10$R10$Svg$Icons$eye_ban_l, eye_l: $rakutentech$r10$R10$Svg$IconsExtra$email, grid: $rakutentech$r10$R10$Svg$IconsExtra$grid, notice_generic_l: $rakutentech$r10$R10$Svg$Icons$notice_generic_l, search: $rakutentech$r10$R10$Svg$IconsExtra$search, sign_warning_f: $rakutentech$r10$R10$Svg$Icons$sign_warning_f, sign_warning_l: $rakutentech$r10$R10$Svg$Icons$sign_warning_l, validation_check: $rakutentech$r10$R10$Svg$IconsExtra$validation_check, validation_clear: $rakutentech$r10$R10$Svg$IconsExtra$validation_clear, validation_error: $rakutentech$r10$R10$Svg$IconsExtra$validation_error};
var $mdgriffith$elm_ui$Internal$Model$Px = function (a) {
	return {$: 'Px', a: a};
};
var $mdgriffith$elm_ui$Element$px = $mdgriffith$elm_ui$Internal$Model$Px;
var $lucamug$elm_ui_with_context$Element$WithContext$px = $mdgriffith$elm_ui$Element$px;
var $lucamug$elm_ui_with_context$Element$WithContext$width = function (l) {
	return $lucamug$elm_ui_with_context$Element$WithContext$attribute(
		$mdgriffith$elm_ui$Element$width(l));
};
var $rakutentech$r10$R10$FormComponents$Internal$Validations$viewValidationIcon = F2(
	function (palette, validationIcon) {
		var iconAttrs = _List_fromArray(
			[
				$lucamug$elm_ui_with_context$Element$WithContext$width(
				$lucamug$elm_ui_with_context$Element$WithContext$px(16)),
				$lucamug$elm_ui_with_context$Element$WithContext$height(
				$lucamug$elm_ui_with_context$Element$WithContext$px(16)),
				$lucamug$elm_ui_with_context$Element$WithContext$alignTop
			]);
		switch (validationIcon.$) {
			case 'NoIcon':
				return {invalidIcon: $lucamug$elm_ui_with_context$Element$WithContext$none, validIcon: $lucamug$elm_ui_with_context$Element$WithContext$none};
			case 'ClearOrCheck':
				return {
					invalidIcon: A3(
						$rakutentech$r10$R10$FormComponents$Internal$UI$icons.validation_clear,
						iconAttrs,
						$rakutentech$r10$R10$FormComponents$Internal$UI$Color$error(palette),
						16),
					validIcon: A3(
						$rakutentech$r10$R10$FormComponents$Internal$UI$icons.validation_check,
						iconAttrs,
						$rakutentech$r10$R10$FormComponents$Internal$UI$Color$success(palette),
						16)
				};
			default:
				return {
					invalidIcon: A3(
						$rakutentech$r10$R10$FormComponents$Internal$UI$icons.sign_warning_f,
						iconAttrs,
						$rakutentech$r10$R10$FormComponents$Internal$UI$Color$error(palette),
						16),
					validIcon: A3(
						$rakutentech$r10$R10$FormComponents$Internal$UI$icons.validation_check,
						iconAttrs,
						$rakutentech$r10$R10$FormComponents$Internal$UI$Color$success(palette),
						16)
				};
		}
	});
var $rakutentech$r10$R10$FormComponents$Internal$Validations$viewValidationMessage = F3(
	function (palette, validationIcon, validationMessage) {
		if (validationMessage.$ === 'MessageOk') {
			var string = validationMessage.a;
			return A2(
				$lucamug$elm_ui_with_context$Element$WithContext$row,
				_List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
						$lucamug$elm_ui_with_context$Element$WithContext$height($lucamug$elm_ui_with_context$Element$WithContext$fill),
						$lucamug$elm_ui_with_context$Element$WithContext$spacing(4)
					]),
				_List_fromArray(
					[
						A2($rakutentech$r10$R10$FormComponents$Internal$Validations$viewValidationIcon, palette, validationIcon).validIcon,
						A3(
						$rakutentech$r10$R10$FormComponents$Internal$UI$viewHelperText,
						palette,
						_List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$Font$color(
								$rakutentech$r10$R10$FormComponents$Internal$UI$Color$success(palette))
							]),
						$elm$core$Maybe$Just(string))
					]));
		} else {
			var string = validationMessage.a;
			return A2(
				$lucamug$elm_ui_with_context$Element$WithContext$row,
				_List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
						$lucamug$elm_ui_with_context$Element$WithContext$height($lucamug$elm_ui_with_context$Element$WithContext$fill),
						$lucamug$elm_ui_with_context$Element$WithContext$spacing(4)
					]),
				_List_fromArray(
					[
						A2($rakutentech$r10$R10$FormComponents$Internal$Validations$viewValidationIcon, palette, validationIcon).invalidIcon,
						A3(
						$rakutentech$r10$R10$FormComponents$Internal$UI$viewHelperText,
						palette,
						_List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$Font$color(
								$rakutentech$r10$R10$FormComponents$Internal$UI$Color$error(palette))
							]),
						$elm$core$Maybe$Just(string))
					]));
		}
	});
var $rakutentech$r10$R10$FormComponents$Internal$Validations$viewValidation = F3(
	function (palette, validationIcon, validation) {
		if (validation.$ === 'PretendIsNotYetValidated') {
			return $rakutentech$r10$R10$FormComponents$Internal$Validations$animatedList(_List_Nil);
		} else {
			var listValidationMessage = validation.a;
			return $rakutentech$r10$R10$FormComponents$Internal$Validations$animatedList(
				A2(
					$elm$core$List$map,
					A2($rakutentech$r10$R10$FormComponents$Internal$Validations$viewValidationMessage, palette, validationIcon),
					listValidationMessage));
		}
	});
var $rakutentech$r10$R10$Form$Internal$MakerForView$addValidationMessagesUnderTheField = F3(
	function (args, entity, listEl) {
		var validationIcon = A2(
			$elm$core$Maybe$withDefault,
			$rakutentech$r10$R10$FormTypes$NoIcon,
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.validationIcon;
				},
				$rakutentech$r10$R10$Form$Internal$MakerForView$getFieldConfig(entity).validationSpecs));
		return _List_fromArray(
			[
				A2(
				$lucamug$elm_ui_with_context$Element$WithContext$column,
				_List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
						$lucamug$elm_ui_with_context$Element$WithContext$height($lucamug$elm_ui_with_context$Element$WithContext$fill)
					]),
				_Utils_ap(
					listEl,
					_List_fromArray(
						[
							A3(
							$rakutentech$r10$R10$FormComponents$Internal$Validations$viewValidation,
							args.palette,
							validationIcon,
							A3(
								$rakutentech$r10$R10$Form$Internal$Converter$fromFieldStateValidationToComponentValidation,
								$rakutentech$r10$R10$Form$Internal$MakerForView$getFieldConfig(entity).validationSpecs,
								A2(
									$elm$core$Maybe$withDefault,
									$rakutentech$r10$R10$Form$Internal$FieldState$init,
									A2($rakutentech$r10$R10$Form$Internal$Dict$get, args.key, args.formState.fieldsState)).validation,
								args.translator(args.key)))
						])))
			]);
	});
var $mdgriffith$elm_ui$Internal$Model$Behind = {$: 'Behind'};
var $mdgriffith$elm_ui$Element$createNearby = F2(
	function (loc, element) {
		if (element.$ === 'Empty') {
			return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
		} else {
			return A2($mdgriffith$elm_ui$Internal$Model$Nearby, loc, element);
		}
	});
var $mdgriffith$elm_ui$Element$behindContent = function (element) {
	return A2($mdgriffith$elm_ui$Element$createNearby, $mdgriffith$elm_ui$Internal$Model$Behind, element);
};
var $lucamug$elm_ui_with_context$Element$WithContext$createNearby = F2(
	function (toAttr, _v0) {
		var f = _v0.a;
		return $lucamug$elm_ui_with_context$Element$WithContext$Internal$Attribute(
			A2($elm$core$Basics$composeR, f, toAttr));
	});
var $lucamug$elm_ui_with_context$Element$WithContext$behindContent = $lucamug$elm_ui_with_context$Element$WithContext$createNearby($mdgriffith$elm_ui$Element$behindContent);
var $rakutentech$r10$R10$FormComponents$Internal$UI$Color$container = $rakutentech$r10$R10$FormComponents$Internal$UI$Color$onSurfaceA(0.54);
var $mdgriffith$elm_ui$Internal$Model$BorderWidth = F5(
	function (a, b, c, d, e) {
		return {$: 'BorderWidth', a: a, b: b, c: c, d: d, e: e};
	});
var $mdgriffith$elm_ui$Element$Border$width = function (v) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderWidth,
		A5(
			$mdgriffith$elm_ui$Internal$Model$BorderWidth,
			'b-' + $elm$core$String$fromInt(v),
			v,
			v,
			v,
			v));
};
var $lucamug$elm_ui_with_context$Element$WithContext$Border$width = function (v) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$attribute(
		$mdgriffith$elm_ui$Element$Border$width(v));
};
var $rakutentech$r10$R10$FormComponents$Internal$UI$borderEntityWithBorder = function (palette) {
	return _List_fromArray(
		[
			$lucamug$elm_ui_with_context$Element$WithContext$Border$width(1),
			$lucamug$elm_ui_with_context$Element$WithContext$Border$color(
			$rakutentech$r10$R10$FormComponents$Internal$UI$Color$container(palette)),
			$lucamug$elm_ui_with_context$Element$WithContext$Border$rounded(5)
		]);
};
var $mdgriffith$elm_ui$Internal$Model$CenterX = {$: 'CenterX'};
var $mdgriffith$elm_ui$Element$centerX = $mdgriffith$elm_ui$Internal$Model$AlignX($mdgriffith$elm_ui$Internal$Model$CenterX);
var $lucamug$elm_ui_with_context$Element$WithContext$centerX = $lucamug$elm_ui_with_context$Element$WithContext$attribute($mdgriffith$elm_ui$Element$centerX);
var $mdgriffith$elm_ui$Internal$Model$CenterY = {$: 'CenterY'};
var $mdgriffith$elm_ui$Element$centerY = $mdgriffith$elm_ui$Internal$Model$AlignY($mdgriffith$elm_ui$Internal$Model$CenterY);
var $lucamug$elm_ui_with_context$Element$WithContext$centerY = $lucamug$elm_ui_with_context$Element$WithContext$attribute($mdgriffith$elm_ui$Element$centerY);
var $mdgriffith$elm_ui$Element$Background$color = function (clr) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$bgColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'bg-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(clr),
			'background-color',
			clr));
};
var $lucamug$elm_ui_with_context$Element$WithContext$Background$color = function (clr) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$attr(
		$mdgriffith$elm_ui$Element$Background$color(clr));
};
var $rakutentech$r10$R10$FormComponents$Internal$UI$Color$containerA = function (alpha) {
	return $rakutentech$r10$R10$FormComponents$Internal$UI$Color$onSurfaceA(0.54 * alpha);
};
var $elm$core$Basics$pi = _Basics_pi;
var $elm$core$Basics$degrees = function (angleInDegrees) {
	return (angleInDegrees * $elm$core$Basics$pi) / 180;
};
var $rakutentech$r10$R10$Form$Internal$Conf$getId = function (entity) {
	switch (entity.$) {
		case 'EntityNormal':
			var entityId = entity.a;
			return entityId;
		case 'EntityWrappable':
			var entityId = entity.a;
			return entityId;
		case 'EntityWithBorder':
			var entityId = entity.a;
			return entityId;
		case 'EntityWithTabs':
			var entityId = entity.a;
			return entityId;
		case 'EntityMulti':
			var entityId = entity.a;
			return entityId;
		case 'EntityField':
			var fieldConf = entity.a;
			return fieldConf.id;
		case 'EntityTitle':
			var titleConf = entity.b;
			return titleConf.title;
		default:
			var titleConf = entity.b;
			return titleConf.title;
	}
};
var $rakutentech$r10$R10$Form$Internal$Key$composeMultiKeys = F2(
	function (key, quantity) {
		return A2(
			$elm$core$List$indexedMap,
			F2(
				function (index, _v0) {
					return A2(
						$rakutentech$r10$R10$Form$Internal$Key$composeKey,
						key,
						$elm$core$String$fromInt(index));
				}),
			A2($elm$core$List$repeat, quantity, _Utils_Tuple0));
	});
var $rakutentech$r10$R10$Form$Internal$Helpers$getMultiActiveKeys = F2(
	function (key, formState) {
		var quantity = A2(
			$elm$core$Maybe$withDefault,
			1,
			A2($rakutentech$r10$R10$Form$Internal$Dict$get, key, formState.multiplicableQuantities));
		var notRemoved = function (newKey) {
			return !A2(
				$elm$core$Set$member,
				$rakutentech$r10$R10$Form$Internal$Key$toString(newKey),
				formState.removed);
		};
		return A2(
			$elm$core$List$filter,
			notRemoved,
			A2($rakutentech$r10$R10$Form$Internal$Key$composeMultiKeys, key, quantity));
	});
var $mdgriffith$elm_ui$Internal$Model$InFront = {$: 'InFront'};
var $mdgriffith$elm_ui$Element$inFront = function (element) {
	return A2($mdgriffith$elm_ui$Element$createNearby, $mdgriffith$elm_ui$Internal$Model$InFront, element);
};
var $lucamug$elm_ui_with_context$Element$WithContext$inFront = $lucamug$elm_ui_with_context$Element$WithContext$createNearby($mdgriffith$elm_ui$Element$inFront);
var $rakutentech$r10$R10$FormComponents$Internal$UI$Color$labelA = function (alpha) {
	return $rakutentech$r10$R10$FormComponents$Internal$UI$Color$onSurfaceA(1 * alpha);
};
var $mdgriffith$elm_ui$Internal$Model$Max = F2(
	function (a, b) {
		return {$: 'Max', a: a, b: b};
	});
var $mdgriffith$elm_ui$Element$maximum = F2(
	function (i, l) {
		return A2($mdgriffith$elm_ui$Internal$Model$Max, i, l);
	});
var $lucamug$elm_ui_with_context$Element$WithContext$maximum = $mdgriffith$elm_ui$Element$maximum;
var $mdgriffith$elm_ui$Internal$Model$Hover = {$: 'Hover'};
var $mdgriffith$elm_ui$Internal$Flag$hover = $mdgriffith$elm_ui$Internal$Flag$flag(33);
var $mdgriffith$elm_ui$Element$mouseOver = function (decs) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$hover,
		A2(
			$mdgriffith$elm_ui$Internal$Model$PseudoSelector,
			$mdgriffith$elm_ui$Internal$Model$Hover,
			$mdgriffith$elm_ui$Internal$Model$unwrapDecorations(decs)));
};
var $lucamug$elm_ui_with_context$Element$WithContext$mouseOver = function (decs) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$Attribute(
		function (context) {
			return $mdgriffith$elm_ui$Element$mouseOver(
				A2(
					$elm$core$List$map,
					function (_v0) {
						var f = _v0.a;
						return f(context);
					},
					decs));
		});
};
var $mdgriffith$elm_ui$Internal$Model$MoveX = function (a) {
	return {$: 'MoveX', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$moveX = $mdgriffith$elm_ui$Internal$Flag$flag(25);
var $mdgriffith$elm_ui$Element$moveLeft = function (x) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$moveX,
		$mdgriffith$elm_ui$Internal$Model$MoveX(-x));
};
var $lucamug$elm_ui_with_context$Element$WithContext$moveLeft = function (x) {
	return $lucamug$elm_ui_with_context$Element$WithContext$attr(
		$mdgriffith$elm_ui$Element$moveLeft(x));
};
var $rakutentech$r10$R10$Form$Internal$MakerForView$normalizeKey = F2(
	function (args, entity) {
		switch (entity.$) {
			case 'EntityWrappable':
				var entityId = entity.a;
				return _Utils_update(
					args,
					{
						key: A2($rakutentech$r10$R10$Form$Internal$Key$composeKey, args.key, entityId)
					});
			case 'EntityWithBorder':
				var entityId = entity.a;
				return _Utils_update(
					args,
					{
						key: A2($rakutentech$r10$R10$Form$Internal$Key$composeKey, args.key, entityId)
					});
			case 'EntityNormal':
				var entityId = entity.a;
				return _Utils_update(
					args,
					{
						key: A2($rakutentech$r10$R10$Form$Internal$Key$composeKey, args.key, entityId)
					});
			case 'EntityWithTabs':
				var entityId = entity.a;
				return _Utils_update(
					args,
					{
						key: A2($rakutentech$r10$R10$Form$Internal$Key$composeKey, args.key, entityId)
					});
			case 'EntityMulti':
				var entityId = entity.a;
				return _Utils_update(
					args,
					{
						key: A2($rakutentech$r10$R10$Form$Internal$Key$composeKey, args.key, entityId)
					});
			case 'EntityField':
				var fieldConf = entity.a;
				return _Utils_update(
					args,
					{
						key: A2($rakutentech$r10$R10$Form$Internal$Key$composeKey, args.key, fieldConf.id)
					});
			case 'EntityTitle':
				return args;
			default:
				return args;
		}
	});
var $mdgriffith$elm_ui$Element$paddingXY = F2(
	function (x, y) {
		if (_Utils_eq(x, y)) {
			var f = x;
			return A2(
				$mdgriffith$elm_ui$Internal$Model$StyleClass,
				$mdgriffith$elm_ui$Internal$Flag$padding,
				A5(
					$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
					'p-' + $elm$core$String$fromInt(x),
					f,
					f,
					f,
					f));
		} else {
			var yFloat = y;
			var xFloat = x;
			return A2(
				$mdgriffith$elm_ui$Internal$Model$StyleClass,
				$mdgriffith$elm_ui$Internal$Flag$padding,
				A5(
					$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
					'p-' + ($elm$core$String$fromInt(x) + ('-' + $elm$core$String$fromInt(y))),
					yFloat,
					xFloat,
					yFloat,
					xFloat));
		}
	});
var $lucamug$elm_ui_with_context$Element$WithContext$paddingXY = F2(
	function (x, y) {
		return $lucamug$elm_ui_with_context$Element$WithContext$attribute(
			A2($mdgriffith$elm_ui$Element$paddingXY, x, y));
	});
var $rakutentech$r10$R10$Form$Internal$MakerForView$paddingGeneric = A2($lucamug$elm_ui_with_context$Element$WithContext$paddingXY, 20, 25);
var $mdgriffith$elm_ui$Internal$Model$Rotate = F2(
	function (a, b) {
		return {$: 'Rotate', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$rotate = $mdgriffith$elm_ui$Internal$Flag$flag(24);
var $mdgriffith$elm_ui$Element$rotate = function (angle) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$rotate,
		A2(
			$mdgriffith$elm_ui$Internal$Model$Rotate,
			_Utils_Tuple3(0, 0, 1),
			angle));
};
var $lucamug$elm_ui_with_context$Element$WithContext$rotate = function (angle) {
	return $lucamug$elm_ui_with_context$Element$WithContext$attr(
		$mdgriffith$elm_ui$Element$rotate(angle));
};
var $mdgriffith$elm_ui$Element$scrollbars = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.scrollbars);
var $lucamug$elm_ui_with_context$Element$WithContext$scrollbars = $lucamug$elm_ui_with_context$Element$WithContext$attribute($mdgriffith$elm_ui$Element$scrollbars);
var $elm$core$List$singleton = function (value) {
	return _List_fromArray(
		[value]);
};
var $mdgriffith$elm_ui$Element$spacingXY = F2(
	function (x, y) {
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$spacing,
			A3(
				$mdgriffith$elm_ui$Internal$Model$SpacingStyle,
				A2($mdgriffith$elm_ui$Internal$Model$spacingName, x, y),
				x,
				y));
	});
var $lucamug$elm_ui_with_context$Element$WithContext$spacingXY = F2(
	function (x, y) {
		return $lucamug$elm_ui_with_context$Element$WithContext$attribute(
			A2($mdgriffith$elm_ui$Element$spacingXY, x, y));
	});
var $rakutentech$r10$R10$Form$Internal$MakerForView$spacingGeneric = A2($lucamug$elm_ui_with_context$Element$WithContext$spacingXY, 15, 25);
var $rakutentech$r10$R10$FormComponents$Internal$UI$Color$surface = A2(
	$elm$core$Basics$composeR,
	function ($) {
		return $.surface;
	},
	$rakutentech$r10$R10$FormComponents$Internal$UI$Color$fromPaletteColor);
var $rakutentech$r10$R10$Form$Internal$MakerForView$isActive = F2(
	function (key, active) {
		if (active.$ === 'Just') {
			var active_x = active.a;
			return _Utils_eq(
				active_x,
				$rakutentech$r10$R10$Form$Internal$Key$toString(key));
		} else {
			return false;
		}
	});
var $rakutentech$r10$R10$Form$Internal$MakerForView$isFocused = F2(
	function (key, focused) {
		if (focused.$ === 'Just') {
			var focused_x = focused.a;
			return _Utils_eq(
				focused_x,
				$rakutentech$r10$R10$Form$Internal$Key$toString(key));
		} else {
			return false;
		}
	});
var $rakutentech$r10$R10$Form$Internal$Msg$ChangeValue = F4(
	function (a, b, c, d) {
		return {$: 'ChangeValue', a: a, b: b, c: c, d: d};
	});
var $rakutentech$r10$R10$Form$Internal$Msg$GetFocus = function (a) {
	return {$: 'GetFocus', a: a};
};
var $rakutentech$r10$R10$Form$Internal$Msg$LoseFocus = F2(
	function (a, b) {
		return {$: 'LoseFocus', a: a, b: b};
	});
var $rakutentech$r10$R10$Form$Internal$Helpers$boolToString = function (bool) {
	return bool ? 'True' : 'False';
};
var $rakutentech$r10$R10$Form$Internal$FieldState$isValid = function (listValidationMessage) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (validationMessage, acc) {
				if (validationMessage.$ === 'MessageErr') {
					return false;
				} else {
					return acc;
				}
			}),
		true,
		listValidationMessage);
};
var $rakutentech$r10$R10$Form$Internal$MakerForView$maybeValid = function (validation) {
	if (validation.$ === 'NotYetValidated') {
		return $elm$core$Maybe$Nothing;
	} else {
		var listValidationMessage = validation.a;
		return $elm$core$Maybe$Just(
			$rakutentech$r10$R10$Form$Internal$FieldState$isValid(listValidationMessage));
	}
};
var $rakutentech$r10$R10$Form$Internal$Helpers$stringToBool = function (string) {
	return $elm$core$String$toLower(string) === 'true';
};
var $rakutentech$r10$R10$I18n$Normal = {$: 'Normal'};
var $rakutentech$r10$R10$FormComponents$Internal$UI$Color$onPrimary = A2(
	$elm$core$Basics$composeR,
	function ($) {
		return $.onPrimary;
	},
	$rakutentech$r10$R10$FormComponents$Internal$UI$Color$fromPaletteColor);
var $rakutentech$r10$R10$FormComponents$Internal$UI$Color$transparent = $rakutentech$r10$R10$FormComponents$Internal$UI$Color$fromPaletteColor(
	A2($rakutentech$r10$R10$FormComponents$Internal$UI$Palette$withOpacity, 0, $rakutentech$r10$R10$FormComponents$Internal$UI$Palette$black));
var $rakutentech$r10$R10$FormComponents$Internal$UI$Color$borderA = F2(
	function (alpha, palette) {
		return $rakutentech$r10$R10$FormComponents$Internal$UI$Color$fromPaletteColor(
			A2($rakutentech$r10$R10$FormComponents$Internal$UI$Palette$withOpacity, alpha, palette.border));
	});
var $rakutentech$r10$R10$FormComponents$Internal$UI$Color$primaryA = F2(
	function (alpha, palette) {
		return $rakutentech$r10$R10$FormComponents$Internal$UI$Color$fromPaletteColor(
			A2($rakutentech$r10$R10$FormComponents$Internal$UI$Palette$withOpacity, alpha, palette.primary));
	});
var $rakutentech$r10$R10$FormComponents$Internal$UI$getSelectShadowColor = F3(
	function (palette, focused, mouseOver) {
		var alpha = function () {
			var _v0 = _Utils_Tuple2(focused, mouseOver);
			if (_v0.a) {
				if (_v0.b) {
					return 0.21;
				} else {
					return 0.14;
				}
			} else {
				if (_v0.b) {
					return 0.07;
				} else {
					return 0;
				}
			}
		}();
		return A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$primaryA, alpha, palette);
	});
var $rakutentech$r10$R10$FormComponents$Internal$UI$viewSelectShadowCustomSize = F2(
	function (_v0, element) {
		var palette = _v0.palette;
		var focused = _v0.focused;
		var disabled = _v0.disabled;
		var size = _v0.size;
		var value = _v0.value;
		var rounded = _v0.rounded;
		return A2(
			$lucamug$elm_ui_with_context$Element$WithContext$el,
			_Utils_ap(
				_List_Nil,
				_Utils_ap(
					_List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$width(
							$lucamug$elm_ui_with_context$Element$WithContext$px(size.x)),
							$lucamug$elm_ui_with_context$Element$WithContext$height(
							$lucamug$elm_ui_with_context$Element$WithContext$px(size.y)),
							$lucamug$elm_ui_with_context$Element$WithContext$Border$rounded(rounded),
							$rakutentech$r10$R10$Transition$transition('all 0.15s')
						]),
					disabled ? _List_Nil : _List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
							$elm$html$Html$Attributes$class('ripple-primary')),
							$lucamug$elm_ui_with_context$Element$WithContext$Background$color(
							A3($rakutentech$r10$R10$FormComponents$Internal$UI$getSelectShadowColor, palette, focused, false)),
							$lucamug$elm_ui_with_context$Element$WithContext$mouseOver(
							_List_fromArray(
								[
									$lucamug$elm_ui_with_context$Element$WithContext$Background$color(
									A3($rakutentech$r10$R10$FormComponents$Internal$UI$getSelectShadowColor, palette, focused, true)),
									$lucamug$elm_ui_with_context$Element$WithContext$Border$shadow(
									{
										blur: 0,
										color: (value ? $rakutentech$r10$R10$FormComponents$Internal$UI$Color$primary : $rakutentech$r10$R10$FormComponents$Internal$UI$Color$borderA(0.7))(palette),
										offset: _Utils_Tuple2(0, 0),
										size: 2
									})
								]))
						]))),
			element);
	});
var $rakutentech$r10$R10$FormComponents$Internal$Binary$checkboxIcon = F2(
	function (args, value) {
		var checkMark = value ? A3(
			$rakutentech$r10$R10$FormComponents$Internal$UI$icons.check,
			_List_fromArray(
				[$lucamug$elm_ui_with_context$Element$WithContext$centerX, $lucamug$elm_ui_with_context$Element$WithContext$centerY]),
			$rakutentech$r10$R10$FormComponents$Internal$UI$Color$onPrimary(args.palette),
			18) : $lucamug$elm_ui_with_context$Element$WithContext$none;
		var boxBorderAndFill = A2(
			$lucamug$elm_ui_with_context$Element$WithContext$el,
			_Utils_ap(
				_List_fromArray(
					[
						$rakutentech$r10$R10$Transition$transition('all 0.2s '),
						$lucamug$elm_ui_with_context$Element$WithContext$width(
						$lucamug$elm_ui_with_context$Element$WithContext$px(24)),
						$lucamug$elm_ui_with_context$Element$WithContext$height(
						$lucamug$elm_ui_with_context$Element$WithContext$px(24)),
						$lucamug$elm_ui_with_context$Element$WithContext$Border$rounded(3),
						$lucamug$elm_ui_with_context$Element$WithContext$centerY,
						$lucamug$elm_ui_with_context$Element$WithContext$centerX
					]),
				value ? _List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$Background$color(
						$rakutentech$r10$R10$FormComponents$Internal$UI$Color$primary(args.palette)),
						$lucamug$elm_ui_with_context$Element$WithContext$Border$innerShadow(
						{
							blur: 0,
							color: A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$onSurfaceA, 0.25, args.palette),
							offset: _Utils_Tuple2(0, 0),
							size: 0
						})
					]) : _List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$Background$color($rakutentech$r10$R10$FormComponents$Internal$UI$Color$transparent),
						$lucamug$elm_ui_with_context$Element$WithContext$Border$innerShadow(
						{
							blur: 0,
							color: A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$onSurfaceA, 0.25, args.palette),
							offset: _Utils_Tuple2(0, 0),
							size: 2
						})
					])),
			checkMark);
		return A2(
			$rakutentech$r10$R10$FormComponents$Internal$UI$viewSelectShadowCustomSize,
			{
				disabled: args.disabled,
				focused: args.focused,
				palette: args.palette,
				rounded: 4,
				size: {x: 28, y: 28},
				value: value
			},
			boxBorderAndFill);
	});
var $mdgriffith$elm_ui$Internal$Model$MoveY = function (a) {
	return {$: 'MoveY', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$moveY = $mdgriffith$elm_ui$Internal$Flag$flag(26);
var $mdgriffith$elm_ui$Element$moveUp = function (y) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$moveY,
		$mdgriffith$elm_ui$Internal$Model$MoveY(-y));
};
var $lucamug$elm_ui_with_context$Element$WithContext$moveUp = function (y) {
	return $lucamug$elm_ui_with_context$Element$WithContext$attr(
		$mdgriffith$elm_ui$Element$moveUp(y));
};
var $lucamug$elm_ui_with_context$Element$WithContext$Events$onClick = function (msg) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$attribute(
		$mdgriffith$elm_ui$Element$Events$onClick(msg));
};
var $elm$html$Html$Events$onFocus = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'focus',
		$elm$json$Json$Decode$succeed(msg));
};
var $mdgriffith$elm_ui$Element$Events$onFocus = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Events$onFocus);
var $lucamug$elm_ui_with_context$Element$WithContext$Events$onFocus = function (msg) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$attribute(
		$mdgriffith$elm_ui$Element$Events$onFocus(msg));
};
var $elm$html$Html$Events$onBlur = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'blur',
		$elm$json$Json$Decode$succeed(msg));
};
var $mdgriffith$elm_ui$Element$Events$onLoseFocus = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Events$onBlur);
var $lucamug$elm_ui_with_context$Element$WithContext$Events$onLoseFocus = function (msg) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$attribute(
		$mdgriffith$elm_ui$Element$Events$onLoseFocus(msg));
};
var $rakutentech$r10$R10$FormComponents$Internal$UI$keyCode = {backspace: 8, del: 46, down: 40, enter: 13, esc: 27, space: 32, up: 38};
var $elm$html$Html$Events$keyCode = A2($elm$json$Json$Decode$field, 'keyCode', $elm$json$Json$Decode$int);
var $rakutentech$r10$R10$FormComponents$Internal$UI$onKeyPressBatch = function (codesMsg) {
	var codesMsgDict = $elm$core$Dict$fromList(codesMsg);
	return A2(
		$elm$html$Html$Events$preventDefaultOn,
		'keydown',
		A2(
			$elm$json$Json$Decode$andThen,
			function (key) {
				var _v0 = A2($elm$core$Dict$get, key, codesMsgDict);
				if (_v0.$ === 'Just') {
					var msg = _v0.a;
					return $elm$json$Json$Decode$succeed(
						_Utils_Tuple2(msg, true));
				} else {
					return $elm$json$Json$Decode$fail('Not code');
				}
			},
			$elm$html$Html$Events$keyCode));
};
var $rakutentech$r10$R10$FormComponents$Internal$UI$onSelectKey = function (msg) {
	return $rakutentech$r10$R10$FormComponents$Internal$UI$onKeyPressBatch(
		_List_fromArray(
			[
				_Utils_Tuple2($rakutentech$r10$R10$FormComponents$Internal$UI$keyCode.enter, msg),
				_Utils_Tuple2($rakutentech$r10$R10$FormComponents$Internal$UI$keyCode.space, msg)
			]));
};
var $rakutentech$r10$R10$Color$Internal$Derived$Error = {$: 'Error'};
var $rakutentech$r10$R10$Color$Utils$fromColorColor = function (color) {
	var _v0 = $avh4$elm_color$Color$toRgba(color);
	var red = _v0.red;
	var green = _v0.green;
	var blue = _v0.blue;
	var alpha = _v0.alpha;
	return A4($lucamug$elm_ui_with_context$Element$WithContext$rgba, red, green, blue, alpha);
};
var $rakutentech$r10$R10$Color$Internal$Base$Background = {$: 'Background'};
var $rakutentech$r10$R10$Color$Internal$Base$Border = {$: 'Border'};
var $rakutentech$r10$R10$Color$Internal$Base$Error = {$: 'Error'};
var $rakutentech$r10$R10$Color$Internal$Base$FontLink = {$: 'FontLink'};
var $rakutentech$r10$R10$Color$Internal$Primary$LightBlue = {$: 'LightBlue'};
var $rakutentech$r10$R10$Color$Internal$Base$Success = {$: 'Success'};
var $avh4$elm_color$Color$hsla = F4(
	function (hue, sat, light, alpha) {
		var _v0 = _Utils_Tuple3(hue, sat, light);
		var h = _v0.a;
		var s = _v0.b;
		var l = _v0.c;
		var m2 = (l <= 0.5) ? (l * (s + 1)) : ((l + s) - (l * s));
		var m1 = (l * 2) - m2;
		var hueToRgb = function (h__) {
			var h_ = (h__ < 0) ? (h__ + 1) : ((h__ > 1) ? (h__ - 1) : h__);
			return ((h_ * 6) < 1) ? (m1 + (((m2 - m1) * h_) * 6)) : (((h_ * 2) < 1) ? m2 : (((h_ * 3) < 2) ? (m1 + (((m2 - m1) * ((2 / 3) - h_)) * 6)) : m1));
		};
		var b = hueToRgb(h - (1 / 3));
		var g = hueToRgb(h);
		var r = hueToRgb(h + (1 / 3));
		return A4($avh4$elm_color$Color$RgbaSpace, r, g, b, alpha);
	});
var $elm$core$Basics$clamp = F3(
	function (low, high, number) {
		return (_Utils_cmp(number, low) < 0) ? low : ((_Utils_cmp(number, high) > 0) ? high : number);
	});
var $noahzgordon$elm_color_extra$Color$Manipulate$limit = A2($elm$core$Basics$clamp, 0, 1);
var $elm$core$Basics$isNaN = _Basics_isNaN;
var $avh4$elm_color$Color$toHsla = function (_v0) {
	var r = _v0.a;
	var g = _v0.b;
	var b = _v0.c;
	var a = _v0.d;
	var minColor = A2(
		$elm$core$Basics$min,
		r,
		A2($elm$core$Basics$min, g, b));
	var maxColor = A2(
		$elm$core$Basics$max,
		r,
		A2($elm$core$Basics$max, g, b));
	var l = (minColor + maxColor) / 2;
	var s = _Utils_eq(minColor, maxColor) ? 0 : ((l < 0.5) ? ((maxColor - minColor) / (maxColor + minColor)) : ((maxColor - minColor) / ((2 - maxColor) - minColor)));
	var h1 = _Utils_eq(maxColor, r) ? ((g - b) / (maxColor - minColor)) : (_Utils_eq(maxColor, g) ? (2 + ((b - r) / (maxColor - minColor))) : (4 + ((r - g) / (maxColor - minColor))));
	var h2 = h1 * (1 / 6);
	var h3 = $elm$core$Basics$isNaN(h2) ? 0 : ((h2 < 0) ? (h2 + 1) : h2);
	return {alpha: a, hue: h3, lightness: l, saturation: s};
};
var $noahzgordon$elm_color_extra$Color$Manipulate$darken = F2(
	function (offset, cl) {
		var _v0 = $avh4$elm_color$Color$toHsla(cl);
		var hue = _v0.hue;
		var saturation = _v0.saturation;
		var lightness = _v0.lightness;
		var alpha = _v0.alpha;
		return A4(
			$avh4$elm_color$Color$hsla,
			hue,
			saturation,
			$noahzgordon$elm_color_extra$Color$Manipulate$limit(lightness - offset),
			alpha);
	});
var $noahzgordon$elm_color_extra$Color$Manipulate$lighten = F2(
	function (offset, cl) {
		return A2($noahzgordon$elm_color_extra$Color$Manipulate$darken, -offset, cl);
	});
var $noahzgordon$elm_color_extra$Color$Manipulate$saturate = F2(
	function (offset, cl) {
		var _v0 = $avh4$elm_color$Color$toHsla(cl);
		var hue = _v0.hue;
		var saturation = _v0.saturation;
		var lightness = _v0.lightness;
		var alpha = _v0.alpha;
		return A4(
			$avh4$elm_color$Color$hsla,
			hue,
			$noahzgordon$elm_color_extra$Color$Manipulate$limit(saturation + offset),
			lightness,
			alpha);
	});
var $noahzgordon$elm_color_extra$Color$Manipulate$desaturate = F2(
	function (offset, cl) {
		return A2($noahzgordon$elm_color_extra$Color$Manipulate$saturate, -offset, cl);
	});
var $elm$core$Result$andThen = F2(
	function (callback, result) {
		if (result.$ === 'Ok') {
			var value = result.a;
			return callback(value);
		} else {
			var msg = result.a;
			return $elm$core$Result$Err(msg);
		}
	});
var $elm$regex$Regex$findAtMost = _Regex_findAtMost;
var $elm$core$String$fromList = _String_fromList;
var $elm$core$Result$fromMaybe = F2(
	function (err, maybe) {
		if (maybe.$ === 'Just') {
			var v = maybe.a;
			return $elm$core$Result$Ok(v);
		} else {
			return $elm$core$Result$Err(err);
		}
	});
var $elm$core$Result$map = F2(
	function (func, ra) {
		if (ra.$ === 'Ok') {
			var a = ra.a;
			return $elm$core$Result$Ok(
				func(a));
		} else {
			var e = ra.a;
			return $elm$core$Result$Err(e);
		}
	});
var $fredcy$elm_parseint$ParseInt$InvalidRadix = function (a) {
	return {$: 'InvalidRadix', a: a};
};
var $fredcy$elm_parseint$ParseInt$InvalidChar = function (a) {
	return {$: 'InvalidChar', a: a};
};
var $fredcy$elm_parseint$ParseInt$OutOfRange = function (a) {
	return {$: 'OutOfRange', a: a};
};
var $fredcy$elm_parseint$ParseInt$charOffset = F2(
	function (basis, c) {
		return $elm$core$Char$toCode(c) - $elm$core$Char$toCode(basis);
	});
var $fredcy$elm_parseint$ParseInt$isBetween = F3(
	function (lower, upper, c) {
		var ci = $elm$core$Char$toCode(c);
		return (_Utils_cmp(
			$elm$core$Char$toCode(lower),
			ci) < 1) && (_Utils_cmp(
			ci,
			$elm$core$Char$toCode(upper)) < 1);
	});
var $fredcy$elm_parseint$ParseInt$intFromChar = F2(
	function (radix, c) {
		var validInt = function (i) {
			return (_Utils_cmp(i, radix) < 0) ? $elm$core$Result$Ok(i) : $elm$core$Result$Err(
				$fredcy$elm_parseint$ParseInt$OutOfRange(c));
		};
		var toInt = A3(
			$fredcy$elm_parseint$ParseInt$isBetween,
			_Utils_chr('0'),
			_Utils_chr('9'),
			c) ? $elm$core$Result$Ok(
			A2(
				$fredcy$elm_parseint$ParseInt$charOffset,
				_Utils_chr('0'),
				c)) : (A3(
			$fredcy$elm_parseint$ParseInt$isBetween,
			_Utils_chr('a'),
			_Utils_chr('z'),
			c) ? $elm$core$Result$Ok(
			10 + A2(
				$fredcy$elm_parseint$ParseInt$charOffset,
				_Utils_chr('a'),
				c)) : (A3(
			$fredcy$elm_parseint$ParseInt$isBetween,
			_Utils_chr('A'),
			_Utils_chr('Z'),
			c) ? $elm$core$Result$Ok(
			10 + A2(
				$fredcy$elm_parseint$ParseInt$charOffset,
				_Utils_chr('A'),
				c)) : $elm$core$Result$Err(
			$fredcy$elm_parseint$ParseInt$InvalidChar(c))));
		return A2($elm$core$Result$andThen, validInt, toInt);
	});
var $fredcy$elm_parseint$ParseInt$parseIntR = F2(
	function (radix, rstring) {
		var _v0 = $elm$core$String$uncons(rstring);
		if (_v0.$ === 'Nothing') {
			return $elm$core$Result$Ok(0);
		} else {
			var _v1 = _v0.a;
			var c = _v1.a;
			var rest = _v1.b;
			return A2(
				$elm$core$Result$andThen,
				function (ci) {
					return A2(
						$elm$core$Result$andThen,
						function (ri) {
							return $elm$core$Result$Ok(ci + (ri * radix));
						},
						A2($fredcy$elm_parseint$ParseInt$parseIntR, radix, rest));
				},
				A2($fredcy$elm_parseint$ParseInt$intFromChar, radix, c));
		}
	});
var $elm$core$String$reverse = _String_reverse;
var $fredcy$elm_parseint$ParseInt$parseIntRadix = F2(
	function (radix, string) {
		return ((2 <= radix) && (radix <= 36)) ? A2(
			$fredcy$elm_parseint$ParseInt$parseIntR,
			radix,
			$elm$core$String$reverse(string)) : $elm$core$Result$Err(
			$fredcy$elm_parseint$ParseInt$InvalidRadix(radix));
	});
var $fredcy$elm_parseint$ParseInt$parseIntHex = $fredcy$elm_parseint$ParseInt$parseIntRadix(16);
var $avh4$elm_color$Color$rgb = F3(
	function (r, g, b) {
		return A4($avh4$elm_color$Color$RgbaSpace, r, g, b, 1.0);
	});
var $avh4$elm_color$Color$rgba = F4(
	function (r, g, b, a) {
		return A4($avh4$elm_color$Color$RgbaSpace, r, g, b, a);
	});
var $elm$core$Basics$pow = _Basics_pow;
var $noahzgordon$elm_color_extra$Color$Convert$roundToPlaces = F2(
	function (places, number) {
		var multiplier = A2($elm$core$Basics$pow, 10, places);
		return $elm$core$Basics$round(number * multiplier) / multiplier;
	});
var $elm$core$String$foldr = _String_foldr;
var $elm$core$String$toList = function (string) {
	return A3($elm$core$String$foldr, $elm$core$List$cons, _List_Nil, string);
};
var $noahzgordon$elm_color_extra$Color$Convert$hexToColor = function () {
	var pattern = '' + ('^' + ('#?' + ('(?:' + ('(?:([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2}))' + ('|' + ('(?:([a-f\\d])([a-f\\d])([a-f\\d]))' + ('|' + ('(?:([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2}))' + ('|' + ('(?:([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d]))' + (')' + '$')))))))))));
	var extend = function (token) {
		var _v6 = $elm$core$String$toList(token);
		if (_v6.b && (!_v6.b.b)) {
			var token_ = _v6.a;
			return $elm$core$String$fromList(
				_List_fromArray(
					[token_, token_]));
		} else {
			return token;
		}
	};
	return A2(
		$elm$core$Basics$composeR,
		$elm$core$String$toLower,
		A2(
			$elm$core$Basics$composeR,
			function (str) {
				return A2(
					$elm$core$Maybe$map,
					function (regex) {
						return A3($elm$regex$Regex$findAtMost, 1, regex, str);
					},
					$elm$regex$Regex$fromString(pattern));
			},
			A2(
				$elm$core$Basics$composeR,
				$elm$core$Maybe$andThen($elm$core$List$head),
				A2(
					$elm$core$Basics$composeR,
					$elm$core$Maybe$map(
						function ($) {
							return $.submatches;
						}),
					A2(
						$elm$core$Basics$composeR,
						$elm$core$Maybe$map(
							$elm$core$List$filterMap($elm$core$Basics$identity)),
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Result$fromMaybe('Parsing hex regex failed'),
							$elm$core$Result$andThen(
								function (colors) {
									var _v0 = A2(
										$elm$core$List$map,
										A2(
											$elm$core$Basics$composeR,
											extend,
											A2(
												$elm$core$Basics$composeR,
												$fredcy$elm_parseint$ParseInt$parseIntHex,
												$elm$core$Result$map($elm$core$Basics$toFloat))),
										colors);
									_v0$2:
									while (true) {
										if (((((_v0.b && (_v0.a.$ === 'Ok')) && _v0.b.b) && (_v0.b.a.$ === 'Ok')) && _v0.b.b.b) && (_v0.b.b.a.$ === 'Ok')) {
											if (_v0.b.b.b.b) {
												if ((_v0.b.b.b.a.$ === 'Ok') && (!_v0.b.b.b.b.b)) {
													var r = _v0.a.a;
													var _v1 = _v0.b;
													var g = _v1.a.a;
													var _v2 = _v1.b;
													var b = _v2.a.a;
													var _v3 = _v2.b;
													var a = _v3.a.a;
													return $elm$core$Result$Ok(
														A4(
															$avh4$elm_color$Color$rgba,
															r / 255,
															g / 255,
															b / 255,
															A2($noahzgordon$elm_color_extra$Color$Convert$roundToPlaces, 2, a / 255)));
												} else {
													break _v0$2;
												}
											} else {
												var r = _v0.a.a;
												var _v4 = _v0.b;
												var g = _v4.a.a;
												var _v5 = _v4.b;
												var b = _v5.a.a;
												return $elm$core$Result$Ok(
													A3($avh4$elm_color$Color$rgb, r / 255, g / 255, b / 255));
											}
										} else {
											break _v0$2;
										}
									}
									return $elm$core$Result$Err('Parsing ints from hex failed');
								})))))));
}();
var $elm$core$Result$withDefault = F2(
	function (def, result) {
		if (result.$ === 'Ok') {
			var a = result.a;
			return a;
		} else {
			return def;
		}
	});
var $rakutentech$r10$R10$Color$Utils$fromHexToColorColor = function (hex) {
	var resultColor = $noahzgordon$elm_color_extra$Color$Convert$hexToColor(hex);
	var color = A2(
		$elm$core$Result$withDefault,
		$avh4$elm_color$Color$fromRgba(
			{alpha: 0, blue: 0, green: 0, red: 0}),
		resultColor);
	return color;
};
var $noahzgordon$elm_color_extra$Color$Manipulate$scale = F3(
	function (max, scaleAmount, value) {
		var clampedValue = A3($elm$core$Basics$clamp, 0, max, value);
		var clampedScale = A3($elm$core$Basics$clamp, -1.0, 1.0, scaleAmount);
		var diff = (clampedScale > 0) ? (max - clampedValue) : clampedValue;
		return clampedValue + (diff * clampedScale);
	});
var $noahzgordon$elm_color_extra$Color$Manipulate$scaleHsl = F2(
	function (scaleBy, color) {
		var hsl = $avh4$elm_color$Color$toHsla(color);
		var _v0 = scaleBy;
		var saturationScale = _v0.saturationScale;
		var lightnessScale = _v0.lightnessScale;
		var alphaScale = _v0.alphaScale;
		return A4(
			$avh4$elm_color$Color$hsla,
			hsl.hue,
			A3($noahzgordon$elm_color_extra$Color$Manipulate$scale, 1.0, saturationScale, hsl.saturation),
			A3($noahzgordon$elm_color_extra$Color$Manipulate$scale, 1.0, lightnessScale, hsl.lightness),
			A3($noahzgordon$elm_color_extra$Color$Manipulate$scale, 1.0, alphaScale, hsl.alpha));
	});
var $rakutentech$r10$R10$Color$Utils$fromLightToDark = function (color) {
	return A2(
		$noahzgordon$elm_color_extra$Color$Manipulate$scaleHsl,
		{alphaScale: 0, lightnessScale: -0.04, saturationScale: -0.17},
		color);
};
var $rakutentech$r10$R10$Color$Internal$Base$toColorLight_ = function (color) {
	switch (color.$) {
		case 'Font':
			return _Utils_Tuple2(
				$rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#000000'),
				'Hard coded as #000000');
		case 'FontReversed':
			return _Utils_Tuple2(
				$rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#ffffff'),
				'Hard coded as #ffffff');
		case 'FontLink':
			return _Utils_Tuple2(
				$rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#00a0f0'),
				'Hard coded as #00a0f0');
		case 'Error':
			return _Utils_Tuple2(
				$rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#df0101'),
				'Hard coded as #df0101');
		case 'Success':
			return _Utils_Tuple2(
				$rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#047205'),
				'Hard coded as #047205');
		case 'Background':
			return _Utils_Tuple2(
				$rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#ebebeb'),
				'Hard coded as #f0f0f0');
		default:
			return _Utils_Tuple2(
				$rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#999999'),
				'Hard coded as #999999');
	}
};
var $rakutentech$r10$R10$Color$Internal$Base$toColorDark_ = function (color) {
	switch (color.$) {
		case 'Font':
			return _Utils_Tuple2(
				$rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#ffffff'),
				'Hard coded as #ffffff');
		case 'FontReversed':
			return _Utils_Tuple2(
				$rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#000000'),
				'Hard coded as #000000');
		case 'FontLink':
			return _Utils_Tuple2(
				$rakutentech$r10$R10$Color$Utils$fromLightToDark(
					$rakutentech$r10$R10$Color$Internal$Base$toColorLight_(color).a),
				'Converted from light mode using `R10.Color.Utils.fromLightToDark`');
		case 'Error':
			return _Utils_Tuple2(
				A2(
					$noahzgordon$elm_color_extra$Color$Manipulate$desaturate,
					0.4,
					A2(
						$noahzgordon$elm_color_extra$Color$Manipulate$lighten,
						0.1,
						$rakutentech$r10$R10$Color$Internal$Base$toColorLight_(color).a)),
				'Same as light mode but lighten (0.1) and desaturate (0.4)');
		case 'Success':
			return _Utils_Tuple2(
				A2(
					$noahzgordon$elm_color_extra$Color$Manipulate$desaturate,
					0.4,
					A2(
						$noahzgordon$elm_color_extra$Color$Manipulate$lighten,
						0.15,
						$rakutentech$r10$R10$Color$Internal$Base$toColorLight_(color).a)),
				'Same as light mode but lighten (0.15) and desaturate (0.4)');
		case 'Background':
			return _Utils_Tuple2(
				$rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#121212'),
				'Hard coded as #121212');
		default:
			return _Utils_Tuple2(
				$rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#999999'),
				'Hard coded as #cccccc');
	}
};
var $rakutentech$r10$R10$Color$Internal$Base$toColor = function (theme) {
	var _v0 = theme.mode;
	if (_v0.$ === 'Light') {
		return function (c) {
			return $rakutentech$r10$R10$Color$Internal$Base$toColorLight_(c).a;
		};
	} else {
		return function (c) {
			return $rakutentech$r10$R10$Color$Internal$Base$toColorDark_(c).a;
		};
	}
};
var $rakutentech$r10$R10$Color$Internal$Derived$backgroundButtonPrimaryDisabled_ = function (theme) {
	return function (color) {
		var _v0 = theme.mode;
		if (_v0.$ === 'Dark') {
			return A2($noahzgordon$elm_color_extra$Color$Manipulate$lighten, 0.2, color);
		} else {
			return A2($noahzgordon$elm_color_extra$Color$Manipulate$darken, 0.2, color);
		}
	}(
		A2($rakutentech$r10$R10$Color$Internal$Base$toColor, theme, $rakutentech$r10$R10$Color$Internal$Base$Background));
};
var $rakutentech$r10$R10$Color$Internal$Base$FontReversed = {$: 'FontReversed'};
var $rakutentech$r10$R10$Color$Utils$setAlpha = F2(
	function (newAlpha, color) {
		var c = $avh4$elm_color$Color$toRgba(color);
		return $avh4$elm_color$Color$fromRgba(
			{alpha: newAlpha, blue: c.blue, green: c.green, red: c.red});
	});
var $rakutentech$r10$R10$Color$Internal$Derived$highEmphasisReversed_ = function (theme) {
	return A2(
		$rakutentech$r10$R10$Color$Utils$setAlpha,
		0.87,
		A2($rakutentech$r10$R10$Color$Internal$Base$toColor, theme, $rakutentech$r10$R10$Color$Internal$Base$FontReversed));
};
var $rakutentech$r10$R10$Color$Internal$Base$Font = {$: 'Font'};
var $rakutentech$r10$R10$Color$Internal$Derived$highEmphasis_ = function (theme) {
	return A2(
		$rakutentech$r10$R10$Color$Utils$setAlpha,
		0.87,
		A2($rakutentech$r10$R10$Color$Internal$Base$toColor, theme, $rakutentech$r10$R10$Color$Internal$Base$Font));
};
var $noahzgordon$elm_color_extra$Color$Accessibility$luminance = function (cl) {
	var f = function (intensity) {
		return (intensity <= 0.03928) ? (intensity / 12.92) : A2($elm$core$Basics$pow, (intensity + 0.055) / 1.055, 2.4);
	};
	var _v0 = function (a) {
		return _Utils_Tuple3(
			f(a.red),
			f(a.green),
			f(a.blue));
	}(
		$avh4$elm_color$Color$toRgba(cl));
	var r = _v0.a;
	var g = _v0.b;
	var b = _v0.c;
	return ((0.2126 * r) + (0.7152 * g)) + (0.0722 * b);
};
var $noahzgordon$elm_color_extra$Color$Accessibility$contrastRatio = F2(
	function (c1, c2) {
		var b = $noahzgordon$elm_color_extra$Color$Accessibility$luminance(c2) + 0.05;
		var a = $noahzgordon$elm_color_extra$Color$Accessibility$luminance(c1) + 0.05;
		return (_Utils_cmp(a, b) > 0) ? (a / b) : (b / a);
	});
var $elm$core$List$sortWith = _List_sortWith;
var $noahzgordon$elm_color_extra$Color$Accessibility$maximumContrast = F2(
	function (base, options) {
		var compareContrast = F2(
			function (c1, c2) {
				return A2(
					$elm$core$Basics$compare,
					A2($noahzgordon$elm_color_extra$Color$Accessibility$contrastRatio, base, c2),
					A2($noahzgordon$elm_color_extra$Color$Accessibility$contrastRatio, base, c1));
			});
		return $elm$core$List$head(
			A2($elm$core$List$sortWith, compareContrast, options));
	});
var $rakutentech$r10$R10$Color$Internal$Derived$maximumContrast = F2(
	function (color, listColor) {
		return A2(
			$noahzgordon$elm_color_extra$Color$Accessibility$maximumContrast,
			A2($noahzgordon$elm_color_extra$Color$Manipulate$darken, 0.16, color),
			listColor);
	});
var $rakutentech$r10$R10$Color$Internal$Derived$mediumEmphasisReversed_ = function (theme) {
	return A2(
		$rakutentech$r10$R10$Color$Utils$setAlpha,
		0.6,
		A2($rakutentech$r10$R10$Color$Internal$Base$toColor, theme, $rakutentech$r10$R10$Color$Internal$Base$FontReversed));
};
var $rakutentech$r10$R10$Color$Internal$Derived$mediumEmphasis_ = function (theme) {
	return A2(
		$rakutentech$r10$R10$Color$Utils$setAlpha,
		0.6,
		A2($rakutentech$r10$R10$Color$Internal$Base$toColor, theme, $rakutentech$r10$R10$Color$Internal$Base$Font));
};
var $rakutentech$r10$R10$Color$Internal$Primary$toColorLight_ = function (color) {
	switch (color.$) {
		case 'CrimsonRed':
			return _Utils_Tuple2(
				$rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#bf0000'),
				'Hard coded as #bf0000');
		case 'Orange':
			return _Utils_Tuple2(
				$rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#f59600'),
				'Hard coded as #f59600');
		case 'Yellow':
			return _Utils_Tuple2(
				$rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#ffcc00'),
				'Hard coded as #ffcc00');
		case 'Green':
			return _Utils_Tuple2(
				$rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#00b900'),
				'Hard coded as #00b900');
		case 'LightBlue':
			return _Utils_Tuple2(
				$rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#00a0f0'),
				'Hard coded as #00a0f0');
		case 'Blue':
			return _Utils_Tuple2(
				$rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#002896'),
				'Hard coded as #002896');
		case 'Purple':
			return _Utils_Tuple2(
				$rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#7d00be'),
				'Hard coded as #7d00be');
		case 'Pink':
			return _Utils_Tuple2(
				$rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#ff008c'),
				'Hard coded as #ff008c');
		default:
			return _Utils_Tuple2(
				$rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#117bb4'),
				'Hard coded as #117bb4');
	}
};
var $rakutentech$r10$R10$Color$Internal$Primary$toColorDark_ = function (color) {
	switch (color.$) {
		case 'CrimsonRed':
			return _Utils_Tuple2(
				$rakutentech$r10$R10$Color$Utils$fromLightToDark(
					$rakutentech$r10$R10$Color$Internal$Primary$toColorLight_(color).a),
				'Converted from light mode using `R10.Color.Utils.fromLightToDark`');
		case 'Orange':
			return _Utils_Tuple2(
				$rakutentech$r10$R10$Color$Utils$fromLightToDark(
					$rakutentech$r10$R10$Color$Internal$Primary$toColorLight_(color).a),
				'Converted from light mode using `R10.Color.Utils.fromLightToDark`');
		case 'Yellow':
			return _Utils_Tuple2(
				$rakutentech$r10$R10$Color$Utils$fromLightToDark(
					$rakutentech$r10$R10$Color$Internal$Primary$toColorLight_(color).a),
				'Converted from light mode using `R10.Color.Utils.fromLightToDark`');
		case 'Green':
			return _Utils_Tuple2(
				$rakutentech$r10$R10$Color$Utils$fromLightToDark(
					$rakutentech$r10$R10$Color$Internal$Primary$toColorLight_(color).a),
				'Converted from light mode using `R10.Color.Utils.fromLightToDark`');
		case 'LightBlue':
			return _Utils_Tuple2(
				$rakutentech$r10$R10$Color$Utils$fromLightToDark(
					$rakutentech$r10$R10$Color$Internal$Primary$toColorLight_(color).a),
				'Converted from light mode using `R10.Color.Utils.fromLightToDark`');
		case 'Blue':
			return _Utils_Tuple2(
				$rakutentech$r10$R10$Color$Utils$fromLightToDark(
					$rakutentech$r10$R10$Color$Internal$Primary$toColorLight_(color).a),
				'Converted from light mode using `R10.Color.Utils.fromLightToDark`');
		case 'Purple':
			return _Utils_Tuple2(
				$rakutentech$r10$R10$Color$Utils$fromLightToDark(
					$rakutentech$r10$R10$Color$Internal$Primary$toColorLight_(color).a),
				'Converted from light mode using `R10.Color.Utils.fromLightToDark`');
		case 'Pink':
			return _Utils_Tuple2(
				$rakutentech$r10$R10$Color$Utils$fromLightToDark(
					$rakutentech$r10$R10$Color$Internal$Primary$toColorLight_(color).a),
				'Converted from light mode using `R10.Color.Utils.fromLightToDark`');
		default:
			return _Utils_Tuple2(
				$rakutentech$r10$R10$Color$Utils$fromLightToDark(
					$rakutentech$r10$R10$Color$Internal$Primary$toColorLight_(color).a),
				'Converted from light mode using `R10.Color.Utils.fromLightToDark`');
	}
};
var $rakutentech$r10$R10$Color$Internal$Primary$toColor = function (theme) {
	var _v0 = theme.mode;
	if (_v0.$ === 'Light') {
		return function (c) {
			return $rakutentech$r10$R10$Color$Internal$Primary$toColorLight_(c).a;
		};
	} else {
		return function (c) {
			return $rakutentech$r10$R10$Color$Internal$Primary$toColorDark_(c).a;
		};
	}
};
var $rakutentech$r10$R10$Color$Internal$Derived$primary_ = function (theme) {
	return A2($rakutentech$r10$R10$Color$Internal$Primary$toColor, theme, theme.primaryColor);
};
var $rakutentech$r10$R10$Color$Internal$Derived$toColor_ = F2(
	function (theme, colorDerived) {
		switch (colorDerived.$) {
			case 'Success':
				return _Utils_Tuple2(
					A2($rakutentech$r10$R10$Color$Internal$Base$toColor, theme, $rakutentech$r10$R10$Color$Internal$Base$Success),
					'same as base color `Succes`');
			case 'Logo':
				return _Utils_Tuple2(
					function () {
						var _v1 = theme.mode;
						if (_v1.$ === 'Light') {
							return $rakutentech$r10$R10$Color$Internal$Derived$primary_(theme);
						} else {
							return $rakutentech$r10$R10$Color$Internal$Derived$highEmphasis_(theme);
						}
					}(),
					'Logo color is the same as primary color in light mode and `highEmphasis` in dark mode');
			case 'Primary':
				return _Utils_Tuple2(
					$rakutentech$r10$R10$Color$Internal$Derived$primary_(theme),
					'Just the primary color');
			case 'PrimaryVariant':
				return _Utils_Tuple2(
					A2(
						$noahzgordon$elm_color_extra$Color$Manipulate$scaleHsl,
						{alphaScale: -0.6, lightnessScale: 0, saturationScale: -0.4},
						$rakutentech$r10$R10$Color$Internal$Derived$primary_(theme)),
					'Like the primary, but more subtle');
			case 'FontMediumEmphasis':
				return _Utils_Tuple2(
					$rakutentech$r10$R10$Color$Internal$Derived$mediumEmphasis_(theme),
					'A color used for fonts when they carry a less important message. It is made changing the alpha channel to 0.6 so the result is that is going to be more similar to the background.');
			case 'FontHighEmphasis':
				return _Utils_Tuple2(
					$rakutentech$r10$R10$Color$Internal$Derived$highEmphasis_(theme),
					'The default color for text. It is made changing the alpha channel to 0.87.');
			case 'FontLink':
				return _Utils_Tuple2(
					A2($rakutentech$r10$R10$Color$Internal$Base$toColor, theme, $rakutentech$r10$R10$Color$Internal$Base$FontLink),
					'The same as the base `FontLink` color');
			case 'Error':
				return _Utils_Tuple2(
					A2($rakutentech$r10$R10$Color$Internal$Base$toColor, theme, $rakutentech$r10$R10$Color$Internal$Base$Error),
					'The same as the base `Error` color');
			case 'Debugger':
				return _Utils_Tuple2(
					A2($rakutentech$r10$R10$Color$Internal$Primary$toColor, theme, $rakutentech$r10$R10$Color$Internal$Primary$LightBlue),
					'The same as the base `LightBlue` color');
			case 'FontMediumEmphasisWithMaximumContrast':
				var goesOn = $rakutentech$r10$R10$Color$Internal$Derived$primary_(theme);
				var color2 = $rakutentech$r10$R10$Color$Internal$Derived$mediumEmphasisReversed_(theme);
				var color1 = $rakutentech$r10$R10$Color$Internal$Derived$mediumEmphasis_(theme);
				var colorFont = A2(
					$elm$core$Maybe$withDefault,
					color1,
					A2(
						$rakutentech$r10$R10$Color$Internal$Derived$maximumContrast,
						goesOn,
						_List_fromArray(
							[color1, color2])));
				return _Utils_Tuple2(colorFont, 'A `mediumEmphasis` color for less important text that goes above a primary color');
			case 'FontHighEmphasisWithMaximumContrast':
				var goesOn = $rakutentech$r10$R10$Color$Internal$Derived$primary_(theme);
				var color2 = $rakutentech$r10$R10$Color$Internal$Derived$highEmphasisReversed_(theme);
				var color1 = $rakutentech$r10$R10$Color$Internal$Derived$highEmphasis_(theme);
				var colorFont = A2(
					$elm$core$Maybe$withDefault,
					color1,
					A2(
						$rakutentech$r10$R10$Color$Internal$Derived$maximumContrast,
						goesOn,
						_List_fromArray(
							[color1, color2])));
				return _Utils_Tuple2(colorFont, 'A `highEmphasis` color for regular text that goes above a primary color');
			case 'Border':
				return _Utils_Tuple2(
					A2($rakutentech$r10$R10$Color$Internal$Base$toColor, theme, $rakutentech$r10$R10$Color$Internal$Base$Border),
					'Color for borders are hard coded');
			case 'BackgroundPhoneDropdown':
				return _Utils_Tuple2(
					function () {
						var _v2 = theme.mode;
						if (_v2.$ === 'Light') {
							return A2($rakutentech$r10$R10$Color$Internal$Base$toColor, theme, $rakutentech$r10$R10$Color$Internal$Base$Background);
						} else {
							return A2(
								$noahzgordon$elm_color_extra$Color$Manipulate$lighten,
								0.05,
								A2($rakutentech$r10$R10$Color$Internal$Base$toColor, theme, $rakutentech$r10$R10$Color$Internal$Base$Background));
						}
					}(),
					'A special background for the phone dropdown. On `light` mode is the same as the base `Background` but in `dark` mode is lighter 0.05 compared to the base `Background` so that it became visible.');
			case 'Background':
				return _Utils_Tuple2(
					A2($rakutentech$r10$R10$Color$Internal$Base$toColor, theme, $rakutentech$r10$R10$Color$Internal$Base$Background),
					'The same as the base `Background`.');
			case 'Surface':
				return _Utils_Tuple2(
					function () {
						var _v3 = theme.mode;
						if (_v3.$ === 'Light') {
							return A2(
								$noahzgordon$elm_color_extra$Color$Manipulate$lighten,
								0.05,
								A2($rakutentech$r10$R10$Color$Internal$Base$toColor, theme, $rakutentech$r10$R10$Color$Internal$Base$Background));
						} else {
							return A2(
								$noahzgordon$elm_color_extra$Color$Manipulate$lighten,
								0.05,
								A2($rakutentech$r10$R10$Color$Internal$Base$toColor, theme, $rakutentech$r10$R10$Color$Internal$Base$Background));
						}
					}(),
					'A color for surfaces above the background, 1dp (See https://material.io/design/color/dark-theme.html#anatomy)');
			case 'Surface2dp':
				return _Utils_Tuple2(
					function () {
						var _v4 = theme.mode;
						if (_v4.$ === 'Light') {
							return A2(
								$noahzgordon$elm_color_extra$Color$Manipulate$lighten,
								0.1,
								A2($rakutentech$r10$R10$Color$Internal$Base$toColor, theme, $rakutentech$r10$R10$Color$Internal$Base$Background));
						} else {
							return A2(
								$noahzgordon$elm_color_extra$Color$Manipulate$lighten,
								0.1,
								A2($rakutentech$r10$R10$Color$Internal$Base$toColor, theme, $rakutentech$r10$R10$Color$Internal$Base$Background));
						}
					}(),
					'A color for surfaces above the background, 2dp (See https://material.io/design/color/dark-theme.html#anatomy)');
			case 'BackgroundInputFieldText':
				return _Utils_Tuple2(
					function () {
						var _v5 = theme.mode;
						if (_v5.$ === 'Light') {
							return A2(
								$noahzgordon$elm_color_extra$Color$Manipulate$darken,
								0.05,
								A2($rakutentech$r10$R10$Color$Internal$Base$toColor, theme, $rakutentech$r10$R10$Color$Internal$Base$Background));
						} else {
							return A2(
								$noahzgordon$elm_color_extra$Color$Manipulate$lighten,
								0.05,
								A2($rakutentech$r10$R10$Color$Internal$Base$toColor, theme, $rakutentech$r10$R10$Color$Internal$Base$Background));
						}
					}(),
					'A special background color for input fields. In `light` mode is sligthly darken than normal background. In `dark` mode is sligthly lighten than normal background.');
			case 'BackgroundButtonPrimaryOver':
				return _Utils_Tuple2(
					A2(
						$noahzgordon$elm_color_extra$Color$Manipulate$scaleHsl,
						{alphaScale: 0, lightnessScale: 0.17, saturationScale: -0.15},
						A2($rakutentech$r10$R10$Color$Internal$Primary$toColor, theme, theme.primaryColor)),
					'The mouse-over color for the primary button obtained adding a `scaleHsl` transformation to the primary color.');
			case 'BackgroundButtonPrimaryDisabledOver':
				return _Utils_Tuple2(
					A2(
						$noahzgordon$elm_color_extra$Color$Manipulate$scaleHsl,
						{alphaScale: 0, lightnessScale: 0.2, saturationScale: 0},
						$rakutentech$r10$R10$Color$Internal$Derived$backgroundButtonPrimaryDisabled_(theme)),
					'The mouse-over color for the disabled primary button obtained adding a `scaleHsl` transformation to the primary color that has been already transformed to change it to disabled.');
			case 'BackgroundButtonPrimaryDisabled':
				return _Utils_Tuple2(
					$rakutentech$r10$R10$Color$Internal$Derived$backgroundButtonPrimaryDisabled_(theme),
					'The background color of disabled primary button obtained. This is made making it ligher on Light mode and darker on Dark mode.');
			case 'BackgroundButtonPrimary':
				return _Utils_Tuple2(
					A2($rakutentech$r10$R10$Color$Internal$Primary$toColor, theme, theme.primaryColor),
					'Just the primary color, extracted from the `theme`.');
			default:
				return _Utils_Tuple2(
					function (color) {
						var _v6 = theme.mode;
						if (_v6.$ === 'Dark') {
							return A2($noahzgordon$elm_color_extra$Color$Manipulate$lighten, 0.07, color);
						} else {
							return A2($noahzgordon$elm_color_extra$Color$Manipulate$lighten, 0.03, color);
						}
					}(
						A2($rakutentech$r10$R10$Color$Internal$Base$toColor, theme, $rakutentech$r10$R10$Color$Internal$Base$Background)),
					'Background of minors buttons based on the normal background color. Just making it lighter in Dark mode and darker in Light mode');
		}
	});
var $rakutentech$r10$R10$Color$Internal$Derived$toColor = F2(
	function (theme, colorDerived) {
		return A2($rakutentech$r10$R10$Color$Internal$Derived$toColor_, theme, colorDerived).a;
	});
var $rakutentech$r10$R10$Color$Svg$error = function (theme) {
	return $rakutentech$r10$R10$Color$Utils$fromColorColor(
		A2($rakutentech$r10$R10$Color$Internal$Derived$toColor, theme, $rakutentech$r10$R10$Color$Internal$Derived$Error));
};
var $elm$svg$Svg$Attributes$clipRule = _VirtualDom_attribute('clip-rule');
var $rakutentech$r10$R10$Svg$Others$externalLink = F3(
	function (attrs, cl, size) {
		return A4(
			$rakutentech$r10$R10$Svg$Utils$wrapperWithViewbox,
			attrs,
			'0 0 16 16',
			size,
			_List_fromArray(
				[
					A2(
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$fill(
							$rakutentech$r10$R10$Color$Utils$toCssRgba(cl)),
							$elm$svg$Svg$Attributes$fillRule('evenodd'),
							$elm$svg$Svg$Attributes$d('M11 13H2V6.5h1v-1H2a1 1 0 00-1 1V13c0 .6.4 1 1 1h9c.6 0 1-.4 1-1v-1.5h-1V13z'),
							$elm$svg$Svg$Attributes$clipRule('evenodd')
						]),
					_List_Nil),
					A2(
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$fill(
							$rakutentech$r10$R10$Color$Utils$toCssRgba(cl)),
							$elm$svg$Svg$Attributes$fillRule('evenodd'),
							$elm$svg$Svg$Attributes$d('M5 4h9V3H5v1zm0 5.5h9V5H5v4.5zM14 2H5a1 1 0 00-1 1v6.5c0 .6.4 1 1 1h9c.6 0 1-.4 1-1V3c0-.6-.4-1-1-1z'),
							$elm$svg$Svg$Attributes$clipRule('evenodd')
						]),
					_List_Nil)
				]));
	});
var $rakutentech$r10$R10$I18n$isInternalLink = F2(
	function (current, target) {
		return A2($elm$core$String$startsWith, '#', target) ? true : A2(
			$elm$core$Maybe$withDefault,
			false,
			A2(
				$elm$core$Maybe$map,
				function (target_) {
					return _Utils_eq(target_.host, current.host) && (_Utils_eq(target_.port_, current.port_) && (_Utils_eq(target_.path, current.path) && (_Utils_eq(target_.protocol, current.protocol) && _Utils_eq(target_.query, current.query))));
				},
				$elm$url$Url$fromString(target)));
	});
var $mdgriffith$elm_ui$Element$link = F2(
	function (attrs, _v0) {
		var url = _v0.url;
		var label = _v0.label;
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$NodeName('a'),
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Attr(
					$elm$html$Html$Attributes$href(url)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Internal$Model$Attr(
						$elm$html$Html$Attributes$rel('noopener noreferrer')),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentCenterX + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.link)))),
								attrs))))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var $lucamug$elm_ui_with_context$Element$WithContext$link = A2(
	$lucamug$elm_ui_with_context$Element$WithContext$Internal$wrapAttrs,
	$mdgriffith$elm_ui$Element$link,
	F2(
		function (context, _v0) {
			var url = _v0.url;
			var label = _v0.label;
			return {
				label: A2($lucamug$elm_ui_with_context$Element$WithContext$Internal$run, context, label),
				url: url
			};
		}));
var $rakutentech$r10$R10$Color$Internal$Derived$FontLink = {$: 'FontLink'};
var $rakutentech$r10$R10$Color$AttrsFont$link = $lucamug$elm_ui_with_context$Element$WithContext$withContextAttribute(
	function (c) {
		return $lucamug$elm_ui_with_context$Element$WithContext$Font$color(
			$rakutentech$r10$R10$Color$Utils$fromColorColor(
				A2($rakutentech$r10$R10$Color$Internal$Derived$toColor, c.theme, $rakutentech$r10$R10$Color$Internal$Derived$FontLink)));
	});
var $rakutentech$r10$R10$Color$Svg$link = function (theme) {
	return $rakutentech$r10$R10$Color$Utils$fromColorColor(
		A2($rakutentech$r10$R10$Color$Internal$Derived$toColor, theme, $rakutentech$r10$R10$Color$Internal$Derived$FontLink));
};
var $lucamug$elm_ui_with_context$Element$WithContext$withContextDecoration = function (f) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$Attribute(
		function (context) {
			return A2(
				$lucamug$elm_ui_with_context$Element$WithContext$Internal$runAttr,
				context,
				f(context));
		});
};
var $rakutentech$r10$R10$Color$AttrsFont$linkOver = $lucamug$elm_ui_with_context$Element$WithContext$withContextDecoration(
	function (c) {
		return $lucamug$elm_ui_with_context$Element$WithContext$Font$color(
			$rakutentech$r10$R10$Color$Utils$fromColorColor(
				A2(
					$noahzgordon$elm_color_extra$Color$Manipulate$scaleHsl,
					{alphaScale: 0, lightnessScale: -0.2, saturationScale: 0.3},
					A2($rakutentech$r10$R10$Color$Internal$Derived$toColor, c.theme, $rakutentech$r10$R10$Color$Internal$Derived$FontLink))));
	});
var $mdgriffith$elm_ui$Element$Font$underline = $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.underline);
var $lucamug$elm_ui_with_context$Element$WithContext$Font$underline = $lucamug$elm_ui_with_context$Element$WithContext$Internal$attribute($mdgriffith$elm_ui$Element$Font$underline);
var $lucamug$elm_ui_with_context$Element$WithContext$withContext = function (f) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$Element(
		function (context) {
			return A2(
				$lucamug$elm_ui_with_context$Element$WithContext$Internal$run,
				context,
				f(context));
		});
};
var $rakutentech$r10$R10$I18n$specialMarkdown = F2(
	function (_v0, translationAsString) {
		var tagReplacer = _v0.tagReplacer;
		var renderingMode = _v0.renderingMode;
		var textGenerator = function (string_) {
			return $lucamug$elm_ui_with_context$Element$WithContext$text(string_);
		};
		var elementLabelGenerator = function (string_) {
			return $lucamug$elm_ui_with_context$Element$WithContext$text(string_);
		};
		var linkGenerator = F2(
			function (label, tag) {
				return $lucamug$elm_ui_with_context$Element$WithContext$withContext(
					function (c) {
						var newTag = function (tag_) {
							return _Utils_eq(tag_, '{' + (tag + '}')) ? tag : tag_;
						}(
							A2(tagReplacer, c, '{' + (tag + '}')));
						var isInternal = A2($rakutentech$r10$R10$I18n$isInternalLink, c.currentUrl, newTag);
						var focusedOrOver = function () {
							if (renderingMode.$ === 'Normal') {
								return _List_fromArray(
									[$rakutentech$r10$R10$Color$AttrsFont$linkOver]);
							} else {
								return _List_Nil;
							}
						}();
						if (tag === 'fake_link') {
							if (renderingMode.$ === 'Normal') {
								return A2(
									$lucamug$elm_ui_with_context$Element$WithContext$el,
									_List_fromArray(
										[$rakutentech$r10$R10$Color$AttrsFont$link]),
									$lucamug$elm_ui_with_context$Element$WithContext$text(label));
							} else {
								return A2(
									$lucamug$elm_ui_with_context$Element$WithContext$el,
									_List_fromArray(
										[$lucamug$elm_ui_with_context$Element$WithContext$Font$underline]),
									$lucamug$elm_ui_with_context$Element$WithContext$text(label));
							}
						} else {
							return A2(
								$lucamug$elm_ui_with_context$Element$WithContext$row,
								_List_fromArray(
									[
										$lucamug$elm_ui_with_context$Element$WithContext$spacing(5)
									]),
								_Utils_ap(
									_List_fromArray(
										[
											A2(
											isInternal ? $lucamug$elm_ui_with_context$Element$WithContext$link : $lucamug$elm_ui_with_context$Element$WithContext$newTabLink,
											_Utils_ap(
												_List_Nil,
												_Utils_ap(
													function () {
														if (renderingMode.$ === 'Normal') {
															return _List_fromArray(
																[$rakutentech$r10$R10$Color$AttrsFont$link]);
														} else {
															return _List_fromArray(
																[$lucamug$elm_ui_with_context$Element$WithContext$Font$underline]);
														}
													}(),
													_List_fromArray(
														[
															$lucamug$elm_ui_with_context$Element$WithContext$focused(focusedOrOver),
															$lucamug$elm_ui_with_context$Element$WithContext$mouseOver(focusedOrOver),
															$rakutentech$r10$R10$Transition$transition('all 0.15s')
														]))),
											{
												label: elementLabelGenerator(label),
												url: newTag
											})
										]),
									isInternal ? _List_Nil : _List_fromArray(
										[
											A3(
											$rakutentech$r10$R10$Svg$Others$externalLink,
											_List_fromArray(
												[
													$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
													A2($elm$html$Html$Attributes$style, 'vertical-align', 'middle')),
													$lucamug$elm_ui_with_context$Element$WithContext$paddingEach(
													{bottom: 0, left: 0, right: 3, top: 0})
												]),
											function () {
												if (renderingMode.$ === 'Normal') {
													return $rakutentech$r10$R10$Color$Svg$link;
												} else {
													return $rakutentech$r10$R10$Color$Svg$error;
												}
											}()(c.theme),
											16)
										])));
						}
					});
			});
		var boldGenerator = function (string_) {
			return A2(
				$lucamug$elm_ui_with_context$Element$WithContext$el,
				_List_fromArray(
					[$lucamug$elm_ui_with_context$Element$WithContext$Font$bold]),
				$lucamug$elm_ui_with_context$Element$WithContext$text(string_));
		};
		return A4($rakutentech$r10$R10$SimpleMarkdown$markdown, boldGenerator, textGenerator, linkGenerator, translationAsString);
	});
var $rakutentech$r10$R10$I18n$applySubstitutions = F2(
	function (_v0, translationAsString) {
		var tagReplacer = _v0.tagReplacer;
		var context = _v0.context;
		var renderingMode = _v0.renderingMode;
		return A2(
			$rakutentech$r10$R10$I18n$specialMarkdown,
			{renderingMode: renderingMode, tagReplacer: tagReplacer},
			A2(tagReplacer, context, translationAsString));
	});
var $rakutentech$r10$R10$Color$AttrsFont$error = $lucamug$elm_ui_with_context$Element$WithContext$withContextAttribute(
	function (c) {
		return $lucamug$elm_ui_with_context$Element$WithContext$Font$color(
			$rakutentech$r10$R10$Color$Utils$fromColorColor(
				A2($rakutentech$r10$R10$Color$Internal$Derived$toColor, c.theme, $rakutentech$r10$R10$Color$Internal$Derived$Error)));
	});
var $rakutentech$r10$R10$FontSize$normalAsInt = 16;
var $rakutentech$r10$R10$FontSize$normal = $lucamug$elm_ui_with_context$Element$WithContext$Font$size($rakutentech$r10$R10$FontSize$normalAsInt);
var $rakutentech$r10$R10$Paragraph$spacingNormal = 10;
var $rakutentech$r10$R10$Paragraph$normal = F2(
	function (attrs, children) {
		return A2(
			$lucamug$elm_ui_with_context$Element$WithContext$paragraph,
			_Utils_ap(
				_List_fromArray(
					[
						$rakutentech$r10$R10$FontSize$normal,
						$lucamug$elm_ui_with_context$Element$WithContext$spacing($rakutentech$r10$R10$Paragraph$spacingNormal)
					]),
				attrs),
			children);
	});
var $rakutentech$r10$R10$FontSize$small = $lucamug$elm_ui_with_context$Element$WithContext$Font$size(14);
var $rakutentech$r10$R10$Paragraph$small = F2(
	function (attrs, children) {
		return A2(
			$lucamug$elm_ui_with_context$Element$WithContext$paragraph,
			_Utils_ap(
				_List_fromArray(
					[
						$rakutentech$r10$R10$FontSize$small,
						$lucamug$elm_ui_with_context$Element$WithContext$spacing($rakutentech$r10$R10$Paragraph$spacingNormal - 3)
					]),
				attrs),
			children);
	});
var $rakutentech$r10$R10$I18n$paragraphFromString = F2(
	function (attrs, _v0) {
		var renderingMode = _v0.renderingMode;
		var tagReplacer = _v0.tagReplacer;
		var string = _v0.string;
		return $lucamug$elm_ui_with_context$Element$WithContext$withContext(
			function (c) {
				if (renderingMode.$ === 'Normal') {
					return A2(
						$rakutentech$r10$R10$Paragraph$normal,
						attrs,
						A2(
							$rakutentech$r10$R10$I18n$applySubstitutions,
							{context: c, renderingMode: renderingMode, tagReplacer: tagReplacer},
							string));
				} else {
					return A2(
						$rakutentech$r10$R10$Paragraph$small,
						_Utils_ap(
							_List_fromArray(
								[
									$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
									$elm$html$Html$Attributes$id('ie-flex-fix-320')),
									$rakutentech$r10$R10$Color$AttrsFont$error
								]),
							attrs),
						A2(
							$rakutentech$r10$R10$I18n$applySubstitutions,
							{context: c, renderingMode: renderingMode, tagReplacer: tagReplacer},
							string));
				}
			});
	});
var $lucamug$elm_ui_with_context$Element$WithContext$pointer = $lucamug$elm_ui_with_context$Element$WithContext$attribute($mdgriffith$elm_ui$Element$pointer);
var $rakutentech$r10$R10$FormComponents$Internal$Binary$tagReplacer = F2(
	function (c, string) {
		return A3(
			$elm$core$String$replace,
			'{cookie}',
			c.cookiePolicyLink,
			A3(
				$elm$core$String$replace,
				'{tac}',
				c.termsAndConditionsLink,
				A3($elm$core$String$replace, '{privacy}', c.privacyPolicyLink, string)));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Binary$viewBinaryCheckbox = F2(
	function (attrs, args) {
		var elementThatReceiveClicks = _List_fromArray(
			[
				$lucamug$elm_ui_with_context$Element$WithContext$Events$onClick(args.msgOnClick),
				$lucamug$elm_ui_with_context$Element$WithContext$pointer,
				$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
				$elm$html$Html$Attributes$tabindex(0)),
				$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
				$rakutentech$r10$R10$FormComponents$Internal$UI$onSelectKey(args.msgOnClick)),
				$lucamug$elm_ui_with_context$Element$WithContext$Events$onFocus(args.msgOnFocus),
				$lucamug$elm_ui_with_context$Element$WithContext$Events$onLoseFocus(args.msgOnLoseFocus)
			]);
		return A2(
			$lucamug$elm_ui_with_context$Element$WithContext$el,
			_Utils_ap(
				_List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$spacing(26)
					]),
				_Utils_ap(
					args.disabled ? _List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$alpha(0.38)
						]) : (args.clickableLabel ? elementThatReceiveClicks : _List_Nil),
					attrs)),
			A2(
				$lucamug$elm_ui_with_context$Element$WithContext$row,
				_List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill)
					]),
				_List_fromArray(
					[
						A2(
						$lucamug$elm_ui_with_context$Element$WithContext$el,
						_Utils_ap(
							_List_fromArray(
								[
									$lucamug$elm_ui_with_context$Element$WithContext$moveUp(2),
									$lucamug$elm_ui_with_context$Element$WithContext$alignTop
								]),
							args.clickableLabel ? _List_Nil : elementThatReceiveClicks),
						A2($rakutentech$r10$R10$FormComponents$Internal$Binary$checkboxIcon, args, args.value)),
						A2(
						$rakutentech$r10$R10$I18n$paragraphFromString,
						_List_fromArray(
							[
								$rakutentech$r10$R10$FontSize$small,
								$lucamug$elm_ui_with_context$Element$WithContext$paddingEach(
								{bottom: 0, left: 12, right: 0, top: 0})
							]),
						{renderingMode: $rakutentech$r10$R10$I18n$Normal, string: args.label, tagReplacer: $rakutentech$r10$R10$FormComponents$Internal$Binary$tagReplacer})
					])));
	});
var $mdgriffith$elm_ui$Element$moveRight = function (x) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$moveX,
		$mdgriffith$elm_ui$Internal$Model$MoveX(x));
};
var $lucamug$elm_ui_with_context$Element$WithContext$moveRight = function (x) {
	return $lucamug$elm_ui_with_context$Element$WithContext$attr(
		$mdgriffith$elm_ui$Element$moveRight(x));
};
var $rakutentech$r10$R10$FormComponents$Internal$UI$Color$primaryVariant = A2(
	$elm$core$Basics$composeR,
	function ($) {
		return $.primaryVariant;
	},
	$rakutentech$r10$R10$FormComponents$Internal$UI$Color$fromPaletteColor);
var $rakutentech$r10$R10$FormComponents$Internal$UI$viewSelectShadow = function (_v0) {
	var palette = _v0.palette;
	var focused = _v0.focused;
	var disabled = _v0.disabled;
	var value = _v0.value;
	return $rakutentech$r10$R10$FormComponents$Internal$UI$viewSelectShadowCustomSize(
		{
			disabled: disabled,
			focused: focused,
			palette: palette,
			rounded: 40,
			size: {x: 40, y: 40},
			value: value
		});
};
var $rakutentech$r10$R10$FormComponents$Internal$Binary$viewBinarySwitch = F2(
	function (attrs, args) {
		var _v0 = args.value ? {thumbColor: $rakutentech$r10$R10$FormComponents$Internal$UI$Color$primary, trackColor: $rakutentech$r10$R10$FormComponents$Internal$UI$Color$primaryVariant} : {
			thumbColor: $rakutentech$r10$R10$FormComponents$Internal$UI$Color$surface,
			trackColor: $rakutentech$r10$R10$FormComponents$Internal$UI$Color$onSurfaceA(0.37)
		};
		var trackColor = _v0.trackColor;
		var thumbColor = _v0.thumbColor;
		var thumb = A2(
			$lucamug$elm_ui_with_context$Element$WithContext$el,
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$height(
					$lucamug$elm_ui_with_context$Element$WithContext$px(20)),
					$lucamug$elm_ui_with_context$Element$WithContext$width(
					$lucamug$elm_ui_with_context$Element$WithContext$px(20)),
					$lucamug$elm_ui_with_context$Element$WithContext$Border$rounded(24),
					$rakutentech$r10$R10$Transition$transition('all 0.14s '),
					$lucamug$elm_ui_with_context$Element$WithContext$centerY,
					$lucamug$elm_ui_with_context$Element$WithContext$centerX,
					$lucamug$elm_ui_with_context$Element$WithContext$Background$color(
					thumbColor(args.palette)),
					$lucamug$elm_ui_with_context$Element$WithContext$Border$shadow(
					{
						blur: 2,
						color: trackColor(args.palette),
						offset: _Utils_Tuple2(0, 1),
						size: 1
					})
				]),
			$lucamug$elm_ui_with_context$Element$WithContext$none);
		var track = A2(
			$lucamug$elm_ui_with_context$Element$WithContext$el,
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$centerX,
					$lucamug$elm_ui_with_context$Element$WithContext$centerY,
					$lucamug$elm_ui_with_context$Element$WithContext$Border$rounded(36),
					$lucamug$elm_ui_with_context$Element$WithContext$width(
					$lucamug$elm_ui_with_context$Element$WithContext$px(36)),
					$lucamug$elm_ui_with_context$Element$WithContext$height(
					$lucamug$elm_ui_with_context$Element$WithContext$px(14)),
					$lucamug$elm_ui_with_context$Element$WithContext$Background$color(
					trackColor(args.palette))
				]),
			$lucamug$elm_ui_with_context$Element$WithContext$none);
		var _switch = A2(
			$lucamug$elm_ui_with_context$Element$WithContext$el,
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$width(
					$lucamug$elm_ui_with_context$Element$WithContext$px(56)),
					$lucamug$elm_ui_with_context$Element$WithContext$height(
					$lucamug$elm_ui_with_context$Element$WithContext$px(40)),
					$lucamug$elm_ui_with_context$Element$WithContext$inFront(
					A2(
						$lucamug$elm_ui_with_context$Element$WithContext$el,
						_List_fromArray(
							[
								$rakutentech$r10$R10$Transition$transition('all 0.13s'),
								args.value ? $lucamug$elm_ui_with_context$Element$WithContext$moveRight(16) : $lucamug$elm_ui_with_context$Element$WithContext$moveRight(0)
							]),
						A2($rakutentech$r10$R10$FormComponents$Internal$UI$viewSelectShadow, args, thumb))),
					$lucamug$elm_ui_with_context$Element$WithContext$behindContent(track)
				]),
			$lucamug$elm_ui_with_context$Element$WithContext$none);
		return A2(
			$lucamug$elm_ui_with_context$Element$WithContext$row,
			_Utils_ap(
				_List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$spacing(15),
						$lucamug$elm_ui_with_context$Element$WithContext$height(
						$lucamug$elm_ui_with_context$Element$WithContext$px(20))
					]),
				_Utils_ap(
					args.disabled ? _List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$alpha(0.38)
						]) : _List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$Events$onClick(args.msgOnClick),
							$lucamug$elm_ui_with_context$Element$WithContext$pointer,
							$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
							$elm$html$Html$Attributes$tabindex(0)),
							$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
							$rakutentech$r10$R10$FormComponents$Internal$UI$onSelectKey(args.msgOnClick)),
							$lucamug$elm_ui_with_context$Element$WithContext$Events$onFocus(args.msgOnFocus),
							$lucamug$elm_ui_with_context$Element$WithContext$Events$onLoseFocus(args.msgOnLoseFocus)
						]),
					attrs)),
			_List_fromArray(
				[
					A2(
					$lucamug$elm_ui_with_context$Element$WithContext$paragraph,
					_List_Nil,
					_List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$text(args.label)
						])),
					_switch
				]));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Binary$view = F2(
	function (attrs, args) {
		return A2(
			$lucamug$elm_ui_with_context$Element$WithContext$column,
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
					$lucamug$elm_ui_with_context$Element$WithContext$centerY
				]),
			_List_fromArray(
				[
					function () {
					var _v0 = args.typeBinary;
					if (_v0.$ === 'BinarySwitch') {
						return A2($rakutentech$r10$R10$FormComponents$Internal$Binary$viewBinarySwitch, attrs, args);
					} else {
						return A2($rakutentech$r10$R10$FormComponents$Internal$Binary$viewBinaryCheckbox, attrs, args);
					}
				}(),
					A3(
					$rakutentech$r10$R10$FormComponents$Internal$UI$viewHelperText,
					args.palette,
					_List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$Font$size(14),
							$lucamug$elm_ui_with_context$Element$WithContext$alpha(0.5),
							$lucamug$elm_ui_with_context$Element$WithContext$paddingEach(
							{bottom: 0, left: 0, right: 0, top: $rakutentech$r10$R10$FormComponents$Internal$UI$genericSpacing})
						]),
					args.helperText)
				]));
	});
var $rakutentech$r10$R10$Form$Internal$MakerForView$viewBinary = F3(
	function (args, typeBinary, formConf) {
		var value = $rakutentech$r10$R10$Form$Internal$Helpers$stringToBool(args.fieldState.value);
		var msgOnClick = A4(
			$rakutentech$r10$R10$Form$Internal$Msg$ChangeValue,
			args.key,
			args.fieldConf,
			formConf,
			$rakutentech$r10$R10$Form$Internal$Helpers$boolToString(!value));
		return A2(
			$rakutentech$r10$R10$FormComponents$Internal$Binary$view,
			_List_Nil,
			{
				clickableLabel: args.fieldConf.clickableLabel,
				disabled: args.fieldState.disabled,
				focused: args.focused,
				helperText: args.fieldConf.helperText,
				label: args.fieldConf.label,
				maybeValid: $rakutentech$r10$R10$Form$Internal$MakerForView$maybeValid(args.fieldState.validation),
				msgOnChange: function (_v0) {
					return msgOnClick;
				},
				msgOnClick: msgOnClick,
				msgOnFocus: $rakutentech$r10$R10$Form$Internal$Msg$GetFocus(args.key),
				msgOnLoseFocus: A2($rakutentech$r10$R10$Form$Internal$Msg$LoseFocus, args.key, args.fieldConf),
				palette: args.palette,
				typeBinary: typeBinary,
				value: value
			});
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnOptionSelect = function (a) {
	return {$: 'OnOptionSelect', a: a};
};
var $rakutentech$r10$R10$FormComponents$Internal$Single$normalizeString = A2($elm$core$Basics$composeR, $elm$core$String$toLower, $elm$core$String$trim);
var $rakutentech$r10$R10$FormComponents$Internal$Single$defaultSearchFn = F2(
	function (search, opt) {
		return A2(
			$elm$core$String$contains,
			$rakutentech$r10$R10$FormComponents$Internal$Single$normalizeString(search),
			$rakutentech$r10$R10$FormComponents$Internal$Single$normalizeString(opt.label));
	});
var $rakutentech$r10$R10$SimpleMarkdown$elementLinkGenerator = F2(
	function (linkLabel, url) {
		return A2(
			$lucamug$elm_ui_with_context$Element$WithContext$newTabLink,
			_List_Nil,
			{
				label: $rakutentech$r10$R10$SimpleMarkdown$elementLabelGenerator(linkLabel),
				url: url
			});
	});
var $rakutentech$r10$R10$SimpleMarkdown$elementMarkdown = function (string) {
	return A4($rakutentech$r10$R10$SimpleMarkdown$markdown, $rakutentech$r10$R10$SimpleMarkdown$elementBoldGenerator, $rakutentech$r10$R10$SimpleMarkdown$elementTextGenerator, $rakutentech$r10$R10$SimpleMarkdown$elementLinkGenerator, string);
};
var $elm_community$string_extra$String$Extra$replaceSlice = F4(
	function (substitution, start, end, string) {
		return _Utils_ap(
			A3($elm$core$String$slice, 0, start, string),
			_Utils_ap(
				substitution,
				A3(
					$elm$core$String$slice,
					end,
					$elm$core$String$length(string),
					string)));
	});
var $elm_community$string_extra$String$Extra$insertAt = F3(
	function (insert, pos, string) {
		return A4($elm_community$string_extra$String$Extra$replaceSlice, insert, pos, pos, string);
	});
var $rakutentech$r10$R10$FormComponents$Internal$Utils$stringInsertAtMulti = F3(
	function (insert, positions, string) {
		var insertLen = $elm$core$String$length(insert);
		var insertAtOffset = F2(
			function (pos, _v0) {
				var str = _v0.str;
				var offset = _v0.offset;
				return {
					offset: offset + insertLen,
					str: A3($elm_community$string_extra$String$Extra$insertAt, insert, pos + offset, str)
				};
			});
		return A3(
			$elm$core$List$foldl,
			insertAtOffset,
			{offset: 0, str: string},
			positions).str;
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$insertBold = F2(
	function (indexes, string) {
		return A3($rakutentech$r10$R10$FormComponents$Internal$Utils$stringInsertAtMulti, '**', indexes, string);
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$defaultViewOptionEl = F2(
	function (_v0, _v1) {
		var search = _v0.search;
		var msgOnSelect = _v0.msgOnSelect;
		var label = _v1.label;
		var value = _v1.value;
		var insertPositions = A2(
			$elm$core$List$concatMap,
			function (idx) {
				return _List_fromArray(
					[
						idx,
						idx + $elm$core$String$length(search)
					]);
			},
			A2(
				$elm$core$String$indexes,
				$rakutentech$r10$R10$FormComponents$Internal$Single$normalizeString(search),
				$rakutentech$r10$R10$FormComponents$Internal$Single$normalizeString(label)));
		var withBold = $elm$core$List$isEmpty(insertPositions) ? label : A2($rakutentech$r10$R10$FormComponents$Internal$Single$insertBold, insertPositions, label);
		return A2(
			$lucamug$elm_ui_with_context$Element$WithContext$row,
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
					$lucamug$elm_ui_with_context$Element$WithContext$height($lucamug$elm_ui_with_context$Element$WithContext$fill),
					$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
					A2($elm$html$Html$Attributes$style, 'z-index', '0')),
					$lucamug$elm_ui_with_context$Element$WithContext$Events$onClick(
					msgOnSelect(value)),
					$lucamug$elm_ui_with_context$Element$WithContext$pointer,
					A2($lucamug$elm_ui_with_context$Element$WithContext$paddingXY, 12, 0),
					$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
					A2($elm$html$Html$Attributes$style, 'mask-image', 'linear-gradient(right, rgba(255,255,0,0), rgba(255,255,0, 1) 16px)')),
					$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
					A2($elm$html$Html$Attributes$style, '-webkit-mask-image', '-webkit-linear-gradient(right, rgba(255,255,0,0) 10px, rgba(255,255,0, 1) 16px)'))
				]),
			$rakutentech$r10$R10$SimpleMarkdown$elementMarkdown(withBold));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnArrowDown = function (a) {
	return {$: 'OnArrowDown', a: a};
};
var $rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnArrowUp = function (a) {
	return {$: 'OnArrowUp', a: a};
};
var $rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnDelBackspace = {$: 'OnDelBackspace'};
var $rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnEsc = {$: 'OnEsc'};
var $rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnFocus = function (a) {
	return {$: 'OnFocus', a: a};
};
var $rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnLoseFocus = function (a) {
	return {$: 'OnLoseFocus', a: a};
};
var $rakutentech$r10$R10$FormComponents$Internal$Single$Common$dropdownContainerId = function (key) {
	return 'single-dropdown-container-' + key;
};
var $rakutentech$r10$R10$FormComponents$Internal$Single$Common$isAnyOptionLabelMatched = function (_v0) {
	var value = _v0.value;
	var fieldOptions = _v0.fieldOptions;
	return A2(
		$elm$core$List$any,
		function (option) {
			return _Utils_eq(option.label, value);
		},
		fieldOptions);
};
var $rakutentech$r10$R10$FormComponents$Internal$Single$Common$filterBySearch = F2(
	function (search, _v0) {
		var searchFn = _v0.searchFn;
		var fieldOptions = _v0.fieldOptions;
		return ($elm$core$String$isEmpty(search) || $rakutentech$r10$R10$FormComponents$Internal$Single$Common$isAnyOptionLabelMatched(
			{fieldOptions: fieldOptions, value: search})) ? fieldOptions : A2(
			$elm$core$List$filter,
			searchFn(search),
			fieldOptions);
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnInputClick = function (a) {
	return {$: 'OnInputClick', a: a};
};
var $rakutentech$r10$R10$FormComponents$Internal$Single$Combobox$getMsgOnInputClick = F3(
	function (model, args, filteredOptions) {
		var selectedOptionIndex = A2(
			$elm$core$Maybe$withDefault,
			-1,
			A2($rakutentech$r10$R10$FormComponents$Internal$Single$Update$getOptionIndex, filteredOptions, model.value));
		var selectedY = A4(
			$rakutentech$r10$R10$FormComponents$Internal$Single$Update$getOptionY,
			model.scroll,
			args,
			selectedOptionIndex,
			$elm$core$List$length(filteredOptions));
		return $rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnInputClick(
			{key: args.key, selectedY: selectedY});
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$Common$isAnyOptionValueMatched = function (_v0) {
	var value = _v0.value;
	var fieldOptions = _v0.fieldOptions;
	return A2(
		$elm$core$List$any,
		function (option) {
			return _Utils_eq(option.value, value);
		},
		fieldOptions);
};
var $rakutentech$r10$R10$FormComponents$Internal$Single$Common$getSelectedOrFirst = F3(
	function (fieldOptions, value, select) {
		return (!$elm$core$String$isEmpty(select)) ? select : ($rakutentech$r10$R10$FormComponents$Internal$Single$Common$isAnyOptionValueMatched(
			{fieldOptions: fieldOptions, value: value}) ? value : A2(
			$elm$core$Maybe$withDefault,
			'',
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.value;
				},
				$elm$core$List$head(fieldOptions))));
	});
var $elm$json$Json$Decode$lazy = function (thunk) {
	return A2(
		$elm$json$Json$Decode$andThen,
		thunk,
		$elm$json$Json$Decode$succeed(_Utils_Tuple0));
};
var $rakutentech$r10$R10$FormComponents$Internal$Utils$FocusOut$isOutsideDropdown = function (dropdownId) {
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$json$Json$Decode$andThen,
				function (id) {
					return _Utils_eq(dropdownId, id) ? $elm$json$Json$Decode$succeed(false) : $elm$json$Json$Decode$fail('check parent node');
				},
				A2($elm$json$Json$Decode$field, 'id', $elm$json$Json$Decode$string)),
				$elm$json$Json$Decode$lazy(
				function (_v0) {
					return A2(
						$elm$json$Json$Decode$field,
						'parentNode',
						$rakutentech$r10$R10$FormComponents$Internal$Utils$FocusOut$isOutsideDropdown(dropdownId));
				}),
				$elm$json$Json$Decode$succeed(true)
			]));
};
var $rakutentech$r10$R10$FormComponents$Internal$Utils$FocusOut$outsideTarget = F3(
	function (targetName, dropdownId, closeMsg) {
		return A2(
			$elm$json$Json$Decode$andThen,
			function (isOutside) {
				return isOutside ? $elm$json$Json$Decode$succeed(closeMsg) : $elm$json$Json$Decode$fail('inside dropdown');
			},
			A2(
				$elm$json$Json$Decode$field,
				targetName,
				$rakutentech$r10$R10$FormComponents$Internal$Utils$FocusOut$isOutsideDropdown(dropdownId)));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Utils$FocusOut$onFocusOut = F2(
	function (containerId, closeMsg) {
		return A3($rakutentech$r10$R10$FormComponents$Internal$Utils$FocusOut$outsideTarget, 'relatedTarget', containerId, closeMsg);
	});
var $elm_community$list_extra$List$Extra$find = F2(
	function (predicate, list) {
		find:
		while (true) {
			if (!list.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var first = list.a;
				var rest = list.b;
				if (predicate(first)) {
					return $elm$core$Maybe$Just(first);
				} else {
					var $temp$predicate = predicate,
						$temp$list = rest;
					predicate = $temp$predicate;
					list = $temp$list;
					continue find;
				}
			}
		}
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$Combobox$optionsLabelOrSearchValue = F2(
	function (value, allFieldOptions) {
		return A2(
			$elm$core$Maybe$withDefault,
			'',
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.label;
				},
				A2(
					$elm_community$list_extra$List$Extra$find,
					function (opt) {
						return _Utils_eq(opt.value, value);
					},
					allFieldOptions)));
	});
var $rakutentech$r10$R10$FormComponents$Internal$TextColors$getLabelColor = function (_v0) {
	var focused = _v0.focused;
	var style = _v0.style;
	var maybeValid = _v0.maybeValid;
	var displayValidation = _v0.displayValidation;
	var palette = _v0.palette;
	if (style.$ === 'Filled') {
		var _v2 = _Utils_Tuple3(displayValidation, maybeValid, focused);
		if (((_v2.a && (_v2.b.$ === 'Just')) && (!_v2.b.a)) && _v2.c) {
			return $rakutentech$r10$R10$FormComponents$Internal$UI$Color$label(palette);
		} else {
			return $rakutentech$r10$R10$FormComponents$Internal$UI$Color$label(palette);
		}
	} else {
		var _v3 = _Utils_Tuple3(displayValidation, maybeValid, focused);
		if (_v3.a && (_v3.b.$ === 'Just')) {
			if (_v3.b.a) {
				return $rakutentech$r10$R10$FormComponents$Internal$UI$Color$success(palette);
			} else {
				return $rakutentech$r10$R10$FormComponents$Internal$UI$Color$error(palette);
			}
		} else {
			return $rakutentech$r10$R10$FormComponents$Internal$UI$Color$label(palette);
		}
	}
};
var $rakutentech$r10$R10$FormComponents$Internal$UI$Const$inputTextFontSize = $rakutentech$r10$R10$FontSize$normalAsInt;
var $mdgriffith$elm_ui$Element$moveDown = function (y) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$moveY,
		$mdgriffith$elm_ui$Internal$Model$MoveY(y));
};
var $lucamug$elm_ui_with_context$Element$WithContext$moveDown = function (y) {
	return $lucamug$elm_ui_with_context$Element$WithContext$attr(
		$mdgriffith$elm_ui$Element$moveDown(y));
};
var $rakutentech$r10$R10$FormComponents$Internal$UI$floatingLabel = function (args) {
	var requiredEl = function () {
		var _v4 = args.requiredLabel;
		if (_v4.$ === 'Just') {
			var required = _v4.a;
			return A2(
				$lucamug$elm_ui_with_context$Element$WithContext$el,
				_List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$alpha(0.7)
					]),
				$lucamug$elm_ui_with_context$Element$WithContext$text(required));
		} else {
			return $lucamug$elm_ui_with_context$Element$WithContext$none;
		}
	}();
	var notchClearance = function () {
		var _v3 = args.style;
		if (_v3.$ === 'Filled') {
			return 0;
		} else {
			return 6;
		}
	}();
	var labelIsAbove = args.focused || (($elm$core$String$length(args.value) > 0) || args.floatingLabelAlwaysUp);
	var labelAboveAttrs = function () {
		if (labelIsAbove) {
			var _v2 = args.style;
			if (_v2.$ === 'Filled') {
				return _List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$moveUp(28 - 16),
						$lucamug$elm_ui_with_context$Element$WithContext$moveRight(0)
					]);
			} else {
				return _List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$moveUp(23 - 16),
						$lucamug$elm_ui_with_context$Element$WithContext$Font$size(14),
						$lucamug$elm_ui_with_context$Element$WithContext$moveRight(0)
					]);
			}
		} else {
			return _List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$moveUp(0 - 16),
					$lucamug$elm_ui_with_context$Element$WithContext$Font$size($rakutentech$r10$R10$FormComponents$Internal$UI$Const$inputTextFontSize)
				]);
		}
	}();
	var labelEl = A2(
		$lucamug$elm_ui_with_context$Element$WithContext$row,
		_Utils_ap(
			_List_fromArray(
				[
					$rakutentech$r10$R10$Transition$transition('all 0.15s'),
					$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
					A2($elm$html$Html$Attributes$style, 'pointer-events', 'none')),
					$lucamug$elm_ui_with_context$Element$WithContext$spacing(6),
					A2($lucamug$elm_ui_with_context$Element$WithContext$paddingXY, 8, 0),
					$lucamug$elm_ui_with_context$Element$WithContext$centerY
				]),
			_Utils_ap(
				labelIsAbove ? _List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$Background$color(
						$rakutentech$r10$R10$FormComponents$Internal$UI$Color$surface(args.palette))
					]) : _List_Nil,
				labelAboveAttrs)),
		_List_fromArray(
			[
				$lucamug$elm_ui_with_context$Element$WithContext$text(args.label),
				requiredEl
			]));
	return ($elm$core$String$isEmpty(args.label) && _Utils_eq(args.requiredLabel, $elm$core$Maybe$Nothing)) ? $lucamug$elm_ui_with_context$Element$WithContext$none : A2(
		$lucamug$elm_ui_with_context$Element$WithContext$el,
		_List_fromArray(
			[
				$lucamug$elm_ui_with_context$Element$WithContext$height(
				$lucamug$elm_ui_with_context$Element$WithContext$px(0)),
				$lucamug$elm_ui_with_context$Element$WithContext$Font$color(
				$rakutentech$r10$R10$FormComponents$Internal$TextColors$getLabelColor(args)),
				$lucamug$elm_ui_with_context$Element$WithContext$moveDown(
				function () {
					var _v0 = args.style;
					if (_v0.$ === 'Filled') {
						return 6;
					} else {
						return 0;
					}
				}()),
				$lucamug$elm_ui_with_context$Element$WithContext$moveRight(
				function () {
					var _v1 = args.style;
					if (_v1.$ === 'Filled') {
						return -8;
					} else {
						return 8;
					}
				}())
			]),
		labelEl);
};
var $rakutentech$r10$R10$FormComponents$Internal$UI$Const$inputTextHeight = 50;
var $mdgriffith$elm_ui$Internal$Model$Min = F2(
	function (a, b) {
		return {$: 'Min', a: a, b: b};
	});
var $mdgriffith$elm_ui$Element$minimum = F2(
	function (i, l) {
		return A2($mdgriffith$elm_ui$Internal$Model$Min, i, l);
	});
var $lucamug$elm_ui_with_context$Element$WithContext$minimum = $mdgriffith$elm_ui$Element$minimum;
var $rakutentech$r10$R10$FormTypes$TextPasswordCurrent = {$: 'TextPasswordCurrent'};
var $rakutentech$r10$R10$FormTypes$TextPasswordNew = {$: 'TextPasswordNew'};
var $rakutentech$r10$R10$FormComponents$Internal$Text$needShowHideIcon = function (fieldType) {
	return _Utils_eq(fieldType, $rakutentech$r10$R10$FormTypes$TextPasswordCurrent) || _Utils_eq(fieldType, $rakutentech$r10$R10$FormTypes$TextPasswordNew);
};
var $rakutentech$r10$R10$FormComponents$Internal$UI$showValidationIcon_ = function (args) {
	var iconSize = 18;
	var widthPx = args.displayValidation ? (iconSize + function () {
		var _v0 = args.style;
		if (_v0.$ === 'Filled') {
			return 4;
		} else {
			return 16;
		}
	}()) : 0;
	return _Utils_eq(
		args.maybeValid,
		$elm$core$Maybe$Just(false)) ? A3(
		$rakutentech$r10$R10$FormComponents$Internal$UI$icons.sign_warning_f,
		_List_fromArray(
			[
				$rakutentech$r10$R10$Transition$transition('width 0.4s'),
				$lucamug$elm_ui_with_context$Element$WithContext$width(
				$lucamug$elm_ui_with_context$Element$WithContext$px(widthPx)),
				$lucamug$elm_ui_with_context$Element$WithContext$height(
				$lucamug$elm_ui_with_context$Element$WithContext$px(iconSize)),
				$lucamug$elm_ui_with_context$Element$WithContext$clip
			]),
		$rakutentech$r10$R10$FormComponents$Internal$UI$Color$error(args.palette),
		iconSize) : A3(
		$rakutentech$r10$R10$FormComponents$Internal$UI$icons.check,
		_List_fromArray(
			[
				$rakutentech$r10$R10$Transition$transition('width 0.4s'),
				$lucamug$elm_ui_with_context$Element$WithContext$width(
				$lucamug$elm_ui_with_context$Element$WithContext$px(widthPx)),
				$lucamug$elm_ui_with_context$Element$WithContext$height(
				$lucamug$elm_ui_with_context$Element$WithContext$px(iconSize)),
				$lucamug$elm_ui_with_context$Element$WithContext$clip
			]),
		$rakutentech$r10$R10$FormComponents$Internal$UI$Color$success(args.palette),
		iconSize);
};
var $rakutentech$r10$R10$FormComponents$Internal$EmailAutoSuggest$addOnRightKeyDownEvent = F3(
	function (msg, userInput, suggestion) {
		var arrowRight = 39;
		return A2(
			$elm$html$Html$Events$on,
			'keydown',
			A2(
				$elm$json$Json$Decode$andThen,
				function (key) {
					return $elm$json$Json$Decode$succeed(
						_Utils_eq(key, arrowRight) ? msg(suggestion) : msg(userInput));
				},
				$elm$html$Html$Events$keyCode));
	});
var $mdgriffith$elm_ui$Internal$Model$Above = {$: 'Above'};
var $mdgriffith$elm_ui$Element$above = function (element) {
	return A2($mdgriffith$elm_ui$Element$createNearby, $mdgriffith$elm_ui$Internal$Model$Above, element);
};
var $lucamug$elm_ui_with_context$Element$WithContext$above = $lucamug$elm_ui_with_context$Element$WithContext$createNearby($mdgriffith$elm_ui$Element$above);
var $rakutentech$r10$R10$Color$Internal$Derived$BackgroundPhoneDropdown = {$: 'BackgroundPhoneDropdown'};
var $rakutentech$r10$R10$Color$AttrsBackground$dropdown = $lucamug$elm_ui_with_context$Element$WithContext$withContextAttribute(
	function (c) {
		return $lucamug$elm_ui_with_context$Element$WithContext$Background$color(
			$rakutentech$r10$R10$Color$Utils$fromColorColor(
				A2($rakutentech$r10$R10$Color$Internal$Derived$toColor, c.theme, $rakutentech$r10$R10$Color$Internal$Derived$BackgroundPhoneDropdown)));
	});
var $rakutentech$r10$R10$Color$AttrsBackground$dropdownHover = $lucamug$elm_ui_with_context$Element$WithContext$withContextDecoration(
	function (c) {
		return $lucamug$elm_ui_with_context$Element$WithContext$Background$color(
			$rakutentech$r10$R10$Color$Utils$fromColorColor(
				A2(
					$noahzgordon$elm_color_extra$Color$Manipulate$darken,
					0.01,
					A2($rakutentech$r10$R10$Color$Internal$Derived$toColor, c.theme, $rakutentech$r10$R10$Color$Internal$Derived$BackgroundPhoneDropdown))));
	});
var $rakutentech$r10$R10$Color$AttrsBackground$dropdownSelected = $lucamug$elm_ui_with_context$Element$WithContext$withContextDecoration(
	function (c) {
		return $lucamug$elm_ui_with_context$Element$WithContext$Background$color(
			$rakutentech$r10$R10$Color$Utils$fromColorColor(
				A2(
					$noahzgordon$elm_color_extra$Color$Manipulate$darken,
					0.03,
					A2($rakutentech$r10$R10$Color$Internal$Derived$toColor, c.theme, $rakutentech$r10$R10$Color$Internal$Derived$BackgroundPhoneDropdown))));
	});
var $rakutentech$r10$R10$Device$isMobileOS = function (_v0) {
	var os = _v0.a;
	switch (os.$) {
		case 'Android':
			return true;
		case 'IOS':
			return true;
		case 'WindowsPhone':
			return true;
		default:
			return false;
	}
};
var $mdgriffith$elm_ui$Internal$Model$Active = {$: 'Active'};
var $mdgriffith$elm_ui$Internal$Flag$active = $mdgriffith$elm_ui$Internal$Flag$flag(32);
var $mdgriffith$elm_ui$Element$mouseDown = function (decs) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$active,
		A2(
			$mdgriffith$elm_ui$Internal$Model$PseudoSelector,
			$mdgriffith$elm_ui$Internal$Model$Active,
			$mdgriffith$elm_ui$Internal$Model$unwrapDecorations(decs)));
};
var $lucamug$elm_ui_with_context$Element$WithContext$mouseDown = function (decs) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$Attribute(
		function (context) {
			return $mdgriffith$elm_ui$Element$mouseDown(
				A2(
					$elm$core$List$map,
					function (_v0) {
						var f = _v0.a;
						return f(context);
					},
					decs));
		});
};
var $rakutentech$r10$R10$Color$Internal$Derived$FontMediumEmphasis = {$: 'FontMediumEmphasis'};
var $rakutentech$r10$R10$Color$AttrsFont$normalLighter = $lucamug$elm_ui_with_context$Element$WithContext$withContextAttribute(
	function (c) {
		return $lucamug$elm_ui_with_context$Element$WithContext$Font$color(
			$rakutentech$r10$R10$Color$Utils$fromColorColor(
				A2($rakutentech$r10$R10$Color$Internal$Derived$toColor, c.theme, $rakutentech$r10$R10$Color$Internal$Derived$FontMediumEmphasis)));
	});
var $rakutentech$r10$R10$Color$Internal$Derived$Border = {$: 'Border'};
var $rakutentech$r10$R10$Color$AttrsBorder$shadow = function (_v0) {
	var offset = _v0.offset;
	var size = _v0.size;
	var blur = _v0.blur;
	return $lucamug$elm_ui_with_context$Element$WithContext$withContextAttribute(
		function (c) {
			return $lucamug$elm_ui_with_context$Element$WithContext$Border$shadow(
				function (color) {
					return {blur: blur, color: color, offset: offset, size: size};
				}(
					$rakutentech$r10$R10$Color$Utils$fromColorColor(
						A2($rakutentech$r10$R10$Color$Internal$Derived$toColor, c.theme, $rakutentech$r10$R10$Color$Internal$Derived$Border))));
		});
};
var $rakutentech$r10$R10$FormComponents$Internal$EmailAutoSuggest$autoSuggestionsAttrs = function (args) {
	var _v0 = _Utils_Tuple2(
		args.maybeEmailSuggestion,
		$rakutentech$r10$R10$Device$isMobileOS(args.userAgent));
	if (_v0.a.$ === 'Just') {
		if (_v0.b) {
			var suggestion = _v0.a.a;
			return _List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$above(
					$lucamug$elm_ui_with_context$Element$WithContext$withContext(
						function (c) {
							return A2(
								$lucamug$elm_ui_with_context$Element$WithContext$row,
								_List_fromArray(
									[
										$lucamug$elm_ui_with_context$Element$WithContext$moveDown(8),
										$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
										A2($lucamug$elm_ui_with_context$Element$WithContext$paddingXY, 15, 12),
										$rakutentech$r10$R10$Color$AttrsBackground$dropdown,
										$rakutentech$r10$R10$Color$AttrsBorder$shadow(
										{
											blur: 2,
											offset: _Utils_Tuple2(0, 0),
											size: 0
										}),
										$lucamug$elm_ui_with_context$Element$WithContext$Border$rounded(5),
										$lucamug$elm_ui_with_context$Element$WithContext$mouseDown(
										_List_fromArray(
											[$rakutentech$r10$R10$Color$AttrsBackground$dropdownSelected])),
										$lucamug$elm_ui_with_context$Element$WithContext$mouseOver(
										_List_fromArray(
											[$rakutentech$r10$R10$Color$AttrsBackground$dropdownHover])),
										$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
										A2($elm$html$Html$Attributes$style, 'user-select', 'none')),
										$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
										A2(
											$elm$html$Html$Events$preventDefaultOn,
											'mouseup',
											$elm$json$Json$Decode$succeed(
												_Utils_Tuple2(
													args.msgOnChange(
														_Utils_ap(args.value, suggestion)),
													true)))),
										$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
										A2(
											$elm$html$Html$Events$preventDefaultOn,
											'mousedown',
											$elm$json$Json$Decode$succeed(
												_Utils_Tuple2(
													args.msgOnChange(args.value),
													true))))
									]),
								_List_fromArray(
									[
										$lucamug$elm_ui_with_context$Element$WithContext$text(
										_Utils_ap(args.value, suggestion))
									]));
						}))
				]);
		} else {
			var suggestion = _v0.a.a;
			return _List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$behindContent(
					A2(
						$lucamug$elm_ui_with_context$Element$WithContext$row,
						_List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$moveDown(21),
								$lucamug$elm_ui_with_context$Element$WithContext$moveRight(16),
								$rakutentech$r10$R10$Color$AttrsFont$normalLighter,
								$lucamug$elm_ui_with_context$Element$WithContext$alpha(0.5)
							]),
						_List_fromArray(
							[
								A2(
								$lucamug$elm_ui_with_context$Element$WithContext$el,
								_List_fromArray(
									[
										$lucamug$elm_ui_with_context$Element$WithContext$Font$color(
										A4($lucamug$elm_ui_with_context$Element$WithContext$rgba, 0, 0, 0, 0))
									]),
								$lucamug$elm_ui_with_context$Element$WithContext$text(args.value)),
								A2(
								$lucamug$elm_ui_with_context$Element$WithContext$el,
								_List_Nil,
								$lucamug$elm_ui_with_context$Element$WithContext$text(suggestion))
							])))
				]);
		}
	} else {
		if (_v0.b) {
			var _v1 = _v0.a;
			return _List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$above(
					A2($lucamug$elm_ui_with_context$Element$WithContext$row, _List_Nil, _List_Nil))
				]);
		} else {
			var _v2 = _v0.a;
			return _List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$behindContent(
					A2($lucamug$elm_ui_with_context$Element$WithContext$row, _List_Nil, _List_Nil))
				]);
		}
	}
};
var $mdgriffith$elm_ui$Element$Input$TextInputNode = function (a) {
	return {$: 'TextInputNode', a: a};
};
var $mdgriffith$elm_ui$Element$Input$TextArea = {$: 'TextArea'};
var $mdgriffith$elm_ui$Internal$Model$LivePolite = {$: 'LivePolite'};
var $mdgriffith$elm_ui$Element$Region$announce = $mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$LivePolite);
var $mdgriffith$elm_ui$Element$Input$applyLabel = F3(
	function (attrs, label, input) {
		if (label.$ === 'HiddenLabel') {
			var labelText = label.a;
			return A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asColumn,
				$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
				attrs,
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[input])));
		} else {
			var position = label.a;
			var labelAttrs = label.b;
			var labelChild = label.c;
			var labelElement = A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asEl,
				$mdgriffith$elm_ui$Internal$Model$div,
				labelAttrs,
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[labelChild])));
			switch (position.$) {
				case 'Above':
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asColumn,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputLabel),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[labelElement, input])));
				case 'Below':
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asColumn,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputLabel),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[input, labelElement])));
				case 'OnRight':
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asRow,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputLabel),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[input, labelElement])));
				default:
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asRow,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputLabel),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[labelElement, input])));
			}
		}
	});
var $mdgriffith$elm_ui$Element$Input$autofill = A2(
	$elm$core$Basics$composeL,
	$mdgriffith$elm_ui$Internal$Model$Attr,
	$elm$html$Html$Attributes$attribute('autocomplete'));
var $mdgriffith$elm_ui$Element$Input$calcMoveToCompensateForPadding = function (attrs) {
	var gatherSpacing = F2(
		function (attr, found) {
			if ((attr.$ === 'StyleClass') && (attr.b.$ === 'SpacingStyle')) {
				var _v2 = attr.b;
				var x = _v2.b;
				var y = _v2.c;
				if (found.$ === 'Nothing') {
					return $elm$core$Maybe$Just(y);
				} else {
					return found;
				}
			} else {
				return found;
			}
		});
	var _v0 = A3($elm$core$List$foldr, gatherSpacing, $elm$core$Maybe$Nothing, attrs);
	if (_v0.$ === 'Nothing') {
		return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
	} else {
		var vSpace = _v0.a;
		return $mdgriffith$elm_ui$Element$moveUp(
			$elm$core$Basics$floor(vSpace / 2));
	}
};
var $mdgriffith$elm_ui$Element$Input$darkGrey = A3($mdgriffith$elm_ui$Element$rgb, 186 / 255, 189 / 255, 182 / 255);
var $mdgriffith$elm_ui$Element$Input$defaultTextPadding = A2($mdgriffith$elm_ui$Element$paddingXY, 12, 12);
var $mdgriffith$elm_ui$Element$Input$white = A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1);
var $mdgriffith$elm_ui$Element$Input$defaultTextBoxStyle = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$Input$defaultTextPadding,
		$mdgriffith$elm_ui$Element$Border$rounded(3),
		$mdgriffith$elm_ui$Element$Border$color($mdgriffith$elm_ui$Element$Input$darkGrey),
		$mdgriffith$elm_ui$Element$Background$color($mdgriffith$elm_ui$Element$Input$white),
		$mdgriffith$elm_ui$Element$Border$width(1),
		$mdgriffith$elm_ui$Element$spacing(5),
		$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
		$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink)
	]);
var $mdgriffith$elm_ui$Element$Input$getHeight = function (attr) {
	if (attr.$ === 'Height') {
		var h = attr.a;
		return $elm$core$Maybe$Just(h);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$Label = function (a) {
	return {$: 'Label', a: a};
};
var $mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute = function (label) {
	if (label.$ === 'HiddenLabel') {
		var textLabel = label.a;
		return $mdgriffith$elm_ui$Internal$Model$Describe(
			$mdgriffith$elm_ui$Internal$Model$Label(textLabel));
	} else {
		return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
	}
};
var $mdgriffith$elm_ui$Element$Input$isConstrained = function (len) {
	isConstrained:
	while (true) {
		switch (len.$) {
			case 'Content':
				return false;
			case 'Px':
				return true;
			case 'Fill':
				return true;
			case 'Min':
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isConstrained;
			default:
				var l = len.b;
				return true;
		}
	}
};
var $mdgriffith$elm_ui$Element$Input$isHiddenLabel = function (label) {
	if (label.$ === 'HiddenLabel') {
		return true;
	} else {
		return false;
	}
};
var $mdgriffith$elm_ui$Element$Input$isStacked = function (label) {
	if (label.$ === 'Label') {
		var loc = label.a;
		switch (loc.$) {
			case 'OnRight':
				return false;
			case 'OnLeft':
				return false;
			case 'Above':
				return true;
			default:
				return true;
		}
	} else {
		return true;
	}
};
var $mdgriffith$elm_ui$Element$Input$negateBox = function (box) {
	return {bottom: -box.bottom, left: -box.left, right: -box.right, top: -box.top};
};
var $mdgriffith$elm_ui$Element$Input$isFill = function (len) {
	isFill:
	while (true) {
		switch (len.$) {
			case 'Fill':
				return true;
			case 'Content':
				return false;
			case 'Px':
				return false;
			case 'Min':
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isFill;
			default:
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isFill;
		}
	}
};
var $mdgriffith$elm_ui$Element$Input$isPixel = function (len) {
	isPixel:
	while (true) {
		switch (len.$) {
			case 'Content':
				return false;
			case 'Px':
				return true;
			case 'Fill':
				return false;
			case 'Min':
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isPixel;
			default:
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isPixel;
		}
	}
};
var $mdgriffith$elm_ui$Internal$Model$paddingNameFloat = F4(
	function (top, right, bottom, left) {
		return 'pad-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(top) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(right) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(bottom) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(left)))))));
	});
var $mdgriffith$elm_ui$Element$Input$redistributeOver = F4(
	function (isMultiline, stacked, attr, els) {
		switch (attr.$) {
			case 'Nearby':
				return _Utils_update(
					els,
					{
						parent: A2($elm$core$List$cons, attr, els.parent)
					});
			case 'Width':
				var width = attr.a;
				return $mdgriffith$elm_ui$Element$Input$isFill(width) ? _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent),
						input: A2($elm$core$List$cons, attr, els.input),
						parent: A2($elm$core$List$cons, attr, els.parent)
					}) : (stacked ? _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent)
					}) : _Utils_update(
					els,
					{
						parent: A2($elm$core$List$cons, attr, els.parent)
					}));
			case 'Height':
				var height = attr.a;
				return (!stacked) ? _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent),
						parent: A2($elm$core$List$cons, attr, els.parent)
					}) : ($mdgriffith$elm_ui$Element$Input$isFill(height) ? _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent),
						parent: A2($elm$core$List$cons, attr, els.parent)
					}) : ($mdgriffith$elm_ui$Element$Input$isPixel(height) ? _Utils_update(
					els,
					{
						parent: A2($elm$core$List$cons, attr, els.parent)
					}) : _Utils_update(
					els,
					{
						parent: A2($elm$core$List$cons, attr, els.parent)
					})));
			case 'AlignX':
				return _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent)
					});
			case 'AlignY':
				return _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent)
					});
			case 'StyleClass':
				switch (attr.b.$) {
					case 'SpacingStyle':
						var _v1 = attr.b;
						return _Utils_update(
							els,
							{
								fullParent: A2($elm$core$List$cons, attr, els.fullParent),
								input: A2($elm$core$List$cons, attr, els.input),
								parent: A2($elm$core$List$cons, attr, els.parent),
								wrapper: A2($elm$core$List$cons, attr, els.wrapper)
							});
					case 'PaddingStyle':
						var cls = attr.a;
						var _v2 = attr.b;
						var pad = _v2.a;
						var t = _v2.b;
						var r = _v2.c;
						var b = _v2.d;
						var l = _v2.e;
						if (isMultiline) {
							return _Utils_update(
								els,
								{
									cover: A2($elm$core$List$cons, attr, els.cover),
									parent: A2($elm$core$List$cons, attr, els.parent)
								});
						} else {
							var newTop = t - A2($elm$core$Basics$min, t, b);
							var newLineHeight = $mdgriffith$elm_ui$Element$htmlAttribute(
								A2(
									$elm$html$Html$Attributes$style,
									'line-height',
									'calc(1.0em + ' + ($elm$core$String$fromFloat(
										2 * A2($elm$core$Basics$min, t, b)) + 'px)')));
							var newHeight = $mdgriffith$elm_ui$Element$htmlAttribute(
								A2(
									$elm$html$Html$Attributes$style,
									'height',
									'calc(1.0em + ' + ($elm$core$String$fromFloat(
										2 * A2($elm$core$Basics$min, t, b)) + 'px)')));
							var newBottom = b - A2($elm$core$Basics$min, t, b);
							var reducedVerticalPadding = A2(
								$mdgriffith$elm_ui$Internal$Model$StyleClass,
								$mdgriffith$elm_ui$Internal$Flag$padding,
								A5(
									$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
									A4($mdgriffith$elm_ui$Internal$Model$paddingNameFloat, newTop, r, newBottom, l),
									newTop,
									r,
									newBottom,
									l));
							return _Utils_update(
								els,
								{
									cover: A2($elm$core$List$cons, attr, els.cover),
									input: A2(
										$elm$core$List$cons,
										newHeight,
										A2($elm$core$List$cons, newLineHeight, els.input)),
									parent: A2($elm$core$List$cons, reducedVerticalPadding, els.parent)
								});
						}
					case 'BorderWidth':
						var _v3 = attr.b;
						return _Utils_update(
							els,
							{
								cover: A2($elm$core$List$cons, attr, els.cover),
								parent: A2($elm$core$List$cons, attr, els.parent)
							});
					case 'Transform':
						return _Utils_update(
							els,
							{
								cover: A2($elm$core$List$cons, attr, els.cover),
								parent: A2($elm$core$List$cons, attr, els.parent)
							});
					case 'FontSize':
						return _Utils_update(
							els,
							{
								fullParent: A2($elm$core$List$cons, attr, els.fullParent)
							});
					case 'FontFamily':
						var _v4 = attr.b;
						return _Utils_update(
							els,
							{
								fullParent: A2($elm$core$List$cons, attr, els.fullParent)
							});
					default:
						var flag = attr.a;
						var cls = attr.b;
						return _Utils_update(
							els,
							{
								parent: A2($elm$core$List$cons, attr, els.parent)
							});
				}
			case 'NoAttribute':
				return els;
			case 'Attr':
				var a = attr.a;
				return _Utils_update(
					els,
					{
						input: A2($elm$core$List$cons, attr, els.input)
					});
			case 'Describe':
				return _Utils_update(
					els,
					{
						input: A2($elm$core$List$cons, attr, els.input)
					});
			case 'Class':
				return _Utils_update(
					els,
					{
						parent: A2($elm$core$List$cons, attr, els.parent)
					});
			default:
				return _Utils_update(
					els,
					{
						input: A2($elm$core$List$cons, attr, els.input)
					});
		}
	});
var $mdgriffith$elm_ui$Element$Input$redistribute = F3(
	function (isMultiline, stacked, attrs) {
		return function (redist) {
			return {
				cover: $elm$core$List$reverse(redist.cover),
				fullParent: $elm$core$List$reverse(redist.fullParent),
				input: $elm$core$List$reverse(redist.input),
				parent: $elm$core$List$reverse(redist.parent),
				wrapper: $elm$core$List$reverse(redist.wrapper)
			};
		}(
			A3(
				$elm$core$List$foldl,
				A2($mdgriffith$elm_ui$Element$Input$redistributeOver, isMultiline, stacked),
				{cover: _List_Nil, fullParent: _List_Nil, input: _List_Nil, parent: _List_Nil, wrapper: _List_Nil},
				attrs));
	});
var $mdgriffith$elm_ui$Element$Input$renderBox = function (_v0) {
	var top = _v0.top;
	var right = _v0.right;
	var bottom = _v0.bottom;
	var left = _v0.left;
	return $elm$core$String$fromInt(top) + ('px ' + ($elm$core$String$fromInt(right) + ('px ' + ($elm$core$String$fromInt(bottom) + ('px ' + ($elm$core$String$fromInt(left) + 'px'))))));
};
var $mdgriffith$elm_ui$Element$Input$charcoal = A3($mdgriffith$elm_ui$Element$rgb, 136 / 255, 138 / 255, 133 / 255);
var $mdgriffith$elm_ui$Element$Input$renderPlaceholder = F3(
	function (_v0, forPlaceholder, on) {
		var placeholderAttrs = _v0.a;
		var placeholderEl = _v0.b;
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_Utils_ap(
				forPlaceholder,
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color($mdgriffith$elm_ui$Element$Input$charcoal),
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.noTextSelection + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.passPointerEvents)),
							$mdgriffith$elm_ui$Element$clip,
							$mdgriffith$elm_ui$Element$Border$color(
							A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0)),
							$mdgriffith$elm_ui$Element$Background$color(
							A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0)),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$alpha(
							on ? 1 : 0)
						]),
					placeholderAttrs)),
			placeholderEl);
	});
var $mdgriffith$elm_ui$Element$scrollbarY = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.scrollbarsY);
var $elm$html$Html$Attributes$spellcheck = $elm$html$Html$Attributes$boolProperty('spellcheck');
var $mdgriffith$elm_ui$Element$Input$spellcheck = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Attributes$spellcheck);
var $mdgriffith$elm_ui$Element$Input$value = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Attributes$value);
var $mdgriffith$elm_ui$Element$Input$textHelper = F3(
	function (textInput, attrs, textOptions) {
		var withDefaults = _Utils_ap($mdgriffith$elm_ui$Element$Input$defaultTextBoxStyle, attrs);
		var redistributed = A3(
			$mdgriffith$elm_ui$Element$Input$redistribute,
			_Utils_eq(textInput.type_, $mdgriffith$elm_ui$Element$Input$TextArea),
			$mdgriffith$elm_ui$Element$Input$isStacked(textOptions.label),
			withDefaults);
		var onlySpacing = function (attr) {
			if ((attr.$ === 'StyleClass') && (attr.b.$ === 'SpacingStyle')) {
				var _v9 = attr.b;
				return true;
			} else {
				return false;
			}
		};
		var heightConstrained = function () {
			var _v7 = textInput.type_;
			if (_v7.$ === 'TextInputNode') {
				var inputType = _v7.a;
				return false;
			} else {
				return A2(
					$elm$core$Maybe$withDefault,
					false,
					A2(
						$elm$core$Maybe$map,
						$mdgriffith$elm_ui$Element$Input$isConstrained,
						$elm$core$List$head(
							$elm$core$List$reverse(
								A2($elm$core$List$filterMap, $mdgriffith$elm_ui$Element$Input$getHeight, withDefaults)))));
			}
		}();
		var getPadding = function (attr) {
			if ((attr.$ === 'StyleClass') && (attr.b.$ === 'PaddingStyle')) {
				var cls = attr.a;
				var _v6 = attr.b;
				var pad = _v6.a;
				var t = _v6.b;
				var r = _v6.c;
				var b = _v6.d;
				var l = _v6.e;
				return $elm$core$Maybe$Just(
					{
						bottom: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(b - 3)),
						left: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(l - 3)),
						right: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(r - 3)),
						top: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(t - 3))
					});
			} else {
				return $elm$core$Maybe$Nothing;
			}
		};
		var parentPadding = A2(
			$elm$core$Maybe$withDefault,
			{bottom: 0, left: 0, right: 0, top: 0},
			$elm$core$List$head(
				$elm$core$List$reverse(
					A2($elm$core$List$filterMap, getPadding, withDefaults))));
		var inputElement = A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			function () {
				var _v3 = textInput.type_;
				if (_v3.$ === 'TextInputNode') {
					var inputType = _v3.a;
					return $mdgriffith$elm_ui$Internal$Model$NodeName('input');
				} else {
					return $mdgriffith$elm_ui$Internal$Model$NodeName('textarea');
				}
			}(),
			_Utils_ap(
				function () {
					var _v4 = textInput.type_;
					if (_v4.$ === 'TextInputNode') {
						var inputType = _v4.a;
						return _List_fromArray(
							[
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Attributes$type_(inputType)),
								$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputText)
							]);
					} else {
						return _List_fromArray(
							[
								$mdgriffith$elm_ui$Element$clip,
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputMultiline),
								$mdgriffith$elm_ui$Element$Input$calcMoveToCompensateForPadding(withDefaults),
								$mdgriffith$elm_ui$Element$paddingEach(parentPadding),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								A2(
									$elm$html$Html$Attributes$style,
									'margin',
									$mdgriffith$elm_ui$Element$Input$renderBox(
										$mdgriffith$elm_ui$Element$Input$negateBox(parentPadding)))),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								A2($elm$html$Html$Attributes$style, 'box-sizing', 'content-box'))
							]);
					}
				}(),
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Input$value(textOptions.text),
							$mdgriffith$elm_ui$Internal$Model$Attr(
							$elm$html$Html$Events$onInput(textOptions.onChange)),
							$mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute(textOptions.label),
							$mdgriffith$elm_ui$Element$Input$spellcheck(textInput.spellchecked),
							A2(
							$elm$core$Maybe$withDefault,
							$mdgriffith$elm_ui$Internal$Model$NoAttribute,
							A2($elm$core$Maybe$map, $mdgriffith$elm_ui$Element$Input$autofill, textInput.autofill))
						]),
					redistributed.input)),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(_List_Nil));
		var wrappedInput = function () {
			var _v0 = textInput.type_;
			if (_v0.$ === 'TextArea') {
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asEl,
					$mdgriffith$elm_ui$Internal$Model$div,
					_Utils_ap(
						(heightConstrained ? $elm$core$List$cons($mdgriffith$elm_ui$Element$scrollbarY) : $elm$core$Basics$identity)(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									A2($elm$core$List$any, $mdgriffith$elm_ui$Element$Input$hasFocusStyle, withDefaults) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.focusedWithin),
									$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineWrapper)
								])),
						redistributed.parent),
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(
						_List_fromArray(
							[
								A4(
								$mdgriffith$elm_ui$Internal$Model$element,
								$mdgriffith$elm_ui$Internal$Model$asParagraph,
								$mdgriffith$elm_ui$Internal$Model$div,
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									A2(
										$elm$core$List$cons,
										$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
										A2(
											$elm$core$List$cons,
											$mdgriffith$elm_ui$Element$inFront(inputElement),
											A2(
												$elm$core$List$cons,
												$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineParent),
												redistributed.wrapper)))),
								$mdgriffith$elm_ui$Internal$Model$Unkeyed(
									function () {
										if (textOptions.text === '') {
											var _v1 = textOptions.placeholder;
											if (_v1.$ === 'Nothing') {
												return _List_fromArray(
													[
														$mdgriffith$elm_ui$Element$text('\u00A0')
													]);
											} else {
												var place = _v1.a;
												return _List_fromArray(
													[
														A3($mdgriffith$elm_ui$Element$Input$renderPlaceholder, place, _List_Nil, textOptions.text === '')
													]);
											}
										} else {
											return _List_fromArray(
												[
													$mdgriffith$elm_ui$Internal$Model$unstyled(
													A2(
														$elm$html$Html$span,
														_List_fromArray(
															[
																$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineFiller)
															]),
														_List_fromArray(
															[
																$elm$html$Html$text(textOptions.text + '\u00A0')
															])))
												]);
										}
									}()))
							])));
			} else {
				var inputType = _v0.a;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asEl,
					$mdgriffith$elm_ui$Internal$Model$div,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						A2(
							$elm$core$List$cons,
							A2($elm$core$List$any, $mdgriffith$elm_ui$Element$Input$hasFocusStyle, withDefaults) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.focusedWithin),
							$elm$core$List$concat(
								_List_fromArray(
									[
										redistributed.parent,
										function () {
										var _v2 = textOptions.placeholder;
										if (_v2.$ === 'Nothing') {
											return _List_Nil;
										} else {
											var place = _v2.a;
											return _List_fromArray(
												[
													$mdgriffith$elm_ui$Element$behindContent(
													A3($mdgriffith$elm_ui$Element$Input$renderPlaceholder, place, redistributed.cover, textOptions.text === ''))
												]);
										}
									}()
									])))),
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(
						_List_fromArray(
							[inputElement])));
			}
		}();
		return A3(
			$mdgriffith$elm_ui$Element$Input$applyLabel,
			A2(
				$elm$core$List$cons,
				A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$cursor, $mdgriffith$elm_ui$Internal$Style$classes.cursorText),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$Input$isHiddenLabel(textOptions.label) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Element$spacing(5),
					A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$Region$announce, redistributed.fullParent))),
			textOptions.label,
			wrappedInput);
	});
var $mdgriffith$elm_ui$Element$Input$currentPassword = F2(
	function (attrs, pass) {
		return A3(
			$mdgriffith$elm_ui$Element$Input$textHelper,
			{
				autofill: $elm$core$Maybe$Just('current-password'),
				spellchecked: false,
				type_: $mdgriffith$elm_ui$Element$Input$TextInputNode(
					pass.show ? 'text' : 'password')
			},
			attrs,
			{label: pass.label, onChange: pass.onChange, placeholder: pass.placeholder, text: pass.text});
	});
var $lucamug$elm_ui_with_context$Element$WithContext$Input$runLabel = F2(
	function (context, _v0) {
		var f = _v0.a;
		return f(context);
	});
var $lucamug$elm_ui_with_context$Element$WithContext$Input$runPlaceholder = F2(
	function (context, _v0) {
		var f = _v0.a;
		return f(context);
	});
var $lucamug$elm_ui_with_context$Element$WithContext$Input$currentPassword = A2(
	$lucamug$elm_ui_with_context$Element$WithContext$Internal$wrapAttrs,
	$mdgriffith$elm_ui$Element$Input$currentPassword,
	F2(
		function (context, config) {
			return {
				label: A2($lucamug$elm_ui_with_context$Element$WithContext$Input$runLabel, context, config.label),
				onChange: config.onChange,
				placeholder: A2(
					$elm$core$Maybe$map,
					$lucamug$elm_ui_with_context$Element$WithContext$Input$runPlaceholder(context),
					config.placeholder),
				show: config.show,
				text: config.text
			};
		}));
var $mdgriffith$elm_ui$Element$Input$email = $mdgriffith$elm_ui$Element$Input$textHelper(
	{
		autofill: $elm$core$Maybe$Just('email'),
		spellchecked: false,
		type_: $mdgriffith$elm_ui$Element$Input$TextInputNode('email')
	});
var $lucamug$elm_ui_with_context$Element$WithContext$Input$textHelper = function (f) {
	return A2(
		$lucamug$elm_ui_with_context$Element$WithContext$Internal$wrapAttrs,
		f,
		F2(
			function (context, config) {
				return {
					label: A2($lucamug$elm_ui_with_context$Element$WithContext$Input$runLabel, context, config.label),
					onChange: config.onChange,
					placeholder: A2(
						$elm$core$Maybe$map,
						$lucamug$elm_ui_with_context$Element$WithContext$Input$runPlaceholder(context),
						config.placeholder),
					text: config.text
				};
			}));
};
var $lucamug$elm_ui_with_context$Element$WithContext$Input$email = $lucamug$elm_ui_with_context$Element$WithContext$Input$textHelper($mdgriffith$elm_ui$Element$Input$email);
var $rakutentech$r10$R10$FormComponents$Internal$EmailAutoSuggest$nothingWhenBlank = function (string) {
	if (string === '') {
		return $elm$core$Maybe$Nothing;
	} else {
		return $elm$core$Maybe$Just(string);
	}
};
var $rakutentech$r10$R10$FormComponents$Internal$EmailAutoSuggest$emailDomainAutocomplete = F2(
	function (suggestions, email) {
		var maybeEmailDomain = A2(
			$elm_community$list_extra$List$Extra$getAt,
			1,
			A2($elm$core$String$split, '@', email));
		var filterStartWith = F2(
			function (strings, string_) {
				return A2(
					$elm$core$List$filter,
					$elm$core$String$startsWith(string_),
					strings);
			});
		if (maybeEmailDomain.$ === 'Just') {
			var emailDomain = maybeEmailDomain.a;
			return A2(
				$elm$core$Maybe$andThen,
				$rakutentech$r10$R10$FormComponents$Internal$EmailAutoSuggest$nothingWhenBlank,
				A2(
					$elm$core$Maybe$map,
					$elm$core$String$dropLeft(
						$elm$core$String$length(emailDomain)),
					$elm$core$List$head(
						A2(filterStartWith, suggestions, emailDomain))));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $rakutentech$r10$R10$FormComponents$Internal$UI$Color$font = $rakutentech$r10$R10$FormComponents$Internal$UI$Color$onSurfaceA(0.87);
var $rakutentech$r10$R10$FormComponents$Internal$UI$Color$errorA = F2(
	function (alpha, palette) {
		return $rakutentech$r10$R10$FormComponents$Internal$UI$Color$fromPaletteColor(
			A2($rakutentech$r10$R10$FormComponents$Internal$UI$Palette$withOpacity, alpha, palette.error));
	});
var $rakutentech$r10$R10$FormComponents$Internal$UI$Color$successA = F2(
	function (alpha, palette) {
		return $rakutentech$r10$R10$FormComponents$Internal$UI$Color$fromPaletteColor(
			A2($rakutentech$r10$R10$FormComponents$Internal$UI$Palette$withOpacity, alpha, palette.success));
	});
var $rakutentech$r10$R10$FormComponents$Internal$TextColors$getBorderColor = function (_v0) {
	var disabled = _v0.disabled;
	var focused = _v0.focused;
	var style = _v0.style;
	var maybeValid = _v0.maybeValid;
	var displayValidation = _v0.displayValidation;
	var isMouseOver = _v0.isMouseOver;
	var palette = _v0.palette;
	var validationActive = displayValidation && _Utils_eq(
		maybeValid,
		$elm$core$Maybe$Just(false));
	var alpha = ((!disabled) && (focused || (isMouseOver || validationActive))) ? 1 : 0.7;
	if (style.$ === 'Filled') {
		var _v2 = _Utils_Tuple3(displayValidation, maybeValid, focused);
		if (_v2.a && (_v2.b.$ === 'Just')) {
			if (_v2.b.a) {
				return A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$successA, alpha, palette);
			} else {
				return A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$errorA, alpha, palette);
			}
		} else {
			return A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$borderA, alpha, palette);
		}
	} else {
		var _v3 = _Utils_Tuple3(displayValidation, maybeValid, focused);
		if (_v3.a && (_v3.b.$ === 'Just')) {
			if (_v3.b.a) {
				return A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$successA, alpha, palette);
			} else {
				return A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$errorA, alpha, palette);
			}
		} else {
			return A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$borderA, alpha, palette);
		}
	}
};
var $rakutentech$r10$R10$FormComponents$Internal$UI$getTextfieldBorderSizeOffset = function (_v0) {
	var focused = _v0.focused;
	var style = _v0.style;
	var maybeValid = _v0.maybeValid;
	var displayValidation = _v0.displayValidation;
	var _v1 = _Utils_Tuple2(focused, style);
	if (_v1.a) {
		if (_v1.b.$ === 'Filled') {
			var _v2 = _v1.b;
			return {
				offset: _Utils_Tuple2(0, -2.5),
				size: 0
			};
		} else {
			var _v4 = _v1.b;
			return {
				offset: _Utils_Tuple2(0, 0),
				size: 2
			};
		}
	} else {
		if (_v1.b.$ === 'Filled') {
			var _v3 = _v1.b;
			return {
				offset: _Utils_Tuple2(0, -1.5),
				size: 0
			};
		} else {
			var _v5 = _v1.b;
			return {
				offset: _Utils_Tuple2(0, 0),
				size: 1
			};
		}
	}
};
var $rakutentech$r10$R10$FormComponents$Internal$Text$getBorder = function (args) {
	var _v0 = $rakutentech$r10$R10$FormComponents$Internal$UI$getTextfieldBorderSizeOffset(args);
	var offset = _v0.offset;
	var size = _v0.size;
	return $lucamug$elm_ui_with_context$Element$WithContext$Border$innerShadow(
		{
			blur: 0,
			color: $rakutentech$r10$R10$FormComponents$Internal$TextColors$getBorderColor(args),
			offset: offset,
			size: size
		});
};
var $rakutentech$r10$R10$FormComponents$Internal$Text$append = F3(
	function (tokens, input, formatted) {
		append:
		while (true) {
			var maybeToken = $elm$core$List$head(tokens);
			var appendInput = A2(
				$elm$core$Maybe$withDefault,
				formatted,
				A2(
					$elm$core$Maybe$map,
					A2(
						$rakutentech$r10$R10$FormComponents$Internal$Text$append,
						A2(
							$elm$core$Maybe$withDefault,
							_List_Nil,
							$elm$core$List$tail(tokens)),
						A2(
							$elm$core$Maybe$withDefault,
							_List_Nil,
							$elm$core$List$tail(input))),
					A2(
						$elm$core$Maybe$map,
						function (_char) {
							return _Utils_ap(
								formatted,
								$elm$core$String$fromChar(_char));
						},
						$elm$core$List$head(input))));
			if (maybeToken.$ === 'Nothing') {
				return formatted;
			} else {
				var token = maybeToken.a;
				if (token.$ === 'InputValue') {
					return appendInput;
				} else {
					var _char = token.a;
					var $temp$tokens = A2(
						$elm$core$Maybe$withDefault,
						_List_Nil,
						$elm$core$List$tail(tokens)),
						$temp$input = input,
						$temp$formatted = _Utils_ap(
						formatted,
						$elm$core$String$fromChar(_char));
					tokens = $temp$tokens;
					input = $temp$input;
					formatted = $temp$formatted;
					continue append;
				}
			}
		}
	});
var $rakutentech$r10$R10$FormComponents$Internal$Text$format = F2(
	function (tokens, input) {
		return $elm$core$String$isEmpty(input) ? input : A3(
			$rakutentech$r10$R10$FormComponents$Internal$Text$append,
			tokens,
			$elm$core$String$toList(input),
			'');
	});
var $rakutentech$r10$R10$FormComponents$Internal$Text$InputValue = {$: 'InputValue'};
var $rakutentech$r10$R10$FormComponents$Internal$Text$Other = function (a) {
	return {$: 'Other', a: a};
};
var $rakutentech$r10$R10$FormComponents$Internal$Text$tokenize = F2(
	function (inputChar, pattern) {
		return A2(
			$elm$core$List$member,
			pattern,
			$elm$core$String$toList('_MYD年月日AG0123456789')) ? $rakutentech$r10$R10$FormComponents$Internal$Text$InputValue : $rakutentech$r10$R10$FormComponents$Internal$Text$Other(pattern);
	});
var $rakutentech$r10$R10$FormComponents$Internal$Text$parse = F2(
	function (inputChar, pattern) {
		return A2(
			$elm$core$List$map,
			$rakutentech$r10$R10$FormComponents$Internal$Text$tokenize(inputChar),
			$elm$core$String$toList(pattern));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Text$appendPattern = F2(
	function (template, string) {
		return A2(
			$rakutentech$r10$R10$FormComponents$Internal$Text$format,
			A2(
				$rakutentech$r10$R10$FormComponents$Internal$Text$parse,
				_Utils_chr('0'),
				template),
			string);
	});
var $rakutentech$r10$R10$FormComponents$Internal$Text$regexNotDigit = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('[^0-9]'));
var $rakutentech$r10$R10$FormComponents$Internal$Text$onlyDigit = function (str) {
	return A3(
		$elm$regex$Regex$replace,
		$rakutentech$r10$R10$FormComponents$Internal$Text$regexNotDigit,
		function (_v0) {
			return '';
		},
		str);
};
var $rakutentech$r10$R10$FormComponents$Internal$Text$removeTrailingChar = function (str) {
	return A2(
		$elm$core$String$left,
		$elm$core$String$length(str) - 1,
		str);
};
var $rakutentech$r10$R10$FormComponents$Internal$Text$regexNotDigitAtTheEnd = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('[^0-9]*$'));
var $rakutentech$r10$R10$FormComponents$Internal$Text$removeTrailingPattern = function (str) {
	return A3(
		$elm$regex$Regex$replace,
		$rakutentech$r10$R10$FormComponents$Internal$Text$regexNotDigitAtTheEnd,
		function (_v0) {
			return '';
		},
		str);
};
var $rakutentech$r10$R10$FormComponents$Internal$Text$handleWithPatternChange = function (args) {
	var value = A2(
		$rakutentech$r10$R10$FormComponents$Internal$Text$appendPattern,
		args.pattern,
		$rakutentech$r10$R10$FormComponents$Internal$Text$onlyDigit(args.newValue));
	var isDeleteAction = _Utils_eq(
		$rakutentech$r10$R10$FormComponents$Internal$Text$removeTrailingChar(args.oldValue),
		args.newValue);
	return (_Utils_eq(value, args.oldValue) && isDeleteAction) ? $rakutentech$r10$R10$FormComponents$Internal$Text$removeTrailingChar(
		$rakutentech$r10$R10$FormComponents$Internal$Text$removeTrailingPattern(value)) : value;
};
var $lucamug$elm_ui_with_context$Element$WithContext$Input$Label = function (a) {
	return {$: 'Label', a: a};
};
var $mdgriffith$elm_ui$Element$Input$HiddenLabel = function (a) {
	return {$: 'HiddenLabel', a: a};
};
var $mdgriffith$elm_ui$Element$Input$labelHidden = $mdgriffith$elm_ui$Element$Input$HiddenLabel;
var $lucamug$elm_ui_with_context$Element$WithContext$Input$labelHidden = function (content) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Input$Label(
		function (_v0) {
			return $mdgriffith$elm_ui$Element$Input$labelHidden(content);
		});
};
var $mdgriffith$elm_ui$Element$Input$multiline = F2(
	function (attrs, multi) {
		return A3(
			$mdgriffith$elm_ui$Element$Input$textHelper,
			{autofill: $elm$core$Maybe$Nothing, spellchecked: multi.spellcheck, type_: $mdgriffith$elm_ui$Element$Input$TextArea},
			attrs,
			{label: multi.label, onChange: multi.onChange, placeholder: multi.placeholder, text: multi.text});
	});
var $lucamug$elm_ui_with_context$Element$WithContext$Input$multiline = A2(
	$lucamug$elm_ui_with_context$Element$WithContext$Internal$wrapAttrs,
	$mdgriffith$elm_ui$Element$Input$multiline,
	F2(
		function (context, config) {
			return {
				label: A2($lucamug$elm_ui_with_context$Element$WithContext$Input$runLabel, context, config.label),
				onChange: config.onChange,
				placeholder: A2(
					$elm$core$Maybe$map,
					$lucamug$elm_ui_with_context$Element$WithContext$Input$runPlaceholder(context),
					config.placeholder),
				spellcheck: config.spellcheck,
				text: config.text
			};
		}));
var $elm$html$Html$Attributes$name = $elm$html$Html$Attributes$stringProperty('name');
var $mdgriffith$elm_ui$Element$Input$newPassword = F2(
	function (attrs, pass) {
		return A3(
			$mdgriffith$elm_ui$Element$Input$textHelper,
			{
				autofill: $elm$core$Maybe$Just('new-password'),
				spellchecked: false,
				type_: $mdgriffith$elm_ui$Element$Input$TextInputNode(
					pass.show ? 'text' : 'password')
			},
			attrs,
			{label: pass.label, onChange: pass.onChange, placeholder: pass.placeholder, text: pass.text});
	});
var $lucamug$elm_ui_with_context$Element$WithContext$Input$newPassword = A2(
	$lucamug$elm_ui_with_context$Element$WithContext$Internal$wrapAttrs,
	$mdgriffith$elm_ui$Element$Input$newPassword,
	F2(
		function (context, config) {
			return {
				label: A2($lucamug$elm_ui_with_context$Element$WithContext$Input$runLabel, context, config.label),
				onChange: config.onChange,
				placeholder: A2(
					$elm$core$Maybe$map,
					$lucamug$elm_ui_with_context$Element$WithContext$Input$runPlaceholder(context),
					config.placeholder),
				show: config.show,
				text: config.text
			};
		}));
var $rakutentech$r10$R10$FormComponents$Internal$UI$onEnter = function (msg) {
	return $rakutentech$r10$R10$FormComponents$Internal$UI$onKeyPressBatch(
		_List_fromArray(
			[
				_Utils_Tuple2($rakutentech$r10$R10$FormComponents$Internal$UI$keyCode.enter, msg)
			]));
};
var $lucamug$elm_ui_with_context$Element$WithContext$Input$Placeholder = function (a) {
	return {$: 'Placeholder', a: a};
};
var $mdgriffith$elm_ui$Element$Input$Placeholder = F2(
	function (a, b) {
		return {$: 'Placeholder', a: a, b: b};
	});
var $mdgriffith$elm_ui$Element$Input$placeholder = $mdgriffith$elm_ui$Element$Input$Placeholder;
var $lucamug$elm_ui_with_context$Element$WithContext$Input$placeholder = F2(
	function (attrs, child) {
		return $lucamug$elm_ui_with_context$Element$WithContext$Input$Placeholder(
			function (context) {
				return A2(
					$mdgriffith$elm_ui$Element$Input$placeholder,
					A2($lucamug$elm_ui_with_context$Element$WithContext$Internal$attributes, context, attrs),
					A2($lucamug$elm_ui_with_context$Element$WithContext$Internal$run, context, child));
			});
	});
var $mdgriffith$elm_ui$Element$Input$text = $mdgriffith$elm_ui$Element$Input$textHelper(
	{
		autofill: $elm$core$Maybe$Nothing,
		spellchecked: false,
		type_: $mdgriffith$elm_ui$Element$Input$TextInputNode('text')
	});
var $lucamug$elm_ui_with_context$Element$WithContext$Input$text = $lucamug$elm_ui_with_context$Element$WithContext$Input$textHelper($mdgriffith$elm_ui$Element$Input$text);
var $rakutentech$r10$R10$FormComponents$Internal$Text$textWithPatternAttrs = _List_fromArray(
	[
		$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
		A2($elm$html$Html$Attributes$style, 'letter-spacing', '2px'))
	]);
var $mdgriffith$elm_ui$Element$Font$family = function (families) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$fontFamily,
		A2(
			$mdgriffith$elm_ui$Internal$Model$FontFamily,
			A3($elm$core$List$foldl, $mdgriffith$elm_ui$Internal$Model$renderFontClassName, 'ff-', families),
			families));
};
var $lucamug$elm_ui_with_context$Element$WithContext$Font$family = function (families) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$attribute(
		$mdgriffith$elm_ui$Element$Font$family(families));
};
var $mdgriffith$elm_ui$Internal$Model$Monospace = {$: 'Monospace'};
var $mdgriffith$elm_ui$Element$Font$monospace = $mdgriffith$elm_ui$Internal$Model$Monospace;
var $lucamug$elm_ui_with_context$Element$WithContext$Font$monospace = $mdgriffith$elm_ui$Element$Font$monospace;
var $rakutentech$r10$R10$FormComponents$Internal$Text$textWithPatternLargeAttrs = _List_fromArray(
	[
		$lucamug$elm_ui_with_context$Element$WithContext$withContextAttribute(
		function (c) {
			return $lucamug$elm_ui_with_context$Element$WithContext$Font$size(c.inputFieldWithLargePattern_fontSize);
		}),
		$lucamug$elm_ui_with_context$Element$WithContext$Font$family(
		_List_fromArray(
			[$lucamug$elm_ui_with_context$Element$WithContext$Font$monospace])),
		$lucamug$elm_ui_with_context$Element$WithContext$withContextAttribute(
		function (c) {
			return $lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
				A2(
					$elm$html$Html$Attributes$style,
					'letter-spacing',
					$elm$core$String$fromInt(c.inputFieldWithLargePattern_letterSpacing) + 'px'));
		})
	]);
var $rakutentech$r10$R10$FormComponents$Internal$Text$textWithPatternLargeAttrsExtra = _List_fromArray(
	[
		$lucamug$elm_ui_with_context$Element$WithContext$centerX,
		$lucamug$elm_ui_with_context$Element$WithContext$withContextAttribute(
		function (c) {
			return $lucamug$elm_ui_with_context$Element$WithContext$width(
				$lucamug$elm_ui_with_context$Element$WithContext$px(c.inputFieldWithLargePattern_width));
		})
	]);
var $mdgriffith$elm_ui$Element$Input$username = $mdgriffith$elm_ui$Element$Input$textHelper(
	{
		autofill: $elm$core$Maybe$Just('username'),
		spellchecked: false,
		type_: $mdgriffith$elm_ui$Element$Input$TextInputNode('text')
	});
var $lucamug$elm_ui_with_context$Element$WithContext$Input$username = $lucamug$elm_ui_with_context$Element$WithContext$Input$textHelper($mdgriffith$elm_ui$Element$Input$username);
var $rakutentech$r10$R10$FormComponents$Internal$Text$viewBehindPattern2 = F2(
	function (args, pattern) {
		var valueWithTrailingPattern = function () {
			if (args.focused || args.floatingLabelAlwaysUp) {
				var lengthDifference = $elm$core$String$length(pattern) - $elm$core$String$length(args.value);
				return _Utils_ap(
					args.value,
					A2($elm$core$String$right, lengthDifference, pattern));
			} else {
				return '';
			}
		}();
		return _List_fromArray(
			[
				$lucamug$elm_ui_with_context$Element$WithContext$behindContent(
				A2(
					$lucamug$elm_ui_with_context$Element$WithContext$Input$text,
					_Utils_ap(
						_List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$alpha(0.4),
								$lucamug$elm_ui_with_context$Element$WithContext$Border$color(
								A4($lucamug$elm_ui_with_context$Element$WithContext$rgba, 0, 0, 0, 0)),
								$lucamug$elm_ui_with_context$Element$WithContext$Background$color(
								A4($lucamug$elm_ui_with_context$Element$WithContext$rgba, 0, 0, 0, 0)),
								$lucamug$elm_ui_with_context$Element$WithContext$moveDown(7),
								$lucamug$elm_ui_with_context$Element$WithContext$moveRight(3),
								$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
								A2($elm$html$Html$Attributes$attribute, 'disabled', 'true'))
							]),
						function () {
							var _v0 = args.textType;
							switch (_v0.$) {
								case 'TextWithPatternLarge':
									return _Utils_ap($rakutentech$r10$R10$FormComponents$Internal$Text$textWithPatternLargeAttrs, $rakutentech$r10$R10$FormComponents$Internal$Text$textWithPatternLargeAttrsExtra);
								case 'TextWithPattern':
									return $rakutentech$r10$R10$FormComponents$Internal$Text$textWithPatternAttrs;
								default:
									return _List_Nil;
							}
						}()),
					{
						label: $lucamug$elm_ui_with_context$Element$WithContext$Input$labelHidden(''),
						onChange: args.msgOnChange,
						placeholder: $elm$core$Maybe$Nothing,
						text: valueWithTrailingPattern
					}))
			]);
	});
var $rakutentech$r10$R10$FormComponents$Internal$Text$viewBehindPattern = function (args) {
	var _v0 = args.textType;
	switch (_v0.$) {
		case 'TextWithPattern':
			var pattern = _v0.a;
			return A2($rakutentech$r10$R10$FormComponents$Internal$Text$viewBehindPattern2, args, pattern);
		case 'TextWithPatternLarge':
			var pattern = _v0.a;
			return A2($rakutentech$r10$R10$FormComponents$Internal$Text$viewBehindPattern2, args, pattern);
		default:
			return _List_Nil;
	}
};
var $rakutentech$r10$R10$FormComponents$Internal$Text$viewInput = F2(
	function (extraAttr, args) {
		var paddingOffset = 12;
		var name = function () {
			var _v12 = args.textType;
			switch (_v12.$) {
				case 'TextUsername':
					return 'username';
				case 'TextEmail':
					return 'email';
				case 'TextEmailWithSuggestions':
					return 'email';
				case 'TextPasswordCurrent':
					return 'password';
				case 'TextPasswordNew':
					return 'password';
				case 'TextPlain':
					return '';
				case 'TextMultiline':
					return '';
				case 'TextWithPattern':
					return '';
				default:
					return '';
			}
		}();
		var maybeEmailSuggestion = function (listSuggestions) {
			return args.focused ? A2($rakutentech$r10$R10$FormComponents$Internal$EmailAutoSuggest$emailDomainAutocomplete, listSuggestions, args.value) : $elm$core$Maybe$Nothing;
		};
		var rightKeyDownDetection = function (listSuggestions) {
			var _v11 = maybeEmailSuggestion(listSuggestions);
			if (_v11.$ === 'Nothing') {
				return _List_Nil;
			} else {
				var emailSuggestion = _v11.a;
				return _List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
						A3(
							$rakutentech$r10$R10$FormComponents$Internal$EmailAutoSuggest$addOnRightKeyDownEvent,
							args.msgOnChange,
							args.value,
							_Utils_ap(args.value, emailSuggestion)))
					]);
			}
		};
		var inputDisabledAttrs = _List_fromArray(
			[
				$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
				A2($elm$html$Html$Attributes$attribute, 'disabled', 'true'))
			]);
		var inputAttrs = _Utils_ap(
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
					A2($elm$html$Html$Attributes$attribute, 'spellcheck', 'false')),
					$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
					A2($elm$html$Html$Attributes$attribute, 'autocorrect', 'off')),
					$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
					A2($elm$html$Html$Attributes$attribute, 'autocapitalize', 'off')),
					$rakutentech$r10$R10$Transition$transition('all 0.15s'),
					$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
					$elm$html$Html$Attributes$name(name)),
					$lucamug$elm_ui_with_context$Element$WithContext$Font$size($rakutentech$r10$R10$FormComponents$Internal$UI$Const$inputTextFontSize),
					$lucamug$elm_ui_with_context$Element$WithContext$Font$color(
					$rakutentech$r10$R10$FormComponents$Internal$UI$Color$font(args.palette)),
					$lucamug$elm_ui_with_context$Element$WithContext$Border$width(0),
					$lucamug$elm_ui_with_context$Element$WithContext$Background$color($rakutentech$r10$R10$FormComponents$Internal$UI$Color$transparent),
					$lucamug$elm_ui_with_context$Element$WithContext$Events$onFocus(args.msgOnFocus),
					$lucamug$elm_ui_with_context$Element$WithContext$paddingEach(
					{
						bottom: function () {
							var _v4 = args.style;
							if (_v4.$ === 'Filled') {
								return 2;
							} else {
								return 5;
							}
						}(),
						left: function () {
							var _v5 = args.style;
							if (_v5.$ === 'Filled') {
								return 0;
							} else {
								return 16;
							}
						}(),
						right: 16,
						top: function () {
							var _v6 = args.style;
							if (_v6.$ === 'Filled') {
								return 23;
							} else {
								return 20;
							}
						}()
					})
				]),
			_Utils_ap(
				function () {
					var _v7 = args.textType;
					switch (_v7.$) {
						case 'TextWithPatternLarge':
							return $rakutentech$r10$R10$FormComponents$Internal$Text$textWithPatternLargeAttrs;
						case 'TextWithPattern':
							return $rakutentech$r10$R10$FormComponents$Internal$Text$textWithPatternAttrs;
						default:
							return _List_Nil;
					}
				}(),
				_Utils_ap(
					function () {
						var _v8 = args.autocomplete;
						if (_v8.$ === 'Nothing') {
							return _List_Nil;
						} else {
							var string = _v8.a;
							return _List_fromArray(
								[
									$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
									A2($elm$html$Html$Attributes$attribute, 'autocomplete', string))
								]);
						}
					}(),
					_Utils_ap(
						function () {
							var _v9 = args.msgOnEnter;
							if (_v9.$ === 'Just') {
								var msgOnEnter_ = _v9.a;
								return _List_fromArray(
									[
										$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
										$rakutentech$r10$R10$FormComponents$Internal$UI$onEnter(msgOnEnter_))
									]);
							} else {
								return _List_Nil;
							}
						}(),
						_Utils_ap(
							function () {
								var _v10 = args.msgOnLoseFocus;
								if (_v10.$ === 'Just') {
									var msgOnLoseFocus_ = _v10.a;
									return _List_fromArray(
										[
											$lucamug$elm_ui_with_context$Element$WithContext$Events$onLoseFocus(msgOnLoseFocus_)
										]);
								} else {
									return _List_Nil;
								}
							}(),
							_Utils_ap(
								args.disabled ? inputDisabledAttrs : _List_Nil,
								_Utils_ap(
									$rakutentech$r10$R10$FormComponents$Internal$Text$viewBehindPattern(args),
									extraAttr)))))));
		var iconCommonAttrs = _List_fromArray(
			[
				$lucamug$elm_ui_with_context$Element$WithContext$moveDown(
				function () {
					var _v3 = args.style;
					if (_v3.$ === 'Filled') {
						return 8;
					} else {
						return 0;
					}
				}())
			]);
		var displayValidation = !_Utils_eq(args.maybeValid, $elm$core$Maybe$Nothing);
		var styleArgs = {disabled: args.disabled, displayValidation: displayValidation, focused: args.focused, isMouseOver: false, label: args.label, leadingIcon: args.leadingIcon, maybeValid: args.maybeValid, palette: args.palette, requiredLabel: args.requiredLabel, style: args.style, trailingIcon: args.trailingIcon, value: args.value};
		var behavioursTextWithPattern = function (pattern) {
			return {
				label: $lucamug$elm_ui_with_context$Element$WithContext$Input$labelHidden(args.label),
				onChange: function (string) {
					return args.msgOnChange(
						$rakutentech$r10$R10$FormComponents$Internal$Text$handleWithPatternChange(
							{newValue: string, oldValue: args.value, pattern: pattern}));
				},
				placeholder: $elm$core$Maybe$Nothing,
				text: args.value
			};
		};
		var behavioursText = {
			label: $lucamug$elm_ui_with_context$Element$WithContext$Input$labelHidden(args.label),
			onChange: args.msgOnChange,
			placeholder: function () {
				var _v2 = args.placeholder;
				if (_v2.$ === 'Just') {
					var string = _v2.a;
					return $elm$core$Maybe$Just(
						A2(
							$lucamug$elm_ui_with_context$Element$WithContext$Input$placeholder,
							_List_Nil,
							$lucamug$elm_ui_with_context$Element$WithContext$text(string)));
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}(),
			text: args.value
		};
		var behavioursTextEmailWithSuggestions = behavioursText;
		var behavioursPassword = function (show) {
			return {
				label: $lucamug$elm_ui_with_context$Element$WithContext$Input$labelHidden(args.label),
				onChange: args.msgOnChange,
				placeholder: $elm$core$Maybe$Nothing,
				show: show,
				text: args.value
			};
		};
		var behavioursMultiline = {
			label: $lucamug$elm_ui_with_context$Element$WithContext$Input$labelHidden(args.label),
			onChange: args.msgOnChange,
			placeholder: $elm$core$Maybe$Nothing,
			spellcheck: false,
			text: args.value
		};
		return A2(
			$lucamug$elm_ui_with_context$Element$WithContext$row,
			_List_fromArray(
				[
					function () {
					var _v0 = args.style;
					if (_v0.$ === 'Filled') {
						return $lucamug$elm_ui_with_context$Element$WithContext$Border$rounded(0);
					} else {
						return $lucamug$elm_ui_with_context$Element$WithContext$Border$rounded(5);
					}
				}(),
					$rakutentech$r10$R10$FormComponents$Internal$Text$getBorder(styleArgs),
					$lucamug$elm_ui_with_context$Element$WithContext$mouseOver(
					_List_fromArray(
						[
							$rakutentech$r10$R10$FormComponents$Internal$Text$getBorder(
							_Utils_update(
								styleArgs,
								{isMouseOver: true}))
						])),
					$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
					$lucamug$elm_ui_with_context$Element$WithContext$padding(0),
					$lucamug$elm_ui_with_context$Element$WithContext$spacing(0)
				]),
			_Utils_ap(
				_List_Nil,
				_Utils_ap(
					A2(
						$elm$core$List$map,
						function (icon) {
							return A2($lucamug$elm_ui_with_context$Element$WithContext$el, iconCommonAttrs, icon);
						},
						args.leadingIcon),
					_Utils_ap(
						_List_fromArray(
							[
								function () {
								var _v1 = args.textType;
								switch (_v1.$) {
									case 'TextUsername':
										return A2($lucamug$elm_ui_with_context$Element$WithContext$Input$username, inputAttrs, behavioursText);
									case 'TextEmail':
										return A2($lucamug$elm_ui_with_context$Element$WithContext$Input$email, inputAttrs, behavioursText);
									case 'TextEmailWithSuggestions':
										var listSuggestions = _v1.a;
										return A2(
											$lucamug$elm_ui_with_context$Element$WithContext$el,
											_Utils_ap(
												_List_fromArray(
													[
														$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill)
													]),
												rightKeyDownDetection(listSuggestions)),
											$lucamug$elm_ui_with_context$Element$WithContext$withContext(
												function (c) {
													var autoSuggestionsAttrs = $rakutentech$r10$R10$FormComponents$Internal$EmailAutoSuggest$autoSuggestionsAttrs(
														{
															maybeEmailSuggestion: maybeEmailSuggestion(c.emailDomainList),
															msgOnChange: args.msgOnChange,
															userAgent: c.userAgent,
															value: args.value
														});
													return A2(
														$lucamug$elm_ui_with_context$Element$WithContext$Input$email,
														_Utils_ap(autoSuggestionsAttrs, inputAttrs),
														behavioursTextEmailWithSuggestions);
												}));
									case 'TextPasswordCurrent':
										return A2(
											$lucamug$elm_ui_with_context$Element$WithContext$Input$currentPassword,
											inputAttrs,
											behavioursPassword(args.showPassword));
									case 'TextPasswordNew':
										return A2(
											$lucamug$elm_ui_with_context$Element$WithContext$Input$newPassword,
											inputAttrs,
											behavioursPassword(args.showPassword));
									case 'TextPlain':
										return A2($lucamug$elm_ui_with_context$Element$WithContext$Input$text, inputAttrs, behavioursText);
									case 'TextMultiline':
										return A2($lucamug$elm_ui_with_context$Element$WithContext$Input$multiline, inputAttrs, behavioursMultiline);
									case 'TextWithPattern':
										var pattern = _v1.a;
										return A2(
											$lucamug$elm_ui_with_context$Element$WithContext$Input$text,
											inputAttrs,
											behavioursTextWithPattern(pattern));
									default:
										var pattern = _v1.a;
										return A2(
											$lucamug$elm_ui_with_context$Element$WithContext$Input$text,
											_Utils_ap($rakutentech$r10$R10$FormComponents$Internal$Text$textWithPatternLargeAttrsExtra, inputAttrs),
											behavioursTextWithPattern(pattern));
								}
							}()
							]),
						A2(
							$elm$core$List$map,
							function (icon) {
								return A2($lucamug$elm_ui_with_context$Element$WithContext$el, iconCommonAttrs, icon);
							},
							args.trailingIcon)))));
	});
var $rakutentech$r10$R10$Svg$Icons$eye_l = F3(
	function (attrs, cl, size) {
		return A3(
			$rakutentech$r10$R10$Svg$Utils$wrapper32,
			attrs,
			size,
			_List_fromArray(
				[
					A2(
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$fill('none'),
							$elm$svg$Svg$Attributes$d('M0 0h32v32H0z')
						]),
					_List_Nil),
					A2(
					$elm$svg$Svg$g,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$fill(
							$rakutentech$r10$R10$Color$Utils$toCssRgba(cl))
						]),
					_List_fromArray(
						[
							A2(
							$elm$svg$Svg$path,
							_List_fromArray(
								[
									$elm$svg$Svg$Attributes$d('M16 6C6 6 2 16 2 16s4 10 14 10 14-10 14-10S26 6 16 6zm0 18c-7.1 0-10.71-5.87-11.8-8C5.3 13.9 8.96 8 16 8c7.1 0 10.72 5.87 11.8 8-1.09 2.1-4.75 8-11.8 8z')
								]),
							_List_Nil),
							A2(
							$elm$svg$Svg$path,
							_List_fromArray(
								[
									$elm$svg$Svg$Attributes$d('M16 11a5 5 0 1 0 5 5 5 5 0 0 0-5-5zm0 8a3 3 0 1 1 3-3 3 3 0 0 1-3 3z')
								]),
							_List_Nil)
						]))
				]));
	});
var $rakutentech$r10$R10$FormComponents$Internal$IconButton$view = F2(
	function (args, _v0) {
		var msgOnClick = _v0.msgOnClick;
		var icon = _v0.icon;
		var palette = _v0.palette;
		var size = _v0.size;
		var padding_ = 8;
		var iconHitboxSize = size + (padding_ * 2);
		var containerSize = 24;
		var moveUp_ = (iconHitboxSize - containerSize) / 2;
		var attrsCommon = _List_fromArray(
			[
				$lucamug$elm_ui_with_context$Element$WithContext$Background$color(
				A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$onSurfaceA, 0, palette)),
				$lucamug$elm_ui_with_context$Element$WithContext$padding(padding_),
				$lucamug$elm_ui_with_context$Element$WithContext$centerX,
				$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
				A2(
					$elm$html$Html$Attributes$style,
					'margin-top',
					'-' + ($elm$core$String$fromFloat(moveUp_) + 'px')))
			]);
		var attrsClickable = function () {
			if (msgOnClick.$ === 'Just') {
				var msgOnClick_ = msgOnClick.a;
				return _List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
						$elm$html$Html$Attributes$tabindex(0)),
						$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
						$rakutentech$r10$R10$FormComponents$Internal$UI$onSelectKey(msgOnClick_)),
						$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
						A2(
							$elm$html$Html$Events$stopPropagationOn,
							'mouseup',
							$elm$json$Json$Decode$succeed(
								_Utils_Tuple2(msgOnClick_, false)))),
						$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
						$elm$html$Html$Attributes$class('ripple')),
						$rakutentech$r10$R10$Transition$transition('all 0.13s; margin-top 0s '),
						$lucamug$elm_ui_with_context$Element$WithContext$pointer,
						$lucamug$elm_ui_with_context$Element$WithContext$Border$rounded(40),
						$lucamug$elm_ui_with_context$Element$WithContext$mouseOver(
						_List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$Border$innerShadow(
								{
									blur: 0,
									color: A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$onSurfaceA, 0.07, palette),
									offset: _Utils_Tuple2(0, 0),
									size: 40
								})
							])),
						$lucamug$elm_ui_with_context$Element$WithContext$focused(
						_List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$Background$color(
								A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$onSurfaceA, 0.14, palette))
							]))
					]);
			} else {
				return _List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$alpha(0.5)
					]);
			}
		}();
		return A2(
			$lucamug$elm_ui_with_context$Element$WithContext$el,
			_Utils_ap(
				_List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$width(
						$lucamug$elm_ui_with_context$Element$WithContext$px(containerSize)),
						$lucamug$elm_ui_with_context$Element$WithContext$height(
						$lucamug$elm_ui_with_context$Element$WithContext$px(containerSize))
					]),
				args),
			A2(
				$lucamug$elm_ui_with_context$Element$WithContext$el,
				_Utils_ap(attrsCommon, attrsClickable),
				A2(
					$lucamug$elm_ui_with_context$Element$WithContext$el,
					_List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$centerX,
							$lucamug$elm_ui_with_context$Element$WithContext$centerY,
							$lucamug$elm_ui_with_context$Element$WithContext$width(
							$lucamug$elm_ui_with_context$Element$WithContext$px(size)),
							$lucamug$elm_ui_with_context$Element$WithContext$height(
							$lucamug$elm_ui_with_context$Element$WithContext$px(size))
						]),
					icon)));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Text$viewShowHidePasswordButton = function (_v0) {
	var msgOnTogglePasswordShow = _v0.msgOnTogglePasswordShow;
	var showPassword = _v0.showPassword;
	var palette = _v0.palette;
	var icon = showPassword ? A3(
		$rakutentech$r10$R10$Svg$Icons$eye_ban_l,
		_List_Nil,
		$rakutentech$r10$R10$FormComponents$Internal$UI$Color$label(palette),
		24) : A3(
		$rakutentech$r10$R10$Svg$Icons$eye_l,
		_List_Nil,
		$rakutentech$r10$R10$FormComponents$Internal$UI$Color$label(palette),
		24);
	if (msgOnTogglePasswordShow.$ === 'Just') {
		var msgOnTogglePasswordShow_ = msgOnTogglePasswordShow.a;
		return A2(
			$rakutentech$r10$R10$FormComponents$Internal$IconButton$view,
			_List_Nil,
			{
				icon: icon,
				msgOnClick: $elm$core$Maybe$Just(msgOnTogglePasswordShow_),
				palette: palette,
				size: 24
			});
	} else {
		return $lucamug$elm_ui_with_context$Element$WithContext$none;
	}
};
var $rakutentech$r10$R10$FormComponents$Internal$Text$view = F3(
	function (attrs, extraInputAttrs, args) {
		var displayValidation = !_Utils_eq(args.maybeValid, $elm$core$Maybe$Nothing);
		var newArgs = _Utils_update(
			args,
			{
				trailingIcon: function (icons) {
					return _Utils_ap(
						icons,
						_List_fromArray(
							[
								$rakutentech$r10$R10$FormComponents$Internal$UI$showValidationIcon_(
								{displayValidation: displayValidation, maybeValid: args.maybeValid, palette: args.palette, style: args.style})
							]));
				}(
					function (icons) {
						return $rakutentech$r10$R10$FormComponents$Internal$Text$needShowHideIcon(args.textType) ? A2(
							$elm$core$List$cons,
							A2(
								$lucamug$elm_ui_with_context$Element$WithContext$el,
								_List_fromArray(
									[
										$lucamug$elm_ui_with_context$Element$WithContext$paddingEach(
										{bottom: 0, left: 0, right: 8, top: 0})
									]),
								$rakutentech$r10$R10$FormComponents$Internal$Text$viewShowHidePasswordButton(args)),
							icons) : icons;
					}(args.trailingIcon))
			});
		var styleArgs = {disabled: newArgs.disabled, displayValidation: displayValidation, floatingLabelAlwaysUp: args.floatingLabelAlwaysUp, focused: newArgs.focused, isMouseOver: false, label: newArgs.label, leadingIcon: newArgs.leadingIcon, maybeValid: args.maybeValid, palette: newArgs.palette, requiredLabel: newArgs.requiredLabel, style: newArgs.style, trailingIcon: newArgs.trailingIcon, value: newArgs.value};
		return A2(
			$lucamug$elm_ui_with_context$Element$WithContext$column,
			_Utils_ap(
				_List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$spacing(0),
						$lucamug$elm_ui_with_context$Element$WithContext$width(
						A2($lucamug$elm_ui_with_context$Element$WithContext$minimum, 150, $lucamug$elm_ui_with_context$Element$WithContext$fill)),
						$lucamug$elm_ui_with_context$Element$WithContext$inFront(
						$rakutentech$r10$R10$FormComponents$Internal$UI$floatingLabel(styleArgs))
					]),
				_Utils_ap(
					newArgs.disabled ? _List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$alpha(0.6)
						]) : _List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$alpha(1)
						]),
					attrs)),
			_List_fromArray(
				[
					A2(
					$rakutentech$r10$R10$FormComponents$Internal$Text$viewInput,
					_Utils_ap(
						_List_fromArray(
							[
								function () {
								var _v0 = newArgs.style;
								if (_v0.$ === 'Filled') {
									return $lucamug$elm_ui_with_context$Element$WithContext$Border$rounded(0);
								} else {
									return $lucamug$elm_ui_with_context$Element$WithContext$Border$rounded(5);
								}
							}(),
								$lucamug$elm_ui_with_context$Element$WithContext$withContextAttribute(
								function (c) {
									return $lucamug$elm_ui_with_context$Element$WithContext$height(
										$lucamug$elm_ui_with_context$Element$WithContext$px(
											function () {
												var _v1 = newArgs.textType;
												switch (_v1.$) {
													case 'TextMultiline':
														return 200;
													case 'TextWithPatternLarge':
														return c.inputFieldWithLargePattern_height;
													default:
														return $rakutentech$r10$R10$FormComponents$Internal$UI$Const$inputTextHeight;
												}
											}()));
								})
							]),
						_Utils_ap(
							function () {
								var _v2 = args.idDom;
								if (_v2.$ === 'Just') {
									var id = _v2.a;
									return _List_fromArray(
										[
											$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
											$elm$html$Html$Attributes$id(id))
										]);
								} else {
									return _List_Nil;
								}
							}(),
							extraInputAttrs)),
					newArgs),
					A3(
					$rakutentech$r10$R10$FormComponents$Internal$UI$viewHelperText,
					newArgs.palette,
					_List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$spacing(2),
							$lucamug$elm_ui_with_context$Element$WithContext$alpha(0.5),
							$lucamug$elm_ui_with_context$Element$WithContext$Font$size(14),
							$lucamug$elm_ui_with_context$Element$WithContext$paddingEach(
							{bottom: 0, left: 0, right: 0, top: $rakutentech$r10$R10$FormComponents$Internal$UI$genericSpacing})
						]),
					newArgs.helperText)
				]));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnScroll = function (a) {
	return {$: 'OnScroll', a: a};
};
var $mdgriffith$elm_ui$Element$Keyed$column = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asColumn,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentTop + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.contentLeft)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Keyed(children));
	});
var $lucamug$elm_ui_with_context$Element$WithContext$Keyed$column = A2(
	$lucamug$elm_ui_with_context$Element$WithContext$Internal$wrapAttrs,
	$mdgriffith$elm_ui$Element$Keyed$column,
	A2(
		$elm$core$Basics$composeL,
		$elm$core$List$map,
		A2($elm$core$Basics$composeL, $elm$core$Tuple$mapSecond, $lucamug$elm_ui_with_context$Element$WithContext$Internal$run)));
var $rakutentech$r10$R10$FormComponents$Internal$Single$Combobox$comboboxOptionNoResults = function (_v0) {
	var palette = _v0.palette;
	var selectOptionHeight = _v0.selectOptionHeight;
	return A2(
		$lucamug$elm_ui_with_context$Element$WithContext$el,
		_List_fromArray(
			[
				$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
				$lucamug$elm_ui_with_context$Element$WithContext$height(
				$lucamug$elm_ui_with_context$Element$WithContext$px(selectOptionHeight)),
				$lucamug$elm_ui_with_context$Element$WithContext$paddingEach(
				{bottom: 0, left: 12, right: 0, top: 0}),
				$lucamug$elm_ui_with_context$Element$WithContext$Font$color(
				A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$onSurfaceA, 0.5, palette))
			]),
		A2(
			$lucamug$elm_ui_with_context$Element$WithContext$el,
			_List_fromArray(
				[$lucamug$elm_ui_with_context$Element$WithContext$centerY]),
			$lucamug$elm_ui_with_context$Element$WithContext$text('No results')));
};
var $rakutentech$r10$R10$FormComponents$Internal$Utils$listSlice = F3(
	function (from, to, list) {
		return (_Utils_cmp(from, to) > -1) ? _List_Nil : A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			A2(
				$elm$core$List$indexedMap,
				F2(
					function (idx, opt) {
						return (_Utils_cmp(idx, to - from) < 0) ? $elm$core$Maybe$Just(opt) : $elm$core$Maybe$Nothing;
					}),
				A2($elm$core$List$drop, from, list)));
	});
var $rakutentech$r10$R10$FormComponents$Internal$UI$onScroll = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'scroll',
		A2(
			$elm$json$Json$Decode$map,
			msg,
			A2(
				$elm$json$Json$Decode$at,
				_List_fromArray(
					['target', 'scrollTop']),
				$elm$json$Json$Decode$float)));
};
var $mdgriffith$elm_ui$Element$scrollbarX = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.scrollbarsX);
var $lucamug$elm_ui_with_context$Element$WithContext$scrollbarX = $lucamug$elm_ui_with_context$Element$WithContext$attribute($mdgriffith$elm_ui$Element$scrollbarX);
var $rakutentech$r10$R10$FormComponents$Internal$UI$Color$primaryVariantA = F2(
	function (alpha, palette) {
		return $rakutentech$r10$R10$FormComponents$Internal$UI$Color$fromPaletteColor(
			A2($rakutentech$r10$R10$FormComponents$Internal$UI$Palette$withOpacity, alpha, palette.primaryVariant));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$Combobox$viewComboboxOption = F4(
	function (value, select, args, opt) {
		var isSelected_ = _Utils_eq(select, opt.value);
		var isActiveValue = _Utils_eq(value, opt.value);
		var getShadowColor = isActiveValue ? A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$primaryVariantA, 0.1, args.palette) : A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$onSurfaceA, 0.05, args.palette);
		var getBackgroundColor = (isActiveValue && isSelected_) ? A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$primaryVariantA, 0.13, args.palette) : (isActiveValue ? A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$primaryVariantA, 0.07, args.palette) : (isSelected_ ? A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$onSurfaceA, 0.07, args.palette) : A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$onSurfaceA, 0, args.palette)));
		return A2(
			$lucamug$elm_ui_with_context$Element$WithContext$el,
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
					$lucamug$elm_ui_with_context$Element$WithContext$height(
					$lucamug$elm_ui_with_context$Element$WithContext$px(args.selectOptionHeight)),
					$lucamug$elm_ui_with_context$Element$WithContext$Background$color(getBackgroundColor),
					$lucamug$elm_ui_with_context$Element$WithContext$mouseOver(
					_List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$Border$innerShadow(
							{
								blur: 0,
								color: getShadowColor,
								offset: _Utils_Tuple2(0, 0),
								size: 40
							})
						]))
				]),
			args.viewOptionEl(opt));
	});
var $rakutentech$r10$R10$Color$Internal$Derived$FontHighEmphasis = {$: 'FontHighEmphasis'};
var $rakutentech$r10$R10$Color$Svg$fontHighEmphasis = function (theme) {
	return $rakutentech$r10$R10$Color$Utils$fromColorColor(
		A2($rakutentech$r10$R10$Color$Internal$Derived$toColor, theme, $rakutentech$r10$R10$Color$Internal$Derived$FontHighEmphasis));
};
var $rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnSearch = F2(
	function (a, b) {
		return {$: 'OnSearch', a: a, b: b};
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$Update$getMsgOnSearch = F2(
	function (args, newSearch) {
		return A2(
			$rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnSearch,
			{
				filteredFieldOption: A2($rakutentech$r10$R10$FormComponents$Internal$Single$Common$filterBySearch, newSearch, args),
				key: args.key,
				maxDisplayCount: args.maxDisplayCount,
				selectOptionHeight: args.selectOptionHeight
			},
			newSearch);
	});
var $lucamug$elm_ui_with_context$Element$WithContext$Input$buildLabel = F3(
	function (f, attrs, child) {
		return $lucamug$elm_ui_with_context$Element$WithContext$Input$Label(
			function (context) {
				return A2(
					f,
					A2($lucamug$elm_ui_with_context$Element$WithContext$Internal$attributes, context, attrs),
					A2($lucamug$elm_ui_with_context$Element$WithContext$Internal$run, context, child));
			});
	});
var $mdgriffith$elm_ui$Element$Input$Label = F3(
	function (a, b, c) {
		return {$: 'Label', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Element$Input$OnLeft = {$: 'OnLeft'};
var $mdgriffith$elm_ui$Element$Input$labelLeft = $mdgriffith$elm_ui$Element$Input$Label($mdgriffith$elm_ui$Element$Input$OnLeft);
var $lucamug$elm_ui_with_context$Element$WithContext$Input$labelLeft = $lucamug$elm_ui_with_context$Element$WithContext$Input$buildLabel($mdgriffith$elm_ui$Element$Input$labelLeft);
var $rakutentech$r10$R10$Svg$Icons$search = F3(
	function (attrs, cl, size) {
		return A3(
			$rakutentech$r10$R10$Svg$Utils$wrapper32,
			attrs,
			size,
			_List_fromArray(
				[
					A2(
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$d('M13 2a11 11 0 1 0 11 11A11 11 0 0 0 13 2zm0 20a9 9 0 1 1 9-9 9.01 9.01 0 0 1-9 9zm9.86-.55a13.11 13.11 0 0 1-1.41 1.41L28.59 30 30 28.59z'),
							$elm$svg$Svg$Attributes$fill(
							$rakutentech$r10$R10$Color$Utils$toCssRgba(cl))
						]),
					_List_Nil),
					A2(
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$fill('none'),
							$elm$svg$Svg$Attributes$d('M0 0h32v32H0z')
						]),
					_List_Nil)
				]));
	});
var $mdgriffith$elm_ui$Element$Border$widthXY = F2(
	function (x, y) {
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$borderWidth,
			A5(
				$mdgriffith$elm_ui$Internal$Model$BorderWidth,
				'b-' + ($elm$core$String$fromInt(x) + ('-' + $elm$core$String$fromInt(y))),
				y,
				x,
				y,
				x));
	});
var $mdgriffith$elm_ui$Element$Border$widthEach = function (_v0) {
	var bottom = _v0.bottom;
	var top = _v0.top;
	var left = _v0.left;
	var right = _v0.right;
	return (_Utils_eq(top, bottom) && _Utils_eq(left, right)) ? (_Utils_eq(top, right) ? $mdgriffith$elm_ui$Element$Border$width(top) : A2($mdgriffith$elm_ui$Element$Border$widthXY, left, top)) : A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderWidth,
		A5(
			$mdgriffith$elm_ui$Internal$Model$BorderWidth,
			'b-' + ($elm$core$String$fromInt(top) + ('-' + ($elm$core$String$fromInt(right) + ('-' + ($elm$core$String$fromInt(bottom) + ('-' + $elm$core$String$fromInt(left))))))),
			top,
			right,
			bottom,
			left));
};
var $lucamug$elm_ui_with_context$Element$WithContext$Border$widthEach = function (edges) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$attribute(
		$mdgriffith$elm_ui$Element$Border$widthEach(edges));
};
var $rakutentech$r10$R10$FormComponents$Internal$Single$Combobox$viewSearchBox = F2(
	function (model, args) {
		return args.searchable ? A2(
			$lucamug$elm_ui_with_context$Element$WithContext$row,
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$Border$widthEach(
					{bottom: 1, left: 0, right: 0, top: 0}),
					$lucamug$elm_ui_with_context$Element$WithContext$Border$color(
					A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$borderA, 0.3, args.palette)),
					A2($lucamug$elm_ui_with_context$Element$WithContext$paddingXY, 17, 0),
					$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill)
				]),
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$withContext(
					function (c) {
						return A2(
							$lucamug$elm_ui_with_context$Element$WithContext$Input$text,
							_List_fromArray(
								[
									$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
									$elm$html$Html$Attributes$id(
										$rakutentech$r10$R10$FormComponents$Internal$Single$Common$singleSearchBoxId(args.key))),
									$lucamug$elm_ui_with_context$Element$WithContext$Background$color(
									$rakutentech$r10$R10$FormComponents$Internal$UI$Color$surface(args.palette)),
									$lucamug$elm_ui_with_context$Element$WithContext$paddingEach(
									{bottom: 16, left: 10, right: 16, top: 16}),
									$lucamug$elm_ui_with_context$Element$WithContext$Border$width(0)
								]),
							{
								label: A2(
									$lucamug$elm_ui_with_context$Element$WithContext$Input$labelLeft,
									_List_fromArray(
										[
											$lucamug$elm_ui_with_context$Element$WithContext$moveDown(3)
										]),
									A3(
										$rakutentech$r10$R10$Svg$Icons$search,
										_List_Nil,
										$rakutentech$r10$R10$Color$Svg$fontHighEmphasis(c.theme),
										18)),
								onChange: function (string) {
									return args.toMsg(
										A2($rakutentech$r10$R10$FormComponents$Internal$Single$Update$getMsgOnSearch, args, string));
								},
								placeholder: $elm$core$Maybe$Nothing,
								text: model.search
							});
					})
				])) : $lucamug$elm_ui_with_context$Element$WithContext$none;
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$Combobox$viewComboboxDropdown = F4(
	function (model, args, opened, filteredOptions) {
		var visibleCount = args.maxDisplayCount + 2;
		var optionsCount = $elm$core$List$length(filteredOptions);
		var elementsScrolledFromTop = ($elm$core$Basics$round(model.scroll) / args.selectOptionHeight) | 0;
		var visibleFrom = elementsScrolledFromTop - 1;
		var visibleMoveDown = $rakutentech$r10$R10$FormComponents$Internal$Single$Update$dropdownHingeHeight + (A2($elm$core$Basics$max, 0, visibleFrom) * args.selectOptionHeight);
		var visibleTo = visibleFrom + visibleCount;
		var visibleOptions = ($elm$core$List$length(filteredOptions) > 0) ? A2(
			$elm$core$List$map,
			function (opt) {
				return _Utils_Tuple2(
					opt.value,
					A4($rakutentech$r10$R10$FormComponents$Internal$Single$Combobox$viewComboboxOption, model.value, model.select, args, opt));
			},
			A3($rakutentech$r10$R10$FormComponents$Internal$Utils$listSlice, visibleFrom, visibleTo, filteredOptions)) : _List_fromArray(
			[
				_Utils_Tuple2(
				'no_results',
				$rakutentech$r10$R10$FormComponents$Internal$Single$Combobox$comboboxOptionNoResults(args))
			]);
		var contentHeight = args.selectOptionHeight * A2($elm$core$Basics$max, optionsCount, 1);
		return (!opened) ? $lucamug$elm_ui_with_context$Element$WithContext$none : A2(
			$lucamug$elm_ui_with_context$Element$WithContext$column,
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
					$lucamug$elm_ui_with_context$Element$WithContext$clip,
					$lucamug$elm_ui_with_context$Element$WithContext$moveDown(60),
					$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
					$elm$html$Html$Attributes$tabindex(-1)),
					$lucamug$elm_ui_with_context$Element$WithContext$Background$color(
					$rakutentech$r10$R10$FormComponents$Internal$UI$Color$surface(args.palette)),
					$lucamug$elm_ui_with_context$Element$WithContext$Border$color(
					A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$borderA, 0.5, args.palette)),
					$lucamug$elm_ui_with_context$Element$WithContext$Border$width(1),
					$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
					A2($elm$html$Html$Attributes$style, 'z-index', '1')),
					$lucamug$elm_ui_with_context$Element$WithContext$Border$rounded(
					function () {
						var _v0 = args.style;
						if (_v0.$ === 'Filled') {
							return 0;
						} else {
							return 8;
						}
					}()),
					$lucamug$elm_ui_with_context$Element$WithContext$Border$shadow(
					{
						blur: 10,
						color: A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$onSurfaceA, 0.3, args.palette),
						offset: _Utils_Tuple2(0, 0),
						size: 3
					})
				]),
			_List_fromArray(
				[
					A2($rakutentech$r10$R10$FormComponents$Internal$Single$Combobox$viewSearchBox, model, args),
					A2(
					$lucamug$elm_ui_with_context$Element$WithContext$el,
					_List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
							$lucamug$elm_ui_with_context$Element$WithContext$height(
							$lucamug$elm_ui_with_context$Element$WithContext$px(
								A2($rakutentech$r10$R10$FormComponents$Internal$Single$Update$getDropdownHeight, args, optionsCount))),
							$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
							A2($elm$html$Html$Attributes$style, 'overscroll-behavior', 'contain')),
							$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
							$rakutentech$r10$R10$FormComponents$Internal$UI$onScroll(
								A2($elm$core$Basics$composeL, args.toMsg, $rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnScroll))),
							$lucamug$elm_ui_with_context$Element$WithContext$Font$color(
							$rakutentech$r10$R10$FormComponents$Internal$UI$Color$font(args.palette)),
							$lucamug$elm_ui_with_context$Element$WithContext$Background$color(
							$rakutentech$r10$R10$FormComponents$Internal$UI$Color$surface(args.palette)),
							$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
							$elm$html$Html$Attributes$id(
								$rakutentech$r10$R10$FormComponents$Internal$Single$Common$dropdownContentId(args.key))),
							$lucamug$elm_ui_with_context$Element$WithContext$scrollbarX,
							$lucamug$elm_ui_with_context$Element$WithContext$inFront(
							A2(
								$lucamug$elm_ui_with_context$Element$WithContext$Keyed$column,
								_List_fromArray(
									[
										$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
										$lucamug$elm_ui_with_context$Element$WithContext$moveDown(visibleMoveDown)
									]),
								visibleOptions))
						]),
					A2(
						$lucamug$elm_ui_with_context$Element$WithContext$el,
						_List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$height(
								$lucamug$elm_ui_with_context$Element$WithContext$px(contentHeight)),
								$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill)
							]),
						$lucamug$elm_ui_with_context$Element$WithContext$none))
				]));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$Combobox$view = F3(
	function (attrs, model, args) {
		var focusOnSearchBox = model.opened && args.searchable;
		var filteredFieldOption = A2($rakutentech$r10$R10$FormComponents$Internal$Single$Common$filterBySearch, model.search, args);
		var inputAttrs = _List_fromArray(
			[
				$lucamug$elm_ui_with_context$Element$WithContext$Events$onClick(
				args.toMsg(
					A3($rakutentech$r10$R10$FormComponents$Internal$Single$Combobox$getMsgOnInputClick, model, args, filteredFieldOption))),
				$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
				A2($elm$html$Html$Attributes$attribute, 'readonly', 'true'))
			]);
		var displayValue = A2($rakutentech$r10$R10$FormComponents$Internal$Single$Combobox$optionsLabelOrSearchValue, model.value, args.fieldOptions);
		var textArgs = {
			autocomplete: $elm$core$Maybe$Nothing,
			disabled: args.disabled,
			floatingLabelAlwaysUp: false,
			focused: model.focused,
			helperText: args.helperText,
			idDom: $elm$core$Maybe$Nothing,
			label: args.label,
			leadingIcon: args.leadingIcon,
			maybeValid: args.maybeValid,
			msgOnChange: A2(
				$elm$core$Basics$composeL,
				args.toMsg,
				$elm$core$Basics$always($rakutentech$r10$R10$FormComponents$Internal$Single$Common$NoOp)),
			msgOnEnter: $elm$core$Maybe$Nothing,
			msgOnFocus: args.toMsg(
				$rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnFocus(model.value)),
			msgOnLoseFocus: $elm$core$Maybe$Nothing,
			msgOnTogglePasswordShow: $elm$core$Maybe$Nothing,
			palette: args.palette,
			placeholder: $elm$core$Maybe$Nothing,
			requiredLabel: args.requiredLabel,
			showPassword: false,
			style: args.style,
			textType: $rakutentech$r10$R10$FormTypes$TextPlain,
			trailingIcon: args.trailingIcon,
			value: displayValue
		};
		return A3(
			$rakutentech$r10$R10$FormComponents$Internal$Text$view,
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
					$elm$html$Html$Attributes$id(
						$rakutentech$r10$R10$FormComponents$Internal$Single$Common$dropdownContainerId(args.key))),
					$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
					$elm$html$Html$Attributes$tabindex(-1)),
					$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
					A2(
						$elm$html$Html$Events$on,
						'focusout',
						A2(
							$rakutentech$r10$R10$FormComponents$Internal$Utils$FocusOut$onFocusOut,
							$rakutentech$r10$R10$FormComponents$Internal$Single$Common$dropdownContainerId(args.key),
							args.toMsg(
								$rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnLoseFocus(model.value))))),
					$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
					$rakutentech$r10$R10$FormComponents$Internal$UI$onKeyPressBatch(
						_Utils_ap(
							_List_fromArray(
								[
									_Utils_Tuple2(
									$rakutentech$r10$R10$FormComponents$Internal$UI$keyCode.down,
									args.toMsg(
										$rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnArrowDown(
											{filteredFieldOption: filteredFieldOption, key: args.key, maxDisplayCount: args.maxDisplayCount, selectOptionHeight: args.selectOptionHeight}))),
									_Utils_Tuple2(
									$rakutentech$r10$R10$FormComponents$Internal$UI$keyCode.up,
									args.toMsg(
										$rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnArrowUp(
											{filteredFieldOption: filteredFieldOption, key: args.key, maxDisplayCount: args.maxDisplayCount, selectOptionHeight: args.selectOptionHeight})))
								]),
							_Utils_ap(
								(!focusOnSearchBox) ? _List_fromArray(
									[
										_Utils_Tuple2(
										$rakutentech$r10$R10$FormComponents$Internal$UI$keyCode.del,
										args.toMsg($rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnDelBackspace)),
										_Utils_Tuple2(
										$rakutentech$r10$R10$FormComponents$Internal$UI$keyCode.backspace,
										args.toMsg($rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnDelBackspace))
									]) : _List_Nil,
								model.opened ? _List_fromArray(
									[
										_Utils_Tuple2(
										$rakutentech$r10$R10$FormComponents$Internal$UI$keyCode.esc,
										args.toMsg($rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnEsc)),
										_Utils_Tuple2(
										$rakutentech$r10$R10$FormComponents$Internal$UI$keyCode.enter,
										args.toMsg(
											$rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnOptionSelect(
												A3($rakutentech$r10$R10$FormComponents$Internal$Single$Common$getSelectedOrFirst, filteredFieldOption, model.value, model.select))))
									]) : _List_Nil)))),
					$lucamug$elm_ui_with_context$Element$WithContext$inFront(
					A4($rakutentech$r10$R10$FormComponents$Internal$Single$Combobox$viewComboboxDropdown, model, args, model.opened, filteredFieldOption))
				]),
			_Utils_ap(inputAttrs, attrs),
			textArgs);
	});
var $mdgriffith$elm_ui$Element$Input$Above = {$: 'Above'};
var $mdgriffith$elm_ui$Element$Input$labelAbove = $mdgriffith$elm_ui$Element$Input$Label($mdgriffith$elm_ui$Element$Input$Above);
var $lucamug$elm_ui_with_context$Element$WithContext$Input$labelAbove = $lucamug$elm_ui_with_context$Element$WithContext$Input$buildLabel($mdgriffith$elm_ui$Element$Input$labelAbove);
var $mdgriffith$elm_ui$Element$Input$Column = {$: 'Column'};
var $mdgriffith$elm_ui$Element$Input$AfterFound = {$: 'AfterFound'};
var $mdgriffith$elm_ui$Element$Input$BeforeFound = {$: 'BeforeFound'};
var $mdgriffith$elm_ui$Element$Input$Idle = {$: 'Idle'};
var $mdgriffith$elm_ui$Element$Input$NotFound = {$: 'NotFound'};
var $mdgriffith$elm_ui$Element$Input$Selected = {$: 'Selected'};
var $mdgriffith$elm_ui$Internal$Model$Left = {$: 'Left'};
var $mdgriffith$elm_ui$Element$alignLeft = $mdgriffith$elm_ui$Internal$Model$AlignX($mdgriffith$elm_ui$Internal$Model$Left);
var $mdgriffith$elm_ui$Element$Input$column = F2(
	function (attributes, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asColumn,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					attributes)),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $mdgriffith$elm_ui$Element$Input$downArrow = 'ArrowDown';
var $mdgriffith$elm_ui$Internal$Model$filter = function (attrs) {
	return A3(
		$elm$core$List$foldr,
		F2(
			function (x, _v0) {
				var found = _v0.a;
				var has = _v0.b;
				switch (x.$) {
					case 'NoAttribute':
						return _Utils_Tuple2(found, has);
					case 'Class':
						var key = x.a;
						return _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							has);
					case 'Attr':
						var attr = x.a;
						return _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							has);
					case 'StyleClass':
						var style = x.b;
						return _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							has);
					case 'Width':
						var width = x.a;
						return A2($elm$core$Set$member, 'width', has) ? _Utils_Tuple2(found, has) : _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							A2($elm$core$Set$insert, 'width', has));
					case 'Height':
						var height = x.a;
						return A2($elm$core$Set$member, 'height', has) ? _Utils_Tuple2(found, has) : _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							A2($elm$core$Set$insert, 'height', has));
					case 'Describe':
						var description = x.a;
						return A2($elm$core$Set$member, 'described', has) ? _Utils_Tuple2(found, has) : _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							A2($elm$core$Set$insert, 'described', has));
					case 'Nearby':
						var location = x.a;
						var elem = x.b;
						return _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							has);
					case 'AlignX':
						return A2($elm$core$Set$member, 'align-x', has) ? _Utils_Tuple2(found, has) : _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							A2($elm$core$Set$insert, 'align-x', has));
					case 'AlignY':
						return A2($elm$core$Set$member, 'align-y', has) ? _Utils_Tuple2(found, has) : _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							A2($elm$core$Set$insert, 'align-y', has));
					default:
						return A2($elm$core$Set$member, 'transform', has) ? _Utils_Tuple2(found, has) : _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							A2($elm$core$Set$insert, 'transform', has));
				}
			}),
		_Utils_Tuple2(_List_Nil, $elm$core$Set$empty),
		attrs).a;
};
var $mdgriffith$elm_ui$Internal$Model$get = F2(
	function (attrs, isAttr) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, found) {
					return isAttr(x) ? A2($elm$core$List$cons, x, found) : found;
				}),
			_List_Nil,
			$mdgriffith$elm_ui$Internal$Model$filter(attrs));
	});
var $mdgriffith$elm_ui$Element$Input$leftArrow = 'ArrowLeft';
var $mdgriffith$elm_ui$Element$Input$onKeyLookup = function (lookup) {
	var decode = function (code) {
		var _v0 = lookup(code);
		if (_v0.$ === 'Nothing') {
			return $elm$json$Json$Decode$fail('No key matched');
		} else {
			var msg = _v0.a;
			return $elm$json$Json$Decode$succeed(msg);
		}
	};
	var isKey = A2(
		$elm$json$Json$Decode$andThen,
		decode,
		A2($elm$json$Json$Decode$field, 'key', $elm$json$Json$Decode$string));
	return $mdgriffith$elm_ui$Internal$Model$Attr(
		A2($elm$html$Html$Events$on, 'keyup', isKey));
};
var $mdgriffith$elm_ui$Element$Input$rightArrow = 'ArrowRight';
var $mdgriffith$elm_ui$Element$Input$row = F2(
	function (attributes, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asRow,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				attributes),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $mdgriffith$elm_ui$Element$Input$space = ' ';
var $mdgriffith$elm_ui$Element$Input$tabindex = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Attributes$tabindex);
var $mdgriffith$elm_ui$Element$Input$upArrow = 'ArrowUp';
var $mdgriffith$elm_ui$Element$Input$radioHelper = F3(
	function (orientation, attrs, input) {
		var track = F2(
			function (opt, _v14) {
				var found = _v14.a;
				var prev = _v14.b;
				var nxt = _v14.c;
				var val = opt.a;
				switch (found.$) {
					case 'NotFound':
						return _Utils_eq(
							$elm$core$Maybe$Just(val),
							input.selected) ? _Utils_Tuple3($mdgriffith$elm_ui$Element$Input$BeforeFound, prev, nxt) : _Utils_Tuple3(found, val, nxt);
					case 'BeforeFound':
						return _Utils_Tuple3($mdgriffith$elm_ui$Element$Input$AfterFound, prev, val);
					default:
						return _Utils_Tuple3(found, prev, nxt);
				}
			});
		var renderOption = function (_v11) {
			var val = _v11.a;
			var view = _v11.b;
			var status = _Utils_eq(
				$elm$core$Maybe$Just(val),
				input.selected) ? $mdgriffith$elm_ui$Element$Input$Selected : $mdgriffith$elm_ui$Element$Input$Idle;
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$pointer,
						function () {
						if (orientation.$ === 'Row') {
							return $mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink);
						} else {
							return $mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill);
						}
					}(),
						$mdgriffith$elm_ui$Element$Events$onClick(
						input.onChange(val)),
						function () {
						if (status.$ === 'Selected') {
							return $mdgriffith$elm_ui$Internal$Model$Attr(
								A2($elm$html$Html$Attributes$attribute, 'aria-checked', 'true'));
						} else {
							return $mdgriffith$elm_ui$Internal$Model$Attr(
								A2($elm$html$Html$Attributes$attribute, 'aria-checked', 'false'));
						}
					}(),
						$mdgriffith$elm_ui$Internal$Model$Attr(
						A2($elm$html$Html$Attributes$attribute, 'role', 'radio'))
					]),
				view(status));
		};
		var prevNext = function () {
			var _v5 = input.options;
			if (!_v5.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var _v6 = _v5.a;
				var val = _v6.a;
				return function (_v7) {
					var found = _v7.a;
					var b = _v7.b;
					var a = _v7.c;
					switch (found.$) {
						case 'NotFound':
							return $elm$core$Maybe$Just(
								_Utils_Tuple2(b, val));
						case 'BeforeFound':
							return $elm$core$Maybe$Just(
								_Utils_Tuple2(b, val));
						default:
							return $elm$core$Maybe$Just(
								_Utils_Tuple2(b, a));
					}
				}(
					A3(
						$elm$core$List$foldl,
						track,
						_Utils_Tuple3($mdgriffith$elm_ui$Element$Input$NotFound, val, val),
						input.options));
			}
		}();
		var optionArea = function () {
			if (orientation.$ === 'Row') {
				return A2(
					$mdgriffith$elm_ui$Element$Input$row,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute(input.label),
						attrs),
					A2($elm$core$List$map, renderOption, input.options));
			} else {
				return A2(
					$mdgriffith$elm_ui$Element$Input$column,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute(input.label),
						attrs),
					A2($elm$core$List$map, renderOption, input.options));
			}
		}();
		var events = A2(
			$mdgriffith$elm_ui$Internal$Model$get,
			attrs,
			function (attr) {
				_v3$3:
				while (true) {
					switch (attr.$) {
						case 'Width':
							if (attr.a.$ === 'Fill') {
								return true;
							} else {
								break _v3$3;
							}
						case 'Height':
							if (attr.a.$ === 'Fill') {
								return true;
							} else {
								break _v3$3;
							}
						case 'Attr':
							return true;
						default:
							break _v3$3;
					}
				}
				return false;
			});
		return A3(
			$mdgriffith$elm_ui$Element$Input$applyLabel,
			_Utils_ap(
				A2(
					$elm$core$List$filterMap,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							$elm$core$Maybe$Just($mdgriffith$elm_ui$Element$alignLeft),
							$elm$core$Maybe$Just(
							$mdgriffith$elm_ui$Element$Input$tabindex(0)),
							$elm$core$Maybe$Just(
							$mdgriffith$elm_ui$Internal$Model$htmlClass('focus')),
							$elm$core$Maybe$Just($mdgriffith$elm_ui$Element$Region$announce),
							$elm$core$Maybe$Just(
							$mdgriffith$elm_ui$Internal$Model$Attr(
								A2($elm$html$Html$Attributes$attribute, 'role', 'radiogroup'))),
							function () {
							if (prevNext.$ === 'Nothing') {
								return $elm$core$Maybe$Nothing;
							} else {
								var _v1 = prevNext.a;
								var prev = _v1.a;
								var next = _v1.b;
								return $elm$core$Maybe$Just(
									$mdgriffith$elm_ui$Element$Input$onKeyLookup(
										function (code) {
											if (_Utils_eq(code, $mdgriffith$elm_ui$Element$Input$leftArrow)) {
												return $elm$core$Maybe$Just(
													input.onChange(prev));
											} else {
												if (_Utils_eq(code, $mdgriffith$elm_ui$Element$Input$upArrow)) {
													return $elm$core$Maybe$Just(
														input.onChange(prev));
												} else {
													if (_Utils_eq(code, $mdgriffith$elm_ui$Element$Input$rightArrow)) {
														return $elm$core$Maybe$Just(
															input.onChange(next));
													} else {
														if (_Utils_eq(code, $mdgriffith$elm_ui$Element$Input$downArrow)) {
															return $elm$core$Maybe$Just(
																input.onChange(next));
														} else {
															if (_Utils_eq(code, $mdgriffith$elm_ui$Element$Input$space)) {
																var _v2 = input.selected;
																if (_v2.$ === 'Nothing') {
																	return $elm$core$Maybe$Just(
																		input.onChange(prev));
																} else {
																	return $elm$core$Maybe$Nothing;
																}
															} else {
																return $elm$core$Maybe$Nothing;
															}
														}
													}
												}
											}
										}));
							}
						}()
						])),
				events),
			input.label,
			optionArea);
	});
var $mdgriffith$elm_ui$Element$Input$radio = $mdgriffith$elm_ui$Element$Input$radioHelper($mdgriffith$elm_ui$Element$Input$Column);
var $lucamug$elm_ui_with_context$Element$WithContext$Input$runOption = F2(
	function (context, _v0) {
		var f = _v0.a;
		return f(context);
	});
var $lucamug$elm_ui_with_context$Element$WithContext$Input$radioHelper = F2(
	function (context, config) {
		return {
			label: A2($lucamug$elm_ui_with_context$Element$WithContext$Input$runLabel, context, config.label),
			onChange: config.onChange,
			options: A2(
				$elm$core$List$map,
				$lucamug$elm_ui_with_context$Element$WithContext$Input$runOption(context),
				config.options),
			selected: config.selected
		};
	});
var $lucamug$elm_ui_with_context$Element$WithContext$Input$radio = A2($lucamug$elm_ui_with_context$Element$WithContext$Internal$wrapAttrs, $mdgriffith$elm_ui$Element$Input$radio, $lucamug$elm_ui_with_context$Element$WithContext$Input$radioHelper);
var $rakutentech$r10$R10$FormComponents$Internal$Single$Radio$viewRadioLabel = F3(
	function (palette, label, helperText) {
		return (label === '') ? $lucamug$elm_ui_with_context$Element$WithContext$none : A2(
			$lucamug$elm_ui_with_context$Element$WithContext$column,
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$paddingEach(
					{bottom: 24, left: 0, right: 0, top: 10}),
					$lucamug$elm_ui_with_context$Element$WithContext$spacing($rakutentech$r10$R10$FormComponents$Internal$UI$genericSpacing)
				]),
			_List_fromArray(
				[
					A2(
					$rakutentech$r10$R10$Paragraph$normal,
					_List_Nil,
					_List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$text(label)
						])),
					A3(
					$rakutentech$r10$R10$FormComponents$Internal$UI$viewHelperText,
					palette,
					_List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$Font$size(14),
							$lucamug$elm_ui_with_context$Element$WithContext$alpha(0.5),
							$lucamug$elm_ui_with_context$Element$WithContext$paddingEach(
							{bottom: 0, left: 0, right: 0, top: $rakutentech$r10$R10$FormComponents$Internal$UI$genericSpacing})
						]),
					helperText)
				]));
	});
var $lucamug$elm_ui_with_context$Element$WithContext$Input$Focused = {$: 'Focused'};
var $lucamug$elm_ui_with_context$Element$WithContext$Input$Idle = {$: 'Idle'};
var $lucamug$elm_ui_with_context$Element$WithContext$Input$Option = function (a) {
	return {$: 'Option', a: a};
};
var $lucamug$elm_ui_with_context$Element$WithContext$Input$Selected = {$: 'Selected'};
var $mdgriffith$elm_ui$Element$Input$Option = F2(
	function (a, b) {
		return {$: 'Option', a: a, b: b};
	});
var $mdgriffith$elm_ui$Element$Input$optionWith = F2(
	function (val, view) {
		return A2($mdgriffith$elm_ui$Element$Input$Option, val, view);
	});
var $lucamug$elm_ui_with_context$Element$WithContext$Input$optionWith = F2(
	function (val, view) {
		var optionStateConverter = function (optionState) {
			switch (optionState.$) {
				case 'Idle':
					return $lucamug$elm_ui_with_context$Element$WithContext$Input$Idle;
				case 'Focused':
					return $lucamug$elm_ui_with_context$Element$WithContext$Input$Focused;
				default:
					return $lucamug$elm_ui_with_context$Element$WithContext$Input$Selected;
			}
		};
		var viewConverted = function (optionState) {
			return view(
				optionStateConverter(optionState));
		};
		return $lucamug$elm_ui_with_context$Element$WithContext$Input$Option(
			function (context) {
				return A2(
					$mdgriffith$elm_ui$Element$Input$optionWith,
					val,
					A2(
						$elm$core$Basics$composeL,
						$lucamug$elm_ui_with_context$Element$WithContext$Internal$run(context),
						viewConverted));
			});
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$Radio$isSelected = function (optionState) {
	switch (optionState.$) {
		case 'Selected':
			return true;
		case 'Idle':
			return false;
		default:
			return false;
	}
};
var $rakutentech$r10$R10$FormComponents$Internal$Single$Radio$viewRadioOption = F2(
	function (_v0, optionState) {
		var disabled = _v0.disabled;
		var palette = _v0.palette;
		var focused = _v0.focused;
		var label = _v0.label;
		var value = _v0.value;
		var _v1 = function () {
			var _v2 = _Utils_Tuple2(
				$rakutentech$r10$R10$FormComponents$Internal$Single$Radio$isSelected(optionState),
				disabled);
			if (_v2.a) {
				if (_v2.b) {
					return {
						innerCircleColor: A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$primaryA, 0.5, palette),
						innerCircleSize: 10,
						outerCircleColor: A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$primaryA, 0.5, palette)
					};
				} else {
					return {
						innerCircleColor: A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$primaryA, 1, palette),
						innerCircleSize: 10,
						outerCircleColor: A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$primaryA, 1, palette)
					};
				}
			} else {
				if (_v2.b) {
					return {
						innerCircleColor: A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$primaryA, 0, palette),
						innerCircleSize: 0,
						outerCircleColor: A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$containerA, 0.5, palette)
					};
				} else {
					return {
						innerCircleColor: A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$primaryA, 0, palette),
						innerCircleSize: 0,
						outerCircleColor: A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$containerA, 1, palette)
					};
				}
			}
		}();
		var innerCircleSize = _v1.innerCircleSize;
		var innerCircleColor = _v1.innerCircleColor;
		var outerCircleColor = _v1.outerCircleColor;
		var innerCircle = A2(
			$lucamug$elm_ui_with_context$Element$WithContext$el,
			_List_fromArray(
				[
					$rakutentech$r10$R10$Transition$transition('all 0.13s'),
					$lucamug$elm_ui_with_context$Element$WithContext$Background$color(innerCircleColor),
					$lucamug$elm_ui_with_context$Element$WithContext$width(
					$lucamug$elm_ui_with_context$Element$WithContext$px(innerCircleSize)),
					$lucamug$elm_ui_with_context$Element$WithContext$height(
					$lucamug$elm_ui_with_context$Element$WithContext$px(innerCircleSize)),
					$lucamug$elm_ui_with_context$Element$WithContext$Border$rounded(20),
					$lucamug$elm_ui_with_context$Element$WithContext$centerX,
					$lucamug$elm_ui_with_context$Element$WithContext$centerY
				]),
			$lucamug$elm_ui_with_context$Element$WithContext$none);
		var selector = A2(
			$lucamug$elm_ui_with_context$Element$WithContext$el,
			_List_fromArray(
				[
					$rakutentech$r10$R10$Transition$transition('all 0.13s'),
					$lucamug$elm_ui_with_context$Element$WithContext$width(
					$lucamug$elm_ui_with_context$Element$WithContext$px(24)),
					$lucamug$elm_ui_with_context$Element$WithContext$height(
					$lucamug$elm_ui_with_context$Element$WithContext$px(24)),
					$lucamug$elm_ui_with_context$Element$WithContext$moveRight(2),
					$lucamug$elm_ui_with_context$Element$WithContext$centerX,
					$lucamug$elm_ui_with_context$Element$WithContext$centerY,
					$lucamug$elm_ui_with_context$Element$WithContext$behindContent(innerCircle),
					$lucamug$elm_ui_with_context$Element$WithContext$Border$innerShadow(
					{
						blur: 0,
						color: outerCircleColor,
						offset: _Utils_Tuple2(0, 0),
						size: 2
					}),
					$lucamug$elm_ui_with_context$Element$WithContext$Border$rounded(20),
					$lucamug$elm_ui_with_context$Element$WithContext$inFront(
					A2(
						$lucamug$elm_ui_with_context$Element$WithContext$el,
						_List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$moveUp(2),
								$lucamug$elm_ui_with_context$Element$WithContext$moveLeft(2)
							]),
						A2(
							$rakutentech$r10$R10$FormComponents$Internal$UI$viewSelectShadowCustomSize,
							{
								disabled: disabled,
								focused: focused && $rakutentech$r10$R10$FormComponents$Internal$Single$Radio$isSelected(optionState),
								palette: palette,
								rounded: 50,
								size: {x: 28, y: 28},
								value: value
							},
							$lucamug$elm_ui_with_context$Element$WithContext$none)))
				]),
			$lucamug$elm_ui_with_context$Element$WithContext$none);
		return A2(
			$lucamug$elm_ui_with_context$Element$WithContext$row,
			_Utils_ap(
				_List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$spacing(17),
						$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
						$lucamug$elm_ui_with_context$Element$WithContext$height($lucamug$elm_ui_with_context$Element$WithContext$fill)
					]),
				disabled ? _List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
						A2($elm$html$Html$Attributes$style, 'cursor', 'auto'))
					]) : _List_Nil),
			_List_fromArray(
				[
					selector,
					A2(
					$lucamug$elm_ui_with_context$Element$WithContext$paragraph,
					_List_Nil,
					_List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$text(label)
						]))
				]));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$Radio$viewRadioOptions = F4(
	function (selected, args, focused, fieldOption) {
		return A2(
			$lucamug$elm_ui_with_context$Element$WithContext$Input$optionWith,
			fieldOption.value,
			$rakutentech$r10$R10$FormComponents$Internal$Single$Radio$viewRadioOption(
				{
					disabled: args.disabled,
					focused: focused,
					label: fieldOption.label,
					palette: args.palette,
					value: _Utils_eq(fieldOption.value, selected)
				}));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$Radio$view = F3(
	function (attrs, model, args) {
		var fixedValue = model.value;
		return A2(
			$lucamug$elm_ui_with_context$Element$WithContext$el,
			_Utils_ap(
				_List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$alignTop,
						$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
						$lucamug$elm_ui_with_context$Element$WithContext$height($lucamug$elm_ui_with_context$Element$WithContext$fill)
					]),
				attrs),
			A2(
				$lucamug$elm_ui_with_context$Element$WithContext$Input$radio,
				_Utils_ap(
					_List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$spacing(16),
							$lucamug$elm_ui_with_context$Element$WithContext$alignTop,
							$lucamug$elm_ui_with_context$Element$WithContext$Events$onFocus(
							args.toMsg(
								$rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnFocus(
									A3($rakutentech$r10$R10$FormComponents$Internal$Single$Common$getSelectedOrFirst, args.fieldOptions, model.value, model.select)))),
							$lucamug$elm_ui_with_context$Element$WithContext$Events$onLoseFocus(
							args.toMsg(
								$rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnLoseFocus(model.value))),
							$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill)
						]),
					args.disabled ? _List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
							$elm$html$Html$Attributes$tabindex(-1))
						]) : _List_Nil),
				{
					label: A2(
						$lucamug$elm_ui_with_context$Element$WithContext$Input$labelAbove,
						_List_Nil,
						A3($rakutentech$r10$R10$FormComponents$Internal$Single$Radio$viewRadioLabel, args.palette, args.label, args.helperText)),
					onChange: args.disabled ? $elm$core$Basics$always(
						args.toMsg(
							$rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnOptionSelect(model.value))) : A2($elm$core$Basics$composeL, args.toMsg, $rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnOptionSelect),
					options: A2(
						$elm$core$List$map,
						A3($rakutentech$r10$R10$FormComponents$Internal$Single$Radio$viewRadioOptions, fixedValue, args, model.focused),
						args.fieldOptions),
					selected: $elm$core$Maybe$Just(fixedValue)
				}));
	});
var $mdgriffith$elm_ui$Element$Input$Row = {$: 'Row'};
var $mdgriffith$elm_ui$Element$Input$radioRow = $mdgriffith$elm_ui$Element$Input$radioHelper($mdgriffith$elm_ui$Element$Input$Row);
var $lucamug$elm_ui_with_context$Element$WithContext$Input$radioRow = A2($lucamug$elm_ui_with_context$Element$WithContext$Internal$wrapAttrs, $mdgriffith$elm_ui$Element$Input$radioRow, $lucamug$elm_ui_with_context$Element$WithContext$Input$radioHelper);
var $rakutentech$r10$R10$FormComponents$Internal$Single$Radio$viewRow = F3(
	function (attrs, model, args) {
		var fixedValue = model.value;
		return A2(
			$lucamug$elm_ui_with_context$Element$WithContext$column,
			_Utils_ap(
				_List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill)
					]),
				attrs),
			_List_fromArray(
				[
					A2(
					$lucamug$elm_ui_with_context$Element$WithContext$Input$radioRow,
					_Utils_ap(
						_List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$spacing(15),
								$lucamug$elm_ui_with_context$Element$WithContext$Events$onFocus(
								args.toMsg(
									$rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnFocus(
										A3($rakutentech$r10$R10$FormComponents$Internal$Single$Common$getSelectedOrFirst, args.fieldOptions, model.value, model.select)))),
								$lucamug$elm_ui_with_context$Element$WithContext$Events$onLoseFocus(
								args.toMsg(
									$rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnLoseFocus(model.value))),
								$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
								$lucamug$elm_ui_with_context$Element$WithContext$height(
								$lucamug$elm_ui_with_context$Element$WithContext$px(20)),
								$lucamug$elm_ui_with_context$Element$WithContext$centerY
							]),
						args.disabled ? _List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
								$elm$html$Html$Attributes$tabindex(-1))
							]) : _List_Nil),
					{
						label: A2(
							$lucamug$elm_ui_with_context$Element$WithContext$Input$labelLeft,
							_List_fromArray(
								[
									$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
									$lucamug$elm_ui_with_context$Element$WithContext$centerY
								]),
							$lucamug$elm_ui_with_context$Element$WithContext$text(args.label)),
						onChange: args.disabled ? $elm$core$Basics$always(
							args.toMsg(
								$rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnOptionSelect(model.value))) : A2($elm$core$Basics$composeL, args.toMsg, $rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnOptionSelect),
						options: A2(
							$elm$core$List$map,
							A3($rakutentech$r10$R10$FormComponents$Internal$Single$Radio$viewRadioOptions, fixedValue, args, model.focused),
							args.fieldOptions),
						selected: $elm$core$Maybe$Just(fixedValue)
					}),
					A3(
					$rakutentech$r10$R10$FormComponents$Internal$UI$viewHelperText,
					args.palette,
					_List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$Font$size(14),
							$lucamug$elm_ui_with_context$Element$WithContext$alpha(0.5),
							$lucamug$elm_ui_with_context$Element$WithContext$paddingEach(
							{bottom: 0, left: 0, right: 0, top: $rakutentech$r10$R10$FormComponents$Internal$UI$genericSpacing})
						]),
					args.helperText)
				]));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$view = F3(
	function (attrs, model, conf) {
		var args = {
			autocomplete: $elm$core$Maybe$Nothing,
			disabled: conf.disabled,
			fieldOptions: conf.fieldOptions,
			helperText: conf.helperText,
			key: conf.key,
			label: conf.label,
			leadingIcon: _List_Nil,
			maxDisplayCount: 3,
			maybeValid: conf.maybeValid,
			palette: conf.palette,
			requiredLabel: conf.requiredLabel,
			searchFn: $rakutentech$r10$R10$FormComponents$Internal$Single$defaultSearchFn,
			searchable: false,
			selectOptionHeight: 32,
			singleType: conf.singleType,
			style: conf.style,
			toMsg: conf.toMsg,
			trailingIcon: _List_Nil,
			viewOptionEl: $rakutentech$r10$R10$FormComponents$Internal$Single$defaultViewOptionEl(
				{
					msgOnSelect: A2($elm$core$Basics$composeR, $rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnOptionSelect, conf.toMsg),
					search: model.search
				})
		};
		var _v0 = args.singleType;
		switch (_v0.$) {
			case 'SingleCombobox':
				return A3(
					$rakutentech$r10$R10$FormComponents$Internal$Single$Combobox$view,
					attrs,
					model,
					_Utils_update(
						args,
						{searchable: true}));
			case 'SingleSelect':
				return A3(
					$rakutentech$r10$R10$FormComponents$Internal$Single$Combobox$view,
					attrs,
					model,
					_Utils_update(
						args,
						{searchable: false}));
			case 'SingleRadio':
				return A3($rakutentech$r10$R10$FormComponents$Internal$Single$Radio$view, attrs, model, args);
			default:
				return A3($rakutentech$r10$R10$FormComponents$Internal$Single$Radio$viewRow, attrs, model, args);
		}
	});
var $rakutentech$r10$R10$Form$Internal$MakerForView$viewSingle = F4(
	function (args, singleType, fieldOptions, formConf) {
		return A3(
			$rakutentech$r10$R10$FormComponents$Internal$Single$view,
			_List_Nil,
			{focused: args.focused, opened: args.active, scroll: args.fieldState.scroll, search: args.fieldState.search, select: args.fieldState.select, value: args.fieldState.value},
			{
				disabled: args.fieldState.disabled,
				fieldOptions: fieldOptions,
				helperText: args.fieldConf.helperText,
				key: $rakutentech$r10$R10$Form$Internal$Key$toString(args.key),
				label: args.fieldConf.label,
				maybeValid: $rakutentech$r10$R10$Form$Internal$MakerForView$maybeValid(args.fieldState.validation),
				palette: args.palette,
				requiredLabel: args.fieldConf.requiredLabel,
				singleType: singleType,
				style: args.style,
				toMsg: A3($rakutentech$r10$R10$Form$Internal$Msg$OnSingleMsg, args.key, args.fieldConf, formConf)
			});
	});
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Common$OnOptionSelect = function (a) {
	return {$: 'OnOptionSelect', a: a};
};
var $rakutentech$r10$R10$Country$list = _List_fromArray(
	[$rakutentech$r10$R10$Country$Afghanistan, $rakutentech$r10$R10$Country$Albania, $rakutentech$r10$R10$Country$Algeria, $rakutentech$r10$R10$Country$AmericanSamoa, $rakutentech$r10$R10$Country$Andorra, $rakutentech$r10$R10$Country$Angola, $rakutentech$r10$R10$Country$Anguilla, $rakutentech$r10$R10$Country$Antarctica, $rakutentech$r10$R10$Country$AntiguaandBarbuda, $rakutentech$r10$R10$Country$Argentina, $rakutentech$r10$R10$Country$Armenia, $rakutentech$r10$R10$Country$Aruba, $rakutentech$r10$R10$Country$Australia, $rakutentech$r10$R10$Country$Austria, $rakutentech$r10$R10$Country$Azerbaijan, $rakutentech$r10$R10$Country$Bahamas, $rakutentech$r10$R10$Country$Bahrain, $rakutentech$r10$R10$Country$Bangladesh, $rakutentech$r10$R10$Country$Barbados, $rakutentech$r10$R10$Country$Belarus, $rakutentech$r10$R10$Country$Belgium, $rakutentech$r10$R10$Country$Belize, $rakutentech$r10$R10$Country$Benin, $rakutentech$r10$R10$Country$Bermuda, $rakutentech$r10$R10$Country$Bhutan, $rakutentech$r10$R10$Country$Bolivia, $rakutentech$r10$R10$Country$BosniaandHerzegovina, $rakutentech$r10$R10$Country$Botswana, $rakutentech$r10$R10$Country$Brazil, $rakutentech$r10$R10$Country$BritishIndianOceanTerritory, $rakutentech$r10$R10$Country$BritishVirginIslands, $rakutentech$r10$R10$Country$Brunei, $rakutentech$r10$R10$Country$Bulgaria, $rakutentech$r10$R10$Country$BurkinaFaso, $rakutentech$r10$R10$Country$Burundi, $rakutentech$r10$R10$Country$Cambodia, $rakutentech$r10$R10$Country$Cameroon, $rakutentech$r10$R10$Country$Canada, $rakutentech$r10$R10$Country$CapeVerde, $rakutentech$r10$R10$Country$CaymanIslands, $rakutentech$r10$R10$Country$CentralAfricanRepublic, $rakutentech$r10$R10$Country$Chad, $rakutentech$r10$R10$Country$Chile, $rakutentech$r10$R10$Country$China, $rakutentech$r10$R10$Country$ChristmasIsland, $rakutentech$r10$R10$Country$CocosIslands, $rakutentech$r10$R10$Country$Colombia, $rakutentech$r10$R10$Country$Comoros, $rakutentech$r10$R10$Country$CookIslands, $rakutentech$r10$R10$Country$CostaRica, $rakutentech$r10$R10$Country$Croatia, $rakutentech$r10$R10$Country$Cuba, $rakutentech$r10$R10$Country$Curacao, $rakutentech$r10$R10$Country$Cyprus, $rakutentech$r10$R10$Country$CzechRepublic, $rakutentech$r10$R10$Country$DemocraticRepublicoftheCongo, $rakutentech$r10$R10$Country$Denmark, $rakutentech$r10$R10$Country$Djibouti, $rakutentech$r10$R10$Country$Dominica, $rakutentech$r10$R10$Country$DominicanRepublic, $rakutentech$r10$R10$Country$EastTimor, $rakutentech$r10$R10$Country$Ecuador, $rakutentech$r10$R10$Country$Egypt, $rakutentech$r10$R10$Country$ElSalvador, $rakutentech$r10$R10$Country$EquatorialGuinea, $rakutentech$r10$R10$Country$Eritrea, $rakutentech$r10$R10$Country$Estonia, $rakutentech$r10$R10$Country$Ethiopia, $rakutentech$r10$R10$Country$FalklandIslands, $rakutentech$r10$R10$Country$FaroeIslands, $rakutentech$r10$R10$Country$Fiji, $rakutentech$r10$R10$Country$Finland, $rakutentech$r10$R10$Country$France, $rakutentech$r10$R10$Country$FrenchPolynesia, $rakutentech$r10$R10$Country$Gabon, $rakutentech$r10$R10$Country$Gambia, $rakutentech$r10$R10$Country$Georgia, $rakutentech$r10$R10$Country$Germany, $rakutentech$r10$R10$Country$Ghana, $rakutentech$r10$R10$Country$Gibraltar, $rakutentech$r10$R10$Country$Greece, $rakutentech$r10$R10$Country$Greenland, $rakutentech$r10$R10$Country$Grenada, $rakutentech$r10$R10$Country$Guam, $rakutentech$r10$R10$Country$Guatemala, $rakutentech$r10$R10$Country$Guernsey, $rakutentech$r10$R10$Country$Guinea, $rakutentech$r10$R10$Country$GuineaBissau, $rakutentech$r10$R10$Country$Guyana, $rakutentech$r10$R10$Country$Haiti, $rakutentech$r10$R10$Country$Honduras, $rakutentech$r10$R10$Country$HongKong, $rakutentech$r10$R10$Country$Hungary, $rakutentech$r10$R10$Country$Iceland, $rakutentech$r10$R10$Country$India, $rakutentech$r10$R10$Country$Indonesia, $rakutentech$r10$R10$Country$Iran, $rakutentech$r10$R10$Country$Iraq, $rakutentech$r10$R10$Country$Ireland, $rakutentech$r10$R10$Country$IsleofMan, $rakutentech$r10$R10$Country$Israel, $rakutentech$r10$R10$Country$Italy, $rakutentech$r10$R10$Country$IvoryCoast, $rakutentech$r10$R10$Country$Jamaica, $rakutentech$r10$R10$Country$Japan, $rakutentech$r10$R10$Country$Jersey, $rakutentech$r10$R10$Country$Jordan, $rakutentech$r10$R10$Country$Kazakhstan, $rakutentech$r10$R10$Country$Kenya, $rakutentech$r10$R10$Country$Kiribati, $rakutentech$r10$R10$Country$Kosovo, $rakutentech$r10$R10$Country$Kuwait, $rakutentech$r10$R10$Country$Kyrgyzstan, $rakutentech$r10$R10$Country$Laos, $rakutentech$r10$R10$Country$Latvia, $rakutentech$r10$R10$Country$Lebanon, $rakutentech$r10$R10$Country$Lesotho, $rakutentech$r10$R10$Country$Liberia, $rakutentech$r10$R10$Country$Libya, $rakutentech$r10$R10$Country$Liechtenstein, $rakutentech$r10$R10$Country$Lithuania, $rakutentech$r10$R10$Country$Luxembourg, $rakutentech$r10$R10$Country$Macau, $rakutentech$r10$R10$Country$Macedonia, $rakutentech$r10$R10$Country$Madagascar, $rakutentech$r10$R10$Country$Malawi, $rakutentech$r10$R10$Country$Malaysia, $rakutentech$r10$R10$Country$Maldives, $rakutentech$r10$R10$Country$Mali, $rakutentech$r10$R10$Country$Malta, $rakutentech$r10$R10$Country$MarshallIslands, $rakutentech$r10$R10$Country$Mauritania, $rakutentech$r10$R10$Country$Mauritius, $rakutentech$r10$R10$Country$Mayotte, $rakutentech$r10$R10$Country$Mexico, $rakutentech$r10$R10$Country$Micronesia, $rakutentech$r10$R10$Country$Moldova, $rakutentech$r10$R10$Country$Monaco, $rakutentech$r10$R10$Country$Mongolia, $rakutentech$r10$R10$Country$Montenegro, $rakutentech$r10$R10$Country$Montserrat, $rakutentech$r10$R10$Country$Morocco, $rakutentech$r10$R10$Country$Mozambique, $rakutentech$r10$R10$Country$Myanmar, $rakutentech$r10$R10$Country$Namibia, $rakutentech$r10$R10$Country$Nauru, $rakutentech$r10$R10$Country$Nepal, $rakutentech$r10$R10$Country$Netherlands, $rakutentech$r10$R10$Country$NewCaledonia, $rakutentech$r10$R10$Country$NewZealand, $rakutentech$r10$R10$Country$Nicaragua, $rakutentech$r10$R10$Country$Niger, $rakutentech$r10$R10$Country$Nigeria, $rakutentech$r10$R10$Country$Niue, $rakutentech$r10$R10$Country$NorthKorea, $rakutentech$r10$R10$Country$NorthernMarianaIslands, $rakutentech$r10$R10$Country$Norway, $rakutentech$r10$R10$Country$Oman, $rakutentech$r10$R10$Country$Pakistan, $rakutentech$r10$R10$Country$Palau, $rakutentech$r10$R10$Country$Palestine, $rakutentech$r10$R10$Country$Panama, $rakutentech$r10$R10$Country$PapuaNewGuinea, $rakutentech$r10$R10$Country$Paraguay, $rakutentech$r10$R10$Country$Peru, $rakutentech$r10$R10$Country$Philippines, $rakutentech$r10$R10$Country$Pitcairn, $rakutentech$r10$R10$Country$Poland, $rakutentech$r10$R10$Country$Portugal, $rakutentech$r10$R10$Country$PuertoRico, $rakutentech$r10$R10$Country$Qatar, $rakutentech$r10$R10$Country$RepublicoftheCongo, $rakutentech$r10$R10$Country$Reunion, $rakutentech$r10$R10$Country$Romania, $rakutentech$r10$R10$Country$Russia, $rakutentech$r10$R10$Country$Rwanda, $rakutentech$r10$R10$Country$SaintBarthelemy, $rakutentech$r10$R10$Country$SaintHelena, $rakutentech$r10$R10$Country$SaintKittsandNevis, $rakutentech$r10$R10$Country$SaintLucia, $rakutentech$r10$R10$Country$SaintMartin, $rakutentech$r10$R10$Country$SaintPierreandMiquelon, $rakutentech$r10$R10$Country$SaintVincentandTheGrenadines, $rakutentech$r10$R10$Country$Samoa, $rakutentech$r10$R10$Country$SanMarino, $rakutentech$r10$R10$Country$SaoTomeandPrincipe, $rakutentech$r10$R10$Country$SaudiArabia, $rakutentech$r10$R10$Country$Senegal, $rakutentech$r10$R10$Country$Serbia, $rakutentech$r10$R10$Country$Seychelles, $rakutentech$r10$R10$Country$SierraLeone, $rakutentech$r10$R10$Country$Singapore, $rakutentech$r10$R10$Country$SintMaarten, $rakutentech$r10$R10$Country$Slovakia, $rakutentech$r10$R10$Country$Slovenia, $rakutentech$r10$R10$Country$SolomonIslands, $rakutentech$r10$R10$Country$Somalia, $rakutentech$r10$R10$Country$SouthAfrica, $rakutentech$r10$R10$Country$SouthKorea, $rakutentech$r10$R10$Country$SouthSudan, $rakutentech$r10$R10$Country$Spain, $rakutentech$r10$R10$Country$SriLanka, $rakutentech$r10$R10$Country$Sudan, $rakutentech$r10$R10$Country$Suriname, $rakutentech$r10$R10$Country$SvalbardandJanMayen, $rakutentech$r10$R10$Country$Swaziland, $rakutentech$r10$R10$Country$Sweden, $rakutentech$r10$R10$Country$Switzerland, $rakutentech$r10$R10$Country$Syria, $rakutentech$r10$R10$Country$Taiwan, $rakutentech$r10$R10$Country$Tajikistan, $rakutentech$r10$R10$Country$Tanzania, $rakutentech$r10$R10$Country$Thailand, $rakutentech$r10$R10$Country$Togo, $rakutentech$r10$R10$Country$Tokelau, $rakutentech$r10$R10$Country$Tonga, $rakutentech$r10$R10$Country$TrinidadandTobago, $rakutentech$r10$R10$Country$Tunisia, $rakutentech$r10$R10$Country$Turkey, $rakutentech$r10$R10$Country$Turkmenistan, $rakutentech$r10$R10$Country$TurksandCaicosIslands, $rakutentech$r10$R10$Country$Tuvalu, $rakutentech$r10$R10$Country$USVirginIslands, $rakutentech$r10$R10$Country$Uganda, $rakutentech$r10$R10$Country$Ukraine, $rakutentech$r10$R10$Country$UnitedArabEmirates, $rakutentech$r10$R10$Country$UnitedKingdom, $rakutentech$r10$R10$Country$UnitedStates, $rakutentech$r10$R10$Country$Uruguay, $rakutentech$r10$R10$Country$Uzbekistan, $rakutentech$r10$R10$Country$Vanuatu, $rakutentech$r10$R10$Country$Vatican, $rakutentech$r10$R10$Country$Venezuela, $rakutentech$r10$R10$Country$Vietnam, $rakutentech$r10$R10$Country$WallisandFutuna, $rakutentech$r10$R10$Country$WesternSahara, $rakutentech$r10$R10$Country$Yemen, $rakutentech$r10$R10$Country$Zambia, $rakutentech$r10$R10$Country$Zimbabwe]);
var $rakutentech$r10$R10$FormComponents$Internal$Phone$countryOptions = $rakutentech$r10$R10$Country$list;
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Common$normalizeString = A2($elm$core$Basics$composeR, $elm$core$String$toLower, $elm$core$String$trim);
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Common$searchFn = F2(
	function (search, country) {
		return A2(
			$elm$core$String$contains,
			$rakutentech$r10$R10$FormComponents$Internal$Phone$Common$normalizeString(search),
			$rakutentech$r10$R10$FormComponents$Internal$Phone$Common$normalizeString(
				$rakutentech$r10$R10$Country$toString(country)));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Common$filterBySearch = F2(
	function (search, fieldOptions) {
		return ($elm$core$String$isEmpty(search) || A2(
			$elm$core$List$any,
			$elm$core$Basics$eq(search),
			A2($elm$core$List$map, $rakutentech$r10$R10$Country$toString, fieldOptions))) ? fieldOptions : A2(
			$elm$core$List$filter,
			$rakutentech$r10$R10$FormComponents$Internal$Phone$Common$searchFn(search),
			fieldOptions);
	});
var $rakutentech$r10$R10$Country$emptyFlag = '🏳️';
var $rakutentech$r10$R10$Country$toFlag = function (country) {
	switch (country.$) {
		case 'Afghanistan':
			return '🇦🇫';
		case 'Albania':
			return '🇦🇱';
		case 'Algeria':
			return '🇩🇿';
		case 'AmericanSamoa':
			return '🇦🇸';
		case 'Andorra':
			return '🇦🇩';
		case 'Angola':
			return '🇦🇴';
		case 'Anguilla':
			return '🇦🇮';
		case 'Antarctica':
			return '🇦🇶';
		case 'AntiguaandBarbuda':
			return '🇦🇬';
		case 'Argentina':
			return '🇦🇷';
		case 'Armenia':
			return '🇦🇲';
		case 'Aruba':
			return '🇦🇼';
		case 'Australia':
			return '🇦🇺';
		case 'Austria':
			return '🇦🇹';
		case 'Azerbaijan':
			return '🇦🇿';
		case 'Bahamas':
			return '🇧🇸';
		case 'Bahrain':
			return '🇧🇭';
		case 'Bangladesh':
			return '🇧🇩';
		case 'Barbados':
			return '🇧🇧';
		case 'Belarus':
			return '🇧🇾';
		case 'Belgium':
			return '🇧🇪';
		case 'Belize':
			return '🇧🇿';
		case 'Benin':
			return '🇧🇯';
		case 'Bermuda':
			return '🇧🇲';
		case 'Bhutan':
			return '🇧🇹';
		case 'Bolivia':
			return '🇧🇴';
		case 'BosniaandHerzegovina':
			return '🇧🇦';
		case 'Botswana':
			return '🇧🇼';
		case 'Brazil':
			return '🇧🇷';
		case 'BritishIndianOceanTerritory':
			return '🇮🇴';
		case 'BritishVirginIslands':
			return '🇻🇬';
		case 'Brunei':
			return '🇧🇳';
		case 'Bulgaria':
			return '🇧🇬';
		case 'BurkinaFaso':
			return '🇧🇫';
		case 'Burundi':
			return '🇧🇮';
		case 'Cambodia':
			return '🇰🇭';
		case 'Cameroon':
			return '🇨🇲';
		case 'Canada':
			return '🇨🇦';
		case 'CapeVerde':
			return '🇨🇻';
		case 'CaymanIslands':
			return '🇰🇾';
		case 'CentralAfricanRepublic':
			return '🇨🇫';
		case 'Chad':
			return '🇹🇩';
		case 'Chile':
			return '🇨🇱';
		case 'China':
			return '🇨🇳';
		case 'ChristmasIsland':
			return '🇨🇽';
		case 'CocosIslands':
			return '🇨🇨';
		case 'Colombia':
			return '🇨🇴';
		case 'Comoros':
			return '🇰🇲';
		case 'CookIslands':
			return '🇨🇰';
		case 'CostaRica':
			return '🇨🇷';
		case 'Croatia':
			return '🇭🇷';
		case 'Cuba':
			return '🇨🇺';
		case 'Curacao':
			return '🇨🇼';
		case 'Cyprus':
			return '🇨🇾';
		case 'CzechRepublic':
			return '🇨🇿';
		case 'DemocraticRepublicoftheCongo':
			return '🇨🇩';
		case 'Denmark':
			return '🇩🇰';
		case 'Djibouti':
			return '🇩🇯';
		case 'Dominica':
			return '🇩🇲';
		case 'DominicanRepublic':
			return '🇩🇴';
		case 'EastTimor':
			return '🇹🇱';
		case 'Ecuador':
			return '🇪🇨';
		case 'Egypt':
			return '🇪🇬';
		case 'ElSalvador':
			return '🇸🇻';
		case 'EquatorialGuinea':
			return '🇬🇶';
		case 'Eritrea':
			return '🇪🇷';
		case 'Estonia':
			return '🇪🇪';
		case 'Ethiopia':
			return '🇪🇹';
		case 'FalklandIslands':
			return '🇫🇰';
		case 'FaroeIslands':
			return '🇫🇴';
		case 'Fiji':
			return '🇫🇯';
		case 'Finland':
			return '🇫🇮';
		case 'France':
			return '🇫🇷';
		case 'FrenchPolynesia':
			return '🇵🇫';
		case 'Gabon':
			return '🇬🇦';
		case 'Gambia':
			return '🇬🇲';
		case 'Georgia':
			return '🇬🇪';
		case 'Germany':
			return '🇩🇪';
		case 'Ghana':
			return '🇬🇭';
		case 'Gibraltar':
			return '🇬🇮';
		case 'Greece':
			return '🇬🇷';
		case 'Greenland':
			return '🇬🇱';
		case 'Grenada':
			return '🇬🇩';
		case 'Guam':
			return '🇬🇺';
		case 'Guatemala':
			return '🇬🇹';
		case 'Guernsey':
			return '🇬🇬';
		case 'Guinea':
			return '🇬🇳';
		case 'GuineaBissau':
			return '🇬🇼';
		case 'Guyana':
			return '🇬🇾';
		case 'Haiti':
			return '🇭🇹';
		case 'Honduras':
			return '🇭🇳';
		case 'HongKong':
			return '🇭🇰';
		case 'Hungary':
			return '🇭🇺';
		case 'Iceland':
			return '🇮🇸';
		case 'India':
			return '🇮🇳';
		case 'Indonesia':
			return '🇮🇩';
		case 'Iran':
			return '🇮🇷';
		case 'Iraq':
			return '🇮🇶';
		case 'Ireland':
			return '🇮🇪';
		case 'IsleofMan':
			return '🇮🇲';
		case 'Israel':
			return '🇮🇱';
		case 'Italy':
			return '🇮🇹';
		case 'IvoryCoast':
			return '🇨🇮';
		case 'Jamaica':
			return '🇯🇲';
		case 'Japan':
			return '🇯🇵';
		case 'Jersey':
			return '🇯🇪';
		case 'Jordan':
			return '🇯🇴';
		case 'Kazakhstan':
			return '🇰🇿';
		case 'Kenya':
			return '🇰🇪';
		case 'Kiribati':
			return '🇰🇮';
		case 'Kosovo':
			return '🇽🇰';
		case 'Kuwait':
			return '🇰🇼';
		case 'Kyrgyzstan':
			return '🇰🇬';
		case 'Laos':
			return '🇱🇦';
		case 'Latvia':
			return '🇱🇻';
		case 'Lebanon':
			return '🇱🇧';
		case 'Lesotho':
			return '🇱🇸';
		case 'Liberia':
			return '🇱🇷';
		case 'Libya':
			return '🇱🇾';
		case 'Liechtenstein':
			return '🇱🇮';
		case 'Lithuania':
			return '🇱🇹';
		case 'Luxembourg':
			return '🇱🇺';
		case 'Macau':
			return '🇲🇴';
		case 'Macedonia':
			return '🇲🇰';
		case 'Madagascar':
			return '🇲🇬';
		case 'Malawi':
			return '🇲🇼';
		case 'Malaysia':
			return '🇲🇾';
		case 'Maldives':
			return '🇲🇻';
		case 'Mali':
			return '🇲🇱';
		case 'Malta':
			return '🇲🇹';
		case 'MarshallIslands':
			return '🇲🇭';
		case 'Mauritania':
			return '🇲🇷';
		case 'Mauritius':
			return '🇲🇺';
		case 'Mayotte':
			return '🇾🇹';
		case 'Mexico':
			return '🇲🇽';
		case 'Micronesia':
			return '🇫🇲';
		case 'Moldova':
			return '🇲🇩';
		case 'Monaco':
			return '🇲🇨';
		case 'Mongolia':
			return '🇲🇳';
		case 'Montenegro':
			return '🇲🇪';
		case 'Montserrat':
			return '🇲🇸';
		case 'Morocco':
			return '🇲🇦';
		case 'Mozambique':
			return '🇲🇿';
		case 'Myanmar':
			return '🇲🇲';
		case 'Namibia':
			return '🇳🇦';
		case 'Nauru':
			return '🇳🇷';
		case 'Nepal':
			return '🇳🇵';
		case 'Netherlands':
			return '🇳🇱';
		case 'NewCaledonia':
			return '🇳🇨';
		case 'NewZealand':
			return '🇳🇿';
		case 'Nicaragua':
			return '🇳🇮';
		case 'Niger':
			return '🇳🇪';
		case 'Nigeria':
			return '🇳🇬';
		case 'Niue':
			return '🇳🇺';
		case 'NorthKorea':
			return '🇰🇵';
		case 'NorthernMarianaIslands':
			return '🇲🇵';
		case 'Norway':
			return '🇳🇴';
		case 'Oman':
			return '🇴🇲';
		case 'Pakistan':
			return '🇵🇰';
		case 'Palau':
			return '🇵🇼';
		case 'Palestine':
			return '🇵🇸';
		case 'Panama':
			return '🇵🇦';
		case 'PapuaNewGuinea':
			return '🇵🇬';
		case 'Paraguay':
			return '🇵🇾';
		case 'Peru':
			return '🇵🇪';
		case 'Philippines':
			return '🇵🇭';
		case 'Pitcairn':
			return '🇵🇳';
		case 'Poland':
			return '🇵🇱';
		case 'Portugal':
			return '🇵🇹';
		case 'PuertoRico':
			return '🇵🇷';
		case 'Qatar':
			return '🇶🇦';
		case 'RepublicoftheCongo':
			return '🇨🇬';
		case 'Reunion':
			return '🇷🇪';
		case 'Romania':
			return '🇷🇴';
		case 'Russia':
			return '🇷🇺';
		case 'Rwanda':
			return '🇷🇼';
		case 'SaintBarthelemy':
			return '🇧🇱';
		case 'SaintHelena':
			return '🇸🇭';
		case 'SaintKittsandNevis':
			return '🇰🇳';
		case 'SaintLucia':
			return '🇱🇨';
		case 'SaintMartin':
			return '🇲🇫';
		case 'SaintPierreandMiquelon':
			return '🇵🇲';
		case 'SaintVincentandTheGrenadines':
			return '🇻🇨';
		case 'Samoa':
			return '🇼🇸';
		case 'SanMarino':
			return '🇸🇲';
		case 'SaoTomeandPrincipe':
			return '🇸🇹';
		case 'SaudiArabia':
			return '🇸🇦';
		case 'Senegal':
			return '🇸🇳';
		case 'Serbia':
			return '🇷🇸';
		case 'Seychelles':
			return '🇸🇨';
		case 'SierraLeone':
			return '🇸🇱';
		case 'Singapore':
			return '🇸🇬';
		case 'SintMaarten':
			return '🇸🇽';
		case 'Slovakia':
			return '🇸🇰';
		case 'Slovenia':
			return '🇸🇮';
		case 'SolomonIslands':
			return '🇸🇧';
		case 'Somalia':
			return '🇸🇴';
		case 'SouthAfrica':
			return '🇿🇦';
		case 'SouthKorea':
			return '🇰🇷';
		case 'SouthSudan':
			return '🇸🇸';
		case 'Spain':
			return '🇪🇸';
		case 'SriLanka':
			return '🇱🇰';
		case 'Sudan':
			return '🇸🇩';
		case 'Suriname':
			return '🇸🇷';
		case 'SvalbardandJanMayen':
			return '🇸🇯';
		case 'Swaziland':
			return '🇸🇿';
		case 'Sweden':
			return '🇸🇪';
		case 'Switzerland':
			return '🇨🇭';
		case 'Syria':
			return '🇸🇾';
		case 'Taiwan':
			return '🇹🇼';
		case 'Tajikistan':
			return '🇹🇯';
		case 'Tanzania':
			return '🇹🇿';
		case 'Thailand':
			return '🇹🇭';
		case 'Togo':
			return '🇹🇬';
		case 'Tokelau':
			return '🇹🇰';
		case 'Tonga':
			return '🇹🇴';
		case 'TrinidadandTobago':
			return '🇹🇹';
		case 'Tunisia':
			return '🇹🇳';
		case 'Turkey':
			return '🇹🇷';
		case 'Turkmenistan':
			return '🇹🇲';
		case 'TurksandCaicosIslands':
			return '🇹🇨';
		case 'Tuvalu':
			return '🇹🇻';
		case 'USVirginIslands':
			return '🇻🇮';
		case 'Uganda':
			return '🇺🇬';
		case 'Ukraine':
			return '🇺🇦';
		case 'UnitedArabEmirates':
			return '🇦🇪';
		case 'UnitedKingdom':
			return '🇬🇧';
		case 'UnitedStates':
			return '🇺🇸';
		case 'Uruguay':
			return '🇺🇾';
		case 'Uzbekistan':
			return '🇺🇿';
		case 'Vanuatu':
			return '🇻🇺';
		case 'Vatican':
			return '🇻🇦';
		case 'Venezuela':
			return '🇻🇪';
		case 'Vietnam':
			return '🇻🇳';
		case 'WallisandFutuna':
			return '🇼🇫';
		case 'WesternSahara':
			return '🇪🇭';
		case 'Yemen':
			return '🇾🇪';
		case 'Zambia':
			return '🇿🇲';
		default:
			return '🇿🇼';
	}
};
var $rakutentech$r10$R10$FormComponents$Internal$Phone$getFlagIcon = F2(
	function (size, maybeCountry) {
		return A2(
			$lucamug$elm_ui_with_context$Element$WithContext$el,
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$Font$size(size)
				]),
			$lucamug$elm_ui_with_context$Element$WithContext$text(
				function () {
					if (maybeCountry.$ === 'Just') {
						var country = maybeCountry.a;
						return $rakutentech$r10$R10$Country$toFlag(country);
					} else {
						return $rakutentech$r10$R10$Country$emptyFlag;
					}
				}()));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Common$OnInputClick = function (a) {
	return {$: 'OnInputClick', a: a};
};
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Update$getMsgOnInputClick = F3(
	function (model, args, filteredFieldOption) {
		var maybeCountryValue = $rakutentech$r10$R10$Country$fromTelephoneAsString(model.value);
		var activeOptionIndex = A2(
			$elm$core$Maybe$withDefault,
			-1,
			A2(
				$elm$core$Maybe$andThen,
				$rakutentech$r10$R10$FormComponents$Internal$Phone$Update$getOptionIndex(filteredFieldOption),
				maybeCountryValue));
		var activeOptionY = A4(
			$rakutentech$r10$R10$FormComponents$Internal$Phone$Update$getOptionY,
			model.scroll,
			args,
			activeOptionIndex,
			$elm$core$List$length(filteredFieldOption));
		return $rakutentech$r10$R10$FormComponents$Internal$Phone$Common$OnInputClick(
			{key: args.key, selectedY: activeOptionY});
	});
var $rakutentech$r10$R10$FormComponents$Internal$Phone$getFlagButton = function (_v0) {
	var palette = _v0.palette;
	var disabled = _v0.disabled;
	var toMsg = _v0.toMsg;
	var key = _v0.key;
	var filteredFieldOption = _v0.filteredFieldOption;
	var model = _v0.model;
	var style = _v0.style;
	return A2(
		$lucamug$elm_ui_with_context$Element$WithContext$Input$button,
		_Utils_ap(
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$mouseOver(
					_List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$Background$color(
							A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$borderA, 0.3, palette))
						])),
					$rakutentech$r10$R10$Transition$transition('all 0.2s'),
					A2($lucamug$elm_ui_with_context$Element$WithContext$paddingXY, 10, 5),
					$lucamug$elm_ui_with_context$Element$WithContext$Border$rounded(10)
				]),
			function () {
				if (style.$ === 'Filled') {
					return _List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$moveDown(-2),
							$lucamug$elm_ui_with_context$Element$WithContext$moveRight(0)
						]);
				} else {
					return _List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$moveDown(3),
							$lucamug$elm_ui_with_context$Element$WithContext$moveRight(8)
						]);
				}
			}()),
		{
			label: function () {
				var maybeCountryValue = $rakutentech$r10$R10$Country$fromTelephoneAsString(model.value);
				return A2(
					$lucamug$elm_ui_with_context$Element$WithContext$row,
					_List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$spacing(7)
						]),
					_List_fromArray(
						[
							A2(
							$lucamug$elm_ui_with_context$Element$WithContext$el,
							_List_Nil,
							A2($rakutentech$r10$R10$FormComponents$Internal$Phone$getFlagIcon, 24, maybeCountryValue)),
							$lucamug$elm_ui_with_context$Element$WithContext$text(
							A2(
								$elm$core$Maybe$withDefault,
								'',
								A2($elm$core$Maybe$map, $rakutentech$r10$R10$Country$toCountryTelCode, maybeCountryValue))),
							A2(
							$lucamug$elm_ui_with_context$Element$WithContext$el,
							_List_fromArray(
								[
									$lucamug$elm_ui_with_context$Element$WithContext$Font$size(11),
									$lucamug$elm_ui_with_context$Element$WithContext$alpha(0.6),
									$rakutentech$r10$R10$Transition$transition('all 0.2s'),
									$lucamug$elm_ui_with_context$Element$WithContext$rotate(
									model.opened ? $elm$core$Basics$pi : 0)
								]),
							$lucamug$elm_ui_with_context$Element$WithContext$text('▼'))
						]));
			}(),
			onPress: disabled ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
				toMsg(
					A3(
						$rakutentech$r10$R10$FormComponents$Internal$Phone$Update$getMsgOnInputClick,
						model,
						{key: key, maxDisplayCount: 5, selectOptionHeight: 36},
						filteredFieldOption)))
		});
};
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Common$OnArrowDown = function (a) {
	return {$: 'OnArrowDown', a: a};
};
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Common$OnArrowUp = function (a) {
	return {$: 'OnArrowUp', a: a};
};
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Common$OnEsc = {$: 'OnEsc'};
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Common$OnFocus = function (a) {
	return {$: 'OnFocus', a: a};
};
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Common$OnLoseFocus = function (a) {
	return {$: 'OnLoseFocus', a: a};
};
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Common$OnValueChange = F3(
	function (a, b, c) {
		return {$: 'OnValueChange', a: a, b: b, c: c};
	});
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Common$dropdownContainerId = function (key) {
	return 'dropdown-container-' + key;
};
var $rakutentech$r10$R10$Country$toPhoneTemplate = function (country) {
	if (country.$ === 'Japan') {
		return '080-1234-567';
	} else {
		return '';
	}
};
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Common$OnScroll = function (a) {
	return {$: 'OnScroll', a: a};
};
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Combobox$comboboxOptionNoResults = function (_v0) {
	var palette = _v0.palette;
	var selectOptionHeight = _v0.selectOptionHeight;
	return A2(
		$lucamug$elm_ui_with_context$Element$WithContext$el,
		_List_fromArray(
			[
				$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
				$lucamug$elm_ui_with_context$Element$WithContext$height(
				$lucamug$elm_ui_with_context$Element$WithContext$px(selectOptionHeight)),
				$lucamug$elm_ui_with_context$Element$WithContext$paddingEach(
				{bottom: 0, left: 12, right: 0, top: 0}),
				$lucamug$elm_ui_with_context$Element$WithContext$Font$color(
				A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$onSurfaceA, 0.5, palette))
			]),
		A2(
			$lucamug$elm_ui_with_context$Element$WithContext$el,
			_List_fromArray(
				[$lucamug$elm_ui_with_context$Element$WithContext$centerY]),
			$lucamug$elm_ui_with_context$Element$WithContext$text('No results')));
};
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Combobox$viewComboboxOption = F4(
	function (countryValue, select, args, country) {
		var isSelected_ = _Utils_eq(
			$rakutentech$r10$R10$Country$fromString(select),
			$elm$core$Maybe$Just(country));
		var isActiveValue = _Utils_eq(
			countryValue,
			$elm$core$Maybe$Just(country));
		var getShadowColor = isActiveValue ? A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$primaryVariantA, 0.1, args.palette) : A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$onSurfaceA, 0.05, args.palette);
		var getBackgroundColor = (isActiveValue && isSelected_) ? A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$primaryVariantA, 0.13, args.palette) : (isActiveValue ? A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$primaryVariantA, 0.07, args.palette) : (isSelected_ ? A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$onSurfaceA, 0.07, args.palette) : A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$onSurfaceA, 0, args.palette)));
		return A2(
			$lucamug$elm_ui_with_context$Element$WithContext$el,
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
					$lucamug$elm_ui_with_context$Element$WithContext$height(
					$lucamug$elm_ui_with_context$Element$WithContext$px(args.selectOptionHeight)),
					$lucamug$elm_ui_with_context$Element$WithContext$Background$color(getBackgroundColor),
					$lucamug$elm_ui_with_context$Element$WithContext$mouseOver(
					_List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$Border$innerShadow(
							{
								blur: 0,
								color: getShadowColor,
								offset: _Utils_Tuple2(0, 0),
								size: 40
							})
						]))
				]),
			args.toOptionEl(country));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Common$OnSearch = F2(
	function (a, b) {
		return {$: 'OnSearch', a: a, b: b};
	});
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Update$getMsgOnSearch = F2(
	function (args, newSearch) {
		return A2(
			$rakutentech$r10$R10$FormComponents$Internal$Phone$Common$OnSearch,
			{
				filteredFieldOption: A2($rakutentech$r10$R10$FormComponents$Internal$Phone$Common$filterBySearch, newSearch, args.countryOptions),
				key: args.key,
				maxDisplayCount: args.maxDisplayCount,
				selectOptionHeight: args.selectOptionHeight
			},
			newSearch);
	});
var $rakutentech$r10$R10$Svg$Icons$x = F3(
	function (attrs, cl, size) {
		return A3(
			$rakutentech$r10$R10$Svg$Utils$wrapper32,
			attrs,
			size,
			_List_fromArray(
				[
					A2(
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$fill('none'),
							$elm$svg$Svg$Attributes$d('M0 0h32v32H0z')
						]),
					_List_Nil),
					A2(
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$fill(
							$rakutentech$r10$R10$Color$Utils$toCssRgba(cl)),
							$elm$svg$Svg$Attributes$d('M27 6.45L25.55 5 16 14.55 6.45 5 5 6.45 14.55 16 5 25.55 6.45 27 16 17.45 25.55 27 27 25.55 17.45 16 27 6.45z')
						]),
					_List_Nil)
				]));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Combobox$viewSearchBox = F2(
	function (model, args) {
		return A2(
			$lucamug$elm_ui_with_context$Element$WithContext$row,
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$Border$widthEach(
					{bottom: 1, left: 0, right: 0, top: 0}),
					$lucamug$elm_ui_with_context$Element$WithContext$Border$color(
					A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$borderA, 0.3, args.palette)),
					A2($lucamug$elm_ui_with_context$Element$WithContext$paddingXY, 10, 0),
					$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill)
				]),
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$withContext(
					function (c) {
						return A2(
							$lucamug$elm_ui_with_context$Element$WithContext$Input$text,
							_List_fromArray(
								[
									$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
									$elm$html$Html$Attributes$id(
										$rakutentech$r10$R10$FormComponents$Internal$Phone$Common$dropdownSearchBoxId(args.key))),
									$lucamug$elm_ui_with_context$Element$WithContext$Background$color(
									$rakutentech$r10$R10$FormComponents$Internal$UI$Color$surface(args.palette)),
									$lucamug$elm_ui_with_context$Element$WithContext$paddingEach(
									{bottom: 16, left: 8, right: 16, top: 16}),
									$lucamug$elm_ui_with_context$Element$WithContext$Border$width(0)
								]),
							{
								label: A2(
									$lucamug$elm_ui_with_context$Element$WithContext$Input$labelLeft,
									_List_fromArray(
										[
											$lucamug$elm_ui_with_context$Element$WithContext$moveDown(3),
											$lucamug$elm_ui_with_context$Element$WithContext$moveRight(5)
										]),
									A3(
										$rakutentech$r10$R10$Svg$Icons$search,
										_List_Nil,
										$rakutentech$r10$R10$Color$Svg$fontHighEmphasis(c.theme),
										18)),
								onChange: function (string) {
									return args.toMsg(
										A2($rakutentech$r10$R10$FormComponents$Internal$Phone$Update$getMsgOnSearch, args, string));
								},
								placeholder: $elm$core$Maybe$Nothing,
								text: model.search
							});
					}),
					A2(
					$lucamug$elm_ui_with_context$Element$WithContext$Input$button,
					_List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$mouseOver(
							_List_fromArray(
								[
									$lucamug$elm_ui_with_context$Element$WithContext$Background$color(
									A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$borderA, 0.3, args.palette))
								])),
							$rakutentech$r10$R10$Transition$transition('all 0.2s'),
							$lucamug$elm_ui_with_context$Element$WithContext$padding(6),
							$lucamug$elm_ui_with_context$Element$WithContext$Border$rounded(20)
						]),
					{
						label: $lucamug$elm_ui_with_context$Element$WithContext$withContext(
							function (c) {
								return A3(
									$rakutentech$r10$R10$Svg$Icons$x,
									_List_Nil,
									$rakutentech$r10$R10$Color$Svg$fontHighEmphasis(c.theme),
									18);
							}),
						onPress: $elm$core$Maybe$Just(
							args.toMsg($rakutentech$r10$R10$FormComponents$Internal$Phone$Common$OnEsc))
					})
				]));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Combobox$viewComboboxDropdown = F4(
	function (model, args, opened, filteredFieldOption) {
		var visibleCount = args.maxDisplayCount * 3;
		var optionsCount = $elm$core$List$length(filteredFieldOption);
		var elementsScrolledFromTop = ($elm$core$Basics$round(model.scroll) / args.selectOptionHeight) | 0;
		var visibleFrom = elementsScrolledFromTop - args.maxDisplayCount;
		var visibleMoveDown = $rakutentech$r10$R10$FormComponents$Internal$Phone$Update$dropdownHingeHeight + (A2($elm$core$Basics$max, 0, visibleFrom) * args.selectOptionHeight);
		var visibleTo = visibleFrom + visibleCount;
		var visibleOptions = function () {
			if (optionsCount > 0) {
				var maybeCountryValue = $rakutentech$r10$R10$Country$fromTelephoneAsString(model.value);
				return A2(
					$elm$core$List$map,
					function (country) {
						return _Utils_Tuple2(
							$rakutentech$r10$R10$Country$toString(country),
							A4($rakutentech$r10$R10$FormComponents$Internal$Phone$Combobox$viewComboboxOption, maybeCountryValue, model.select, args, country));
					},
					A3($rakutentech$r10$R10$FormComponents$Internal$Utils$listSlice, visibleFrom, visibleTo, filteredFieldOption));
			} else {
				return _List_fromArray(
					[
						_Utils_Tuple2(
						'no_results',
						$rakutentech$r10$R10$FormComponents$Internal$Phone$Combobox$comboboxOptionNoResults(args))
					]);
			}
		}();
		var contentHeight = args.selectOptionHeight * A2($elm$core$Basics$max, optionsCount, 1);
		return (!opened) ? $lucamug$elm_ui_with_context$Element$WithContext$none : A2(
			$lucamug$elm_ui_with_context$Element$WithContext$column,
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
					$lucamug$elm_ui_with_context$Element$WithContext$clip,
					$lucamug$elm_ui_with_context$Element$WithContext$moveDown(60),
					$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
					$elm$html$Html$Attributes$tabindex(-1)),
					$lucamug$elm_ui_with_context$Element$WithContext$Background$color(
					$rakutentech$r10$R10$FormComponents$Internal$UI$Color$surface(args.palette)),
					$lucamug$elm_ui_with_context$Element$WithContext$Border$color(
					A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$borderA, 0.5, args.palette)),
					$lucamug$elm_ui_with_context$Element$WithContext$Border$width(1),
					$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
					A2($elm$html$Html$Attributes$style, 'z-index', '1')),
					$lucamug$elm_ui_with_context$Element$WithContext$Border$rounded(
					function () {
						var _v0 = args.style;
						if (_v0.$ === 'Filled') {
							return 0;
						} else {
							return 8;
						}
					}()),
					$lucamug$elm_ui_with_context$Element$WithContext$Border$shadow(
					{
						blur: 10,
						color: A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$onSurfaceA, 0.3, args.palette),
						offset: _Utils_Tuple2(0, 0),
						size: 3
					})
				]),
			_List_fromArray(
				[
					A2($rakutentech$r10$R10$FormComponents$Internal$Phone$Combobox$viewSearchBox, model, args),
					A2(
					$lucamug$elm_ui_with_context$Element$WithContext$el,
					_List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
							$lucamug$elm_ui_with_context$Element$WithContext$height(
							$lucamug$elm_ui_with_context$Element$WithContext$px(
								A2($rakutentech$r10$R10$FormComponents$Internal$Phone$Update$getDropdownHeight, args, optionsCount))),
							$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
							A2($elm$html$Html$Attributes$style, 'overscroll-behavior', 'contain')),
							$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
							$rakutentech$r10$R10$FormComponents$Internal$UI$onScroll(
								A2($elm$core$Basics$composeL, args.toMsg, $rakutentech$r10$R10$FormComponents$Internal$Phone$Common$OnScroll))),
							$lucamug$elm_ui_with_context$Element$WithContext$Font$color(
							$rakutentech$r10$R10$FormComponents$Internal$UI$Color$font(args.palette)),
							$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
							$elm$html$Html$Attributes$id(
								$rakutentech$r10$R10$FormComponents$Internal$Phone$Common$dropdownContentId(args.key))),
							$lucamug$elm_ui_with_context$Element$WithContext$scrollbarX,
							$lucamug$elm_ui_with_context$Element$WithContext$inFront(
							A2(
								$lucamug$elm_ui_with_context$Element$WithContext$Keyed$column,
								_List_fromArray(
									[
										$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
										$lucamug$elm_ui_with_context$Element$WithContext$moveDown(visibleMoveDown)
									]),
								visibleOptions))
						]),
					A2(
						$lucamug$elm_ui_with_context$Element$WithContext$el,
						_List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$height(
								$lucamug$elm_ui_with_context$Element$WithContext$px(contentHeight)),
								$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill)
							]),
						$lucamug$elm_ui_with_context$Element$WithContext$none))
				]));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Combobox$view = F3(
	function (attrs, model, args) {
		var maybeTelCode = A2(
			$elm$core$Maybe$withDefault,
			'',
			A2(
				$elm$core$Maybe$map,
				$rakutentech$r10$R10$Country$toCountryTelCode,
				$rakutentech$r10$R10$Country$fromTelephoneAsString(model.value)));
		var valueToShowOnTheScreen = A3($elm$core$String$replace, maybeTelCode, '', model.value);
		var maybeCountry = $rakutentech$r10$R10$Country$fromTelephoneAsString(model.value);
		var inputAttrs = _List_fromArray(
			[
				$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
				$elm$html$Html$Attributes$type_('tel'))
			]);
		var filteredFieldOption = A2($rakutentech$r10$R10$FormComponents$Internal$Phone$Common$filterBySearch, model.search, args.countryOptions);
		var textArgs = {
			autocomplete: $elm$core$Maybe$Nothing,
			disabled: args.disabled,
			floatingLabelAlwaysUp: true,
			focused: model.focused,
			helperText: args.helperText,
			idDom: $elm$core$Maybe$Nothing,
			label: args.label,
			leadingIcon: args.leadingIcon,
			maybeValid: args.maybeValid,
			msgOnChange: A2(
				$elm$core$Basics$composeL,
				args.toMsg,
				A2(
					$rakutentech$r10$R10$FormComponents$Internal$Phone$Common$OnValueChange,
					args.key,
					{filteredFieldOption: filteredFieldOption, maxDisplayCount: args.maxDisplayCount, selectOptionHeight: args.selectOptionHeight})),
			msgOnEnter: $elm$core$Maybe$Nothing,
			msgOnFocus: args.toMsg(
				$rakutentech$r10$R10$FormComponents$Internal$Phone$Common$OnFocus(model.value)),
			msgOnLoseFocus: $elm$core$Maybe$Nothing,
			msgOnTogglePasswordShow: $elm$core$Maybe$Nothing,
			palette: args.palette,
			placeholder: A2(
				$elm$core$Maybe$map,
				$elm$core$Basics$append(' '),
				A2($elm$core$Maybe$map, $rakutentech$r10$R10$Country$toPhoneTemplate, maybeCountry)),
			requiredLabel: args.requiredLabel,
			showPassword: false,
			style: args.style,
			textType: $rakutentech$r10$R10$FormTypes$TextPlain,
			trailingIcon: args.trailingIcon,
			value: valueToShowOnTheScreen
		};
		return A2(
			$lucamug$elm_ui_with_context$Element$WithContext$column,
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
					$lucamug$elm_ui_with_context$Element$WithContext$spacing(50)
				]),
			_List_fromArray(
				[
					A2(
					$lucamug$elm_ui_with_context$Element$WithContext$paragraph,
					_List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$Background$color(
							A3($lucamug$elm_ui_with_context$Element$WithContext$rgb, 1, 1, 0))
						]),
					_List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$text(model.value)
						])),
					A3(
					$rakutentech$r10$R10$FormComponents$Internal$Text$view,
					_List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
							$elm$html$Html$Attributes$id(
								$rakutentech$r10$R10$FormComponents$Internal$Phone$Common$dropdownContainerId(args.key))),
							$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
							$elm$html$Html$Attributes$tabindex(-1)),
							$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
							A2(
								$elm$html$Html$Events$on,
								'focusout',
								A2(
									$rakutentech$r10$R10$FormComponents$Internal$Utils$FocusOut$onFocusOut,
									$rakutentech$r10$R10$FormComponents$Internal$Phone$Common$dropdownContainerId(args.key),
									args.toMsg(
										$rakutentech$r10$R10$FormComponents$Internal$Phone$Common$OnLoseFocus(model.value))))),
							$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
							$rakutentech$r10$R10$FormComponents$Internal$UI$onKeyPressBatch(
								_Utils_ap(
									_List_fromArray(
										[
											_Utils_Tuple2(
											$rakutentech$r10$R10$FormComponents$Internal$UI$keyCode.down,
											args.toMsg(
												$rakutentech$r10$R10$FormComponents$Internal$Phone$Common$OnArrowDown(
													{filteredFieldOption: filteredFieldOption, key: args.key, maxDisplayCount: args.maxDisplayCount, selectOptionHeight: args.selectOptionHeight}))),
											_Utils_Tuple2(
											$rakutentech$r10$R10$FormComponents$Internal$UI$keyCode.up,
											args.toMsg(
												$rakutentech$r10$R10$FormComponents$Internal$Phone$Common$OnArrowUp(
													{filteredFieldOption: filteredFieldOption, key: args.key, maxDisplayCount: args.maxDisplayCount, selectOptionHeight: args.selectOptionHeight})))
										]),
									model.opened ? _Utils_ap(
										_List_fromArray(
											[
												_Utils_Tuple2(
												$rakutentech$r10$R10$FormComponents$Internal$UI$keyCode.esc,
												args.toMsg($rakutentech$r10$R10$FormComponents$Internal$Phone$Common$OnEsc))
											]),
										function () {
											var _v0 = $rakutentech$r10$R10$Country$fromString(model.select);
											if (_v0.$ === 'Just') {
												var country = _v0.a;
												return _List_fromArray(
													[
														_Utils_Tuple2(
														$rakutentech$r10$R10$FormComponents$Internal$UI$keyCode.enter,
														args.toMsg(
															$rakutentech$r10$R10$FormComponents$Internal$Phone$Common$OnOptionSelect(country)))
													]);
											} else {
												return _List_Nil;
											}
										}()) : _List_Nil))),
							$lucamug$elm_ui_with_context$Element$WithContext$inFront(
							A4($rakutentech$r10$R10$FormComponents$Internal$Phone$Combobox$viewComboboxDropdown, model, args, model.opened, filteredFieldOption))
						]),
					_Utils_ap(inputAttrs, attrs),
					textArgs)
				]));
	});
var $elm_community$string_extra$String$Extra$surround = F2(
	function (wrapper, string) {
		return _Utils_ap(
			wrapper,
			_Utils_ap(string, wrapper));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Phone$insertBold = F2(
	function (indexes, string) {
		return A2(
			$elm_community$string_extra$String$Extra$surround,
			'**',
			A3($rakutentech$r10$R10$FormComponents$Internal$Utils$stringInsertAtMulti, '**', indexes, string));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Phone$viewOptionEl = F2(
	function (_v0, country) {
		var search = _v0.search;
		var msgOnSelect = _v0.msgOnSelect;
		var label = $rakutentech$r10$R10$Country$toString(country);
		var insertPositions = A2(
			$elm$core$List$concatMap,
			function (idx) {
				return _List_fromArray(
					[
						idx,
						idx + $elm$core$String$length(search)
					]);
			},
			A2(
				$elm$core$String$indexes,
				$rakutentech$r10$R10$FormComponents$Internal$Phone$Common$normalizeString(search),
				$rakutentech$r10$R10$FormComponents$Internal$Phone$Common$normalizeString(label)));
		var withBold = $elm$core$List$isEmpty(insertPositions) ? label : A2($rakutentech$r10$R10$FormComponents$Internal$Phone$insertBold, insertPositions, label);
		return A2(
			$lucamug$elm_ui_with_context$Element$WithContext$row,
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
					$lucamug$elm_ui_with_context$Element$WithContext$height($lucamug$elm_ui_with_context$Element$WithContext$fill),
					$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
					A2($elm$html$Html$Attributes$style, 'z-index', '0')),
					$lucamug$elm_ui_with_context$Element$WithContext$Events$onClick(
					msgOnSelect(country)),
					$lucamug$elm_ui_with_context$Element$WithContext$pointer,
					A2($lucamug$elm_ui_with_context$Element$WithContext$paddingXY, 12, 0),
					$lucamug$elm_ui_with_context$Element$WithContext$spacing(8),
					$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
					A2($elm$html$Html$Attributes$style, 'mask-image', 'linear-gradient(right, rgba(255,255,0,0), rgba(255,255,0, 1) 16px)')),
					$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
					A2($elm$html$Html$Attributes$style, '-webkit-mask-image', '-webkit-linear-gradient(right, rgba(255,255,0,0) 10px, rgba(255,255,0, 1) 16px)'))
				]),
			_List_fromArray(
				[
					A2(
					$rakutentech$r10$R10$FormComponents$Internal$Phone$getFlagIcon,
					24,
					$elm$core$Maybe$Just(country)),
					A2(
					$lucamug$elm_ui_with_context$Element$WithContext$row,
					_List_Nil,
					$rakutentech$r10$R10$SimpleMarkdown$elementMarkdown(withBold)),
					A2(
					$lucamug$elm_ui_with_context$Element$WithContext$el,
					_List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$alpha(0.5)
						]),
					$lucamug$elm_ui_with_context$Element$WithContext$text(
						'(' + ($rakutentech$r10$R10$Country$toCountryTelCode(country) + ')')))
				]));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Phone$view = F3(
	function (attrs, model, conf) {
		var countryOptions_ = A2($elm$core$Maybe$withDefault, $rakutentech$r10$R10$FormComponents$Internal$Phone$countryOptions, conf.countryOptions);
		var filteredFieldOption = A2($rakutentech$r10$R10$FormComponents$Internal$Phone$Common$filterBySearch, model.search, countryOptions_);
		var args = {
			countryOptions: countryOptions_,
			disabled: conf.disabled,
			helperText: conf.helperText,
			key: conf.key,
			label: conf.label,
			leadingIcon: _List_fromArray(
				[
					$rakutentech$r10$R10$FormComponents$Internal$Phone$getFlagButton(
					{disabled: conf.disabled, filteredFieldOption: filteredFieldOption, key: conf.key, model: model, palette: conf.palette, style: conf.style, toMsg: conf.toMsg})
				]),
			maxDisplayCount: 5,
			maybeValid: conf.maybeValid,
			palette: conf.palette,
			requiredLabel: conf.requiredLabel,
			selectOptionHeight: 36,
			style: conf.style,
			toMsg: conf.toMsg,
			toOptionEl: $rakutentech$r10$R10$FormComponents$Internal$Phone$viewOptionEl(
				{
					msgOnSelect: A2($elm$core$Basics$composeR, $rakutentech$r10$R10$FormComponents$Internal$Phone$Common$OnOptionSelect, conf.toMsg),
					search: model.search
				}),
			trailingIcon: _List_Nil
		};
		return A3($rakutentech$r10$R10$FormComponents$Internal$Phone$Combobox$view, attrs, model, args);
	});
var $rakutentech$r10$R10$Form$Internal$MakerForView$viewSpecial = F3(
	function (args, typeSpecial, formConf) {
		var model = {focused: args.focused, opened: args.active, scroll: args.fieldState.scroll, search: args.fieldState.search, select: args.fieldState.select, value: args.fieldState.value};
		return A3(
			$rakutentech$r10$R10$FormComponents$Internal$Phone$view,
			_List_Nil,
			model,
			{
				countryOptions: $elm$core$Maybe$Nothing,
				disabled: args.fieldState.disabled,
				helperText: args.fieldConf.helperText,
				key: $rakutentech$r10$R10$Form$Internal$Key$toString(args.key),
				label: args.fieldConf.label,
				maybeValid: $rakutentech$r10$R10$Form$Internal$MakerForView$maybeValid(args.fieldState.validation),
				palette: args.palette,
				requiredLabel: args.fieldConf.requiredLabel,
				style: args.style,
				toMsg: A3($rakutentech$r10$R10$Form$Internal$Msg$OnPhoneMsg, args.key, args.fieldConf, formConf)
			});
	});
var $rakutentech$r10$R10$Form$Internal$Msg$Submit = function (a) {
	return {$: 'Submit', a: a};
};
var $rakutentech$r10$R10$Form$Internal$Msg$TogglePasswordShow = function (a) {
	return {$: 'TogglePasswordShow', a: a};
};
var $rakutentech$r10$R10$Form$Internal$MakerForView$viewText = F3(
	function (args, textType, formConf) {
		return A3(
			$rakutentech$r10$R10$FormComponents$Internal$Text$view,
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$width(
					function () {
						var _v1 = args.fieldConf.maxWidth;
						if (_v1.$ === 'Just') {
							var _int = _v1.a;
							return $lucamug$elm_ui_with_context$Element$WithContext$maximum(_int);
						} else {
							return $elm$core$Basics$identity;
						}
					}()(
						function () {
							var _v0 = args.fieldConf.minWidth;
							if (_v0.$ === 'Just') {
								var _int = _v0.a;
								return $lucamug$elm_ui_with_context$Element$WithContext$minimum(_int);
							} else {
								return $elm$core$Basics$identity;
							}
						}()($lucamug$elm_ui_with_context$Element$WithContext$fill)))
				]),
			_List_Nil,
			{
				autocomplete: args.fieldConf.autocomplete,
				disabled: args.fieldState.disabled,
				floatingLabelAlwaysUp: function () {
					if (textType.$ === 'TextWithPatternLarge') {
						return true;
					} else {
						return false;
					}
				}(),
				focused: args.focused,
				helperText: args.fieldConf.helperText,
				idDom: args.fieldConf.idDom,
				label: args.fieldConf.label,
				leadingIcon: _List_Nil,
				maybeValid: $rakutentech$r10$R10$Form$Internal$MakerForView$maybeValid(args.fieldState.validation),
				msgOnChange: A3($rakutentech$r10$R10$Form$Internal$Msg$ChangeValue, args.key, args.fieldConf, formConf),
				msgOnEnter: $elm$core$Maybe$Just(
					$rakutentech$r10$R10$Form$Internal$Msg$Submit(formConf)),
				msgOnFocus: $rakutentech$r10$R10$Form$Internal$Msg$GetFocus(args.key),
				msgOnLoseFocus: $elm$core$Maybe$Just(
					A2($rakutentech$r10$R10$Form$Internal$Msg$LoseFocus, args.key, args.fieldConf)),
				msgOnTogglePasswordShow: $elm$core$Maybe$Just(
					$rakutentech$r10$R10$Form$Internal$Msg$TogglePasswordShow(args.key)),
				palette: args.palette,
				placeholder: $elm$core$Maybe$Nothing,
				requiredLabel: args.fieldConf.requiredLabel,
				showPassword: args.fieldState.showPassword,
				style: args.style,
				textType: textType,
				trailingIcon: _List_Nil,
				value: args.fieldState.value
			});
	});
var $rakutentech$r10$R10$Form$Internal$MakerForView$viewEntityField = F3(
	function (args, fieldConf, formConf) {
		var focused = A2($rakutentech$r10$R10$Form$Internal$MakerForView$isFocused, args.key, args.formState.focused);
		var fieldState = A2(
			$elm$core$Maybe$withDefault,
			$rakutentech$r10$R10$Form$Internal$FieldState$init,
			A2($rakutentech$r10$R10$Form$Internal$Dict$get, args.key, args.formState.fieldsState));
		var active = A2($rakutentech$r10$R10$Form$Internal$MakerForView$isActive, args.key, args.formState.active);
		var args2 = {
			active: active,
			fieldConf: fieldConf,
			fieldState: fieldState,
			focused: focused,
			key: args.key,
			palette: args.palette,
			style: args.style,
			translator: args.translator(args.key)
		};
		var field = function () {
			var _v0 = fieldConf.type_;
			switch (_v0.$) {
				case 'TypeText':
					var typeText = _v0.a;
					return A3($rakutentech$r10$R10$Form$Internal$MakerForView$viewText, args2, typeText, formConf);
				case 'TypeBinary':
					var typeBinary = _v0.a;
					return A3($rakutentech$r10$R10$Form$Internal$MakerForView$viewBinary, args2, typeBinary, formConf);
				case 'TypeSingle':
					var typeSingle = _v0.a;
					var options = _v0.b;
					return A4($rakutentech$r10$R10$Form$Internal$MakerForView$viewSingle, args2, typeSingle, options, formConf);
				case 'TypeMulti':
					return $lucamug$elm_ui_with_context$Element$WithContext$text('TODO');
				default:
					var typeSpecial = _v0.a;
					return A3($rakutentech$r10$R10$Form$Internal$MakerForView$viewSpecial, args2, typeSpecial, formConf);
			}
		}();
		return _List_fromArray(
			[field]);
	});
var $rakutentech$r10$R10$Form$Internal$Msg$AddEntity = function (a) {
	return {$: 'AddEntity', a: a};
};
var $rakutentech$r10$R10$Form$Internal$MakerForView$viewEntityMultiLastRow = function (args) {
	var shadow = F2(
		function (size_, a) {
			return $lucamug$elm_ui_with_context$Element$WithContext$Border$shadow(
				{
					blur: 0,
					color: A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$labelA, a, args.palette),
					offset: _Utils_Tuple2(0, 0),
					size: size_
				});
		});
	var plusColor = $rakutentech$r10$R10$FormComponents$Internal$UI$Color$label(args.palette);
	var iconSize = 18;
	var iconCommonAttrs = F4(
		function (widthPx, heightPx, color, rotateDeg) {
			return _List_fromArray(
				[
					$rakutentech$r10$R10$Transition$transition('all 0.2s '),
					$lucamug$elm_ui_with_context$Element$WithContext$Border$rounded(2),
					$lucamug$elm_ui_with_context$Element$WithContext$centerX,
					$lucamug$elm_ui_with_context$Element$WithContext$centerY,
					$lucamug$elm_ui_with_context$Element$WithContext$width(
					$lucamug$elm_ui_with_context$Element$WithContext$px(widthPx)),
					$lucamug$elm_ui_with_context$Element$WithContext$height(
					$lucamug$elm_ui_with_context$Element$WithContext$px(heightPx)),
					$lucamug$elm_ui_with_context$Element$WithContext$Background$color(color),
					$lucamug$elm_ui_with_context$Element$WithContext$rotate(
					$elm$core$Basics$degrees(rotateDeg))
				]);
		});
	var buttonAttrs = _List_fromArray(
		[
			$lucamug$elm_ui_with_context$Element$WithContext$Border$width(1),
			$lucamug$elm_ui_with_context$Element$WithContext$Border$rounded(5),
			$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
			$elm$html$Html$Attributes$class('ripple')),
			$rakutentech$r10$R10$Transition$transition('all 0.11s ease-out'),
			$lucamug$elm_ui_with_context$Element$WithContext$padding(8),
			$lucamug$elm_ui_with_context$Element$WithContext$width(
			$lucamug$elm_ui_with_context$Element$WithContext$px(28)),
			$lucamug$elm_ui_with_context$Element$WithContext$height($lucamug$elm_ui_with_context$Element$WithContext$fill),
			A2(shadow, 10, 0),
			$lucamug$elm_ui_with_context$Element$WithContext$Border$color(
			A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$containerA, 0.5, args.palette)),
			$lucamug$elm_ui_with_context$Element$WithContext$mouseOver(
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$Border$color(
					A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$containerA, 1, args.palette))
				])),
			$lucamug$elm_ui_with_context$Element$WithContext$focused(
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$alpha(1),
					A2(shadow, 1, 1),
					$lucamug$elm_ui_with_context$Element$WithContext$Border$color(
					A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$containerA, 1, args.palette))
				]))
		]);
	var buttonToAddEntity = A2(
		$lucamug$elm_ui_with_context$Element$WithContext$Input$button,
		buttonAttrs,
		{
			label: A2(
				$lucamug$elm_ui_with_context$Element$WithContext$el,
				_List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$width(
						$lucamug$elm_ui_with_context$Element$WithContext$px(iconSize)),
						$lucamug$elm_ui_with_context$Element$WithContext$height(
						$lucamug$elm_ui_with_context$Element$WithContext$px(iconSize)),
						$lucamug$elm_ui_with_context$Element$WithContext$inFront(
						A2(
							$lucamug$elm_ui_with_context$Element$WithContext$el,
							A4(iconCommonAttrs, iconSize, 2, plusColor, 0),
							$lucamug$elm_ui_with_context$Element$WithContext$none)),
						$lucamug$elm_ui_with_context$Element$WithContext$inFront(
						A2(
							$lucamug$elm_ui_with_context$Element$WithContext$el,
							A4(iconCommonAttrs, 2, iconSize, plusColor, 0),
							$lucamug$elm_ui_with_context$Element$WithContext$none))
					]),
				$lucamug$elm_ui_with_context$Element$WithContext$none),
			onPress: $elm$core$Maybe$Just(
				$rakutentech$r10$R10$Form$Internal$Msg$AddEntity(args.key))
		});
	return A2(
		$lucamug$elm_ui_with_context$Element$WithContext$row,
		_List_fromArray(
			[
				$lucamug$elm_ui_with_context$Element$WithContext$spacing(10),
				$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill)
			]),
		_List_fromArray(
			[
				buttonToAddEntity,
				A2(
				$lucamug$elm_ui_with_context$Element$WithContext$el,
				_List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
						$rakutentech$r10$R10$Form$Internal$MakerForView$spacingGeneric
					]),
				$lucamug$elm_ui_with_context$Element$WithContext$none)
			]));
};
var $rakutentech$r10$R10$FormComponents$Internal$UI$fontSizeSubTitle = $lucamug$elm_ui_with_context$Element$WithContext$Font$size(18);
var $rakutentech$r10$R10$Form$Internal$MakerForView$viewEntitySubTitle = F2(
	function (palette, titleConf) {
		return _List_fromArray(
			[
				A2(
				$lucamug$elm_ui_with_context$Element$WithContext$column,
				_List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$spacing($rakutentech$r10$R10$FormComponents$Internal$UI$genericSpacing),
						$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill)
					]),
				_List_fromArray(
					[
						A2(
						$lucamug$elm_ui_with_context$Element$WithContext$paragraph,
						_List_fromArray(
							[$rakutentech$r10$R10$FormComponents$Internal$UI$fontSizeSubTitle]),
						_List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$text(titleConf.title)
							])),
						A3(
						$rakutentech$r10$R10$FormComponents$Internal$UI$viewHelperText,
						palette,
						_List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$alpha(0.5),
								$lucamug$elm_ui_with_context$Element$WithContext$Font$size(14),
								$lucamug$elm_ui_with_context$Element$WithContext$paddingEach(
								{bottom: 0, left: 0, right: 0, top: $rakutentech$r10$R10$FormComponents$Internal$UI$genericSpacing})
							]),
						titleConf.helperText)
					]))
			]);
	});
var $rakutentech$r10$R10$FormComponents$Internal$UI$fontSizeTitle = $lucamug$elm_ui_with_context$Element$WithContext$Font$size(24);
var $rakutentech$r10$R10$Form$Internal$MakerForView$viewEntityTitle = F2(
	function (palette, titleConf) {
		return _List_fromArray(
			[
				A2(
				$lucamug$elm_ui_with_context$Element$WithContext$column,
				_List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$spacing(12),
						$lucamug$elm_ui_with_context$Element$WithContext$paddingEach(
						{bottom: 0, left: 0, right: 0, top: 40}),
						$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill)
					]),
				_List_fromArray(
					[
						A2(
						$lucamug$elm_ui_with_context$Element$WithContext$paragraph,
						_List_fromArray(
							[$rakutentech$r10$R10$FormComponents$Internal$UI$fontSizeTitle]),
						_List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$text(titleConf.title)
							])),
						A3($rakutentech$r10$R10$FormComponents$Internal$UI$viewHelperText, palette, _List_Nil, titleConf.helperText)
					]))
			]);
	});
var $rakutentech$r10$R10$Form$Internal$Msg$ChangeTab = F2(
	function (a, b) {
		return {$: 'ChangeTab', a: a, b: b};
	});
var $rakutentech$r10$R10$Form$Internal$Update$entitiesWithErrorsForOnlyExistingValidations = F2(
	function (allKeys, fieldsState) {
		return A2(
			$elm$core$List$filter,
			function (_v0) {
				var key = _v0.a;
				var fieldState = A2(
					$elm$core$Maybe$withDefault,
					$rakutentech$r10$R10$Form$Internal$FieldState$init,
					A2($rakutentech$r10$R10$Form$Internal$Dict$get, key, fieldsState));
				var _v1 = fieldState.validation;
				if (_v1.$ === 'NotYetValidated') {
					return false;
				} else {
					var listValidationMessage = _v1.a;
					return !$rakutentech$r10$R10$Form$Internal$FieldState$isValid(listValidationMessage);
				}
			},
			allKeys);
	});
var $rakutentech$r10$R10$Form$Internal$Update$isExistingFormFieldsValid = function (form) {
	var allKeys = $rakutentech$r10$R10$Form$Internal$Update$allValidationKeysMaker(form);
	var fieldsWithErrors_ = A2($rakutentech$r10$R10$Form$Internal$Update$entitiesWithErrorsForOnlyExistingValidations, allKeys, form.state.fieldsState);
	return _Utils_eq(
		$elm$core$List$head(fieldsWithErrors_),
		$elm$core$Maybe$Nothing);
};
var $rakutentech$r10$R10$FormComponents$Internal$UI$Color$mouseOverSurface = $rakutentech$r10$R10$FormComponents$Internal$UI$Color$onSurfaceA(0.04);
var $lucamug$elm_ui_with_context$Element$WithContext$shrink = $mdgriffith$elm_ui$Element$shrink;
var $rakutentech$r10$R10$FormComponents$Internal$UI$Color$surfaceA = F2(
	function (alpha, palette) {
		return $rakutentech$r10$R10$FormComponents$Internal$UI$Color$fromPaletteColor(
			A2($rakutentech$r10$R10$FormComponents$Internal$UI$Palette$withOpacity, alpha, palette.surface));
	});
var $rakutentech$r10$R10$Form$Internal$MakerForView$viewTab = F3(
	function (args, fieldState, _v0) {
		var index = _v0.index;
		var selected = _v0.selected;
		var entity = _v0.entity;
		var label = _v0.label;
		var valid = $rakutentech$r10$R10$Form$Internal$Update$isExistingFormFieldsValid(
			{
				conf: _List_fromArray(
					[entity]),
				state: args.formState
			});
		var _v1 = fieldState.disabled ? {clickOverlay: $lucamug$elm_ui_with_context$Element$WithContext$none, opacity: 0.5} : {
			clickOverlay: A2(
				$lucamug$elm_ui_with_context$Element$WithContext$el,
				_List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$Events$onClick(
						A2(
							$rakutentech$r10$R10$Form$Internal$Msg$ChangeTab,
							args.key,
							$rakutentech$r10$R10$Form$Internal$Conf$getId(entity))),
						$lucamug$elm_ui_with_context$Element$WithContext$pointer,
						$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
						$lucamug$elm_ui_with_context$Element$WithContext$height($lucamug$elm_ui_with_context$Element$WithContext$fill),
						$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
						$elm$html$Html$Attributes$class('ripple')),
						$lucamug$elm_ui_with_context$Element$WithContext$mouseOver(
						_List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$Background$color(
								$rakutentech$r10$R10$FormComponents$Internal$UI$Color$mouseOverSurface(args.palette))
							]))
					]),
				$lucamug$elm_ui_with_context$Element$WithContext$none),
			opacity: 1
		};
		var opacity = _v1.opacity;
		var clickOverlay = _v1.clickOverlay;
		var _v2 = selected ? {
			circleBackground: A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$surfaceA, opacity, args.palette),
			circleBorder: A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$primaryA, opacity, args.palette),
			circleText: A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$primaryA, opacity, args.palette),
			labelText: A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$primaryA, opacity, args.palette)
		} : {
			circleBackground: A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$surfaceA, opacity, args.palette),
			circleBorder: A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$labelA, opacity, args.palette),
			circleText: A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$labelA, opacity, args.palette),
			labelText: A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$labelA, opacity, args.palette)
		};
		var circleBackground = _v2.circleBackground;
		var circleBorder = _v2.circleBorder;
		var circleText = _v2.circleText;
		var labelText = _v2.labelText;
		return A2(
			$lucamug$elm_ui_with_context$Element$WithContext$el,
			_List_fromArray(
				[
					A2($lucamug$elm_ui_with_context$Element$WithContext$paddingXY, 8, 0),
					$lucamug$elm_ui_with_context$Element$WithContext$inFront(clickOverlay)
				]),
			A2(
				$lucamug$elm_ui_with_context$Element$WithContext$row,
				_List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$Background$color(
						$rakutentech$r10$R10$FormComponents$Internal$UI$Color$surface(args.palette)),
						A2($lucamug$elm_ui_with_context$Element$WithContext$paddingXY, 8, 24),
						$lucamug$elm_ui_with_context$Element$WithContext$spacing(8),
						$lucamug$elm_ui_with_context$Element$WithContext$Font$color(labelText)
					]),
				_List_fromArray(
					[
						A2(
						$lucamug$elm_ui_with_context$Element$WithContext$el,
						_List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$inFront(
								A2(
									$lucamug$elm_ui_with_context$Element$WithContext$el,
									_List_fromArray(
										[
											$lucamug$elm_ui_with_context$Element$WithContext$height($lucamug$elm_ui_with_context$Element$WithContext$fill),
											$lucamug$elm_ui_with_context$Element$WithContext$Background$color(
											$rakutentech$r10$R10$FormComponents$Internal$UI$Color$surface(args.palette))
										]),
									$rakutentech$r10$R10$FormComponents$Internal$UI$showValidationIcon_(
										{
											displayValidation: true,
											maybeValid: $elm$core$Maybe$Just(valid),
											palette: args.palette,
											style: args.style
										}))),
								$lucamug$elm_ui_with_context$Element$WithContext$height(
								$lucamug$elm_ui_with_context$Element$WithContext$px(24)),
								$lucamug$elm_ui_with_context$Element$WithContext$width(
								$lucamug$elm_ui_with_context$Element$WithContext$px(24)),
								$lucamug$elm_ui_with_context$Element$WithContext$Border$rounded(24),
								$lucamug$elm_ui_with_context$Element$WithContext$Background$color(circleBackground),
								$lucamug$elm_ui_with_context$Element$WithContext$Font$color(circleText),
								$lucamug$elm_ui_with_context$Element$WithContext$Border$innerShadow(
								{
									blur: 0,
									color: circleBorder,
									offset: _Utils_Tuple2(0, 0),
									size: 1
								})
							]),
						A2(
							$lucamug$elm_ui_with_context$Element$WithContext$el,
							_List_fromArray(
								[$lucamug$elm_ui_with_context$Element$WithContext$centerY, $lucamug$elm_ui_with_context$Element$WithContext$centerX]),
							$lucamug$elm_ui_with_context$Element$WithContext$text(
								$elm$core$String$fromInt(index + 1)))),
						A2(
						$lucamug$elm_ui_with_context$Element$WithContext$column,
						_List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$shrink)
							]),
						_List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$text(label),
								A2(
								$lucamug$elm_ui_with_context$Element$WithContext$el,
								_Utils_ap(
									_List_fromArray(
										[
											$lucamug$elm_ui_with_context$Element$WithContext$Font$size(11),
											$lucamug$elm_ui_with_context$Element$WithContext$clip,
											$lucamug$elm_ui_with_context$Element$WithContext$Font$color(
											$rakutentech$r10$R10$FormComponents$Internal$UI$Color$error(args.palette)),
											$rakutentech$r10$R10$Transition$transition('all 0.15s ease-out')
										]),
									valid ? _List_fromArray(
										[
											$lucamug$elm_ui_with_context$Element$WithContext$width(
											$lucamug$elm_ui_with_context$Element$WithContext$px(0)),
											$lucamug$elm_ui_with_context$Element$WithContext$height(
											$lucamug$elm_ui_with_context$Element$WithContext$px(0))
										]) : _List_fromArray(
										[
											$lucamug$elm_ui_with_context$Element$WithContext$width(
											$lucamug$elm_ui_with_context$Element$WithContext$px(80)),
											$lucamug$elm_ui_with_context$Element$WithContext$height(
											$lucamug$elm_ui_with_context$Element$WithContext$px(11))
										])),
								$lucamug$elm_ui_with_context$Element$WithContext$text('Validation error'))
							]))
					])));
	});
var $mdgriffith$elm_ui$Internal$Model$Padding = F5(
	function (a, b, c, d, e) {
		return {$: 'Padding', a: a, b: b, c: c, d: d, e: e};
	});
var $mdgriffith$elm_ui$Internal$Model$Spaced = F3(
	function (a, b, c) {
		return {$: 'Spaced', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Model$extractSpacingAndPadding = function (attrs) {
	return A3(
		$elm$core$List$foldr,
		F2(
			function (attr, _v0) {
				var pad = _v0.a;
				var spacing = _v0.b;
				return _Utils_Tuple2(
					function () {
						if (pad.$ === 'Just') {
							var x = pad.a;
							return pad;
						} else {
							if ((attr.$ === 'StyleClass') && (attr.b.$ === 'PaddingStyle')) {
								var _v3 = attr.b;
								var name = _v3.a;
								var t = _v3.b;
								var r = _v3.c;
								var b = _v3.d;
								var l = _v3.e;
								return $elm$core$Maybe$Just(
									A5($mdgriffith$elm_ui$Internal$Model$Padding, name, t, r, b, l));
							} else {
								return $elm$core$Maybe$Nothing;
							}
						}
					}(),
					function () {
						if (spacing.$ === 'Just') {
							var x = spacing.a;
							return spacing;
						} else {
							if ((attr.$ === 'StyleClass') && (attr.b.$ === 'SpacingStyle')) {
								var _v6 = attr.b;
								var name = _v6.a;
								var x = _v6.b;
								var y = _v6.c;
								return $elm$core$Maybe$Just(
									A3($mdgriffith$elm_ui$Internal$Model$Spaced, name, x, y));
							} else {
								return $elm$core$Maybe$Nothing;
							}
						}
					}());
			}),
		_Utils_Tuple2($elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing),
		attrs);
};
var $mdgriffith$elm_ui$Element$wrappedRow = F2(
	function (attrs, children) {
		var _v0 = $mdgriffith$elm_ui$Internal$Model$extractSpacingAndPadding(attrs);
		var padded = _v0.a;
		var spaced = _v0.b;
		if (spaced.$ === 'Nothing') {
			return A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asRow,
				$mdgriffith$elm_ui$Internal$Model$div,
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentLeft + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.wrapped)))),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
							attrs))),
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
		} else {
			var _v2 = spaced.a;
			var spaceName = _v2.a;
			var x = _v2.b;
			var y = _v2.c;
			var newPadding = function () {
				if (padded.$ === 'Just') {
					var _v5 = padded.a;
					var name = _v5.a;
					var t = _v5.b;
					var r = _v5.c;
					var b = _v5.d;
					var l = _v5.e;
					if ((_Utils_cmp(r, x / 2) > -1) && (_Utils_cmp(b, y / 2) > -1)) {
						var newTop = t - (y / 2);
						var newRight = r - (x / 2);
						var newLeft = l - (x / 2);
						var newBottom = b - (y / 2);
						return $elm$core$Maybe$Just(
							A2(
								$mdgriffith$elm_ui$Internal$Model$StyleClass,
								$mdgriffith$elm_ui$Internal$Flag$padding,
								A5(
									$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
									A4($mdgriffith$elm_ui$Internal$Model$paddingNameFloat, newTop, newRight, newBottom, newLeft),
									newTop,
									newRight,
									newBottom,
									newLeft)));
					} else {
						return $elm$core$Maybe$Nothing;
					}
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}();
			if (newPadding.$ === 'Just') {
				var pad = newPadding.a;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asRow,
					$mdgriffith$elm_ui$Internal$Model$div,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentLeft + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.wrapped)))),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
								_Utils_ap(
									attrs,
									_List_fromArray(
										[pad]))))),
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
			} else {
				var halfY = -(y / 2);
				var halfX = -(x / 2);
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asEl,
					$mdgriffith$elm_ui$Internal$Model$div,
					attrs,
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(
						_List_fromArray(
							[
								A4(
								$mdgriffith$elm_ui$Internal$Model$element,
								$mdgriffith$elm_ui$Internal$Model$asRow,
								$mdgriffith$elm_ui$Internal$Model$div,
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentLeft + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.wrapped)))),
									A2(
										$elm$core$List$cons,
										$mdgriffith$elm_ui$Internal$Model$Attr(
											A2(
												$elm$html$Html$Attributes$style,
												'margin',
												$elm$core$String$fromFloat(halfY) + ('px' + (' ' + ($elm$core$String$fromFloat(halfX) + 'px'))))),
										A2(
											$elm$core$List$cons,
											$mdgriffith$elm_ui$Internal$Model$Attr(
												A2(
													$elm$html$Html$Attributes$style,
													'width',
													'calc(100% + ' + ($elm$core$String$fromInt(x) + 'px)'))),
											A2(
												$elm$core$List$cons,
												$mdgriffith$elm_ui$Internal$Model$Attr(
													A2(
														$elm$html$Html$Attributes$style,
														'height',
														'calc(100% + ' + ($elm$core$String$fromInt(y) + 'px)'))),
												A2(
													$elm$core$List$cons,
													A2(
														$mdgriffith$elm_ui$Internal$Model$StyleClass,
														$mdgriffith$elm_ui$Internal$Flag$spacing,
														A3($mdgriffith$elm_ui$Internal$Model$SpacingStyle, spaceName, x, y)),
													_List_Nil))))),
								$mdgriffith$elm_ui$Internal$Model$Unkeyed(children))
							])));
			}
		}
	});
var $lucamug$elm_ui_with_context$Element$WithContext$wrappedRow = $lucamug$elm_ui_with_context$Element$WithContext$Internal$wrapContainer($mdgriffith$elm_ui$Element$wrappedRow);
var $rakutentech$r10$R10$Form$Internal$MakerForView$maker_ = F3(
	function (args, branchConf, rootFormConf) {
		return $elm$core$List$concat(
			A2(
				$elm$core$List$map,
				function (entity) {
					return A3(
						$rakutentech$r10$R10$Form$Internal$MakerForView$addValidationMessagesUnderTheField,
						A2($rakutentech$r10$R10$Form$Internal$MakerForView$normalizeKey, args, entity),
						entity,
						function () {
							switch (entity.$) {
								case 'EntityWrappable':
									var entities = entity.b;
									return A3(
										$rakutentech$r10$R10$Form$Internal$MakerForView$viewEntityWrappable,
										A2($rakutentech$r10$R10$Form$Internal$MakerForView$normalizeKey, args, entity),
										entities,
										rootFormConf);
								case 'EntityWithBorder':
									var entities = entity.b;
									return A3(
										$rakutentech$r10$R10$Form$Internal$MakerForView$viewEntityWithBorder,
										A2($rakutentech$r10$R10$Form$Internal$MakerForView$normalizeKey, args, entity),
										entities,
										rootFormConf);
								case 'EntityNormal':
									var entities = entity.b;
									return A3(
										$rakutentech$r10$R10$Form$Internal$MakerForView$viewEntityNormal,
										A2($rakutentech$r10$R10$Form$Internal$MakerForView$normalizeKey, args, entity),
										entities,
										rootFormConf);
								case 'EntityWithTabs':
									var titleEntityList = entity.b;
									return A3(
										$rakutentech$r10$R10$Form$Internal$MakerForView$viewEntityWithTabs,
										A2($rakutentech$r10$R10$Form$Internal$MakerForView$normalizeKey, args, entity),
										titleEntityList,
										rootFormConf);
								case 'EntityMulti':
									var entities = entity.b;
									return A3(
										$rakutentech$r10$R10$Form$Internal$MakerForView$viewEntityMulti,
										A2($rakutentech$r10$R10$Form$Internal$MakerForView$normalizeKey, args, entity),
										entities,
										rootFormConf);
								case 'EntityField':
									var fieldConf = entity.a;
									return A3(
										$rakutentech$r10$R10$Form$Internal$MakerForView$viewEntityField,
										A2($rakutentech$r10$R10$Form$Internal$MakerForView$normalizeKey, args, entity),
										fieldConf,
										rootFormConf);
								case 'EntityTitle':
									var titleConf = entity.b;
									return A2($rakutentech$r10$R10$Form$Internal$MakerForView$viewEntityTitle, args.palette, titleConf);
								default:
									var titleConf = entity.b;
									return A2($rakutentech$r10$R10$Form$Internal$MakerForView$viewEntitySubTitle, args.palette, titleConf);
							}
						}());
				},
				branchConf));
	});
var $rakutentech$r10$R10$Form$Internal$MakerForView$viewEntityMulti = F3(
	function (args, entities, formConf) {
		var activeKeys = A2($rakutentech$r10$R10$Form$Internal$Helpers$getMultiActiveKeys, args.key, args.formState);
		return $elm$core$List$singleton(
			A2(
				$lucamug$elm_ui_with_context$Element$WithContext$column,
				_List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$spacing(10),
						$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill)
					]),
				function (rows) {
					return _Utils_ap(
						rows,
						_List_fromArray(
							[
								$rakutentech$r10$R10$Form$Internal$MakerForView$viewEntityMultiLastRow(args)
							]));
				}(
					$elm$core$List$concat(
						A2(
							$elm$core$List$map,
							function (newKey) {
								return A4($rakutentech$r10$R10$Form$Internal$MakerForView$viewEntityMultiSingleRow, args, newKey, entities, formConf);
							},
							activeKeys)))));
	});
var $rakutentech$r10$R10$Form$Internal$MakerForView$viewEntityMultiSingleRow = F4(
	function (args, newKey, entities, formConf) {
		var shadow = F2(
			function (size_, a) {
				return $lucamug$elm_ui_with_context$Element$WithContext$Border$shadow(
					{
						blur: 0,
						color: A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$labelA, a, args.palette),
						offset: _Utils_Tuple2(0, 0),
						size: size_
					});
			});
		var removeColor = $rakutentech$r10$R10$FormComponents$Internal$UI$Color$label(args.palette);
		var iconSize = 18;
		var iconCommonAttrs = F4(
			function (widthPx, heightPx, color, rotateDeg) {
				return _List_fromArray(
					[
						$rakutentech$r10$R10$Transition$transition('all 0.2s '),
						$lucamug$elm_ui_with_context$Element$WithContext$Border$rounded(2),
						$lucamug$elm_ui_with_context$Element$WithContext$centerX,
						$lucamug$elm_ui_with_context$Element$WithContext$centerY,
						$lucamug$elm_ui_with_context$Element$WithContext$width(
						$lucamug$elm_ui_with_context$Element$WithContext$px(widthPx)),
						$lucamug$elm_ui_with_context$Element$WithContext$height(
						$lucamug$elm_ui_with_context$Element$WithContext$px(heightPx)),
						$lucamug$elm_ui_with_context$Element$WithContext$Background$color(color),
						$lucamug$elm_ui_with_context$Element$WithContext$rotate(
						$elm$core$Basics$degrees(rotateDeg))
					]);
			});
		var buttonAttrs = _List_fromArray(
			[
				$lucamug$elm_ui_with_context$Element$WithContext$Border$width(1),
				$lucamug$elm_ui_with_context$Element$WithContext$Border$rounded(5),
				$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
				$elm$html$Html$Attributes$class('ripple')),
				$rakutentech$r10$R10$Transition$transition('all 0.11s ease-out'),
				$lucamug$elm_ui_with_context$Element$WithContext$padding(8),
				$lucamug$elm_ui_with_context$Element$WithContext$width(
				$lucamug$elm_ui_with_context$Element$WithContext$px(28)),
				$lucamug$elm_ui_with_context$Element$WithContext$height($lucamug$elm_ui_with_context$Element$WithContext$fill),
				A2(shadow, 10, 0),
				$lucamug$elm_ui_with_context$Element$WithContext$Border$color(
				A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$containerA, 0.5, args.palette)),
				$lucamug$elm_ui_with_context$Element$WithContext$mouseOver(
				_List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$Border$color(
						A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$containerA, 1, args.palette))
					])),
				$lucamug$elm_ui_with_context$Element$WithContext$focused(
				_List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$alpha(1),
						A2(shadow, 1, 1),
						$lucamug$elm_ui_with_context$Element$WithContext$Border$color(
						A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$containerA, 1, args.palette))
					]))
			]);
		var buttonToRemoveEntity = function (key_) {
			return A2(
				$lucamug$elm_ui_with_context$Element$WithContext$Input$button,
				buttonAttrs,
				{
					label: A2(
						$lucamug$elm_ui_with_context$Element$WithContext$el,
						_List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$width(
								$lucamug$elm_ui_with_context$Element$WithContext$px(iconSize)),
								$lucamug$elm_ui_with_context$Element$WithContext$height(
								$lucamug$elm_ui_with_context$Element$WithContext$px(iconSize)),
								$rakutentech$r10$R10$Transition$transition('all 0.2s '),
								$lucamug$elm_ui_with_context$Element$WithContext$inFront(
								A2(
									$lucamug$elm_ui_with_context$Element$WithContext$el,
									A4(iconCommonAttrs, iconSize, 2, removeColor, 45),
									$lucamug$elm_ui_with_context$Element$WithContext$none)),
								$lucamug$elm_ui_with_context$Element$WithContext$inFront(
								A2(
									$lucamug$elm_ui_with_context$Element$WithContext$el,
									A4(iconCommonAttrs, 2, iconSize, removeColor, -135),
									$lucamug$elm_ui_with_context$Element$WithContext$none))
							]),
						$lucamug$elm_ui_with_context$Element$WithContext$none),
					onPress: $elm$core$Maybe$Just(
						$rakutentech$r10$R10$Form$Internal$Msg$RemoveEntity(key_))
				});
		};
		return _List_fromArray(
			[
				A2(
				$lucamug$elm_ui_with_context$Element$WithContext$row,
				_List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$spacing(10),
						$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill)
					]),
				_List_fromArray(
					[
						buttonToRemoveEntity(newKey),
						A2(
						$lucamug$elm_ui_with_context$Element$WithContext$column,
						_List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
								$rakutentech$r10$R10$Form$Internal$MakerForView$spacingGeneric
							]),
						A3(
							$rakutentech$r10$R10$Form$Internal$MakerForView$maker_,
							_Utils_update(
								args,
								{key: newKey}),
							entities,
							formConf))
					]))
			]);
	});
var $rakutentech$r10$R10$Form$Internal$MakerForView$viewEntityNormal = F3(
	function (args, entities, formConf) {
		return _List_fromArray(
			[
				A2(
				$lucamug$elm_ui_with_context$Element$WithContext$el,
				_List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$alignTop,
						$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
						$lucamug$elm_ui_with_context$Element$WithContext$height($lucamug$elm_ui_with_context$Element$WithContext$fill),
						$rakutentech$r10$R10$Form$Internal$MakerForView$spacingGeneric
					]),
				A2(
					$lucamug$elm_ui_with_context$Element$WithContext$column,
					_List_fromArray(
						[
							$rakutentech$r10$R10$Form$Internal$MakerForView$spacingGeneric,
							$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill)
						]),
					A3($rakutentech$r10$R10$Form$Internal$MakerForView$maker_, args, entities, formConf)))
			]);
	});
var $rakutentech$r10$R10$Form$Internal$MakerForView$viewEntityWithBorder = F3(
	function (args, entities, formConf) {
		return _List_fromArray(
			[
				A2(
				$lucamug$elm_ui_with_context$Element$WithContext$el,
				_Utils_ap(
					_List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$alignTop,
							$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
							$lucamug$elm_ui_with_context$Element$WithContext$height($lucamug$elm_ui_with_context$Element$WithContext$fill)
						]),
					$rakutentech$r10$R10$FormComponents$Internal$UI$borderEntityWithBorder(args.palette)),
				A2(
					$lucamug$elm_ui_with_context$Element$WithContext$column,
					_List_fromArray(
						[
							$rakutentech$r10$R10$Form$Internal$MakerForView$paddingGeneric,
							$rakutentech$r10$R10$Form$Internal$MakerForView$spacingGeneric,
							$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill)
						]),
					A3($rakutentech$r10$R10$Form$Internal$MakerForView$maker_, args, entities, formConf)))
			]);
	});
var $rakutentech$r10$R10$Form$Internal$MakerForView$viewEntityWithTabs = F3(
	function (args, titleEntityList, formConf) {
		var tabSpacer = A2(
			$lucamug$elm_ui_with_context$Element$WithContext$el,
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$width(
					A2($lucamug$elm_ui_with_context$Element$WithContext$maximum, 40, $lucamug$elm_ui_with_context$Element$WithContext$fill)),
					$lucamug$elm_ui_with_context$Element$WithContext$height($lucamug$elm_ui_with_context$Element$WithContext$fill)
				]),
			$lucamug$elm_ui_with_context$Element$WithContext$none);
		var paddingPx = 8;
		var firstEntity = $elm$core$List$head(titleEntityList);
		var maybeSelectedEntity = function () {
			var _v3 = A2($rakutentech$r10$R10$Form$Internal$Dict$get, args.key, args.formState.activeTabs);
			if (_v3.$ === 'Just') {
				var key_ = _v3.a;
				var _v4 = $elm$core$List$head(
					A2(
						$elm$core$List$filter,
						function (_v5) {
							var entity = _v5.b;
							return _Utils_eq(
								$rakutentech$r10$R10$Form$Internal$Conf$getId(entity),
								key_);
						},
						titleEntityList));
				if (_v4.$ === 'Just') {
					var entity_ = _v4.a;
					return $elm$core$Maybe$Just(entity_);
				} else {
					return firstEntity;
				}
			} else {
				return firstEntity;
			}
		}();
		var emptyTab = A2(
			$lucamug$elm_ui_with_context$Element$WithContext$el,
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
					$lucamug$elm_ui_with_context$Element$WithContext$height($lucamug$elm_ui_with_context$Element$WithContext$fill),
					$lucamug$elm_ui_with_context$Element$WithContext$moveLeft(paddingPx),
					$lucamug$elm_ui_with_context$Element$WithContext$Background$color(
					$rakutentech$r10$R10$FormComponents$Internal$UI$Color$surface(args.palette))
				]),
			$lucamug$elm_ui_with_context$Element$WithContext$none);
		if (maybeSelectedEntity.$ === 'Just') {
			var _v1 = maybeSelectedEntity.a;
			var selectedEntity = _v1.b;
			return _Utils_ap(
				_List_fromArray(
					[
						A2(
						$lucamug$elm_ui_with_context$Element$WithContext$el,
						_List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
								$lucamug$elm_ui_with_context$Element$WithContext$behindContent(
								A2(
									$lucamug$elm_ui_with_context$Element$WithContext$el,
									_List_fromArray(
										[
											$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
											$lucamug$elm_ui_with_context$Element$WithContext$centerY,
											A2($lucamug$elm_ui_with_context$Element$WithContext$paddingXY, paddingPx, 0)
										]),
									A2(
										$lucamug$elm_ui_with_context$Element$WithContext$el,
										_List_fromArray(
											[
												$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
												$lucamug$elm_ui_with_context$Element$WithContext$Border$widthEach(
												{bottom: 1, left: 0, right: 0, top: 0}),
												$lucamug$elm_ui_with_context$Element$WithContext$Border$color(
												$rakutentech$r10$R10$FormComponents$Internal$UI$Color$container(args.palette))
											]),
										$lucamug$elm_ui_with_context$Element$WithContext$none)))
							]),
						A2(
							$lucamug$elm_ui_with_context$Element$WithContext$row,
							_List_fromArray(
								[
									$lucamug$elm_ui_with_context$Element$WithContext$scrollbars,
									$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill)
								]),
							function (items) {
								return _Utils_ap(
									items,
									_List_fromArray(
										[emptyTab]));
							}(
								$elm$core$List$concat(
									A2(
										$elm$core$List$indexedMap,
										F2(
											function (index, _v2) {
												var label = _v2.a;
												var entity = _v2.b;
												var newKey = A2(
													$rakutentech$r10$R10$Form$Internal$Key$composeKey,
													args.key,
													$rakutentech$r10$R10$Form$Internal$Conf$getId(entity));
												var fieldState = A2(
													$elm$core$Maybe$withDefault,
													$rakutentech$r10$R10$Form$Internal$FieldState$init,
													A2($rakutentech$r10$R10$Form$Internal$Dict$get, newKey, args.formState.fieldsState));
												return _Utils_ap(
													_List_fromArray(
														[
															A3(
															$rakutentech$r10$R10$Form$Internal$MakerForView$viewTab,
															args,
															fieldState,
															{
																entity: entity,
																index: index,
																label: label,
																selected: _Utils_eq(
																	$rakutentech$r10$R10$Form$Internal$Conf$getId(selectedEntity),
																	$rakutentech$r10$R10$Form$Internal$Conf$getId(entity))
															})
														]),
													(!_Utils_eq(
														index + 1,
														$elm$core$List$length(titleEntityList))) ? _List_fromArray(
														[tabSpacer]) : _List_Nil);
											}),
										titleEntityList)))))
					]),
				A3(
					$rakutentech$r10$R10$Form$Internal$MakerForView$maker_,
					args,
					_List_fromArray(
						[selectedEntity]),
					formConf));
		} else {
			return _List_Nil;
		}
	});
var $rakutentech$r10$R10$Form$Internal$MakerForView$viewEntityWrappable = F3(
	function (args, entities, formConf) {
		return _List_fromArray(
			[
				A2(
				$lucamug$elm_ui_with_context$Element$WithContext$wrappedRow,
				_List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$alignTop,
						$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
						$lucamug$elm_ui_with_context$Element$WithContext$height($lucamug$elm_ui_with_context$Element$WithContext$fill),
						$rakutentech$r10$R10$Form$Internal$MakerForView$spacingGeneric
					]),
				A3($rakutentech$r10$R10$Form$Internal$MakerForView$maker_, args, entities, formConf))
			]);
	});
var $rakutentech$r10$R10$Form$Internal$MakerForView$maker = F2(
	function (args, formConf) {
		return A3($rakutentech$r10$R10$Form$Internal$MakerForView$maker_, args, formConf, formConf);
	});
var $rakutentech$r10$R10$Form$viewWithOptions = F3(
	function (form, msgMapper, args) {
		var maker_ = A2($elm$core$Maybe$withDefault, $rakutentech$r10$R10$Form$Internal$MakerForView$maker, args.maker);
		return A2(
			$elm$core$List$map,
			$lucamug$elm_ui_with_context$Element$WithContext$map(msgMapper),
			A2(
				maker_,
				{
					formState: form.state,
					key: $rakutentech$r10$R10$Form$Internal$Key$empty,
					palette: A2($elm$core$Maybe$withDefault, $rakutentech$r10$R10$FormComponents$Internal$UI$Palette$light, args.palette),
					style: args.style,
					translator: A2($elm$core$Maybe$withDefault, $rakutentech$r10$R10$Form$defaultTranslator, args.translator)
				},
				form.conf));
	});
var $rakutentech$r10$R10$Form$view = F2(
	function (form, msgMapper) {
		return A3(
			$rakutentech$r10$R10$Form$viewWithOptions,
			form,
			msgMapper,
			{maker: $elm$core$Maybe$Nothing, palette: $elm$core$Maybe$Nothing, style: $rakutentech$r10$R10$Form$defaultStyle, translator: $elm$core$Maybe$Nothing});
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Theme = function (a) {
	return {$: 'Theme', a: a};
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Hex = function (a) {
	return {$: 'Hex', a: a};
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$DefaultColor = {$: 'DefaultColor'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$backgroundColor = function (background) {
	return {background: background, isBold: false, isItalic: false, isUnderline: false, text: $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$DefaultColor};
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$noEmphasis = F2(
	function (text, background) {
		return {background: background, isBold: false, isItalic: false, isUnderline: false, text: text};
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$textColor = function (text) {
	return {background: $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$DefaultColor, isBold: false, isItalic: false, isUnderline: false, text: text};
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Theme$GitHub$requiredStyles = {
	addition: $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$backgroundColor(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Hex('#eaffea')),
	comment: $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$textColor(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Hex('#969896')),
	_default: A2(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$noEmphasis,
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Hex('#24292e'),
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Hex('#ffffff')),
	deletion: $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$backgroundColor(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Hex('#ffecec')),
	highlight: $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$backgroundColor(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Hex('#fffbdd')),
	style1: $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$textColor(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Hex('#005cc5')),
	style2: $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$textColor(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Hex('#df5000')),
	style3: $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$textColor(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Hex('#d73a49')),
	style4: $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$textColor(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Hex('#0086b3')),
	style5: $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$textColor(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Hex('#63a35c')),
	style6: $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$textColor(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Hex('#005cc5')),
	style7: $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$textColor(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Hex('#795da3'))
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Theme$GitHub$theme = {customStyles: _List_Nil, requiredStyles: $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Theme$GitHub$requiredStyles};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style1 = {$: 'Style1'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style2 = {$: 'Style2'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style3 = {$: 'Style3'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style4 = {$: 'Style4'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style5 = {$: 'Style5'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$atRuleToFragment = function (a) {
	switch (a.$) {
		case 'Identifier':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style3, 'css-ar-i');
		case 'Prefix':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style5, 'css-ar-p');
		case 'Keyword':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style3, 'css-ar-k');
		default:
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style4, 'css-ar-v');
	}
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Default = {$: 'Default'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style7 = {$: 'Style7'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$attributeSelectorToFragment = function (att) {
	switch (att.$) {
		case 'AttributeName':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style5, 'css-s-a-an');
		case 'AttributeValue':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style2, 'css-s-a-av');
		default:
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style3, 'css-s-a-o');
	}
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$selectorToFragment = function (s) {
	switch (s.$) {
		case 'Element':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style3, 'css-s-e');
		case 'Id':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style5, 'css-s-i');
		case 'Class':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style5, 'css-s-cl');
		case 'Combinator':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style7, 'css-s-c');
		case 'Universal':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style3, 'css-s-u');
		case 'AttributeSelector':
			var att = s.a;
			return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$attributeSelectorToFragment(att);
		case 'PseudoElement':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Default, 'css-s-pe');
		default:
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Default, 'css-s-pc');
	}
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$syntaxToStyle = function (syntax) {
	switch (syntax.$) {
		case 'String':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style2, 'css-s');
		case 'AtRule':
			var a = syntax.a;
			return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$atRuleToFragment(a);
		case 'Selector':
			var s = syntax.a;
			return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$selectorToFragment(s);
		case 'Property':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style4, 'css-p');
		case 'PropertyValue':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style4, 'css-pv');
		case 'Number':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style1, 'css-n');
		default:
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style3, 'css-u');
	}
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style6 = {$: 'Style6'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$syntaxToStyle = function (syntax) {
	switch (syntax.$) {
		case 'String':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style2, 'elm-s');
		case 'BasicSymbol':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style3, 'elm-bs');
		case 'GroupSymbol':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style4, 'elm-gs');
		case 'Capitalized':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style6, 'elm-c');
		case 'Keyword':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style3, 'elm-k');
		case 'Function':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style5, 'elm-f');
		case 'TypeSignature':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style4, 'elm-ts');
		default:
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style1, 'elm-n');
	}
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$syntaxToStyle = function (syntax) {
	switch (syntax.$) {
		case 'Number':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style1, 'js-n');
		case 'String':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style2, 'js-s');
		case 'Keyword':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style3, 'js-k');
		case 'DeclarationKeyword':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style4, 'js-dk');
		case 'FunctionEval':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style4, 'js-fe');
		case 'Function':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style5, 'js-f');
		case 'LiteralKeyword':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style6, 'js-lk');
		case 'Param':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style7, 'js-p');
		default:
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style5, 'js-ce');
	}
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$NoLang$syntaxToStyle = function (syntax) {
	return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Default, 'nolang');
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$syntaxToStyle = function (syntax) {
	switch (syntax.$) {
		case 'Number':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style1, 'py-n');
		case 'String':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style2, 'py-s');
		case 'Keyword':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style3, 'py-k');
		case 'DeclarationKeyword':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style4, 'py-dk');
		case 'Function':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style5, 'py-f');
		case 'LiteralKeyword':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style6, 'py-lk');
		case 'Param':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style7, 'py-p');
		default:
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Default, 'py-fe');
	}
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$syntaxToStyle = function (syntax) {
	switch (syntax.$) {
		case 'Number':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style1, 'sql-n');
		case 'String':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style2, 'sql-s');
		case 'Keyword':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style3, 'sql-k');
		case 'Operator':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style4, 'sql-o');
		case 'Function':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style5, 'sql-f');
		case 'Punctuation':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style6, 'sql-p');
		default:
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style7, 'sql-l');
	}
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$syntaxToStyle = function (syntax) {
	switch (syntax.$) {
		case 'Tag':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style3, 'xml-t');
		case 'Attribute':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style5, 'xml-a');
		default:
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style2, 'xlm-av');
	}
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Theme$Type$syntaxToSelector = function (syntax) {
	switch (syntax.$) {
		case 'Elm':
			var elmSyntax = syntax.a;
			return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$syntaxToStyle(elmSyntax).b;
		case 'Xml':
			var xmlSyntax = syntax.a;
			return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$syntaxToStyle(xmlSyntax).b;
		case 'Javascript':
			var jsSyntax = syntax.a;
			return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$syntaxToStyle(jsSyntax).b;
		case 'Css':
			var cssSyntax = syntax.a;
			return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$syntaxToStyle(cssSyntax).b;
		case 'Python':
			var pythonSyntax = syntax.a;
			return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$syntaxToStyle(pythonSyntax).b;
		case 'Sql':
			var sqlSyntax = syntax.a;
			return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$syntaxToStyle(sqlSyntax).b;
		default:
			var noLangSyntax = syntax.a;
			return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$NoLang$syntaxToStyle(noLangSyntax).b;
	}
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Theme$Type$syntaxesToSelectors = function (syntaxes) {
	return $elm$core$String$concat(
		A2(
			$elm$core$List$intersperse,
			', ',
			A2(
				$elm$core$List$map,
				$elm$core$Basics$append('.elmsh-'),
				A2($elm$core$List$map, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Theme$Type$syntaxToSelector, syntaxes))));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$colorToCss = F2(
	function (property, color) {
		switch (color.$) {
			case 'DefaultColor':
				return '';
			case 'Hex':
				var hex = color.a;
				return property + (hex + ';');
			case 'Rgb':
				var r = color.a;
				var g = color.b;
				var b = color.c;
				return $elm$core$String$concat(
					_List_fromArray(
						[
							property,
							'rgb(',
							$elm$core$String$fromInt(r),
							', ',
							$elm$core$String$fromInt(g),
							',',
							$elm$core$String$fromInt(b),
							');'
						]));
			default:
				var r = color.a;
				var g = color.b;
				var b = color.c;
				var a = color.d;
				return $elm$core$String$concat(
					_List_fromArray(
						[
							property,
							'rgba(',
							$elm$core$String$fromInt(r),
							', ',
							$elm$core$String$fromInt(g),
							',',
							$elm$core$String$fromInt(b),
							', ',
							$elm$core$String$fromFloat(a),
							');'
						]));
		}
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$emptyIfFalse = F2(
	function (bool, str) {
		return bool ? str : '';
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$styleToCss = function (_v0) {
	var isBold = _v0.isBold;
	var isItalic = _v0.isItalic;
	var isUnderline = _v0.isUnderline;
	var text = _v0.text;
	var background = _v0.background;
	return $elm$core$String$concat(
		_List_fromArray(
			[
				A2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$emptyIfFalse, isBold, 'font-weight: bold;'),
				A2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$emptyIfFalse, isItalic, 'font-style: italic;'),
				A2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$emptyIfFalse, isUnderline, 'text-decoration: underline;'),
				A2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$colorToCss, 'color: ', text),
				A2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$colorToCss, 'background: ', background)
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$toCssClass = function (_v0) {
	var selectors = _v0.a;
	var style = _v0.b;
	return $elm$core$String$isEmpty(selectors) ? '' : (selectors + (' {' + ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$styleToCss(style) + '}')));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$toCss = function (classes) {
	return $elm$core$String$concat(
		A2($elm$core$List$map, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$toCssClass, classes));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Theme$Type$toCss = function (_v0) {
	var requiredStyles = _v0.requiredStyles;
	var customStyles = _v0.customStyles;
	return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$toCss(
		_Utils_ap(
			_List_fromArray(
				[
					_Utils_Tuple2('.elmsh', requiredStyles._default),
					_Utils_Tuple2('.elmsh-hl', requiredStyles.highlight),
					_Utils_Tuple2('.elmsh-add', requiredStyles.addition),
					_Utils_Tuple2('.elmsh-del', requiredStyles.deletion),
					_Utils_Tuple2('.elmsh-comm', requiredStyles.comment),
					_Utils_Tuple2('.elmsh1', requiredStyles.style1),
					_Utils_Tuple2('.elmsh2', requiredStyles.style2),
					_Utils_Tuple2('.elmsh3', requiredStyles.style3),
					_Utils_Tuple2('.elmsh4', requiredStyles.style4),
					_Utils_Tuple2('.elmsh5', requiredStyles.style5),
					_Utils_Tuple2('.elmsh6', requiredStyles.style6),
					_Utils_Tuple2('.elmsh7', requiredStyles.style7)
				]),
			A2(
				$elm$core$List$map,
				$elm$core$Tuple$mapFirst($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Theme$Type$syntaxesToSelectors),
				customStyles)));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Theme$GitHub$css = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Theme$Type$toCss($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Theme$GitHub$theme);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Theme$gitHub = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Theme$GitHub$css;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$gitHub = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Theme($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Theme$gitHub);
var $mdgriffith$elm_ui$Element$Font$sansSerif = $mdgriffith$elm_ui$Internal$Model$SansSerif;
var $mdgriffith$elm_ui$Element$Font$typeface = $mdgriffith$elm_ui$Internal$Model$Typeface;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$useTheme = function (_v0) {
	var theme = _v0.a;
	return A3(
		$elm$html$Html$node,
		'style',
		_List_Nil,
		_List_fromArray(
			[
				$elm$html$Html$text(theme)
			]));
};
var $dillonkearns$elm_markdown$Markdown$Parser$problemToString = function (problem) {
	switch (problem.$) {
		case 'Expecting':
			var string = problem.a;
			return 'Expecting ' + string;
		case 'ExpectingInt':
			return 'Expecting int';
		case 'ExpectingHex':
			return 'Expecting hex';
		case 'ExpectingOctal':
			return 'Expecting octal';
		case 'ExpectingBinary':
			return 'Expecting binary';
		case 'ExpectingFloat':
			return 'Expecting float';
		case 'ExpectingNumber':
			return 'Expecting number';
		case 'ExpectingVariable':
			return 'Expecting variable';
		case 'ExpectingSymbol':
			var string = problem.a;
			return 'Expecting symbol ' + string;
		case 'ExpectingKeyword':
			var string = problem.a;
			return 'Expecting keyword ' + string;
		case 'ExpectingEnd':
			return 'Expecting keyword end';
		case 'UnexpectedChar':
			return 'Unexpected char';
		case 'Problem':
			var problemDescription = problem.a;
			return problemDescription;
		default:
			return 'Bad repeat';
	}
};
var $dillonkearns$elm_markdown$Markdown$Parser$deadEndToString = function (deadEnd) {
	return 'Problem at row ' + ($elm$core$String$fromInt(deadEnd.row) + ('\n' + $dillonkearns$elm_markdown$Markdown$Parser$problemToString(deadEnd.problem)));
};
var $elm$core$Result$mapError = F2(
	function (f, result) {
		if (result.$ === 'Ok') {
			var v = result.a;
			return $elm$core$Result$Ok(v);
		} else {
			var e = result.a;
			return $elm$core$Result$Err(
				f(e));
		}
	});
var $dillonkearns$elm_markdown$Markdown$Block$BlockQuote = function (a) {
	return {$: 'BlockQuote', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$Cdata = function (a) {
	return {$: 'Cdata', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$CodeBlock = function (a) {
	return {$: 'CodeBlock', a: a};
};
var $dillonkearns$elm_markdown$Markdown$RawBlock$CodeBlock = function (a) {
	return {$: 'CodeBlock', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$CodeSpan = function (a) {
	return {$: 'CodeSpan', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$CompletedTask = {$: 'CompletedTask'};
var $elm$parser$Parser$Advanced$Done = function (a) {
	return {$: 'Done', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$Emphasis = function (a) {
	return {$: 'Emphasis', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Parser$EmptyBlock = {$: 'EmptyBlock'};
var $elm$parser$Parser$Expecting = function (a) {
	return {$: 'Expecting', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$HardLineBreak = {$: 'HardLineBreak'};
var $dillonkearns$elm_markdown$Markdown$Block$Heading = F2(
	function (a, b) {
		return {$: 'Heading', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$RawBlock$Html = function (a) {
	return {$: 'Html', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$HtmlBlock = function (a) {
	return {$: 'HtmlBlock', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$HtmlComment = function (a) {
	return {$: 'HtmlComment', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$HtmlDeclaration = F2(
	function (a, b) {
		return {$: 'HtmlDeclaration', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$Block$HtmlElement = F3(
	function (a, b, c) {
		return {$: 'HtmlElement', a: a, b: b, c: c};
	});
var $dillonkearns$elm_markdown$Markdown$Block$HtmlInline = function (a) {
	return {$: 'HtmlInline', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$Image = F3(
	function (a, b, c) {
		return {$: 'Image', a: a, b: b, c: c};
	});
var $dillonkearns$elm_markdown$Markdown$Block$IncompleteTask = {$: 'IncompleteTask'};
var $dillonkearns$elm_markdown$Markdown$Parser$InlineProblem = function (a) {
	return {$: 'InlineProblem', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$Link = F3(
	function (a, b, c) {
		return {$: 'Link', a: a, b: b, c: c};
	});
var $dillonkearns$elm_markdown$Markdown$Block$ListItem = F2(
	function (a, b) {
		return {$: 'ListItem', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$Loop = function (a) {
	return {$: 'Loop', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$NoTask = {$: 'NoTask'};
var $dillonkearns$elm_markdown$Markdown$RawBlock$OpenBlockOrParagraph = function (a) {
	return {$: 'OpenBlockOrParagraph', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$OrderedList = F2(
	function (a, b) {
		return {$: 'OrderedList', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$Block$Paragraph = function (a) {
	return {$: 'Paragraph', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock = function (a) {
	return {$: 'ParsedBlock', a: a};
};
var $elm$parser$Parser$Problem = function (a) {
	return {$: 'Problem', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$ProcessingInstruction = function (a) {
	return {$: 'ProcessingInstruction', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$Strikethrough = function (a) {
	return {$: 'Strikethrough', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$Strong = function (a) {
	return {$: 'Strong', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$Table = F2(
	function (a, b) {
		return {$: 'Table', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$Block$Text = function (a) {
	return {$: 'Text', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$ThematicBreak = {$: 'ThematicBreak'};
var $dillonkearns$elm_markdown$Markdown$RawBlock$ThematicBreak = {$: 'ThematicBreak'};
var $dillonkearns$elm_markdown$Markdown$Block$UnorderedList = function (a) {
	return {$: 'UnorderedList', a: a};
};
var $dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines = function (a) {
	return {$: 'UnparsedInlines', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Parser$addReference = F2(
	function (state, linkRef) {
		return {
			linkReferenceDefinitions: A2($elm$core$List$cons, linkRef, state.linkReferenceDefinitions),
			rawBlocks: state.rawBlocks
		};
	});
var $elm$parser$Parser$Advanced$Bad = F2(
	function (a, b) {
		return {$: 'Bad', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$Good = F3(
	function (a, b, c) {
		return {$: 'Good', a: a, b: b, c: c};
	});
var $elm$parser$Parser$Advanced$Parser = function (a) {
	return {$: 'Parser', a: a};
};
var $elm$parser$Parser$Advanced$andThen = F2(
	function (callback, _v0) {
		var parseA = _v0.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v1 = parseA(s0);
				if (_v1.$ === 'Bad') {
					var p = _v1.a;
					var x = _v1.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				} else {
					var p1 = _v1.a;
					var a = _v1.b;
					var s1 = _v1.c;
					var _v2 = callback(a);
					var parseB = _v2.a;
					var _v3 = parseB(s1);
					if (_v3.$ === 'Bad') {
						var p2 = _v3.a;
						var x = _v3.b;
						return A2($elm$parser$Parser$Advanced$Bad, p1 || p2, x);
					} else {
						var p2 = _v3.a;
						var b = _v3.b;
						var s2 = _v3.c;
						return A3($elm$parser$Parser$Advanced$Good, p1 || p2, b, s2);
					}
				}
			});
	});
var $elm$parser$Parser$Advanced$backtrackable = function (_v0) {
	var parse = _v0.a;
	return $elm$parser$Parser$Advanced$Parser(
		function (s0) {
			var _v1 = parse(s0);
			if (_v1.$ === 'Bad') {
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, false, x);
			} else {
				var a = _v1.b;
				var s1 = _v1.c;
				return A3($elm$parser$Parser$Advanced$Good, false, a, s1);
			}
		});
};
var $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine = {$: 'BlankLine'};
var $elm$parser$Parser$Advanced$isSubChar = _Parser_isSubChar;
var $elm$parser$Parser$Advanced$chompWhileHelp = F5(
	function (isGood, offset, row, col, s0) {
		chompWhileHelp:
		while (true) {
			var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, offset, s0.src);
			if (_Utils_eq(newOffset, -1)) {
				return A3(
					$elm$parser$Parser$Advanced$Good,
					_Utils_cmp(s0.offset, offset) < 0,
					_Utils_Tuple0,
					{col: col, context: s0.context, indent: s0.indent, offset: offset, row: row, src: s0.src});
			} else {
				if (_Utils_eq(newOffset, -2)) {
					var $temp$isGood = isGood,
						$temp$offset = offset + 1,
						$temp$row = row + 1,
						$temp$col = 1,
						$temp$s0 = s0;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					s0 = $temp$s0;
					continue chompWhileHelp;
				} else {
					var $temp$isGood = isGood,
						$temp$offset = newOffset,
						$temp$row = row,
						$temp$col = col + 1,
						$temp$s0 = s0;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					s0 = $temp$s0;
					continue chompWhileHelp;
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$chompWhile = function (isGood) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A5($elm$parser$Parser$Advanced$chompWhileHelp, isGood, s.offset, s.row, s.col, s);
		});
};
var $elm$parser$Parser$Advanced$map2 = F3(
	function (func, _v0, _v1) {
		var parseA = _v0.a;
		var parseB = _v1.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v2 = parseA(s0);
				if (_v2.$ === 'Bad') {
					var p = _v2.a;
					var x = _v2.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				} else {
					var p1 = _v2.a;
					var a = _v2.b;
					var s1 = _v2.c;
					var _v3 = parseB(s1);
					if (_v3.$ === 'Bad') {
						var p2 = _v3.a;
						var x = _v3.b;
						return A2($elm$parser$Parser$Advanced$Bad, p1 || p2, x);
					} else {
						var p2 = _v3.a;
						var b = _v3.b;
						var s2 = _v3.c;
						return A3(
							$elm$parser$Parser$Advanced$Good,
							p1 || p2,
							A2(func, a, b),
							s2);
					}
				}
			});
	});
var $elm$parser$Parser$Advanced$ignorer = F2(
	function (keepParser, ignoreParser) {
		return A3($elm$parser$Parser$Advanced$map2, $elm$core$Basics$always, keepParser, ignoreParser);
	});
var $dillonkearns$elm_markdown$Whitespace$isSpaceOrTab = function (_char) {
	switch (_char.valueOf()) {
		case ' ':
			return true;
		case '\t':
			return true;
		default:
			return false;
	}
};
var $elm$parser$Parser$Advanced$Token = F2(
	function (a, b) {
		return {$: 'Token', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Parser$Token$carriageReturn = A2(
	$elm$parser$Parser$Advanced$Token,
	'\r',
	$elm$parser$Parser$Expecting('a carriage return'));
var $dillonkearns$elm_markdown$Parser$Token$newline = A2(
	$elm$parser$Parser$Advanced$Token,
	'\n',
	$elm$parser$Parser$Expecting('a newline'));
var $elm$parser$Parser$Advanced$Empty = {$: 'Empty'};
var $elm$parser$Parser$Advanced$Append = F2(
	function (a, b) {
		return {$: 'Append', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$oneOfHelp = F3(
	function (s0, bag, parsers) {
		oneOfHelp:
		while (true) {
			if (!parsers.b) {
				return A2($elm$parser$Parser$Advanced$Bad, false, bag);
			} else {
				var parse = parsers.a.a;
				var remainingParsers = parsers.b;
				var _v1 = parse(s0);
				if (_v1.$ === 'Good') {
					var step = _v1;
					return step;
				} else {
					var step = _v1;
					var p = step.a;
					var x = step.b;
					if (p) {
						return step;
					} else {
						var $temp$s0 = s0,
							$temp$bag = A2($elm$parser$Parser$Advanced$Append, bag, x),
							$temp$parsers = remainingParsers;
						s0 = $temp$s0;
						bag = $temp$bag;
						parsers = $temp$parsers;
						continue oneOfHelp;
					}
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$oneOf = function (parsers) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A3($elm$parser$Parser$Advanced$oneOfHelp, s, $elm$parser$Parser$Advanced$Empty, parsers);
		});
};
var $elm$parser$Parser$Advanced$succeed = function (a) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A3($elm$parser$Parser$Advanced$Good, false, a, s);
		});
};
var $elm$parser$Parser$Advanced$AddRight = F2(
	function (a, b) {
		return {$: 'AddRight', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$DeadEnd = F4(
	function (row, col, problem, contextStack) {
		return {col: col, contextStack: contextStack, problem: problem, row: row};
	});
var $elm$parser$Parser$Advanced$fromState = F2(
	function (s, x) {
		return A2(
			$elm$parser$Parser$Advanced$AddRight,
			$elm$parser$Parser$Advanced$Empty,
			A4($elm$parser$Parser$Advanced$DeadEnd, s.row, s.col, x, s.context));
	});
var $elm$parser$Parser$Advanced$isSubString = _Parser_isSubString;
var $elm$parser$Parser$Advanced$token = function (_v0) {
	var str = _v0.a;
	var expecting = _v0.b;
	var progress = !$elm$core$String$isEmpty(str);
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			var _v1 = A5($elm$parser$Parser$Advanced$isSubString, str, s.offset, s.row, s.col, s.src);
			var newOffset = _v1.a;
			var newRow = _v1.b;
			var newCol = _v1.c;
			return _Utils_eq(newOffset, -1) ? A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : A3(
				$elm$parser$Parser$Advanced$Good,
				progress,
				_Utils_Tuple0,
				{col: newCol, context: s.context, indent: s.indent, offset: newOffset, row: newRow, src: s.src});
		});
};
var $dillonkearns$elm_markdown$Whitespace$lineEnd = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			$elm$parser$Parser$Advanced$token($dillonkearns$elm_markdown$Parser$Token$newline),
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$token($dillonkearns$elm_markdown$Parser$Token$carriageReturn),
			$elm$parser$Parser$Advanced$oneOf(
				_List_fromArray(
					[
						$elm$parser$Parser$Advanced$token($dillonkearns$elm_markdown$Parser$Token$newline),
						$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
					])))
		]));
var $elm$parser$Parser$Advanced$map = F2(
	function (func, _v0) {
		var parse = _v0.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v1 = parse(s0);
				if (_v1.$ === 'Good') {
					var p = _v1.a;
					var a = _v1.b;
					var s1 = _v1.c;
					return A3(
						$elm$parser$Parser$Advanced$Good,
						p,
						func(a),
						s1);
				} else {
					var p = _v1.a;
					var x = _v1.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				}
			});
	});
var $dillonkearns$elm_markdown$Markdown$Parser$blankLine = A2(
	$elm$parser$Parser$Advanced$map,
	function (_v0) {
		return $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine;
	},
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$backtrackable(
			$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab)),
		$dillonkearns$elm_markdown$Whitespace$lineEnd));
var $dillonkearns$elm_markdown$Markdown$RawBlock$BlockQuote = function (a) {
	return {$: 'BlockQuote', a: a};
};
var $dillonkearns$elm_markdown$Parser$Token$space = A2(
	$elm$parser$Parser$Advanced$Token,
	' ',
	$elm$parser$Parser$Expecting('a space'));
var $elm$parser$Parser$Advanced$symbol = $elm$parser$Parser$Advanced$token;
var $dillonkearns$elm_markdown$Markdown$Parser$blockQuoteStarts = _List_fromArray(
	[
		$elm$parser$Parser$Advanced$symbol(
		A2(
			$elm$parser$Parser$Advanced$Token,
			'>',
			$elm$parser$Parser$Expecting('>'))),
		A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$backtrackable(
			$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$space)),
		$elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					$elm$parser$Parser$Advanced$symbol(
					A2(
						$elm$parser$Parser$Advanced$Token,
						'>',
						$elm$parser$Parser$Expecting(' >'))),
					$elm$parser$Parser$Advanced$symbol(
					A2(
						$elm$parser$Parser$Advanced$Token,
						' >',
						$elm$parser$Parser$Expecting('  >'))),
					$elm$parser$Parser$Advanced$symbol(
					A2(
						$elm$parser$Parser$Advanced$Token,
						'  >',
						$elm$parser$Parser$Expecting('   >')))
				])))
	]);
var $dillonkearns$elm_markdown$Whitespace$isLineEnd = function (_char) {
	switch (_char.valueOf()) {
		case '\n':
			return true;
		case '\r':
			return true;
		default:
			return false;
	}
};
var $dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd = $elm$parser$Parser$Advanced$chompWhile(
	A2($elm$core$Basics$composeL, $elm$core$Basics$not, $dillonkearns$elm_markdown$Whitespace$isLineEnd));
var $elm$parser$Parser$Advanced$mapChompedString = F2(
	function (func, _v0) {
		var parse = _v0.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v1 = parse(s0);
				if (_v1.$ === 'Bad') {
					var p = _v1.a;
					var x = _v1.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				} else {
					var p = _v1.a;
					var a = _v1.b;
					var s1 = _v1.c;
					return A3(
						$elm$parser$Parser$Advanced$Good,
						p,
						A2(
							func,
							A3($elm$core$String$slice, s0.offset, s1.offset, s0.src),
							a),
						s1);
				}
			});
	});
var $elm$parser$Parser$Advanced$getChompedString = function (parser) {
	return A2($elm$parser$Parser$Advanced$mapChompedString, $elm$core$Basics$always, parser);
};
var $elm$parser$Parser$Advanced$keeper = F2(
	function (parseFunc, parseArg) {
		return A3($elm$parser$Parser$Advanced$map2, $elm$core$Basics$apL, parseFunc, parseArg);
	});
var $elm$parser$Parser$Advanced$end = function (x) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return _Utils_eq(
				$elm$core$String$length(s.src),
				s.offset) ? A3($elm$parser$Parser$Advanced$Good, false, _Utils_Tuple0, s) : A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, x));
		});
};
var $dillonkearns$elm_markdown$Helpers$endOfFile = $elm$parser$Parser$Advanced$end(
	$elm$parser$Parser$Expecting('the end of the input'));
var $dillonkearns$elm_markdown$Helpers$lineEndOrEnd = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[$dillonkearns$elm_markdown$Whitespace$lineEnd, $dillonkearns$elm_markdown$Helpers$endOfFile]));
var $dillonkearns$elm_markdown$Markdown$Parser$blockQuote = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$RawBlock$BlockQuote),
			$elm$parser$Parser$Advanced$oneOf($dillonkearns$elm_markdown$Markdown$Parser$blockQuoteStarts)),
		$elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$space),
					$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
				]))),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd),
		$dillonkearns$elm_markdown$Helpers$lineEndOrEnd));
var $dillonkearns$elm_markdown$Markdown$RawBlock$Heading = F2(
	function (a, b) {
		return {$: 'Heading', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$RawBlock$IndentedCodeBlock = function (a) {
	return {$: 'IndentedCodeBlock', a: a};
};
var $dillonkearns$elm_markdown$Markdown$RawBlock$Table = function (a) {
	return {$: 'Table', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Table$Table = F2(
	function (a, b) {
		return {$: 'Table', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$Table$TableDelimiterRow = F2(
	function (a, b) {
		return {$: 'TableDelimiterRow', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith = F3(
	function (joinWith, string1, string2) {
		var _v0 = _Utils_Tuple2(string1, string2);
		if (_v0.a === '') {
			return string2;
		} else {
			if (_v0.b === '') {
				return string1;
			} else {
				return _Utils_ap(
					string1,
					_Utils_ap(joinWith, string2));
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$Parser$joinStringsPreserveAll = F2(
	function (string1, string2) {
		return string1 + ('\n' + string2);
	});
var $dillonkearns$elm_markdown$Markdown$Table$TableHeader = function (a) {
	return {$: 'TableHeader', a: a};
};
var $elm$parser$Parser$Advanced$loopHelp = F4(
	function (p, state, callback, s0) {
		loopHelp:
		while (true) {
			var _v0 = callback(state);
			var parse = _v0.a;
			var _v1 = parse(s0);
			if (_v1.$ === 'Good') {
				var p1 = _v1.a;
				var step = _v1.b;
				var s1 = _v1.c;
				if (step.$ === 'Loop') {
					var newState = step.a;
					var $temp$p = p || p1,
						$temp$state = newState,
						$temp$callback = callback,
						$temp$s0 = s1;
					p = $temp$p;
					state = $temp$state;
					callback = $temp$callback;
					s0 = $temp$s0;
					continue loopHelp;
				} else {
					var result = step.a;
					return A3($elm$parser$Parser$Advanced$Good, p || p1, result, s1);
				}
			} else {
				var p1 = _v1.a;
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, p || p1, x);
			}
		}
	});
var $elm$parser$Parser$Advanced$loop = F2(
	function (state, callback) {
		return $elm$parser$Parser$Advanced$Parser(
			function (s) {
				return A4($elm$parser$Parser$Advanced$loopHelp, false, state, callback, s);
			});
	});
var $elm$parser$Parser$Advanced$chompIf = F2(
	function (isGood, expecting) {
		return $elm$parser$Parser$Advanced$Parser(
			function (s) {
				var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, s.offset, s.src);
				return _Utils_eq(newOffset, -1) ? A2(
					$elm$parser$Parser$Advanced$Bad,
					false,
					A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : (_Utils_eq(newOffset, -2) ? A3(
					$elm$parser$Parser$Advanced$Good,
					true,
					_Utils_Tuple0,
					{col: 1, context: s.context, indent: s.indent, offset: s.offset + 1, row: s.row + 1, src: s.src}) : A3(
					$elm$parser$Parser$Advanced$Good,
					true,
					_Utils_Tuple0,
					{col: s.col + 1, context: s.context, indent: s.indent, offset: newOffset, row: s.row, src: s.src}));
			});
	});
var $dillonkearns$elm_markdown$Parser$Token$parseString = function (str) {
	return $elm$parser$Parser$Advanced$token(
		A2(
			$elm$parser$Parser$Advanced$Token,
			str,
			$elm$parser$Parser$Expecting(str)));
};
var $dillonkearns$elm_markdown$Markdown$TableParser$parseCellHelper = function (_v0) {
	var curr = _v0.a;
	var acc = _v0.b;
	var _return = A2(
		$elm$core$Maybe$withDefault,
		$elm$parser$Parser$Advanced$Done(acc),
		A2(
			$elm$core$Maybe$map,
			function (cell) {
				return $elm$parser$Parser$Advanced$Done(
					A2($elm$core$List$cons, cell, acc));
			},
			curr));
	var finishCell = A2(
		$elm$core$Maybe$withDefault,
		$elm$parser$Parser$Advanced$Loop(
			_Utils_Tuple2($elm$core$Maybe$Nothing, acc)),
		A2(
			$elm$core$Maybe$map,
			function (cell) {
				return $elm$parser$Parser$Advanced$Loop(
					_Utils_Tuple2(
						$elm$core$Maybe$Nothing,
						A2($elm$core$List$cons, cell, acc)));
			},
			curr));
	var addToCurrent = function (c) {
		return _Utils_ap(
			A2($elm$core$Maybe$withDefault, '', curr),
			c);
	};
	var continueCell = function (c) {
		return $elm$parser$Parser$Advanced$Loop(
			_Utils_Tuple2(
				$elm$core$Maybe$Just(
					addToCurrent(c)),
				acc));
	};
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v1) {
					return _return;
				},
				$dillonkearns$elm_markdown$Parser$Token$parseString('|\n')),
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v2) {
					return _return;
				},
				$dillonkearns$elm_markdown$Parser$Token$parseString('\n')),
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v3) {
					return _return;
				},
				$elm$parser$Parser$Advanced$end(
					$elm$parser$Parser$Expecting('end'))),
				A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$backtrackable(
					$elm$parser$Parser$Advanced$succeed(
						continueCell('|'))),
				$dillonkearns$elm_markdown$Parser$Token$parseString('\\\\|')),
				A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$backtrackable(
					$elm$parser$Parser$Advanced$succeed(
						continueCell('\\'))),
				$dillonkearns$elm_markdown$Parser$Token$parseString('\\\\')),
				A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$backtrackable(
					$elm$parser$Parser$Advanced$succeed(
						continueCell('|'))),
				$dillonkearns$elm_markdown$Parser$Token$parseString('\\|')),
				A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$backtrackable(
					$elm$parser$Parser$Advanced$succeed(finishCell)),
				$dillonkearns$elm_markdown$Parser$Token$parseString('|')),
				A2(
				$elm$parser$Parser$Advanced$mapChompedString,
				F2(
					function (_char, _v4) {
						return continueCell(_char);
					}),
				A2(
					$elm$parser$Parser$Advanced$chompIf,
					$elm$core$Basics$always(true),
					$elm$parser$Parser$Problem('No character found')))
			]));
};
var $dillonkearns$elm_markdown$Markdown$TableParser$parseCells = A2(
	$elm$parser$Parser$Advanced$map,
	A2(
		$elm$core$List$foldl,
		F2(
			function (cell, acc) {
				return A2(
					$elm$core$List$cons,
					$elm$core$String$trim(cell),
					acc);
			}),
		_List_Nil),
	A2(
		$elm$parser$Parser$Advanced$loop,
		_Utils_Tuple2($elm$core$Maybe$Nothing, _List_Nil),
		$dillonkearns$elm_markdown$Markdown$TableParser$parseCellHelper));
var $dillonkearns$elm_markdown$Markdown$TableParser$rowParser = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
		$elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					$dillonkearns$elm_markdown$Parser$Token$parseString('|'),
					$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
				]))),
	$dillonkearns$elm_markdown$Markdown$TableParser$parseCells);
var $elm$parser$Parser$Advanced$bagToList = F2(
	function (bag, list) {
		bagToList:
		while (true) {
			switch (bag.$) {
				case 'Empty':
					return list;
				case 'AddRight':
					var bag1 = bag.a;
					var x = bag.b;
					var $temp$bag = bag1,
						$temp$list = A2($elm$core$List$cons, x, list);
					bag = $temp$bag;
					list = $temp$list;
					continue bagToList;
				default:
					var bag1 = bag.a;
					var bag2 = bag.b;
					var $temp$bag = bag1,
						$temp$list = A2($elm$parser$Parser$Advanced$bagToList, bag2, list);
					bag = $temp$bag;
					list = $temp$list;
					continue bagToList;
			}
		}
	});
var $elm$parser$Parser$Advanced$run = F2(
	function (_v0, src) {
		var parse = _v0.a;
		var _v1 = parse(
			{col: 1, context: _List_Nil, indent: 1, offset: 0, row: 1, src: src});
		if (_v1.$ === 'Good') {
			var value = _v1.b;
			return $elm$core$Result$Ok(value);
		} else {
			var bag = _v1.b;
			return $elm$core$Result$Err(
				A2($elm$parser$Parser$Advanced$bagToList, bag, _List_Nil));
		}
	});
var $dillonkearns$elm_markdown$Markdown$TableParser$parseHeader = F2(
	function (_v0, headersRow) {
		var columnAlignments = _v0.b;
		var headersWithAlignment = function (headers) {
			return A3(
				$elm$core$List$map2,
				F2(
					function (headerCell, alignment) {
						return {alignment: alignment, label: headerCell};
					}),
				headers,
				columnAlignments);
		};
		var combineHeaderAndDelimiter = function (headers) {
			return _Utils_eq(
				$elm$core$List$length(headers),
				$elm$core$List$length(columnAlignments)) ? $elm$core$Result$Ok(
				$dillonkearns$elm_markdown$Markdown$Table$TableHeader(
					headersWithAlignment(headers))) : $elm$core$Result$Err(
				'Tables must have the same number of header columns (' + ($elm$core$String$fromInt(
					$elm$core$List$length(headers)) + (') as delimiter columns (' + ($elm$core$String$fromInt(
					$elm$core$List$length(columnAlignments)) + ')'))));
		};
		var _v1 = A2($elm$parser$Parser$Advanced$run, $dillonkearns$elm_markdown$Markdown$TableParser$rowParser, headersRow);
		if (_v1.$ === 'Ok') {
			var headers = _v1.a;
			return combineHeaderAndDelimiter(headers);
		} else {
			return $elm$core$Result$Err('Unable to parse previous line as a table header');
		}
	});
var $dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks = F2(
	function (state, newRawBlock) {
		return {
			linkReferenceDefinitions: state.linkReferenceDefinitions,
			rawBlocks: function () {
				var _v0 = _Utils_Tuple2(newRawBlock, state.rawBlocks);
				_v0$9:
				while (true) {
					if (_v0.b.b) {
						switch (_v0.b.a.$) {
							case 'CodeBlock':
								if (_v0.a.$ === 'CodeBlock') {
									var block1 = _v0.a.a;
									var _v1 = _v0.b;
									var block2 = _v1.a.a;
									var rest = _v1.b;
									return A2(
										$elm$core$List$cons,
										$dillonkearns$elm_markdown$Markdown$RawBlock$CodeBlock(
											{
												body: A2($dillonkearns$elm_markdown$Markdown$Parser$joinStringsPreserveAll, block2.body, block1.body),
												language: $elm$core$Maybe$Nothing
											}),
										rest);
								} else {
									break _v0$9;
								}
							case 'IndentedCodeBlock':
								if (_v0.a.$ === 'IndentedCodeBlock') {
									var block1 = _v0.a.a;
									var _v2 = _v0.b;
									var block2 = _v2.a.a;
									var rest = _v2.b;
									return A2(
										$elm$core$List$cons,
										$dillonkearns$elm_markdown$Markdown$RawBlock$IndentedCodeBlock(
											A2($dillonkearns$elm_markdown$Markdown$Parser$joinStringsPreserveAll, block2, block1)),
										rest);
								} else {
									break _v0$9;
								}
							case 'BlockQuote':
								switch (_v0.a.$) {
									case 'OpenBlockOrParagraph':
										var body1 = _v0.a.a.a;
										var _v3 = _v0.b;
										var body2 = _v3.a.a;
										var rest = _v3.b;
										return A2(
											$elm$core$List$cons,
											$dillonkearns$elm_markdown$Markdown$RawBlock$BlockQuote(
												A3($dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith, '\n', body2, body1)),
											rest);
									case 'BlockQuote':
										var body1 = _v0.a.a;
										var _v4 = _v0.b;
										var body2 = _v4.a.a;
										var rest = _v4.b;
										return A2(
											$elm$core$List$cons,
											$dillonkearns$elm_markdown$Markdown$RawBlock$BlockQuote(
												A2($dillonkearns$elm_markdown$Markdown$Parser$joinStringsPreserveAll, body2, body1)),
											rest);
									default:
										break _v0$9;
								}
							case 'OpenBlockOrParagraph':
								switch (_v0.a.$) {
									case 'OpenBlockOrParagraph':
										var body1 = _v0.a.a.a;
										var _v5 = _v0.b;
										var body2 = _v5.a.a.a;
										var rest = _v5.b;
										return A2(
											$elm$core$List$cons,
											$dillonkearns$elm_markdown$Markdown$RawBlock$OpenBlockOrParagraph(
												$dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(
													A3($dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith, '\n', body2, body1))),
											rest);
									case 'SetextLine':
										if (_v0.a.a.$ === 'LevelOne') {
											var _v6 = _v0.a;
											var _v7 = _v6.a;
											var _v8 = _v0.b;
											var unparsedInlines = _v8.a.a;
											var rest = _v8.b;
											return A2(
												$elm$core$List$cons,
												A2($dillonkearns$elm_markdown$Markdown$RawBlock$Heading, 1, unparsedInlines),
												rest);
										} else {
											var _v9 = _v0.a;
											var _v10 = _v9.a;
											var _v11 = _v0.b;
											var unparsedInlines = _v11.a.a;
											var rest = _v11.b;
											return A2(
												$elm$core$List$cons,
												A2($dillonkearns$elm_markdown$Markdown$RawBlock$Heading, 2, unparsedInlines),
												rest);
										}
									case 'TableDelimiter':
										var _v12 = _v0.a.a;
										var text = _v12.a;
										var alignments = _v12.b;
										var _v13 = _v0.b;
										var rawHeaders = _v13.a.a.a;
										var rest = _v13.b;
										var _v14 = A2(
											$dillonkearns$elm_markdown$Markdown$TableParser$parseHeader,
											A2($dillonkearns$elm_markdown$Markdown$Table$TableDelimiterRow, text, alignments),
											rawHeaders);
										if (_v14.$ === 'Ok') {
											var headers = _v14.a.a;
											return A2(
												$elm$core$List$cons,
												$dillonkearns$elm_markdown$Markdown$RawBlock$Table(
													A2($dillonkearns$elm_markdown$Markdown$Table$Table, headers, _List_Nil)),
												rest);
										} else {
											return A2(
												$elm$core$List$cons,
												$dillonkearns$elm_markdown$Markdown$RawBlock$OpenBlockOrParagraph(
													$dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(
														A3($dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith, '\n', rawHeaders, text.raw))),
												rest);
										}
									default:
										break _v0$9;
								}
							case 'Table':
								if (_v0.a.$ === 'Table') {
									var updatedTable = _v0.a.a;
									var _v15 = _v0.b;
									var rest = _v15.b;
									return A2(
										$elm$core$List$cons,
										$dillonkearns$elm_markdown$Markdown$RawBlock$Table(updatedTable),
										rest);
								} else {
									break _v0$9;
								}
							default:
								break _v0$9;
						}
					} else {
						break _v0$9;
					}
				}
				return A2($elm$core$List$cons, newRawBlock, state.rawBlocks);
			}()
		};
	});
var $dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString = function (deadEnds) {
	return A2(
		$elm$core$String$join,
		'\n',
		A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Parser$deadEndToString, deadEnds));
};
var $dillonkearns$elm_markdown$HtmlParser$Cdata = function (a) {
	return {$: 'Cdata', a: a};
};
var $dillonkearns$elm_markdown$HtmlParser$Element = F3(
	function (a, b, c) {
		return {$: 'Element', a: a, b: b, c: c};
	});
var $dillonkearns$elm_markdown$HtmlParser$Text = function (a) {
	return {$: 'Text', a: a};
};
var $dillonkearns$elm_markdown$HtmlParser$expectTagNameCharacter = $elm$parser$Parser$Expecting('at least 1 tag name character');
var $dillonkearns$elm_markdown$HtmlParser$tagNameCharacter = function (c) {
	switch (c.valueOf()) {
		case ' ':
			return false;
		case '\r':
			return false;
		case '\n':
			return false;
		case '\t':
			return false;
		case '/':
			return false;
		case '<':
			return false;
		case '>':
			return false;
		case '\"':
			return false;
		case '\'':
			return false;
		case '=':
			return false;
		default:
			return true;
	}
};
var $dillonkearns$elm_markdown$HtmlParser$tagName = A2(
	$elm$parser$Parser$Advanced$mapChompedString,
	F2(
		function (name, _v0) {
			return $elm$core$String$toLower(name);
		}),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2($elm$parser$Parser$Advanced$chompIf, $dillonkearns$elm_markdown$HtmlParser$tagNameCharacter, $dillonkearns$elm_markdown$HtmlParser$expectTagNameCharacter),
		$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$HtmlParser$tagNameCharacter)));
var $dillonkearns$elm_markdown$HtmlParser$attributeName = $dillonkearns$elm_markdown$HtmlParser$tagName;
var $elm$parser$Parser$ExpectingSymbol = function (a) {
	return {$: 'ExpectingSymbol', a: a};
};
var $dillonkearns$elm_markdown$HtmlParser$symbol = function (str) {
	return $elm$parser$Parser$Advanced$token(
		A2(
			$elm$parser$Parser$Advanced$Token,
			str,
			$elm$parser$Parser$ExpectingSymbol(str)));
};
var $dillonkearns$elm_markdown$HtmlParser$entities = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2(
			'amp',
			_Utils_chr('&')),
			_Utils_Tuple2(
			'lt',
			_Utils_chr('<')),
			_Utils_Tuple2(
			'gt',
			_Utils_chr('>')),
			_Utils_Tuple2(
			'apos',
			_Utils_chr('\'')),
			_Utils_Tuple2(
			'quot',
			_Utils_chr('\"'))
		]));
var $elm$core$Char$fromCode = _Char_fromCode;
var $rtfeldman$elm_hex$Hex$fromStringHelp = F3(
	function (position, chars, accumulated) {
		fromStringHelp:
		while (true) {
			if (!chars.b) {
				return $elm$core$Result$Ok(accumulated);
			} else {
				var _char = chars.a;
				var rest = chars.b;
				switch (_char.valueOf()) {
					case '0':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated;
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '1':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + A2($elm$core$Basics$pow, 16, position);
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '2':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (2 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '3':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (3 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '4':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (4 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '5':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (5 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '6':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (6 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '7':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (7 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '8':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (8 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '9':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (9 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'a':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (10 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'b':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (11 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'c':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (12 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'd':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (13 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'e':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (14 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'f':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (15 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					default:
						var nonHex = _char;
						return $elm$core$Result$Err(
							$elm$core$String$fromChar(nonHex) + ' is not a valid hexadecimal character.');
				}
			}
		}
	});
var $rtfeldman$elm_hex$Hex$fromString = function (str) {
	if ($elm$core$String$isEmpty(str)) {
		return $elm$core$Result$Err('Empty strings are not valid hexadecimal strings.');
	} else {
		var result = function () {
			if (A2($elm$core$String$startsWith, '-', str)) {
				var list = A2(
					$elm$core$Maybe$withDefault,
					_List_Nil,
					$elm$core$List$tail(
						$elm$core$String$toList(str)));
				return A2(
					$elm$core$Result$map,
					$elm$core$Basics$negate,
					A3(
						$rtfeldman$elm_hex$Hex$fromStringHelp,
						$elm$core$List$length(list) - 1,
						list,
						0));
			} else {
				return A3(
					$rtfeldman$elm_hex$Hex$fromStringHelp,
					$elm$core$String$length(str) - 1,
					$elm$core$String$toList(str),
					0);
			}
		}();
		var formatError = function (err) {
			return A2(
				$elm$core$String$join,
				' ',
				_List_fromArray(
					['\"' + (str + '\"'), 'is not a valid hexadecimal string because', err]));
		};
		return A2($elm$core$Result$mapError, formatError, result);
	}
};
var $dillonkearns$elm_markdown$HtmlParser$decodeEscape = function (s) {
	return A2($elm$core$String$startsWith, '#x', s) ? A2(
		$elm$core$Result$mapError,
		$elm$parser$Parser$Problem,
		A2(
			$elm$core$Result$map,
			$elm$core$Char$fromCode,
			$rtfeldman$elm_hex$Hex$fromString(
				A2($elm$core$String$dropLeft, 2, s)))) : (A2($elm$core$String$startsWith, '#', s) ? A2(
		$elm$core$Result$fromMaybe,
		$elm$parser$Parser$Problem('Invalid escaped character: ' + s),
		A2(
			$elm$core$Maybe$map,
			$elm$core$Char$fromCode,
			$elm$core$String$toInt(
				A2($elm$core$String$dropLeft, 1, s)))) : A2(
		$elm$core$Result$fromMaybe,
		$elm$parser$Parser$Problem('No entity named \"&' + (s + ';\" found.')),
		A2($elm$core$Dict$get, s, $dillonkearns$elm_markdown$HtmlParser$entities)));
};
var $elm$parser$Parser$Advanced$problem = function (x) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, x));
		});
};
var $dillonkearns$elm_markdown$HtmlParser$escapedChar = function (end_) {
	var process = function (entityStr) {
		var _v0 = $dillonkearns$elm_markdown$HtmlParser$decodeEscape(entityStr);
		if (_v0.$ === 'Ok') {
			var c = _v0.a;
			return $elm$parser$Parser$Advanced$succeed(c);
		} else {
			var e = _v0.a;
			return $elm$parser$Parser$Advanced$problem(e);
		}
	};
	var isEntityChar = function (c) {
		return (!_Utils_eq(c, end_)) && (!_Utils_eq(
			c,
			_Utils_chr(';')));
	};
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
			$dillonkearns$elm_markdown$HtmlParser$symbol('&')),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$andThen,
				process,
				$elm$parser$Parser$Advanced$getChompedString(
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$elm$parser$Parser$Advanced$chompIf,
							isEntityChar,
							$elm$parser$Parser$Expecting('an entity character')),
						$elm$parser$Parser$Advanced$chompWhile(isEntityChar)))),
			$dillonkearns$elm_markdown$HtmlParser$symbol(';')));
};
var $dillonkearns$elm_markdown$HtmlParser$textStringStep = F3(
	function (closingChar, predicate, accum) {
		return A2(
			$elm$parser$Parser$Advanced$andThen,
			function (soFar) {
				return $elm$parser$Parser$Advanced$oneOf(
					_List_fromArray(
						[
							A2(
							$elm$parser$Parser$Advanced$map,
							function (escaped) {
								return $elm$parser$Parser$Advanced$Loop(
									_Utils_ap(
										accum,
										_Utils_ap(
											soFar,
											$elm$core$String$fromChar(escaped))));
							},
							$dillonkearns$elm_markdown$HtmlParser$escapedChar(closingChar)),
							$elm$parser$Parser$Advanced$succeed(
							$elm$parser$Parser$Advanced$Done(
								_Utils_ap(accum, soFar)))
						]));
			},
			$elm$parser$Parser$Advanced$getChompedString(
				$elm$parser$Parser$Advanced$chompWhile(predicate)));
	});
var $dillonkearns$elm_markdown$HtmlParser$textString = function (closingChar) {
	var predicate = function (c) {
		return (!_Utils_eq(c, closingChar)) && (!_Utils_eq(
			c,
			_Utils_chr('&')));
	};
	return A2(
		$elm$parser$Parser$Advanced$loop,
		'',
		A2($dillonkearns$elm_markdown$HtmlParser$textStringStep, closingChar, predicate));
};
var $dillonkearns$elm_markdown$HtmlParser$attributeValue = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
				$dillonkearns$elm_markdown$HtmlParser$symbol('\"')),
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$dillonkearns$elm_markdown$HtmlParser$textString(
					_Utils_chr('\"')),
				$dillonkearns$elm_markdown$HtmlParser$symbol('\"'))),
			A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
				$dillonkearns$elm_markdown$HtmlParser$symbol('\'')),
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$dillonkearns$elm_markdown$HtmlParser$textString(
					_Utils_chr('\'')),
				$dillonkearns$elm_markdown$HtmlParser$symbol('\'')))
		]));
var $dillonkearns$elm_markdown$HtmlParser$keepOldest = F2(
	function (_new, mValue) {
		if (mValue.$ === 'Just') {
			var v = mValue.a;
			return $elm$core$Maybe$Just(v);
		} else {
			return $elm$core$Maybe$Just(_new);
		}
	});
var $dillonkearns$elm_markdown$HtmlParser$isWhitespace = function (c) {
	switch (c.valueOf()) {
		case ' ':
			return true;
		case '\r':
			return true;
		case '\n':
			return true;
		case '\t':
			return true;
		default:
			return false;
	}
};
var $dillonkearns$elm_markdown$HtmlParser$whiteSpace = $elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$HtmlParser$isWhitespace);
var $dillonkearns$elm_markdown$HtmlParser$attributesStep = function (attrs) {
	var process = F2(
		function (name, value) {
			return $elm$parser$Parser$Advanced$Loop(
				A3(
					$elm$core$Dict$update,
					$elm$core$String$toLower(name),
					$dillonkearns$elm_markdown$HtmlParser$keepOldest(value),
					attrs));
		});
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					$elm$parser$Parser$Advanced$succeed(process),
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							A2($elm$parser$Parser$Advanced$ignorer, $dillonkearns$elm_markdown$HtmlParser$attributeName, $dillonkearns$elm_markdown$HtmlParser$whiteSpace),
							$dillonkearns$elm_markdown$HtmlParser$symbol('=')),
						$dillonkearns$elm_markdown$HtmlParser$whiteSpace)),
				A2($elm$parser$Parser$Advanced$ignorer, $dillonkearns$elm_markdown$HtmlParser$attributeValue, $dillonkearns$elm_markdown$HtmlParser$whiteSpace)),
				$elm$parser$Parser$Advanced$succeed(
				$elm$parser$Parser$Advanced$Done(attrs))
			]));
};
var $dillonkearns$elm_markdown$HtmlParser$attributes = A2(
	$elm$parser$Parser$Advanced$map,
	A2(
		$elm$core$Dict$foldl,
		F3(
			function (key, value, accum) {
				return A2(
					$elm$core$List$cons,
					{name: key, value: value},
					accum);
			}),
		_List_Nil),
	A2($elm$parser$Parser$Advanced$loop, $elm$core$Dict$empty, $dillonkearns$elm_markdown$HtmlParser$attributesStep));
var $elm$parser$Parser$Advanced$chompUntilEndOr = function (str) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			var _v0 = A5(_Parser_findSubString, str, s.offset, s.row, s.col, s.src);
			var newOffset = _v0.a;
			var newRow = _v0.b;
			var newCol = _v0.c;
			var adjustedOffset = (newOffset < 0) ? $elm$core$String$length(s.src) : newOffset;
			return A3(
				$elm$parser$Parser$Advanced$Good,
				_Utils_cmp(s.offset, adjustedOffset) < 0,
				_Utils_Tuple0,
				{col: newCol, context: s.context, indent: s.indent, offset: adjustedOffset, row: newRow, src: s.src});
		});
};
var $dillonkearns$elm_markdown$HtmlParser$cdata = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
		$dillonkearns$elm_markdown$HtmlParser$symbol('<![CDATA[')),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString(
			$elm$parser$Parser$Advanced$chompUntilEndOr(']]>')),
		$dillonkearns$elm_markdown$HtmlParser$symbol(']]>')));
var $dillonkearns$elm_markdown$HtmlParser$childrenStep = F2(
	function (options, accum) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (f) {
				return f(accum);
			},
			$elm$parser$Parser$Advanced$oneOf(options));
	});
var $dillonkearns$elm_markdown$HtmlParser$fail = function (str) {
	return $elm$parser$Parser$Advanced$problem(
		$elm$parser$Parser$Problem(str));
};
var $dillonkearns$elm_markdown$HtmlParser$closingTag = function (startTagName) {
	var closingTagName = A2(
		$elm$parser$Parser$Advanced$andThen,
		function (endTagName) {
			return _Utils_eq(startTagName, endTagName) ? $elm$parser$Parser$Advanced$succeed(_Utils_Tuple0) : $dillonkearns$elm_markdown$HtmlParser$fail('tag name mismatch: ' + (startTagName + (' and ' + endTagName)));
		},
		$dillonkearns$elm_markdown$HtmlParser$tagName);
	return A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$dillonkearns$elm_markdown$HtmlParser$symbol('</'),
					$dillonkearns$elm_markdown$HtmlParser$whiteSpace),
				closingTagName),
			$dillonkearns$elm_markdown$HtmlParser$whiteSpace),
		$dillonkearns$elm_markdown$HtmlParser$symbol('>'));
};
var $dillonkearns$elm_markdown$HtmlParser$Comment = function (a) {
	return {$: 'Comment', a: a};
};
var $dillonkearns$elm_markdown$HtmlParser$toToken = function (str) {
	return A2(
		$elm$parser$Parser$Advanced$Token,
		str,
		$elm$parser$Parser$Expecting(str));
};
var $dillonkearns$elm_markdown$HtmlParser$comment = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$HtmlParser$Comment),
		$elm$parser$Parser$Advanced$token(
			$dillonkearns$elm_markdown$HtmlParser$toToken('<!--'))),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString(
			$elm$parser$Parser$Advanced$chompUntilEndOr('-->')),
		$elm$parser$Parser$Advanced$token(
			$dillonkearns$elm_markdown$HtmlParser$toToken('-->'))));
var $dillonkearns$elm_markdown$HtmlParser$Declaration = F2(
	function (a, b) {
		return {$: 'Declaration', a: a, b: b};
	});
var $dillonkearns$elm_markdown$HtmlParser$expectUppercaseCharacter = $elm$parser$Parser$Expecting('at least 1 uppercase character');
var $dillonkearns$elm_markdown$HtmlParser$allUppercase = $elm$parser$Parser$Advanced$getChompedString(
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2($elm$parser$Parser$Advanced$chompIf, $elm$core$Char$isUpper, $dillonkearns$elm_markdown$HtmlParser$expectUppercaseCharacter),
		$elm$parser$Parser$Advanced$chompWhile($elm$core$Char$isUpper)));
var $dillonkearns$elm_markdown$HtmlParser$oneOrMoreWhiteSpace = A2(
	$elm$parser$Parser$Advanced$ignorer,
	A2(
		$elm$parser$Parser$Advanced$chompIf,
		$dillonkearns$elm_markdown$HtmlParser$isWhitespace,
		$elm$parser$Parser$Expecting('at least one whitespace')),
	$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$HtmlParser$isWhitespace));
var $dillonkearns$elm_markdown$HtmlParser$docType = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$HtmlParser$Declaration),
			$dillonkearns$elm_markdown$HtmlParser$symbol('<!')),
		A2($elm$parser$Parser$Advanced$ignorer, $dillonkearns$elm_markdown$HtmlParser$allUppercase, $dillonkearns$elm_markdown$HtmlParser$oneOrMoreWhiteSpace)),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString(
			$elm$parser$Parser$Advanced$chompUntilEndOr('>')),
		$dillonkearns$elm_markdown$HtmlParser$symbol('>')));
var $dillonkearns$elm_markdown$HtmlParser$ProcessingInstruction = function (a) {
	return {$: 'ProcessingInstruction', a: a};
};
var $dillonkearns$elm_markdown$HtmlParser$processingInstruction = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$HtmlParser$ProcessingInstruction),
		$dillonkearns$elm_markdown$HtmlParser$symbol('<?')),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString(
			$elm$parser$Parser$Advanced$chompUntilEndOr('?>')),
		$dillonkearns$elm_markdown$HtmlParser$symbol('?>')));
var $dillonkearns$elm_markdown$HtmlParser$isNotTextNodeIgnoreChar = function (c) {
	switch (c.valueOf()) {
		case '<':
			return false;
		case '&':
			return false;
		default:
			return true;
	}
};
var $dillonkearns$elm_markdown$HtmlParser$textNodeStringStepOptions = _List_fromArray(
	[
		A2(
		$elm$parser$Parser$Advanced$map,
		function (_v0) {
			return $elm$parser$Parser$Advanced$Loop(_Utils_Tuple0);
		},
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$chompIf,
				$dillonkearns$elm_markdown$HtmlParser$isNotTextNodeIgnoreChar,
				$elm$parser$Parser$Expecting('is not & or <')),
			$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$HtmlParser$isNotTextNodeIgnoreChar))),
		A2(
		$elm$parser$Parser$Advanced$map,
		function (_v1) {
			return $elm$parser$Parser$Advanced$Loop(_Utils_Tuple0);
		},
		$dillonkearns$elm_markdown$HtmlParser$escapedChar(
			_Utils_chr('<'))),
		$elm$parser$Parser$Advanced$succeed(
		$elm$parser$Parser$Advanced$Done(_Utils_Tuple0))
	]);
var $dillonkearns$elm_markdown$HtmlParser$textNodeStringStep = function (_v0) {
	return $elm$parser$Parser$Advanced$oneOf($dillonkearns$elm_markdown$HtmlParser$textNodeStringStepOptions);
};
var $dillonkearns$elm_markdown$HtmlParser$textNodeString = $elm$parser$Parser$Advanced$getChompedString(
	A2($elm$parser$Parser$Advanced$loop, _Utils_Tuple0, $dillonkearns$elm_markdown$HtmlParser$textNodeStringStep));
var $dillonkearns$elm_markdown$HtmlParser$children = function (startTagName) {
	return A2(
		$elm$parser$Parser$Advanced$loop,
		_List_Nil,
		$dillonkearns$elm_markdown$HtmlParser$childrenStep(
			$dillonkearns$elm_markdown$HtmlParser$childrenStepOptions(startTagName)));
};
var $dillonkearns$elm_markdown$HtmlParser$childrenStepOptions = function (startTagName) {
	return _List_fromArray(
		[
			A2(
			$elm$parser$Parser$Advanced$map,
			F2(
				function (_v1, accum) {
					return $elm$parser$Parser$Advanced$Done(
						$elm$core$List$reverse(accum));
				}),
			$dillonkearns$elm_markdown$HtmlParser$closingTag(startTagName)),
			A2(
			$elm$parser$Parser$Advanced$andThen,
			function (text) {
				return $elm$core$String$isEmpty(text) ? A2(
					$elm$parser$Parser$Advanced$map,
					F2(
						function (_v2, accum) {
							return $elm$parser$Parser$Advanced$Done(
								$elm$core$List$reverse(accum));
						}),
					$dillonkearns$elm_markdown$HtmlParser$closingTag(startTagName)) : $elm$parser$Parser$Advanced$succeed(
					function (accum) {
						return $elm$parser$Parser$Advanced$Loop(
							A2(
								$elm$core$List$cons,
								$dillonkearns$elm_markdown$HtmlParser$Text(text),
								accum));
					});
			},
			$dillonkearns$elm_markdown$HtmlParser$textNodeString),
			A2(
			$elm$parser$Parser$Advanced$map,
			F2(
				function (_new, accum) {
					return $elm$parser$Parser$Advanced$Loop(
						A2($elm$core$List$cons, _new, accum));
				}),
			$dillonkearns$elm_markdown$HtmlParser$cyclic$html())
		]);
};
var $dillonkearns$elm_markdown$HtmlParser$elementContinuation = function (startTagName) {
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed(
					$dillonkearns$elm_markdown$HtmlParser$Element(startTagName)),
				$dillonkearns$elm_markdown$HtmlParser$whiteSpace),
			A2($elm$parser$Parser$Advanced$ignorer, $dillonkearns$elm_markdown$HtmlParser$attributes, $dillonkearns$elm_markdown$HtmlParser$whiteSpace)),
		$elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$Advanced$map,
					function (_v0) {
						return _List_Nil;
					},
					$dillonkearns$elm_markdown$HtmlParser$symbol('/>')),
					A2(
					$elm$parser$Parser$Advanced$keeper,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
						$dillonkearns$elm_markdown$HtmlParser$symbol('>')),
					$dillonkearns$elm_markdown$HtmlParser$children(startTagName))
				])));
};
function $dillonkearns$elm_markdown$HtmlParser$cyclic$html() {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2($elm$parser$Parser$Advanced$map, $dillonkearns$elm_markdown$HtmlParser$Cdata, $dillonkearns$elm_markdown$HtmlParser$cdata),
				$dillonkearns$elm_markdown$HtmlParser$processingInstruction,
				$dillonkearns$elm_markdown$HtmlParser$comment,
				$dillonkearns$elm_markdown$HtmlParser$docType,
				$dillonkearns$elm_markdown$HtmlParser$cyclic$element()
			]));
}
function $dillonkearns$elm_markdown$HtmlParser$cyclic$element() {
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
			$dillonkearns$elm_markdown$HtmlParser$symbol('<')),
		A2($elm$parser$Parser$Advanced$andThen, $dillonkearns$elm_markdown$HtmlParser$elementContinuation, $dillonkearns$elm_markdown$HtmlParser$tagName));
}
try {
	var $dillonkearns$elm_markdown$HtmlParser$html = $dillonkearns$elm_markdown$HtmlParser$cyclic$html();
	$dillonkearns$elm_markdown$HtmlParser$cyclic$html = function () {
		return $dillonkearns$elm_markdown$HtmlParser$html;
	};
	var $dillonkearns$elm_markdown$HtmlParser$element = $dillonkearns$elm_markdown$HtmlParser$cyclic$element();
	$dillonkearns$elm_markdown$HtmlParser$cyclic$element = function () {
		return $dillonkearns$elm_markdown$HtmlParser$element;
	};
} catch ($) {
	throw 'Some top-level definitions from `HtmlParser` are causing infinite recursion:\n\n  ┌─────┐\n  │    children\n  │     ↓\n  │    childrenStepOptions\n  │     ↓\n  │    html\n  │     ↓\n  │    element\n  │     ↓\n  │    elementContinuation\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $dillonkearns$elm_markdown$Parser$Token$tab = A2(
	$elm$parser$Parser$Advanced$Token,
	'\t',
	$elm$parser$Parser$Expecting('a tab'));
var $dillonkearns$elm_markdown$Markdown$Parser$exactlyFourSpaces = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$tab),
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$backtrackable(
				$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$space)),
			$elm$parser$Parser$Advanced$oneOf(
				_List_fromArray(
					[
						$elm$parser$Parser$Advanced$symbol(
						A2(
							$elm$parser$Parser$Advanced$Token,
							'   ',
							$elm$parser$Parser$ExpectingSymbol('Indentation'))),
						$elm$parser$Parser$Advanced$symbol(
						A2(
							$elm$parser$Parser$Advanced$Token,
							' \t',
							$elm$parser$Parser$ExpectingSymbol('Indentation'))),
						$elm$parser$Parser$Advanced$symbol(
						A2(
							$elm$parser$Parser$Advanced$Token,
							'  \t',
							$elm$parser$Parser$ExpectingSymbol('Indentation')))
					])))
		]));
var $dillonkearns$elm_markdown$Markdown$Parser$indentedCodeBlock = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$RawBlock$IndentedCodeBlock),
		$dillonkearns$elm_markdown$Markdown$Parser$exactlyFourSpaces),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd),
		$dillonkearns$elm_markdown$Helpers$lineEndOrEnd));
var $dillonkearns$elm_markdown$Markdown$Parser$innerParagraphParser = A2(
	$elm$parser$Parser$Advanced$mapChompedString,
	F2(
		function (rawLine, _v0) {
			return $dillonkearns$elm_markdown$Markdown$RawBlock$OpenBlockOrParagraph(
				$dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(rawLine));
		}),
	$dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd);
var $dillonkearns$elm_markdown$Markdown$Parser$openBlockOrParagraphParser = A2($elm$parser$Parser$Advanced$ignorer, $dillonkearns$elm_markdown$Markdown$Parser$innerParagraphParser, $dillonkearns$elm_markdown$Helpers$lineEndOrEnd);
var $dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock = F2(
	function (a, b) {
		return {$: 'OrderedListBlock', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Parser$Extra$chompOneOrMore = function (condition) {
	return A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2(
			$elm$parser$Parser$Advanced$chompIf,
			condition,
			$elm$parser$Parser$Problem('Expected one or more character')),
		$elm$parser$Parser$Advanced$chompWhile(condition));
};
var $dillonkearns$elm_markdown$Parser$Token$closingParen = A2(
	$elm$parser$Parser$Advanced$Token,
	')',
	$elm$parser$Parser$Expecting('a `)`'));
var $dillonkearns$elm_markdown$Parser$Token$dot = A2(
	$elm$parser$Parser$Advanced$Token,
	'.',
	$elm$parser$Parser$Expecting('a `.`'));
var $dillonkearns$elm_markdown$Markdown$OrderedList$itemBody = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
				$dillonkearns$elm_markdown$Parser$Extra$chompOneOrMore($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab)),
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd),
				$dillonkearns$elm_markdown$Helpers$lineEndOrEnd)),
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed(''),
			$dillonkearns$elm_markdown$Helpers$lineEndOrEnd)
		]));
var $dillonkearns$elm_markdown$Parser$Extra$positiveInteger = A2(
	$elm$parser$Parser$Advanced$mapChompedString,
	F2(
		function (str, _v0) {
			return A2(
				$elm$core$Maybe$withDefault,
				0,
				$elm$core$String$toInt(str));
		}),
	$dillonkearns$elm_markdown$Parser$Extra$chompOneOrMore($elm$core$Char$isDigit));
var $dillonkearns$elm_markdown$Markdown$OrderedList$singleItemParser = function (listMarker) {
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
			$elm$parser$Parser$Advanced$backtrackable(
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$dillonkearns$elm_markdown$Parser$Extra$positiveInteger,
					$elm$parser$Parser$Advanced$symbol(listMarker)))),
		$dillonkearns$elm_markdown$Markdown$OrderedList$itemBody);
};
var $dillonkearns$elm_markdown$Markdown$OrderedList$statementsHelp = F2(
	function (itemParser, revStmts) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$Advanced$map,
					function (stmt) {
						return $elm$parser$Parser$Advanced$Loop(
							A2($elm$core$List$cons, stmt, revStmts));
					},
					itemParser),
					$elm$parser$Parser$Advanced$succeed(
					$elm$parser$Parser$Advanced$Done(
						$elm$core$List$reverse(revStmts)))
				]));
	});
var $dillonkearns$elm_markdown$Markdown$OrderedList$parseSubsequentItems = F3(
	function (startingIndex, listMarker, firstItem) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (items) {
				return _Utils_Tuple2(
					startingIndex,
					A2($elm$core$List$cons, firstItem, items));
			},
			A2(
				$elm$parser$Parser$Advanced$loop,
				_List_Nil,
				$dillonkearns$elm_markdown$Markdown$OrderedList$statementsHelp(
					$dillonkearns$elm_markdown$Markdown$OrderedList$singleItemParser(listMarker))));
	});
var $dillonkearns$elm_markdown$Markdown$OrderedList$positiveIntegerMaxOf9Digits = A2(
	$elm$parser$Parser$Advanced$andThen,
	function (parsed) {
		return (parsed <= 999999999) ? $elm$parser$Parser$Advanced$succeed(parsed) : $elm$parser$Parser$Advanced$problem(
			$elm$parser$Parser$Problem('Starting numbers must be nine digits or less.'));
	},
	$dillonkearns$elm_markdown$Parser$Extra$positiveInteger);
var $dillonkearns$elm_markdown$Markdown$OrderedList$validateStartsWith1 = function (parsed) {
	if (parsed === 1) {
		return $elm$parser$Parser$Advanced$succeed(parsed);
	} else {
		return $elm$parser$Parser$Advanced$problem(
			$elm$parser$Parser$Problem('Lists inside a paragraph or after a paragraph without a blank line must start with 1'));
	}
};
var $dillonkearns$elm_markdown$Markdown$OrderedList$parser = function (previousWasBody) {
	return A2(
		$elm$parser$Parser$Advanced$andThen,
		$elm$core$Basics$identity,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$OrderedList$parseSubsequentItems),
					$elm$parser$Parser$Advanced$backtrackable(
						previousWasBody ? A2($elm$parser$Parser$Advanced$andThen, $dillonkearns$elm_markdown$Markdown$OrderedList$validateStartsWith1, $dillonkearns$elm_markdown$Markdown$OrderedList$positiveIntegerMaxOf9Digits) : $dillonkearns$elm_markdown$Markdown$OrderedList$positiveIntegerMaxOf9Digits)),
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$backtrackable(
						$elm$parser$Parser$Advanced$oneOf(
							_List_fromArray(
								[
									A2(
									$elm$parser$Parser$Advanced$ignorer,
									$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Parser$Token$dot),
									$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$dot)),
									A2(
									$elm$parser$Parser$Advanced$ignorer,
									$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Parser$Token$closingParen),
									$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$closingParen))
								]))),
					$dillonkearns$elm_markdown$Parser$Extra$chompOneOrMore($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab))),
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd),
				$dillonkearns$elm_markdown$Helpers$lineEndOrEnd)));
};
var $dillonkearns$elm_markdown$Markdown$Parser$orderedListBlock = function (previousWasBody) {
	return A2(
		$elm$parser$Parser$Advanced$map,
		function (_v0) {
			var startingIndex = _v0.a;
			var unparsedLines = _v0.b;
			return A2(
				$dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock,
				startingIndex,
				A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines, unparsedLines));
		},
		$dillonkearns$elm_markdown$Markdown$OrderedList$parser(previousWasBody));
};
var $dillonkearns$elm_markdown$Markdown$Inline$CodeInline = function (a) {
	return {$: 'CodeInline', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Inline$Emphasis = F2(
	function (a, b) {
		return {$: 'Emphasis', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$Inline$HardLineBreak = {$: 'HardLineBreak'};
var $dillonkearns$elm_markdown$Markdown$Inline$HtmlInline = function (a) {
	return {$: 'HtmlInline', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Inline$Image = F3(
	function (a, b, c) {
		return {$: 'Image', a: a, b: b, c: c};
	});
var $dillonkearns$elm_markdown$Markdown$Inline$Link = F3(
	function (a, b, c) {
		return {$: 'Link', a: a, b: b, c: c};
	});
var $dillonkearns$elm_markdown$Markdown$Inline$Strikethrough = function (a) {
	return {$: 'Strikethrough', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Inline$Text = function (a) {
	return {$: 'Text', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$matchToInline = function (_v0) {
	var match = _v0.a;
	var _v1 = match.type_;
	switch (_v1.$) {
		case 'NormalType':
			return $dillonkearns$elm_markdown$Markdown$Inline$Text(match.text);
		case 'HardLineBreakType':
			return $dillonkearns$elm_markdown$Markdown$Inline$HardLineBreak;
		case 'CodeType':
			return $dillonkearns$elm_markdown$Markdown$Inline$CodeInline(match.text);
		case 'AutolinkType':
			var _v2 = _v1.a;
			var text = _v2.a;
			var url = _v2.b;
			return A3(
				$dillonkearns$elm_markdown$Markdown$Inline$Link,
				url,
				$elm$core$Maybe$Nothing,
				_List_fromArray(
					[
						$dillonkearns$elm_markdown$Markdown$Inline$Text(text)
					]));
		case 'LinkType':
			var _v3 = _v1.a;
			var url = _v3.a;
			var maybeTitle = _v3.b;
			return A3(
				$dillonkearns$elm_markdown$Markdown$Inline$Link,
				url,
				maybeTitle,
				$dillonkearns$elm_markdown$Markdown$InlineParser$matchesToInlines(match.matches));
		case 'ImageType':
			var _v4 = _v1.a;
			var url = _v4.a;
			var maybeTitle = _v4.b;
			return A3(
				$dillonkearns$elm_markdown$Markdown$Inline$Image,
				url,
				maybeTitle,
				$dillonkearns$elm_markdown$Markdown$InlineParser$matchesToInlines(match.matches));
		case 'HtmlType':
			var model = _v1.a;
			return $dillonkearns$elm_markdown$Markdown$Inline$HtmlInline(model);
		case 'EmphasisType':
			var length = _v1.a;
			return A2(
				$dillonkearns$elm_markdown$Markdown$Inline$Emphasis,
				length,
				$dillonkearns$elm_markdown$Markdown$InlineParser$matchesToInlines(match.matches));
		default:
			return $dillonkearns$elm_markdown$Markdown$Inline$Strikethrough(
				$dillonkearns$elm_markdown$Markdown$InlineParser$matchesToInlines(match.matches));
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$matchesToInlines = function (matches) {
	return A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$InlineParser$matchToInline, matches);
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$Match = function (a) {
	return {$: 'Match', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$prepareChildMatch = F2(
	function (parentMatch, childMatch) {
		return $dillonkearns$elm_markdown$Markdown$InlineParser$Match(
			{end: childMatch.end - parentMatch.textStart, matches: childMatch.matches, start: childMatch.start - parentMatch.textStart, text: childMatch.text, textEnd: childMatch.textEnd - parentMatch.textStart, textStart: childMatch.textStart - parentMatch.textStart, type_: childMatch.type_});
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$addChild = F2(
	function (parentMatch, childMatch) {
		return $dillonkearns$elm_markdown$Markdown$InlineParser$Match(
			{
				end: parentMatch.end,
				matches: A2(
					$elm$core$List$cons,
					A2($dillonkearns$elm_markdown$Markdown$InlineParser$prepareChildMatch, parentMatch, childMatch),
					parentMatch.matches),
				start: parentMatch.start,
				text: parentMatch.text,
				textEnd: parentMatch.textEnd,
				textStart: parentMatch.textStart,
				type_: parentMatch.type_
			});
	});
var $elm$core$List$sortBy = _List_sortBy;
var $dillonkearns$elm_markdown$Markdown$InlineParser$organizeChildren = function (_v4) {
	var match = _v4.a;
	return $dillonkearns$elm_markdown$Markdown$InlineParser$Match(
		{
			end: match.end,
			matches: $dillonkearns$elm_markdown$Markdown$InlineParser$organizeMatches(match.matches),
			start: match.start,
			text: match.text,
			textEnd: match.textEnd,
			textStart: match.textStart,
			type_: match.type_
		});
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$organizeMatches = function (matches) {
	var _v2 = A2(
		$elm$core$List$sortBy,
		function (_v3) {
			var match = _v3.a;
			return match.start;
		},
		matches);
	if (!_v2.b) {
		return _List_Nil;
	} else {
		var first = _v2.a;
		var rest = _v2.b;
		return A3($dillonkearns$elm_markdown$Markdown$InlineParser$organizeMatchesHelp, rest, first, _List_Nil);
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$organizeMatchesHelp = F3(
	function (remaining, _v0, matchesTail) {
		organizeMatchesHelp:
		while (true) {
			var prevMatch = _v0.a;
			if (!remaining.b) {
				return A2(
					$elm$core$List$cons,
					$dillonkearns$elm_markdown$Markdown$InlineParser$organizeChildren(
						$dillonkearns$elm_markdown$Markdown$InlineParser$Match(prevMatch)),
					matchesTail);
			} else {
				var match = remaining.a.a;
				var rest = remaining.b;
				if (_Utils_cmp(prevMatch.end, match.start) < 1) {
					var $temp$remaining = rest,
						$temp$_v0 = $dillonkearns$elm_markdown$Markdown$InlineParser$Match(match),
						$temp$matchesTail = A2(
						$elm$core$List$cons,
						$dillonkearns$elm_markdown$Markdown$InlineParser$organizeChildren(
							$dillonkearns$elm_markdown$Markdown$InlineParser$Match(prevMatch)),
						matchesTail);
					remaining = $temp$remaining;
					_v0 = $temp$_v0;
					matchesTail = $temp$matchesTail;
					continue organizeMatchesHelp;
				} else {
					if ((_Utils_cmp(prevMatch.start, match.start) < 0) && (_Utils_cmp(prevMatch.end, match.end) > 0)) {
						var $temp$remaining = rest,
							$temp$_v0 = A2($dillonkearns$elm_markdown$Markdown$InlineParser$addChild, prevMatch, match),
							$temp$matchesTail = matchesTail;
						remaining = $temp$remaining;
						_v0 = $temp$_v0;
						matchesTail = $temp$matchesTail;
						continue organizeMatchesHelp;
					} else {
						var $temp$remaining = rest,
							$temp$_v0 = $dillonkearns$elm_markdown$Markdown$InlineParser$Match(prevMatch),
							$temp$matchesTail = matchesTail;
						remaining = $temp$remaining;
						_v0 = $temp$_v0;
						matchesTail = $temp$matchesTail;
						continue organizeMatchesHelp;
					}
				}
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$NormalType = {$: 'NormalType'};
var $dillonkearns$elm_markdown$Markdown$Helpers$containsAmpersand = function (string) {
	return A2($elm$core$String$contains, '&', string);
};
var $dillonkearns$elm_markdown$Markdown$Entity$decimalRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('&#([0-9]{1,8});'));
var $elm$core$Basics$modBy = _Basics_modBy;
var $dillonkearns$elm_markdown$Markdown$Entity$isBadEndUnicode = function (_int) {
	var remain_ = A2($elm$core$Basics$modBy, 16, _int);
	var remain = A2($elm$core$Basics$modBy, 131070, _int);
	return (_int >= 131070) && ((((0 <= remain) && (remain <= 15)) || ((65536 <= remain) && (remain <= 65551))) && ((remain_ === 14) || (remain_ === 15)));
};
var $dillonkearns$elm_markdown$Markdown$Entity$isValidUnicode = function (_int) {
	return (_int === 9) || ((_int === 10) || ((_int === 13) || ((_int === 133) || (((32 <= _int) && (_int <= 126)) || (((160 <= _int) && (_int <= 55295)) || (((57344 <= _int) && (_int <= 64975)) || (((65008 <= _int) && (_int <= 65533)) || ((65536 <= _int) && (_int <= 1114109)))))))));
};
var $dillonkearns$elm_markdown$Markdown$Entity$validUnicode = function (_int) {
	return ($dillonkearns$elm_markdown$Markdown$Entity$isValidUnicode(_int) && (!$dillonkearns$elm_markdown$Markdown$Entity$isBadEndUnicode(_int))) ? $elm$core$String$fromChar(
		$elm$core$Char$fromCode(_int)) : $elm$core$String$fromChar(
		$elm$core$Char$fromCode(65533));
};
var $dillonkearns$elm_markdown$Markdown$Entity$replaceDecimal = function (match) {
	var _v0 = match.submatches;
	if (_v0.b && (_v0.a.$ === 'Just')) {
		var first = _v0.a.a;
		var _v1 = $elm$core$String$toInt(first);
		if (_v1.$ === 'Just') {
			var v = _v1.a;
			return $dillonkearns$elm_markdown$Markdown$Entity$validUnicode(v);
		} else {
			return match.match;
		}
	} else {
		return match.match;
	}
};
var $dillonkearns$elm_markdown$Markdown$Entity$replaceDecimals = A2($elm$regex$Regex$replace, $dillonkearns$elm_markdown$Markdown$Entity$decimalRegex, $dillonkearns$elm_markdown$Markdown$Entity$replaceDecimal);
var $dillonkearns$elm_markdown$Markdown$Entity$entitiesRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('&([0-9a-zA-Z]+);'));
var $dillonkearns$elm_markdown$Markdown$Entity$entities = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2('quot', 34),
			_Utils_Tuple2('amp', 38),
			_Utils_Tuple2('apos', 39),
			_Utils_Tuple2('lt', 60),
			_Utils_Tuple2('gt', 62),
			_Utils_Tuple2('nbsp', 160),
			_Utils_Tuple2('iexcl', 161),
			_Utils_Tuple2('cent', 162),
			_Utils_Tuple2('pound', 163),
			_Utils_Tuple2('curren', 164),
			_Utils_Tuple2('yen', 165),
			_Utils_Tuple2('brvbar', 166),
			_Utils_Tuple2('sect', 167),
			_Utils_Tuple2('uml', 168),
			_Utils_Tuple2('copy', 169),
			_Utils_Tuple2('ordf', 170),
			_Utils_Tuple2('laquo', 171),
			_Utils_Tuple2('not', 172),
			_Utils_Tuple2('shy', 173),
			_Utils_Tuple2('reg', 174),
			_Utils_Tuple2('macr', 175),
			_Utils_Tuple2('deg', 176),
			_Utils_Tuple2('plusmn', 177),
			_Utils_Tuple2('sup2', 178),
			_Utils_Tuple2('sup3', 179),
			_Utils_Tuple2('acute', 180),
			_Utils_Tuple2('micro', 181),
			_Utils_Tuple2('para', 182),
			_Utils_Tuple2('middot', 183),
			_Utils_Tuple2('cedil', 184),
			_Utils_Tuple2('sup1', 185),
			_Utils_Tuple2('ordm', 186),
			_Utils_Tuple2('raquo', 187),
			_Utils_Tuple2('frac14', 188),
			_Utils_Tuple2('frac12', 189),
			_Utils_Tuple2('frac34', 190),
			_Utils_Tuple2('iquest', 191),
			_Utils_Tuple2('Agrave', 192),
			_Utils_Tuple2('Aacute', 193),
			_Utils_Tuple2('Acirc', 194),
			_Utils_Tuple2('Atilde', 195),
			_Utils_Tuple2('Auml', 196),
			_Utils_Tuple2('Aring', 197),
			_Utils_Tuple2('AElig', 198),
			_Utils_Tuple2('Ccedil', 199),
			_Utils_Tuple2('Egrave', 200),
			_Utils_Tuple2('Eacute', 201),
			_Utils_Tuple2('Ecirc', 202),
			_Utils_Tuple2('Euml', 203),
			_Utils_Tuple2('Igrave', 204),
			_Utils_Tuple2('Iacute', 205),
			_Utils_Tuple2('Icirc', 206),
			_Utils_Tuple2('Iuml', 207),
			_Utils_Tuple2('ETH', 208),
			_Utils_Tuple2('Ntilde', 209),
			_Utils_Tuple2('Ograve', 210),
			_Utils_Tuple2('Oacute', 211),
			_Utils_Tuple2('Ocirc', 212),
			_Utils_Tuple2('Otilde', 213),
			_Utils_Tuple2('Ouml', 214),
			_Utils_Tuple2('times', 215),
			_Utils_Tuple2('Oslash', 216),
			_Utils_Tuple2('Ugrave', 217),
			_Utils_Tuple2('Uacute', 218),
			_Utils_Tuple2('Ucirc', 219),
			_Utils_Tuple2('Uuml', 220),
			_Utils_Tuple2('Yacute', 221),
			_Utils_Tuple2('THORN', 222),
			_Utils_Tuple2('szlig', 223),
			_Utils_Tuple2('agrave', 224),
			_Utils_Tuple2('aacute', 225),
			_Utils_Tuple2('acirc', 226),
			_Utils_Tuple2('atilde', 227),
			_Utils_Tuple2('auml', 228),
			_Utils_Tuple2('aring', 229),
			_Utils_Tuple2('aelig', 230),
			_Utils_Tuple2('ccedil', 231),
			_Utils_Tuple2('egrave', 232),
			_Utils_Tuple2('eacute', 233),
			_Utils_Tuple2('ecirc', 234),
			_Utils_Tuple2('euml', 235),
			_Utils_Tuple2('igrave', 236),
			_Utils_Tuple2('iacute', 237),
			_Utils_Tuple2('icirc', 238),
			_Utils_Tuple2('iuml', 239),
			_Utils_Tuple2('eth', 240),
			_Utils_Tuple2('ntilde', 241),
			_Utils_Tuple2('ograve', 242),
			_Utils_Tuple2('oacute', 243),
			_Utils_Tuple2('ocirc', 244),
			_Utils_Tuple2('otilde', 245),
			_Utils_Tuple2('ouml', 246),
			_Utils_Tuple2('divide', 247),
			_Utils_Tuple2('oslash', 248),
			_Utils_Tuple2('ugrave', 249),
			_Utils_Tuple2('uacute', 250),
			_Utils_Tuple2('ucirc', 251),
			_Utils_Tuple2('uuml', 252),
			_Utils_Tuple2('yacute', 253),
			_Utils_Tuple2('thorn', 254),
			_Utils_Tuple2('yuml', 255),
			_Utils_Tuple2('OElig', 338),
			_Utils_Tuple2('oelig', 339),
			_Utils_Tuple2('Scaron', 352),
			_Utils_Tuple2('scaron', 353),
			_Utils_Tuple2('Yuml', 376),
			_Utils_Tuple2('fnof', 402),
			_Utils_Tuple2('circ', 710),
			_Utils_Tuple2('tilde', 732),
			_Utils_Tuple2('Alpha', 913),
			_Utils_Tuple2('Beta', 914),
			_Utils_Tuple2('Gamma', 915),
			_Utils_Tuple2('Delta', 916),
			_Utils_Tuple2('Epsilon', 917),
			_Utils_Tuple2('Zeta', 918),
			_Utils_Tuple2('Eta', 919),
			_Utils_Tuple2('Theta', 920),
			_Utils_Tuple2('Iota', 921),
			_Utils_Tuple2('Kappa', 922),
			_Utils_Tuple2('Lambda', 923),
			_Utils_Tuple2('Mu', 924),
			_Utils_Tuple2('Nu', 925),
			_Utils_Tuple2('Xi', 926),
			_Utils_Tuple2('Omicron', 927),
			_Utils_Tuple2('Pi', 928),
			_Utils_Tuple2('Rho', 929),
			_Utils_Tuple2('Sigma', 931),
			_Utils_Tuple2('Tau', 932),
			_Utils_Tuple2('Upsilon', 933),
			_Utils_Tuple2('Phi', 934),
			_Utils_Tuple2('Chi', 935),
			_Utils_Tuple2('Psi', 936),
			_Utils_Tuple2('Omega', 937),
			_Utils_Tuple2('alpha', 945),
			_Utils_Tuple2('beta', 946),
			_Utils_Tuple2('gamma', 947),
			_Utils_Tuple2('delta', 948),
			_Utils_Tuple2('epsilon', 949),
			_Utils_Tuple2('zeta', 950),
			_Utils_Tuple2('eta', 951),
			_Utils_Tuple2('theta', 952),
			_Utils_Tuple2('iota', 953),
			_Utils_Tuple2('kappa', 954),
			_Utils_Tuple2('lambda', 955),
			_Utils_Tuple2('mu', 956),
			_Utils_Tuple2('nu', 957),
			_Utils_Tuple2('xi', 958),
			_Utils_Tuple2('omicron', 959),
			_Utils_Tuple2('pi', 960),
			_Utils_Tuple2('rho', 961),
			_Utils_Tuple2('sigmaf', 962),
			_Utils_Tuple2('sigma', 963),
			_Utils_Tuple2('tau', 964),
			_Utils_Tuple2('upsilon', 965),
			_Utils_Tuple2('phi', 966),
			_Utils_Tuple2('chi', 967),
			_Utils_Tuple2('psi', 968),
			_Utils_Tuple2('omega', 969),
			_Utils_Tuple2('thetasym', 977),
			_Utils_Tuple2('upsih', 978),
			_Utils_Tuple2('piv', 982),
			_Utils_Tuple2('ensp', 8194),
			_Utils_Tuple2('emsp', 8195),
			_Utils_Tuple2('thinsp', 8201),
			_Utils_Tuple2('zwnj', 8204),
			_Utils_Tuple2('zwj', 8205),
			_Utils_Tuple2('lrm', 8206),
			_Utils_Tuple2('rlm', 8207),
			_Utils_Tuple2('ndash', 8211),
			_Utils_Tuple2('mdash', 8212),
			_Utils_Tuple2('lsquo', 8216),
			_Utils_Tuple2('rsquo', 8217),
			_Utils_Tuple2('sbquo', 8218),
			_Utils_Tuple2('ldquo', 8220),
			_Utils_Tuple2('rdquo', 8221),
			_Utils_Tuple2('bdquo', 8222),
			_Utils_Tuple2('dagger', 8224),
			_Utils_Tuple2('Dagger', 8225),
			_Utils_Tuple2('bull', 8226),
			_Utils_Tuple2('hellip', 8230),
			_Utils_Tuple2('permil', 8240),
			_Utils_Tuple2('prime', 8242),
			_Utils_Tuple2('Prime', 8243),
			_Utils_Tuple2('lsaquo', 8249),
			_Utils_Tuple2('rsaquo', 8250),
			_Utils_Tuple2('oline', 8254),
			_Utils_Tuple2('frasl', 8260),
			_Utils_Tuple2('euro', 8364),
			_Utils_Tuple2('image', 8465),
			_Utils_Tuple2('weierp', 8472),
			_Utils_Tuple2('real', 8476),
			_Utils_Tuple2('trade', 8482),
			_Utils_Tuple2('alefsym', 8501),
			_Utils_Tuple2('larr', 8592),
			_Utils_Tuple2('uarr', 8593),
			_Utils_Tuple2('rarr', 8594),
			_Utils_Tuple2('darr', 8595),
			_Utils_Tuple2('harr', 8596),
			_Utils_Tuple2('crarr', 8629),
			_Utils_Tuple2('lArr', 8656),
			_Utils_Tuple2('uArr', 8657),
			_Utils_Tuple2('rArr', 8658),
			_Utils_Tuple2('dArr', 8659),
			_Utils_Tuple2('hArr', 8660),
			_Utils_Tuple2('forall', 8704),
			_Utils_Tuple2('part', 8706),
			_Utils_Tuple2('exist', 8707),
			_Utils_Tuple2('empty', 8709),
			_Utils_Tuple2('nabla', 8711),
			_Utils_Tuple2('isin', 8712),
			_Utils_Tuple2('notin', 8713),
			_Utils_Tuple2('ni', 8715),
			_Utils_Tuple2('prod', 8719),
			_Utils_Tuple2('sum', 8721),
			_Utils_Tuple2('minus', 8722),
			_Utils_Tuple2('lowast', 8727),
			_Utils_Tuple2('radic', 8730),
			_Utils_Tuple2('prop', 8733),
			_Utils_Tuple2('infin', 8734),
			_Utils_Tuple2('ang', 8736),
			_Utils_Tuple2('and', 8743),
			_Utils_Tuple2('or', 8744),
			_Utils_Tuple2('cap', 8745),
			_Utils_Tuple2('cup', 8746),
			_Utils_Tuple2('int', 8747),
			_Utils_Tuple2('there4', 8756),
			_Utils_Tuple2('sim', 8764),
			_Utils_Tuple2('cong', 8773),
			_Utils_Tuple2('asymp', 8776),
			_Utils_Tuple2('ne', 8800),
			_Utils_Tuple2('equiv', 8801),
			_Utils_Tuple2('le', 8804),
			_Utils_Tuple2('ge', 8805),
			_Utils_Tuple2('sub', 8834),
			_Utils_Tuple2('sup', 8835),
			_Utils_Tuple2('nsub', 8836),
			_Utils_Tuple2('sube', 8838),
			_Utils_Tuple2('supe', 8839),
			_Utils_Tuple2('oplus', 8853),
			_Utils_Tuple2('otimes', 8855),
			_Utils_Tuple2('perp', 8869),
			_Utils_Tuple2('sdot', 8901),
			_Utils_Tuple2('lceil', 8968),
			_Utils_Tuple2('rceil', 8969),
			_Utils_Tuple2('lfloor', 8970),
			_Utils_Tuple2('rfloor', 8971),
			_Utils_Tuple2('lang', 9001),
			_Utils_Tuple2('rang', 9002),
			_Utils_Tuple2('loz', 9674),
			_Utils_Tuple2('spades', 9824),
			_Utils_Tuple2('clubs', 9827),
			_Utils_Tuple2('hearts', 9829),
			_Utils_Tuple2('diams', 9830)
		]));
var $dillonkearns$elm_markdown$Markdown$Entity$replaceEntity = function (match) {
	var _v0 = match.submatches;
	if (_v0.b && (_v0.a.$ === 'Just')) {
		var first = _v0.a.a;
		var _v1 = A2($elm$core$Dict$get, first, $dillonkearns$elm_markdown$Markdown$Entity$entities);
		if (_v1.$ === 'Just') {
			var code = _v1.a;
			return $elm$core$String$fromChar(
				$elm$core$Char$fromCode(code));
		} else {
			return match.match;
		}
	} else {
		return match.match;
	}
};
var $dillonkearns$elm_markdown$Markdown$Entity$replaceEntities = A2($elm$regex$Regex$replace, $dillonkearns$elm_markdown$Markdown$Entity$entitiesRegex, $dillonkearns$elm_markdown$Markdown$Entity$replaceEntity);
var $dillonkearns$elm_markdown$Markdown$Helpers$escapableRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\+)([!\"#$%&\\\'()*+,./:;<=>?@[\\\\\\]^_`{|}~-])'));
var $dillonkearns$elm_markdown$Markdown$Helpers$replaceEscapable = A2(
	$elm$regex$Regex$replace,
	$dillonkearns$elm_markdown$Markdown$Helpers$escapableRegex,
	function (regexMatch) {
		var _v0 = regexMatch.submatches;
		if (((_v0.b && (_v0.a.$ === 'Just')) && _v0.b.b) && (_v0.b.a.$ === 'Just')) {
			var backslashes = _v0.a.a;
			var _v1 = _v0.b;
			var escapedStr = _v1.a.a;
			return _Utils_ap(
				A2(
					$elm$core$String$repeat,
					($elm$core$String$length(backslashes) / 2) | 0,
					'\\'),
				escapedStr);
		} else {
			return regexMatch.match;
		}
	});
var $dillonkearns$elm_markdown$Markdown$Entity$hexadecimalRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('&#[Xx]([0-9a-fA-F]{1,8});'));
var $elm$core$String$foldl = _String_foldl;
var $dillonkearns$elm_markdown$Markdown$Entity$hexToInt = function (string) {
	var folder = F2(
		function (hexDigit, _int) {
			return ((_int * 16) + A2(
				$elm$core$Basics$modBy,
				39,
				$elm$core$Char$toCode(hexDigit))) - 9;
		});
	return A3(
		$elm$core$String$foldl,
		folder,
		0,
		$elm$core$String$toLower(string));
};
var $dillonkearns$elm_markdown$Markdown$Entity$replaceHexadecimal = function (match) {
	var _v0 = match.submatches;
	if (_v0.b && (_v0.a.$ === 'Just')) {
		var first = _v0.a.a;
		return $dillonkearns$elm_markdown$Markdown$Entity$validUnicode(
			$dillonkearns$elm_markdown$Markdown$Entity$hexToInt(first));
	} else {
		return match.match;
	}
};
var $dillonkearns$elm_markdown$Markdown$Entity$replaceHexadecimals = A2($elm$regex$Regex$replace, $dillonkearns$elm_markdown$Markdown$Entity$hexadecimalRegex, $dillonkearns$elm_markdown$Markdown$Entity$replaceHexadecimal);
var $dillonkearns$elm_markdown$Markdown$Helpers$formatStr = function (str) {
	var withEscapes = $dillonkearns$elm_markdown$Markdown$Helpers$replaceEscapable(str);
	return $dillonkearns$elm_markdown$Markdown$Helpers$containsAmpersand(withEscapes) ? $dillonkearns$elm_markdown$Markdown$Entity$replaceHexadecimals(
		$dillonkearns$elm_markdown$Markdown$Entity$replaceDecimals(
			$dillonkearns$elm_markdown$Markdown$Entity$replaceEntities(withEscapes))) : withEscapes;
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$normalMatch = function (text) {
	return $dillonkearns$elm_markdown$Markdown$InlineParser$Match(
		{
			end: 0,
			matches: _List_Nil,
			start: 0,
			text: $dillonkearns$elm_markdown$Markdown$Helpers$formatStr(text),
			textEnd: 0,
			textStart: 0,
			type_: $dillonkearns$elm_markdown$Markdown$InlineParser$NormalType
		});
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$parseTextMatch = F3(
	function (rawText, _v2, parsedMatches) {
		var matchModel = _v2.a;
		var updtMatch = $dillonkearns$elm_markdown$Markdown$InlineParser$Match(
			{
				end: matchModel.end,
				matches: A3($dillonkearns$elm_markdown$Markdown$InlineParser$parseTextMatches, matchModel.text, _List_Nil, matchModel.matches),
				start: matchModel.start,
				text: matchModel.text,
				textEnd: matchModel.textEnd,
				textStart: matchModel.textStart,
				type_: matchModel.type_
			});
		if (!parsedMatches.b) {
			var finalStr = A2($elm$core$String$dropLeft, matchModel.end, rawText);
			return $elm$core$String$isEmpty(finalStr) ? _List_fromArray(
				[updtMatch]) : _List_fromArray(
				[
					updtMatch,
					$dillonkearns$elm_markdown$Markdown$InlineParser$normalMatch(finalStr)
				]);
		} else {
			var matchHead = parsedMatches.a.a;
			var matchesTail = parsedMatches.b;
			var _v4 = matchHead.type_;
			if (_v4.$ === 'NormalType') {
				return A2($elm$core$List$cons, updtMatch, parsedMatches);
			} else {
				return _Utils_eq(matchModel.end, matchHead.start) ? A2($elm$core$List$cons, updtMatch, parsedMatches) : ((_Utils_cmp(matchModel.end, matchHead.start) < 0) ? A2(
					$elm$core$List$cons,
					updtMatch,
					A2(
						$elm$core$List$cons,
						$dillonkearns$elm_markdown$Markdown$InlineParser$normalMatch(
							A3($elm$core$String$slice, matchModel.end, matchHead.start, rawText)),
						parsedMatches)) : parsedMatches);
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$parseTextMatches = F3(
	function (rawText, parsedMatches, matches) {
		parseTextMatches:
		while (true) {
			if (!matches.b) {
				if (!parsedMatches.b) {
					return $elm$core$String$isEmpty(rawText) ? _List_Nil : _List_fromArray(
						[
							$dillonkearns$elm_markdown$Markdown$InlineParser$normalMatch(rawText)
						]);
				} else {
					var matchModel = parsedMatches.a.a;
					return (matchModel.start > 0) ? A2(
						$elm$core$List$cons,
						$dillonkearns$elm_markdown$Markdown$InlineParser$normalMatch(
							A2($elm$core$String$left, matchModel.start, rawText)),
						parsedMatches) : parsedMatches;
				}
			} else {
				var match = matches.a;
				var matchesTail = matches.b;
				var $temp$rawText = rawText,
					$temp$parsedMatches = A3($dillonkearns$elm_markdown$Markdown$InlineParser$parseTextMatch, rawText, match, parsedMatches),
					$temp$matches = matchesTail;
				rawText = $temp$rawText;
				parsedMatches = $temp$parsedMatches;
				matches = $temp$matches;
				continue parseTextMatches;
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$angleBracketLTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)(\\<)'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$AngleBracketOpen = {$: 'AngleBracketOpen'};
var $dillonkearns$elm_markdown$Markdown$Helpers$isEven = function (_int) {
	return !A2($elm$core$Basics$modBy, 2, _int);
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToAngleBracketLToken = function (regMatch) {
	var _v0 = regMatch.submatches;
	if ((_v0.b && _v0.b.b) && (_v0.b.a.$ === 'Just')) {
		var maybeBackslashes = _v0.a;
		var _v1 = _v0.b;
		var delimiter = _v1.a.a;
		var backslashesLength = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm$core$Maybe$map, $elm$core$String$length, maybeBackslashes));
		return $dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength) ? $elm$core$Maybe$Just(
			{index: regMatch.index + backslashesLength, length: 1, meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$AngleBracketOpen}) : $elm$core$Maybe$Nothing;
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$findAngleBracketLTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		$dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToAngleBracketLToken,
		A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$angleBracketLTokenRegex, str));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$angleBracketRTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)(\\>)'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$AngleBracketClose = function (a) {
	return {$: 'AngleBracketClose', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$Escaped = {$: 'Escaped'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$NotEscaped = {$: 'NotEscaped'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToAngleBracketRToken = function (regMatch) {
	var _v0 = regMatch.submatches;
	if ((_v0.b && _v0.b.b) && (_v0.b.a.$ === 'Just')) {
		var maybeBackslashes = _v0.a;
		var _v1 = _v0.b;
		var backslashesLength = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm$core$Maybe$map, $elm$core$String$length, maybeBackslashes));
		return $elm$core$Maybe$Just(
			{
				index: regMatch.index + backslashesLength,
				length: 1,
				meaning: $dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength) ? $dillonkearns$elm_markdown$Markdown$InlineParser$AngleBracketClose($dillonkearns$elm_markdown$Markdown$InlineParser$NotEscaped) : $dillonkearns$elm_markdown$Markdown$InlineParser$AngleBracketClose($dillonkearns$elm_markdown$Markdown$InlineParser$Escaped)
			});
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$findAngleBracketRTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		$dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToAngleBracketRToken,
		A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$angleBracketRTokenRegex, str));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$asteriskEmphasisTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)([^*])?(\\*+)([^*])?'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$EmphasisToken = F2(
	function (a, b) {
		return {$: 'EmphasisToken', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$isPunctuation = function (c) {
	switch (c.valueOf()) {
		case '!':
			return true;
		case '\"':
			return true;
		case '#':
			return true;
		case '%':
			return true;
		case '&':
			return true;
		case '\'':
			return true;
		case '(':
			return true;
		case ')':
			return true;
		case '*':
			return true;
		case ',':
			return true;
		case '-':
			return true;
		case '.':
			return true;
		case '/':
			return true;
		case ':':
			return true;
		case ';':
			return true;
		case '?':
			return true;
		case '@':
			return true;
		case '[':
			return true;
		case ']':
			return true;
		case '_':
			return true;
		case '{':
			return true;
		case '}':
			return true;
		case '~':
			return true;
		default:
			return false;
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$containPunctuation = A2(
	$elm$core$String$foldl,
	F2(
		function (c, accum) {
			return accum || $dillonkearns$elm_markdown$Markdown$InlineParser$isPunctuation(c);
		}),
	false);
var $dillonkearns$elm_markdown$Markdown$InlineParser$isWhitespace = function (c) {
	switch (c.valueOf()) {
		case ' ':
			return true;
		case '\u000C':
			return true;
		case '\n':
			return true;
		case '\r':
			return true;
		case '\t':
			return true;
		case '\u000B':
			return true;
		case '\u00A0':
			return true;
		case '\u2028':
			return true;
		case '\u2029':
			return true;
		default:
			return false;
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$containSpace = A2(
	$elm$core$String$foldl,
	F2(
		function (c, accum) {
			return accum || $dillonkearns$elm_markdown$Markdown$InlineParser$isWhitespace(c);
		}),
	false);
var $dillonkearns$elm_markdown$Markdown$InlineParser$getFringeRank = function (mstring) {
	if (mstring.$ === 'Just') {
		var string = mstring.a;
		return ($elm$core$String$isEmpty(string) || $dillonkearns$elm_markdown$Markdown$InlineParser$containSpace(string)) ? 0 : ($dillonkearns$elm_markdown$Markdown$InlineParser$containPunctuation(string) ? 1 : 2);
	} else {
		return 0;
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToEmphasisToken = F3(
	function (_char, rawText, regMatch) {
		var _v0 = regMatch.submatches;
		if ((((_v0.b && _v0.b.b) && _v0.b.b.b) && (_v0.b.b.a.$ === 'Just')) && _v0.b.b.b.b) {
			var maybeBackslashes = _v0.a;
			var _v1 = _v0.b;
			var maybeLeftFringe = _v1.a;
			var _v2 = _v1.b;
			var delimiter = _v2.a.a;
			var _v3 = _v2.b;
			var maybeRightFringe = _v3.a;
			var rFringeRank = $dillonkearns$elm_markdown$Markdown$InlineParser$getFringeRank(maybeRightFringe);
			var leftFringeLength = function () {
				if (maybeLeftFringe.$ === 'Just') {
					var left = maybeLeftFringe.a;
					return $elm$core$String$length(left);
				} else {
					return 0;
				}
			}();
			var mLeftFringe = ((!(!regMatch.index)) && (!leftFringeLength)) ? $elm$core$Maybe$Just(
				A3($elm$core$String$slice, regMatch.index - 1, regMatch.index, rawText)) : maybeLeftFringe;
			var backslashesLength = function () {
				if (maybeBackslashes.$ === 'Just') {
					var backslashes = maybeBackslashes.a;
					return $elm$core$String$length(backslashes);
				} else {
					return 0;
				}
			}();
			var isEscaped = ((!$dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength)) && (!leftFringeLength)) || function () {
				if ((mLeftFringe.$ === 'Just') && (mLeftFringe.a === '\\')) {
					return true;
				} else {
					return false;
				}
			}();
			var delimiterLength = isEscaped ? ($elm$core$String$length(delimiter) - 1) : $elm$core$String$length(delimiter);
			var lFringeRank = isEscaped ? 1 : $dillonkearns$elm_markdown$Markdown$InlineParser$getFringeRank(mLeftFringe);
			if ((delimiterLength <= 0) || (_Utils_eq(
				_char,
				_Utils_chr('_')) && ((lFringeRank === 2) && (rFringeRank === 2)))) {
				return $elm$core$Maybe$Nothing;
			} else {
				var index = ((regMatch.index + backslashesLength) + leftFringeLength) + (isEscaped ? 1 : 0);
				return $elm$core$Maybe$Just(
					{
						index: index,
						length: delimiterLength,
						meaning: A2(
							$dillonkearns$elm_markdown$Markdown$InlineParser$EmphasisToken,
							_char,
							{leftFringeRank: lFringeRank, rightFringeRank: rFringeRank})
					});
			}
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$findAsteriskEmphasisTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		A2(
			$dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToEmphasisToken,
			_Utils_chr('*'),
			str),
		A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$asteriskEmphasisTokenRegex, str));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$codeTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)(\\`+)'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$CodeToken = function (a) {
	return {$: 'CodeToken', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToCodeToken = function (regMatch) {
	var _v0 = regMatch.submatches;
	if ((_v0.b && _v0.b.b) && (_v0.b.a.$ === 'Just')) {
		var maybeBackslashes = _v0.a;
		var _v1 = _v0.b;
		var backtick = _v1.a.a;
		var backslashesLength = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm$core$Maybe$map, $elm$core$String$length, maybeBackslashes));
		return $elm$core$Maybe$Just(
			{
				index: regMatch.index + backslashesLength,
				length: $elm$core$String$length(backtick),
				meaning: $dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength) ? $dillonkearns$elm_markdown$Markdown$InlineParser$CodeToken($dillonkearns$elm_markdown$Markdown$InlineParser$NotEscaped) : $dillonkearns$elm_markdown$Markdown$InlineParser$CodeToken($dillonkearns$elm_markdown$Markdown$InlineParser$Escaped)
			});
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$findCodeTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		$dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToCodeToken,
		A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$codeTokenRegex, str));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$hardBreakTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(?:(\\\\+)|( {2,}))\\n'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakToken = {$: 'HardLineBreakToken'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToHardBreakToken = function (regMatch) {
	var _v0 = regMatch.submatches;
	_v0$2:
	while (true) {
		if (_v0.b) {
			if (_v0.a.$ === 'Just') {
				var backslashes = _v0.a.a;
				var backslashesLength = $elm$core$String$length(backslashes);
				return (!$dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength)) ? $elm$core$Maybe$Just(
					{index: (regMatch.index + backslashesLength) - 1, length: 2, meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakToken}) : $elm$core$Maybe$Nothing;
			} else {
				if (_v0.b.b && (_v0.b.a.$ === 'Just')) {
					var _v1 = _v0.b;
					return $elm$core$Maybe$Just(
						{
							index: regMatch.index,
							length: $elm$core$String$length(regMatch.match),
							meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakToken
						});
				} else {
					break _v0$2;
				}
			}
		} else {
			break _v0$2;
		}
	}
	return $elm$core$Maybe$Nothing;
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToSoftHardBreakToken = function (regMatch) {
	var _v0 = regMatch.submatches;
	_v0$2:
	while (true) {
		if (_v0.b) {
			if (_v0.a.$ === 'Just') {
				var backslashes = _v0.a.a;
				var backslashesLength = $elm$core$String$length(backslashes);
				return $dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength) ? $elm$core$Maybe$Just(
					{index: regMatch.index + backslashesLength, length: 1, meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakToken}) : $elm$core$Maybe$Just(
					{index: (regMatch.index + backslashesLength) - 1, length: 2, meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakToken});
			} else {
				if (_v0.b.b) {
					var _v1 = _v0.b;
					var maybeSpaces = _v1.a;
					return $elm$core$Maybe$Just(
						{
							index: regMatch.index,
							length: $elm$core$String$length(regMatch.match),
							meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakToken
						});
				} else {
					break _v0$2;
				}
			}
		} else {
			break _v0$2;
		}
	}
	return $elm$core$Maybe$Nothing;
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$softAsHardLineBreak = false;
var $dillonkearns$elm_markdown$Markdown$InlineParser$softAsHardLineBreakTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(?:(\\\\+)|( *))\\n'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$findHardBreakTokens = function (str) {
	return $dillonkearns$elm_markdown$Markdown$InlineParser$softAsHardLineBreak ? A2(
		$elm$core$List$filterMap,
		$dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToSoftHardBreakToken,
		A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$softAsHardLineBreakTokenRegex, str)) : A2(
		$elm$core$List$filterMap,
		$dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToHardBreakToken,
		A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$hardBreakTokenRegex, str));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$linkImageCloseTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)(\\])'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$SquareBracketClose = {$: 'SquareBracketClose'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToLinkImageCloseToken = function (regMatch) {
	var _v0 = regMatch.submatches;
	if ((_v0.b && _v0.b.b) && (_v0.b.a.$ === 'Just')) {
		var maybeBackslashes = _v0.a;
		var _v1 = _v0.b;
		var backslashesLength = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm$core$Maybe$map, $elm$core$String$length, maybeBackslashes));
		return $dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength) ? $elm$core$Maybe$Just(
			{index: regMatch.index + backslashesLength, length: 1, meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$SquareBracketClose}) : $elm$core$Maybe$Nothing;
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$findLinkImageCloseTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		$dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToLinkImageCloseToken,
		A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$linkImageCloseTokenRegex, str));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$linkImageOpenTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)(\\!)?(\\[)'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$Active = {$: 'Active'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$ImageOpenToken = {$: 'ImageOpenToken'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$LinkOpenToken = function (a) {
	return {$: 'LinkOpenToken', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToLinkImageOpenToken = function (regMatch) {
	var _v0 = regMatch.submatches;
	if (((_v0.b && _v0.b.b) && _v0.b.b.b) && (_v0.b.b.a.$ === 'Just')) {
		var maybeBackslashes = _v0.a;
		var _v1 = _v0.b;
		var maybeImageOpen = _v1.a;
		var _v2 = _v1.b;
		var backslashesLength = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm$core$Maybe$map, $elm$core$String$length, maybeBackslashes));
		var isEscaped = !$dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength);
		var index = isEscaped ? ((regMatch.index + backslashesLength) + 1) : (regMatch.index + backslashesLength);
		if (isEscaped) {
			if (maybeImageOpen.$ === 'Just') {
				return $elm$core$Maybe$Just(
					{
						index: index,
						length: 1,
						meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$LinkOpenToken($dillonkearns$elm_markdown$Markdown$InlineParser$Active)
					});
			} else {
				return $elm$core$Maybe$Nothing;
			}
		} else {
			if (maybeImageOpen.$ === 'Just') {
				return $elm$core$Maybe$Just(
					{index: index, length: 2, meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$ImageOpenToken});
			} else {
				return $elm$core$Maybe$Just(
					{
						index: index,
						length: 1,
						meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$LinkOpenToken($dillonkearns$elm_markdown$Markdown$InlineParser$Active)
					});
			}
		}
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$findLinkImageOpenTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		$dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToLinkImageOpenToken,
		A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$linkImageOpenTokenRegex, str));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$StrikethroughToken = function (a) {
	return {$: 'StrikethroughToken', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToStrikethroughToken = function (regMatch) {
	var _v0 = regMatch.submatches;
	if ((_v0.b && _v0.b.b) && (_v0.b.a.$ === 'Just')) {
		var maybeBackslashes = _v0.a;
		var _v1 = _v0.b;
		var tilde = _v1.a.a;
		var backslashesLength = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm$core$Maybe$map, $elm$core$String$length, maybeBackslashes));
		var _v2 = $dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength) ? _Utils_Tuple2(
			$elm$core$String$length(tilde),
			$dillonkearns$elm_markdown$Markdown$InlineParser$StrikethroughToken($dillonkearns$elm_markdown$Markdown$InlineParser$NotEscaped)) : _Utils_Tuple2(
			$elm$core$String$length(tilde),
			$dillonkearns$elm_markdown$Markdown$InlineParser$StrikethroughToken($dillonkearns$elm_markdown$Markdown$InlineParser$Escaped));
		var length = _v2.a;
		var meaning = _v2.b;
		return $elm$core$Maybe$Just(
			{index: regMatch.index + backslashesLength, length: length, meaning: meaning});
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$strikethroughTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)(~{2,})([^~])?'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$findStrikethroughTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		$dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToStrikethroughToken,
		A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$strikethroughTokenRegex, str));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$underlineEmphasisTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)([^_])?(\\_+)([^_])?'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$findUnderlineEmphasisTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		A2(
			$dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToEmphasisToken,
			_Utils_chr('_'),
			str),
		A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$underlineEmphasisTokenRegex, str));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex = F2(
	function (left, right) {
		if (left.b) {
			var lfirst = left.a;
			var lrest = left.b;
			if (right.b) {
				var rfirst = right.a;
				var rrest = right.b;
				return (_Utils_cmp(lfirst.index, rfirst.index) < 0) ? A2(
					$elm$core$List$cons,
					lfirst,
					A2($dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex, lrest, right)) : A2(
					$elm$core$List$cons,
					rfirst,
					A2($dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex, left, rrest));
			} else {
				return left;
			}
		} else {
			return right;
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$tokenize = function (rawText) {
	return A2(
		$dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex,
		$dillonkearns$elm_markdown$Markdown$InlineParser$findAngleBracketRTokens(rawText),
		A2(
			$dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex,
			$dillonkearns$elm_markdown$Markdown$InlineParser$findAngleBracketLTokens(rawText),
			A2(
				$dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex,
				$dillonkearns$elm_markdown$Markdown$InlineParser$findHardBreakTokens(rawText),
				A2(
					$dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex,
					$dillonkearns$elm_markdown$Markdown$InlineParser$findLinkImageCloseTokens(rawText),
					A2(
						$dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex,
						$dillonkearns$elm_markdown$Markdown$InlineParser$findLinkImageOpenTokens(rawText),
						A2(
							$dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex,
							$dillonkearns$elm_markdown$Markdown$InlineParser$findStrikethroughTokens(rawText),
							A2(
								$dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex,
								$dillonkearns$elm_markdown$Markdown$InlineParser$findUnderlineEmphasisTokens(rawText),
								A2(
									$dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex,
									$dillonkearns$elm_markdown$Markdown$InlineParser$findAsteriskEmphasisTokens(rawText),
									$dillonkearns$elm_markdown$Markdown$InlineParser$findCodeTokens(rawText)))))))));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$CodeType = {$: 'CodeType'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$EmphasisType = function (a) {
	return {$: 'EmphasisType', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$HtmlType = function (a) {
	return {$: 'HtmlType', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$ImageType = function (a) {
	return {$: 'ImageType', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$Inactive = {$: 'Inactive'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$LinkType = function (a) {
	return {$: 'LinkType', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$StrikethroughType = {$: 'StrikethroughType'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$AutolinkType = function (a) {
	return {$: 'AutolinkType', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$decodeUrlRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('%(?:3B|2C|2F|3F|3A|40|26|3D|2B|24|23|25)'));
var $elm$url$Url$percentDecode = _Url_percentDecode;
var $elm$url$Url$percentEncode = _Url_percentEncode;
var $dillonkearns$elm_markdown$Markdown$InlineParser$encodeUrl = A2(
	$elm$core$Basics$composeR,
	$elm$url$Url$percentEncode,
	A2(
		$elm$regex$Regex$replace,
		$dillonkearns$elm_markdown$Markdown$InlineParser$decodeUrlRegex,
		function (match) {
			return A2(
				$elm$core$Maybe$withDefault,
				match.match,
				$elm$url$Url$percentDecode(match.match));
		}));
var $dillonkearns$elm_markdown$Markdown$InlineParser$urlRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^([A-Za-z][A-Za-z0-9.+\\-]{1,31}:[^<>\\x00-\\x20]*)$'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$autolinkToMatch = function (_v0) {
	var match = _v0.a;
	return A2($elm$regex$Regex$contains, $dillonkearns$elm_markdown$Markdown$InlineParser$urlRegex, match.text) ? $elm$core$Result$Ok(
		$dillonkearns$elm_markdown$Markdown$InlineParser$Match(
			_Utils_update(
				match,
				{
					type_: $dillonkearns$elm_markdown$Markdown$InlineParser$AutolinkType(
						_Utils_Tuple2(
							match.text,
							$dillonkearns$elm_markdown$Markdown$InlineParser$encodeUrl(match.text)))
				}))) : $elm$core$Result$Err(
		$dillonkearns$elm_markdown$Markdown$InlineParser$Match(match));
};
var $dillonkearns$elm_markdown$Markdown$Helpers$insideSquareBracketRegex = '[^\\[\\]\\\\]*(?:\\\\.[^\\[\\]\\\\]*)*';
var $dillonkearns$elm_markdown$Markdown$InlineParser$refLabelRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^\\[\\s*(' + ($dillonkearns$elm_markdown$Markdown$Helpers$insideSquareBracketRegex + ')\\s*\\]')));
var $dillonkearns$elm_markdown$Markdown$Helpers$cleanWhitespaces = function (original) {
	return original;
};
var $dillonkearns$elm_markdown$Markdown$Helpers$prepareRefLabel = A2($elm$core$Basics$composeR, $dillonkearns$elm_markdown$Markdown$Helpers$cleanWhitespaces, $elm$core$String$toLower);
var $dillonkearns$elm_markdown$Markdown$InlineParser$prepareUrlAndTitle = F2(
	function (rawUrl, maybeTitle) {
		return _Utils_Tuple2(
			$dillonkearns$elm_markdown$Markdown$InlineParser$encodeUrl(
				$dillonkearns$elm_markdown$Markdown$Helpers$formatStr(rawUrl)),
			A2($elm$core$Maybe$map, $dillonkearns$elm_markdown$Markdown$Helpers$formatStr, maybeTitle));
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$refRegexToMatch = F3(
	function (matchModel, references, maybeRegexMatch) {
		var refLabel = function (str) {
			return $elm$core$String$isEmpty(str) ? matchModel.text : str;
		}(
			A2(
				$elm$core$Maybe$withDefault,
				matchModel.text,
				A2(
					$elm$core$Maybe$withDefault,
					$elm$core$Maybe$Nothing,
					A2(
						$elm$core$Maybe$andThen,
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.submatches;
							},
							$elm$core$List$head),
						maybeRegexMatch))));
		var _v0 = A2(
			$elm$core$Dict$get,
			$dillonkearns$elm_markdown$Markdown$Helpers$prepareRefLabel(refLabel),
			references);
		if (_v0.$ === 'Nothing') {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v1 = _v0.a;
			var rawUrl = _v1.a;
			var maybeTitle = _v1.b;
			var type_ = function () {
				var _v3 = matchModel.type_;
				if (_v3.$ === 'ImageType') {
					return $dillonkearns$elm_markdown$Markdown$InlineParser$ImageType(
						A2($dillonkearns$elm_markdown$Markdown$InlineParser$prepareUrlAndTitle, rawUrl, maybeTitle));
				} else {
					return $dillonkearns$elm_markdown$Markdown$InlineParser$LinkType(
						A2($dillonkearns$elm_markdown$Markdown$InlineParser$prepareUrlAndTitle, rawUrl, maybeTitle));
				}
			}();
			var regexMatchLength = function () {
				if (maybeRegexMatch.$ === 'Just') {
					var match = maybeRegexMatch.a.match;
					return $elm$core$String$length(match);
				} else {
					return 0;
				}
			}();
			return $elm$core$Maybe$Just(
				$dillonkearns$elm_markdown$Markdown$InlineParser$Match(
					_Utils_update(
						matchModel,
						{end: matchModel.end + regexMatchLength, type_: type_})));
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$checkForInlineReferences = F3(
	function (remainText, _v0, references) {
		var tempMatch = _v0.a;
		var matches = A3($elm$regex$Regex$findAtMost, 1, $dillonkearns$elm_markdown$Markdown$InlineParser$refLabelRegex, remainText);
		return A3(
			$dillonkearns$elm_markdown$Markdown$InlineParser$refRegexToMatch,
			tempMatch,
			references,
			$elm$core$List$head(matches));
	});
var $dillonkearns$elm_markdown$Markdown$Helpers$lineEndChars = '\\f\\v\\r\\n';
var $dillonkearns$elm_markdown$Markdown$Helpers$whiteSpaceChars = ' \\t\\f\\v\\r\\n';
var $dillonkearns$elm_markdown$Markdown$InlineParser$hrefRegex = '(?:<([^<>' + ($dillonkearns$elm_markdown$Markdown$Helpers$lineEndChars + (']*)>|([^' + ($dillonkearns$elm_markdown$Markdown$Helpers$whiteSpaceChars + ('\\(\\)\\\\]*(?:\\\\.[^' + ($dillonkearns$elm_markdown$Markdown$Helpers$whiteSpaceChars + '\\(\\)\\\\]*)*))')))));
var $dillonkearns$elm_markdown$Markdown$Helpers$titleRegex = '(?:[' + ($dillonkearns$elm_markdown$Markdown$Helpers$whiteSpaceChars + (']+' + ('(?:\'([^\'\\\\]*(?:\\\\.[^\'\\\\]*)*)\'|' + ('\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\"|' + '\\(([^\\)\\\\]*(?:\\\\.[^\\)\\\\]*)*)\\)))?'))));
var $dillonkearns$elm_markdown$Markdown$InlineParser$inlineLinkTypeOrImageTypeRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^\\(\\s*' + ($dillonkearns$elm_markdown$Markdown$InlineParser$hrefRegex + ($dillonkearns$elm_markdown$Markdown$Helpers$titleRegex + '\\s*\\)'))));
var $dillonkearns$elm_markdown$Markdown$Helpers$returnFirstJust = function (maybes) {
	var process = F2(
		function (a, maybeFound) {
			if (maybeFound.$ === 'Just') {
				var found = maybeFound.a;
				return $elm$core$Maybe$Just(found);
			} else {
				return a;
			}
		});
	return A3($elm$core$List$foldl, process, $elm$core$Maybe$Nothing, maybes);
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$inlineLinkTypeOrImageTypeRegexToMatch = F2(
	function (matchModel, regexMatch) {
		var _v0 = regexMatch.submatches;
		if ((((_v0.b && _v0.b.b) && _v0.b.b.b) && _v0.b.b.b.b) && _v0.b.b.b.b.b) {
			var maybeRawUrlAngleBrackets = _v0.a;
			var _v1 = _v0.b;
			var maybeRawUrlWithoutBrackets = _v1.a;
			var _v2 = _v1.b;
			var maybeTitleSingleQuotes = _v2.a;
			var _v3 = _v2.b;
			var maybeTitleDoubleQuotes = _v3.a;
			var _v4 = _v3.b;
			var maybeTitleParenthesis = _v4.a;
			var maybeTitle = $dillonkearns$elm_markdown$Markdown$Helpers$returnFirstJust(
				_List_fromArray(
					[maybeTitleSingleQuotes, maybeTitleDoubleQuotes, maybeTitleParenthesis]));
			var toMatch = function (rawUrl) {
				return $dillonkearns$elm_markdown$Markdown$InlineParser$Match(
					_Utils_update(
						matchModel,
						{
							end: matchModel.end + $elm$core$String$length(regexMatch.match),
							type_: function () {
								var _v5 = matchModel.type_;
								if (_v5.$ === 'ImageType') {
									return $dillonkearns$elm_markdown$Markdown$InlineParser$ImageType;
								} else {
									return $dillonkearns$elm_markdown$Markdown$InlineParser$LinkType;
								}
							}()(
								A2($dillonkearns$elm_markdown$Markdown$InlineParser$prepareUrlAndTitle, rawUrl, maybeTitle))
						}));
			};
			var maybeRawUrl = $dillonkearns$elm_markdown$Markdown$Helpers$returnFirstJust(
				_List_fromArray(
					[maybeRawUrlAngleBrackets, maybeRawUrlWithoutBrackets]));
			return $elm$core$Maybe$Just(
				toMatch(
					A2($elm$core$Maybe$withDefault, '', maybeRawUrl)));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$checkForInlineLinkTypeOrImageType = F3(
	function (remainText, _v0, refs) {
		var tempMatch = _v0.a;
		var _v1 = A3($elm$regex$Regex$findAtMost, 1, $dillonkearns$elm_markdown$Markdown$InlineParser$inlineLinkTypeOrImageTypeRegex, remainText);
		if (_v1.b) {
			var first = _v1.a;
			var _v2 = A2($dillonkearns$elm_markdown$Markdown$InlineParser$inlineLinkTypeOrImageTypeRegexToMatch, tempMatch, first);
			if (_v2.$ === 'Just') {
				var match = _v2.a;
				return $elm$core$Maybe$Just(match);
			} else {
				return A3(
					$dillonkearns$elm_markdown$Markdown$InlineParser$checkForInlineReferences,
					remainText,
					$dillonkearns$elm_markdown$Markdown$InlineParser$Match(tempMatch),
					refs);
			}
		} else {
			return A3(
				$dillonkearns$elm_markdown$Markdown$InlineParser$checkForInlineReferences,
				remainText,
				$dillonkearns$elm_markdown$Markdown$InlineParser$Match(tempMatch),
				refs);
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$checkParsedAheadOverlapping = F2(
	function (_v0, remainMatches) {
		var match = _v0.a;
		var overlappingMatches = $elm$core$List$filter(
			function (_v1) {
				var testMatch = _v1.a;
				return (_Utils_cmp(match.end, testMatch.start) > 0) && (_Utils_cmp(match.end, testMatch.end) < 0);
			});
		return ($elm$core$List$isEmpty(remainMatches) || $elm$core$List$isEmpty(
			overlappingMatches(remainMatches))) ? $elm$core$Maybe$Just(
			A2(
				$elm$core$List$cons,
				$dillonkearns$elm_markdown$Markdown$InlineParser$Match(match),
				remainMatches)) : $elm$core$Maybe$Nothing;
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$emailRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^([a-zA-Z0-9.!#$%&\'*+\\/=?^_`{|}~\\-]+@[a-zA-Z0-9](?:[a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?)*)$'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$emailAutolinkTypeToMatch = function (_v0) {
	var match = _v0.a;
	return A2($elm$regex$Regex$contains, $dillonkearns$elm_markdown$Markdown$InlineParser$emailRegex, match.text) ? $elm$core$Result$Ok(
		$dillonkearns$elm_markdown$Markdown$InlineParser$Match(
			_Utils_update(
				match,
				{
					type_: $dillonkearns$elm_markdown$Markdown$InlineParser$AutolinkType(
						_Utils_Tuple2(
							match.text,
							'mailto:' + $dillonkearns$elm_markdown$Markdown$InlineParser$encodeUrl(match.text)))
				}))) : $elm$core$Result$Err(
		$dillonkearns$elm_markdown$Markdown$InlineParser$Match(match));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$findTokenHelp = F3(
	function (innerTokens, isToken, tokens) {
		findTokenHelp:
		while (true) {
			if (!tokens.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var nextToken = tokens.a;
				var remainingTokens = tokens.b;
				if (isToken(nextToken)) {
					return $elm$core$Maybe$Just(
						_Utils_Tuple3(
							nextToken,
							$elm$core$List$reverse(innerTokens),
							remainingTokens));
				} else {
					var $temp$innerTokens = A2($elm$core$List$cons, nextToken, innerTokens),
						$temp$isToken = isToken,
						$temp$tokens = remainingTokens;
					innerTokens = $temp$innerTokens;
					isToken = $temp$isToken;
					tokens = $temp$tokens;
					continue findTokenHelp;
				}
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$findToken = F2(
	function (isToken, tokens) {
		return A3($dillonkearns$elm_markdown$Markdown$InlineParser$findTokenHelp, _List_Nil, isToken, tokens);
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$HtmlToken = F2(
	function (a, b) {
		return {$: 'HtmlToken', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$NotOpening = {$: 'NotOpening'};
var $elm$parser$Parser$Advanced$getOffset = $elm$parser$Parser$Advanced$Parser(
	function (s) {
		return A3($elm$parser$Parser$Advanced$Good, false, s.offset, s);
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$htmlToToken = F2(
	function (rawText, _v0) {
		var match = _v0.a;
		var consumedCharacters = A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					$elm$parser$Parser$Advanced$succeed(
						F3(
							function (startOffset, htmlTag, endOffset) {
								return {htmlTag: htmlTag, length: endOffset - startOffset};
							})),
					$elm$parser$Parser$Advanced$getOffset),
				$dillonkearns$elm_markdown$HtmlParser$html),
			$elm$parser$Parser$Advanced$getOffset);
		var parsed = A2(
			$elm$parser$Parser$Advanced$run,
			consumedCharacters,
			A2($elm$core$String$dropLeft, match.start, rawText));
		if (parsed.$ === 'Ok') {
			var htmlTag = parsed.a.htmlTag;
			var length = parsed.a.length;
			var htmlToken = A2($dillonkearns$elm_markdown$Markdown$InlineParser$HtmlToken, $dillonkearns$elm_markdown$Markdown$InlineParser$NotOpening, htmlTag);
			return $elm$core$Maybe$Just(
				{index: match.start, length: length, meaning: htmlToken});
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $dillonkearns$elm_markdown$Markdown$Helpers$ifError = F2(
	function (_function, result) {
		if (result.$ === 'Ok') {
			return result;
		} else {
			var err = result.a;
			return _function(err);
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$isCloseToken = F2(
	function (htmlModel, token) {
		return false;
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$isCodeTokenPair = F2(
	function (closeToken, openToken) {
		var _v0 = openToken.meaning;
		if (_v0.$ === 'CodeToken') {
			if (_v0.a.$ === 'Escaped') {
				var _v1 = _v0.a;
				return _Utils_eq(openToken.length - 1, closeToken.length);
			} else {
				var _v2 = _v0.a;
				return _Utils_eq(openToken.length, closeToken.length);
			}
		} else {
			return false;
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$isLinkTypeOrImageOpenToken = function (token) {
	var _v0 = token.meaning;
	switch (_v0.$) {
		case 'LinkOpenToken':
			return true;
		case 'ImageOpenToken':
			return true;
		default:
			return false;
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$isOpenEmphasisToken = F2(
	function (closeToken, openToken) {
		var _v0 = openToken.meaning;
		if (_v0.$ === 'EmphasisToken') {
			var openChar = _v0.a;
			var open = _v0.b;
			var _v1 = closeToken.meaning;
			if (_v1.$ === 'EmphasisToken') {
				var closeChar = _v1.a;
				var close = _v1.b;
				return _Utils_eq(openChar, closeChar) ? ((_Utils_eq(open.leftFringeRank, open.rightFringeRank) || _Utils_eq(close.leftFringeRank, close.rightFringeRank)) ? (!(!A2($elm$core$Basics$modBy, 3, closeToken.length + openToken.length))) : true) : false;
			} else {
				return false;
			}
		} else {
			return false;
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$isStrikethroughTokenPair = F2(
	function (closeToken, openToken) {
		var _v0 = function () {
			var _v1 = openToken.meaning;
			if (_v1.$ === 'StrikethroughToken') {
				if (_v1.a.$ === 'Escaped') {
					var _v2 = _v1.a;
					return _Utils_Tuple2(true, openToken.length - 1);
				} else {
					var _v3 = _v1.a;
					return _Utils_Tuple2(true, openToken.length);
				}
			} else {
				return _Utils_Tuple2(false, 0);
			}
		}();
		var openTokenIsStrikethrough = _v0.a;
		var openTokenLength = _v0.b;
		var _v4 = function () {
			var _v5 = closeToken.meaning;
			if (_v5.$ === 'StrikethroughToken') {
				if (_v5.a.$ === 'Escaped') {
					var _v6 = _v5.a;
					return _Utils_Tuple2(true, closeToken.length - 1);
				} else {
					var _v7 = _v5.a;
					return _Utils_Tuple2(true, closeToken.length);
				}
			} else {
				return _Utils_Tuple2(false, 0);
			}
		}();
		var closeTokenIsStrikethrough = _v4.a;
		var closeTokenLength = _v4.b;
		return closeTokenIsStrikethrough && (openTokenIsStrikethrough && _Utils_eq(closeTokenLength, openTokenLength));
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakType = {$: 'HardLineBreakType'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$tokenToMatch = F2(
	function (token, type_) {
		return $dillonkearns$elm_markdown$Markdown$InlineParser$Match(
			{end: token.index + token.length, matches: _List_Nil, start: token.index, text: '', textEnd: 0, textStart: 0, type_: type_});
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$lineBreakTTM = F5(
	function (remaining, tokens, matches, refs, rawText) {
		lineBreakTTM:
		while (true) {
			if (!remaining.b) {
				return matches;
			} else {
				var token = remaining.a;
				var tokensTail = remaining.b;
				var _v1 = token.meaning;
				if (_v1.$ === 'HardLineBreakToken') {
					var $temp$remaining = tokensTail,
						$temp$tokens = tokens,
						$temp$matches = A2(
						$elm$core$List$cons,
						A2($dillonkearns$elm_markdown$Markdown$InlineParser$tokenToMatch, token, $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakType),
						matches),
						$temp$refs = refs,
						$temp$rawText = rawText;
					remaining = $temp$remaining;
					tokens = $temp$tokens;
					matches = $temp$matches;
					refs = $temp$refs;
					rawText = $temp$rawText;
					continue lineBreakTTM;
				} else {
					var $temp$remaining = tokensTail,
						$temp$tokens = A2($elm$core$List$cons, token, tokens),
						$temp$matches = matches,
						$temp$refs = refs,
						$temp$rawText = rawText;
					remaining = $temp$remaining;
					tokens = $temp$tokens;
					matches = $temp$matches;
					refs = $temp$refs;
					rawText = $temp$rawText;
					continue lineBreakTTM;
				}
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$removeParsedAheadTokens = F2(
	function (_v0, tokensTail) {
		var match = _v0.a;
		return A2(
			$elm$core$List$filter,
			function (token) {
				return _Utils_cmp(token.index, match.end) > -1;
			},
			tokensTail);
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$angleBracketsToMatch = F6(
	function (closeToken, escaped, matches, references, rawText, _v46) {
		var openToken = _v46.a;
		var remainTokens = _v46.c;
		var result = A2(
			$dillonkearns$elm_markdown$Markdown$Helpers$ifError,
			$dillonkearns$elm_markdown$Markdown$InlineParser$emailAutolinkTypeToMatch,
			$dillonkearns$elm_markdown$Markdown$InlineParser$autolinkToMatch(
				A7(
					$dillonkearns$elm_markdown$Markdown$InlineParser$tokenPairToMatch,
					references,
					rawText,
					function (s) {
						return s;
					},
					$dillonkearns$elm_markdown$Markdown$InlineParser$CodeType,
					openToken,
					closeToken,
					_List_Nil)));
		if (result.$ === 'Err') {
			var tempMatch = result.a;
			if (escaped.$ === 'NotEscaped') {
				var _v49 = A2($dillonkearns$elm_markdown$Markdown$InlineParser$htmlToToken, rawText, tempMatch);
				if (_v49.$ === 'Just') {
					var newToken = _v49.a;
					return $elm$core$Maybe$Just(
						_Utils_Tuple2(
							A2($elm$core$List$cons, newToken, remainTokens),
							matches));
				} else {
					return $elm$core$Maybe$Nothing;
				}
			} else {
				return $elm$core$Maybe$Nothing;
			}
		} else {
			var newMatch = result.a;
			return $elm$core$Maybe$Just(
				_Utils_Tuple2(
					remainTokens,
					A2($elm$core$List$cons, newMatch, matches)));
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$codeAutolinkTypeHtmlTagTTM = F5(
	function (remaining, tokens, matches, references, rawText) {
		codeAutolinkTypeHtmlTagTTM:
		while (true) {
			if (!remaining.b) {
				return A5(
					$dillonkearns$elm_markdown$Markdown$InlineParser$htmlElementTTM,
					$elm$core$List$reverse(tokens),
					_List_Nil,
					matches,
					references,
					rawText);
			} else {
				var token = remaining.a;
				var tokensTail = remaining.b;
				var _v38 = token.meaning;
				switch (_v38.$) {
					case 'CodeToken':
						var isEscaped = _v38.a;
						var _v39 = A2(
							$dillonkearns$elm_markdown$Markdown$InlineParser$findToken,
							$dillonkearns$elm_markdown$Markdown$InlineParser$isCodeTokenPair(token),
							tokens);
						if (_v39.$ === 'Just') {
							var code = _v39.a;
							var _v40 = A5($dillonkearns$elm_markdown$Markdown$InlineParser$codeToMatch, token, matches, references, rawText, code);
							var newTokens = _v40.a;
							var newMatches = _v40.b;
							var $temp$remaining = tokensTail,
								$temp$tokens = newTokens,
								$temp$matches = newMatches,
								$temp$references = references,
								$temp$rawText = rawText;
							remaining = $temp$remaining;
							tokens = $temp$tokens;
							matches = $temp$matches;
							references = $temp$references;
							rawText = $temp$rawText;
							continue codeAutolinkTypeHtmlTagTTM;
						} else {
							var $temp$remaining = tokensTail,
								$temp$tokens = A2($elm$core$List$cons, token, tokens),
								$temp$matches = matches,
								$temp$references = references,
								$temp$rawText = rawText;
							remaining = $temp$remaining;
							tokens = $temp$tokens;
							matches = $temp$matches;
							references = $temp$references;
							rawText = $temp$rawText;
							continue codeAutolinkTypeHtmlTagTTM;
						}
					case 'AngleBracketClose':
						var isEscaped = _v38.a;
						var isAngleBracketOpen = function (_v45) {
							var meaning = _v45.meaning;
							if (meaning.$ === 'AngleBracketOpen') {
								return true;
							} else {
								return false;
							}
						};
						var _v41 = A2($dillonkearns$elm_markdown$Markdown$InlineParser$findToken, isAngleBracketOpen, tokens);
						if (_v41.$ === 'Just') {
							var found = _v41.a;
							var _v42 = A6($dillonkearns$elm_markdown$Markdown$InlineParser$angleBracketsToMatch, token, isEscaped, matches, references, rawText, found);
							if (_v42.$ === 'Just') {
								var _v43 = _v42.a;
								var newTokens = _v43.a;
								var newMatches = _v43.b;
								var $temp$remaining = tokensTail,
									$temp$tokens = A2(
									$elm$core$List$filter,
									A2($elm$core$Basics$composeL, $elm$core$Basics$not, isAngleBracketOpen),
									newTokens),
									$temp$matches = newMatches,
									$temp$references = references,
									$temp$rawText = rawText;
								remaining = $temp$remaining;
								tokens = $temp$tokens;
								matches = $temp$matches;
								references = $temp$references;
								rawText = $temp$rawText;
								continue codeAutolinkTypeHtmlTagTTM;
							} else {
								var $temp$remaining = tokensTail,
									$temp$tokens = A2(
									$elm$core$List$filter,
									A2($elm$core$Basics$composeL, $elm$core$Basics$not, isAngleBracketOpen),
									tokens),
									$temp$matches = matches,
									$temp$references = references,
									$temp$rawText = rawText;
								remaining = $temp$remaining;
								tokens = $temp$tokens;
								matches = $temp$matches;
								references = $temp$references;
								rawText = $temp$rawText;
								continue codeAutolinkTypeHtmlTagTTM;
							}
						} else {
							var $temp$remaining = tokensTail,
								$temp$tokens = A2(
								$elm$core$List$filter,
								A2($elm$core$Basics$composeL, $elm$core$Basics$not, isAngleBracketOpen),
								tokens),
								$temp$matches = matches,
								$temp$references = references,
								$temp$rawText = rawText;
							remaining = $temp$remaining;
							tokens = $temp$tokens;
							matches = $temp$matches;
							references = $temp$references;
							rawText = $temp$rawText;
							continue codeAutolinkTypeHtmlTagTTM;
						}
					default:
						var $temp$remaining = tokensTail,
							$temp$tokens = A2($elm$core$List$cons, token, tokens),
							$temp$matches = matches,
							$temp$references = references,
							$temp$rawText = rawText;
						remaining = $temp$remaining;
						tokens = $temp$tokens;
						matches = $temp$matches;
						references = $temp$references;
						rawText = $temp$rawText;
						continue codeAutolinkTypeHtmlTagTTM;
				}
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$codeToMatch = F5(
	function (closeToken, matches, references, rawText, _v34) {
		var openToken = _v34.a;
		var remainTokens = _v34.c;
		var updatedOpenToken = function () {
			var _v35 = openToken.meaning;
			if ((_v35.$ === 'CodeToken') && (_v35.a.$ === 'Escaped')) {
				var _v36 = _v35.a;
				return _Utils_update(
					openToken,
					{index: openToken.index + 1, length: openToken.length - 1});
			} else {
				return openToken;
			}
		}();
		var match = A7($dillonkearns$elm_markdown$Markdown$InlineParser$tokenPairToMatch, references, rawText, $dillonkearns$elm_markdown$Markdown$Helpers$cleanWhitespaces, $dillonkearns$elm_markdown$Markdown$InlineParser$CodeType, updatedOpenToken, closeToken, _List_Nil);
		return _Utils_Tuple2(
			remainTokens,
			A2($elm$core$List$cons, match, matches));
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$emphasisTTM = F5(
	function (remaining, tokens, matches, references, rawText) {
		emphasisTTM:
		while (true) {
			if (!remaining.b) {
				return A5(
					$dillonkearns$elm_markdown$Markdown$InlineParser$strikethroughTTM,
					$elm$core$List$reverse(tokens),
					_List_Nil,
					matches,
					references,
					rawText);
			} else {
				var token = remaining.a;
				var tokensTail = remaining.b;
				var _v29 = token.meaning;
				if (_v29.$ === 'EmphasisToken') {
					var _char = _v29.a;
					var leftFringeRank = _v29.b.leftFringeRank;
					var rightFringeRank = _v29.b.rightFringeRank;
					if (_Utils_eq(leftFringeRank, rightFringeRank)) {
						if ((!(!rightFringeRank)) && ((!_Utils_eq(
							_char,
							_Utils_chr('_'))) || (rightFringeRank === 1))) {
							var _v30 = A2(
								$dillonkearns$elm_markdown$Markdown$InlineParser$findToken,
								$dillonkearns$elm_markdown$Markdown$InlineParser$isOpenEmphasisToken(token),
								tokens);
							if (_v30.$ === 'Just') {
								var found = _v30.a;
								var _v31 = A5($dillonkearns$elm_markdown$Markdown$InlineParser$emphasisToMatch, references, rawText, token, tokensTail, found);
								var newRemaining = _v31.a;
								var match = _v31.b;
								var newTokens = _v31.c;
								var $temp$remaining = newRemaining,
									$temp$tokens = newTokens,
									$temp$matches = A2($elm$core$List$cons, match, matches),
									$temp$references = references,
									$temp$rawText = rawText;
								remaining = $temp$remaining;
								tokens = $temp$tokens;
								matches = $temp$matches;
								references = $temp$references;
								rawText = $temp$rawText;
								continue emphasisTTM;
							} else {
								var $temp$remaining = tokensTail,
									$temp$tokens = A2($elm$core$List$cons, token, tokens),
									$temp$matches = matches,
									$temp$references = references,
									$temp$rawText = rawText;
								remaining = $temp$remaining;
								tokens = $temp$tokens;
								matches = $temp$matches;
								references = $temp$references;
								rawText = $temp$rawText;
								continue emphasisTTM;
							}
						} else {
							var $temp$remaining = tokensTail,
								$temp$tokens = tokens,
								$temp$matches = matches,
								$temp$references = references,
								$temp$rawText = rawText;
							remaining = $temp$remaining;
							tokens = $temp$tokens;
							matches = $temp$matches;
							references = $temp$references;
							rawText = $temp$rawText;
							continue emphasisTTM;
						}
					} else {
						if (_Utils_cmp(leftFringeRank, rightFringeRank) < 0) {
							var $temp$remaining = tokensTail,
								$temp$tokens = A2($elm$core$List$cons, token, tokens),
								$temp$matches = matches,
								$temp$references = references,
								$temp$rawText = rawText;
							remaining = $temp$remaining;
							tokens = $temp$tokens;
							matches = $temp$matches;
							references = $temp$references;
							rawText = $temp$rawText;
							continue emphasisTTM;
						} else {
							var _v32 = A2(
								$dillonkearns$elm_markdown$Markdown$InlineParser$findToken,
								$dillonkearns$elm_markdown$Markdown$InlineParser$isOpenEmphasisToken(token),
								tokens);
							if (_v32.$ === 'Just') {
								var found = _v32.a;
								var _v33 = A5($dillonkearns$elm_markdown$Markdown$InlineParser$emphasisToMatch, references, rawText, token, tokensTail, found);
								var newRemaining = _v33.a;
								var match = _v33.b;
								var newTokens = _v33.c;
								var $temp$remaining = newRemaining,
									$temp$tokens = newTokens,
									$temp$matches = A2($elm$core$List$cons, match, matches),
									$temp$references = references,
									$temp$rawText = rawText;
								remaining = $temp$remaining;
								tokens = $temp$tokens;
								matches = $temp$matches;
								references = $temp$references;
								rawText = $temp$rawText;
								continue emphasisTTM;
							} else {
								var $temp$remaining = tokensTail,
									$temp$tokens = tokens,
									$temp$matches = matches,
									$temp$references = references,
									$temp$rawText = rawText;
								remaining = $temp$remaining;
								tokens = $temp$tokens;
								matches = $temp$matches;
								references = $temp$references;
								rawText = $temp$rawText;
								continue emphasisTTM;
							}
						}
					}
				} else {
					var $temp$remaining = tokensTail,
						$temp$tokens = A2($elm$core$List$cons, token, tokens),
						$temp$matches = matches,
						$temp$references = references,
						$temp$rawText = rawText;
					remaining = $temp$remaining;
					tokens = $temp$tokens;
					matches = $temp$matches;
					references = $temp$references;
					rawText = $temp$rawText;
					continue emphasisTTM;
				}
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$emphasisToMatch = F5(
	function (references, rawText, closeToken, tokensTail, _v27) {
		var openToken = _v27.a;
		var innerTokens = _v27.b;
		var remainTokens = _v27.c;
		var remainLength = openToken.length - closeToken.length;
		var updt = (!remainLength) ? {closeToken: closeToken, openToken: openToken, remainTokens: remainTokens, tokensTail: tokensTail} : ((remainLength > 0) ? {
			closeToken: closeToken,
			openToken: _Utils_update(
				openToken,
				{index: openToken.index + remainLength, length: closeToken.length}),
			remainTokens: A2(
				$elm$core$List$cons,
				_Utils_update(
					openToken,
					{length: remainLength}),
				remainTokens),
			tokensTail: tokensTail
		} : {
			closeToken: _Utils_update(
				closeToken,
				{length: openToken.length}),
			openToken: openToken,
			remainTokens: remainTokens,
			tokensTail: A2(
				$elm$core$List$cons,
				_Utils_update(
					closeToken,
					{index: closeToken.index + openToken.length, length: -remainLength}),
				tokensTail)
		});
		var match = A7(
			$dillonkearns$elm_markdown$Markdown$InlineParser$tokenPairToMatch,
			references,
			rawText,
			function (s) {
				return s;
			},
			$dillonkearns$elm_markdown$Markdown$InlineParser$EmphasisType(updt.openToken.length),
			updt.openToken,
			updt.closeToken,
			$elm$core$List$reverse(innerTokens));
		return _Utils_Tuple3(updt.tokensTail, match, updt.remainTokens);
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$htmlElementTTM = F5(
	function (remaining, tokens, matches, references, rawText) {
		htmlElementTTM:
		while (true) {
			if (!remaining.b) {
				return A5(
					$dillonkearns$elm_markdown$Markdown$InlineParser$linkImageTypeTTM,
					$elm$core$List$reverse(tokens),
					_List_Nil,
					matches,
					references,
					rawText);
			} else {
				var token = remaining.a;
				var tokensTail = remaining.b;
				var _v23 = token.meaning;
				if (_v23.$ === 'HtmlToken') {
					var isOpen = _v23.a;
					var htmlModel = _v23.b;
					if (isOpen.$ === 'NotOpening') {
						var $temp$remaining = tokensTail,
							$temp$tokens = tokens,
							$temp$matches = A2(
							$elm$core$List$cons,
							A2(
								$dillonkearns$elm_markdown$Markdown$InlineParser$tokenToMatch,
								token,
								$dillonkearns$elm_markdown$Markdown$InlineParser$HtmlType(htmlModel)),
							matches),
							$temp$references = references,
							$temp$rawText = rawText;
						remaining = $temp$remaining;
						tokens = $temp$tokens;
						matches = $temp$matches;
						references = $temp$references;
						rawText = $temp$rawText;
						continue htmlElementTTM;
					} else {
						var _v25 = A2(
							$dillonkearns$elm_markdown$Markdown$InlineParser$findToken,
							$dillonkearns$elm_markdown$Markdown$InlineParser$isCloseToken(htmlModel),
							tokensTail);
						if (_v25.$ === 'Nothing') {
							var $temp$remaining = tokensTail,
								$temp$tokens = tokens,
								$temp$matches = A2(
								$elm$core$List$cons,
								A2(
									$dillonkearns$elm_markdown$Markdown$InlineParser$tokenToMatch,
									token,
									$dillonkearns$elm_markdown$Markdown$InlineParser$HtmlType(htmlModel)),
								matches),
								$temp$references = references,
								$temp$rawText = rawText;
							remaining = $temp$remaining;
							tokens = $temp$tokens;
							matches = $temp$matches;
							references = $temp$references;
							rawText = $temp$rawText;
							continue htmlElementTTM;
						} else {
							var _v26 = _v25.a;
							var closeToken = _v26.a;
							var innerTokens = _v26.b;
							var newTail = _v26.c;
							var newMatch = A7(
								$dillonkearns$elm_markdown$Markdown$InlineParser$tokenPairToMatch,
								references,
								rawText,
								function (s) {
									return s;
								},
								$dillonkearns$elm_markdown$Markdown$InlineParser$HtmlType(htmlModel),
								token,
								closeToken,
								innerTokens);
							var $temp$remaining = newTail,
								$temp$tokens = tokens,
								$temp$matches = A2($elm$core$List$cons, newMatch, matches),
								$temp$references = references,
								$temp$rawText = rawText;
							remaining = $temp$remaining;
							tokens = $temp$tokens;
							matches = $temp$matches;
							references = $temp$references;
							rawText = $temp$rawText;
							continue htmlElementTTM;
						}
					}
				} else {
					var $temp$remaining = tokensTail,
						$temp$tokens = A2($elm$core$List$cons, token, tokens),
						$temp$matches = matches,
						$temp$references = references,
						$temp$rawText = rawText;
					remaining = $temp$remaining;
					tokens = $temp$tokens;
					matches = $temp$matches;
					references = $temp$references;
					rawText = $temp$rawText;
					continue htmlElementTTM;
				}
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$linkImageTypeTTM = F5(
	function (remaining, tokens, matches, references, rawText) {
		linkImageTypeTTM:
		while (true) {
			if (!remaining.b) {
				return A5(
					$dillonkearns$elm_markdown$Markdown$InlineParser$emphasisTTM,
					$elm$core$List$reverse(tokens),
					_List_Nil,
					matches,
					references,
					rawText);
			} else {
				var token = remaining.a;
				var tokensTail = remaining.b;
				var _v18 = token.meaning;
				if (_v18.$ === 'SquareBracketClose') {
					var _v19 = A2($dillonkearns$elm_markdown$Markdown$InlineParser$findToken, $dillonkearns$elm_markdown$Markdown$InlineParser$isLinkTypeOrImageOpenToken, tokens);
					if (_v19.$ === 'Just') {
						var found = _v19.a;
						var _v20 = A6($dillonkearns$elm_markdown$Markdown$InlineParser$linkOrImageTypeToMatch, token, tokensTail, matches, references, rawText, found);
						if (_v20.$ === 'Just') {
							var _v21 = _v20.a;
							var x = _v21.a;
							var newMatches = _v21.b;
							var newTokens = _v21.c;
							var $temp$remaining = x,
								$temp$tokens = newTokens,
								$temp$matches = newMatches,
								$temp$references = references,
								$temp$rawText = rawText;
							remaining = $temp$remaining;
							tokens = $temp$tokens;
							matches = $temp$matches;
							references = $temp$references;
							rawText = $temp$rawText;
							continue linkImageTypeTTM;
						} else {
							var $temp$remaining = tokensTail,
								$temp$tokens = tokens,
								$temp$matches = matches,
								$temp$references = references,
								$temp$rawText = rawText;
							remaining = $temp$remaining;
							tokens = $temp$tokens;
							matches = $temp$matches;
							references = $temp$references;
							rawText = $temp$rawText;
							continue linkImageTypeTTM;
						}
					} else {
						var $temp$remaining = tokensTail,
							$temp$tokens = tokens,
							$temp$matches = matches,
							$temp$references = references,
							$temp$rawText = rawText;
						remaining = $temp$remaining;
						tokens = $temp$tokens;
						matches = $temp$matches;
						references = $temp$references;
						rawText = $temp$rawText;
						continue linkImageTypeTTM;
					}
				} else {
					var $temp$remaining = tokensTail,
						$temp$tokens = A2($elm$core$List$cons, token, tokens),
						$temp$matches = matches,
						$temp$references = references,
						$temp$rawText = rawText;
					remaining = $temp$remaining;
					tokens = $temp$tokens;
					matches = $temp$matches;
					references = $temp$references;
					rawText = $temp$rawText;
					continue linkImageTypeTTM;
				}
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$linkOrImageTypeToMatch = F6(
	function (closeToken, tokensTail, oldMatches, references, rawText, _v8) {
		var openToken = _v8.a;
		var innerTokens = _v8.b;
		var remainTokens = _v8.c;
		var removeOpenToken = _Utils_Tuple3(
			tokensTail,
			oldMatches,
			_Utils_ap(innerTokens, remainTokens));
		var remainText = A2($elm$core$String$dropLeft, closeToken.index + 1, rawText);
		var inactivateLinkOpenToken = function (token) {
			var _v16 = token.meaning;
			if (_v16.$ === 'LinkOpenToken') {
				return _Utils_update(
					token,
					{
						meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$LinkOpenToken($dillonkearns$elm_markdown$Markdown$InlineParser$Inactive)
					});
			} else {
				return token;
			}
		};
		var findTempMatch = function (isLinkType) {
			return A7(
				$dillonkearns$elm_markdown$Markdown$InlineParser$tokenPairToMatch,
				references,
				rawText,
				function (s) {
					return s;
				},
				isLinkType ? $dillonkearns$elm_markdown$Markdown$InlineParser$LinkType(
					_Utils_Tuple2('', $elm$core$Maybe$Nothing)) : $dillonkearns$elm_markdown$Markdown$InlineParser$ImageType(
					_Utils_Tuple2('', $elm$core$Maybe$Nothing)),
				openToken,
				closeToken,
				$elm$core$List$reverse(innerTokens));
		};
		var _v9 = openToken.meaning;
		switch (_v9.$) {
			case 'ImageOpenToken':
				var tempMatch = findTempMatch(false);
				var _v10 = A3($dillonkearns$elm_markdown$Markdown$InlineParser$checkForInlineLinkTypeOrImageType, remainText, tempMatch, references);
				if (_v10.$ === 'Nothing') {
					return $elm$core$Maybe$Just(removeOpenToken);
				} else {
					var match = _v10.a;
					var _v11 = A2($dillonkearns$elm_markdown$Markdown$InlineParser$checkParsedAheadOverlapping, match, oldMatches);
					if (_v11.$ === 'Just') {
						var matches = _v11.a;
						return $elm$core$Maybe$Just(
							_Utils_Tuple3(
								A2($dillonkearns$elm_markdown$Markdown$InlineParser$removeParsedAheadTokens, match, tokensTail),
								matches,
								remainTokens));
					} else {
						return $elm$core$Maybe$Just(removeOpenToken);
					}
				}
			case 'LinkOpenToken':
				if (_v9.a.$ === 'Active') {
					var _v12 = _v9.a;
					var tempMatch = findTempMatch(true);
					var _v13 = A3($dillonkearns$elm_markdown$Markdown$InlineParser$checkForInlineLinkTypeOrImageType, remainText, tempMatch, references);
					if (_v13.$ === 'Nothing') {
						return $elm$core$Maybe$Just(removeOpenToken);
					} else {
						var match = _v13.a;
						var _v14 = A2($dillonkearns$elm_markdown$Markdown$InlineParser$checkParsedAheadOverlapping, match, oldMatches);
						if (_v14.$ === 'Just') {
							var matches = _v14.a;
							return $elm$core$Maybe$Just(
								_Utils_Tuple3(
									A2($dillonkearns$elm_markdown$Markdown$InlineParser$removeParsedAheadTokens, match, tokensTail),
									matches,
									A2($elm$core$List$map, inactivateLinkOpenToken, remainTokens)));
						} else {
							return $elm$core$Maybe$Just(removeOpenToken);
						}
					}
				} else {
					var _v15 = _v9.a;
					return $elm$core$Maybe$Just(removeOpenToken);
				}
			default:
				return $elm$core$Maybe$Nothing;
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$strikethroughTTM = F5(
	function (remaining, tokens, matches, references, rawText) {
		strikethroughTTM:
		while (true) {
			if (!remaining.b) {
				return A5(
					$dillonkearns$elm_markdown$Markdown$InlineParser$lineBreakTTM,
					$elm$core$List$reverse(tokens),
					_List_Nil,
					matches,
					references,
					rawText);
			} else {
				var token = remaining.a;
				var tokensTail = remaining.b;
				var _v5 = token.meaning;
				if (_v5.$ === 'StrikethroughToken') {
					var isEscaped = _v5.a;
					var _v6 = A2(
						$dillonkearns$elm_markdown$Markdown$InlineParser$findToken,
						$dillonkearns$elm_markdown$Markdown$InlineParser$isStrikethroughTokenPair(token),
						tokens);
					if (_v6.$ === 'Just') {
						var content = _v6.a;
						var _v7 = A5($dillonkearns$elm_markdown$Markdown$InlineParser$strikethroughToMatch, token, matches, references, rawText, content);
						var newTokens = _v7.a;
						var newMatches = _v7.b;
						var $temp$remaining = tokensTail,
							$temp$tokens = newTokens,
							$temp$matches = newMatches,
							$temp$references = references,
							$temp$rawText = rawText;
						remaining = $temp$remaining;
						tokens = $temp$tokens;
						matches = $temp$matches;
						references = $temp$references;
						rawText = $temp$rawText;
						continue strikethroughTTM;
					} else {
						var $temp$remaining = tokensTail,
							$temp$tokens = A2($elm$core$List$cons, token, tokens),
							$temp$matches = matches,
							$temp$references = references,
							$temp$rawText = rawText;
						remaining = $temp$remaining;
						tokens = $temp$tokens;
						matches = $temp$matches;
						references = $temp$references;
						rawText = $temp$rawText;
						continue strikethroughTTM;
					}
				} else {
					var $temp$remaining = tokensTail,
						$temp$tokens = A2($elm$core$List$cons, token, tokens),
						$temp$matches = matches,
						$temp$references = references,
						$temp$rawText = rawText;
					remaining = $temp$remaining;
					tokens = $temp$tokens;
					matches = $temp$matches;
					references = $temp$references;
					rawText = $temp$rawText;
					continue strikethroughTTM;
				}
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$strikethroughToMatch = F5(
	function (closeToken, matches, references, rawText, _v1) {
		var openToken = _v1.a;
		var remainTokens = _v1.c;
		var updatedOpenToken = function () {
			var _v2 = openToken.meaning;
			if ((_v2.$ === 'StrikethroughToken') && (_v2.a.$ === 'Escaped')) {
				var _v3 = _v2.a;
				return _Utils_update(
					openToken,
					{index: openToken.index + 1, length: openToken.length - 1});
			} else {
				return openToken;
			}
		}();
		var match = A7($dillonkearns$elm_markdown$Markdown$InlineParser$tokenPairToMatch, references, rawText, $dillonkearns$elm_markdown$Markdown$Helpers$cleanWhitespaces, $dillonkearns$elm_markdown$Markdown$InlineParser$StrikethroughType, updatedOpenToken, closeToken, _List_Nil);
		return _Utils_Tuple2(
			remainTokens,
			A2($elm$core$List$cons, match, matches));
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$tokenPairToMatch = F7(
	function (references, rawText, processText, type_, openToken, closeToken, innerTokens) {
		var textStart = openToken.index + openToken.length;
		var textEnd = closeToken.index;
		var text = processText(
			A3($elm$core$String$slice, textStart, textEnd, rawText));
		var start = openToken.index;
		var end = closeToken.index + closeToken.length;
		var match = {end: end, matches: _List_Nil, start: start, text: text, textEnd: textEnd, textStart: textStart, type_: type_};
		var matches = A2(
			$elm$core$List$map,
			function (_v0) {
				var matchModel = _v0.a;
				return A2($dillonkearns$elm_markdown$Markdown$InlineParser$prepareChildMatch, match, matchModel);
			},
			A4($dillonkearns$elm_markdown$Markdown$InlineParser$tokensToMatches, innerTokens, _List_Nil, references, rawText));
		return $dillonkearns$elm_markdown$Markdown$InlineParser$Match(
			{end: end, matches: matches, start: start, text: text, textEnd: textEnd, textStart: textStart, type_: type_});
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$tokensToMatches = F4(
	function (tokens, matches, references, rawText) {
		return A5($dillonkearns$elm_markdown$Markdown$InlineParser$codeAutolinkTypeHtmlTagTTM, tokens, _List_Nil, matches, references, rawText);
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$parse = F2(
	function (refs, rawText_) {
		var rawText = $elm$core$String$trim(rawText_);
		var tokens = $dillonkearns$elm_markdown$Markdown$InlineParser$tokenize(rawText);
		return $dillonkearns$elm_markdown$Markdown$InlineParser$matchesToInlines(
			A3(
				$dillonkearns$elm_markdown$Markdown$InlineParser$parseTextMatches,
				rawText,
				_List_Nil,
				$dillonkearns$elm_markdown$Markdown$InlineParser$organizeMatches(
					A4($dillonkearns$elm_markdown$Markdown$InlineParser$tokensToMatches, tokens, _List_Nil, refs, rawText))));
	});
var $dillonkearns$elm_markdown$Markdown$Parser$thisIsDefinitelyNotAnHtmlTag = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			$elm$parser$Parser$Advanced$token(
			A2(
				$elm$parser$Parser$Advanced$Token,
				' ',
				$elm$parser$Parser$Expecting(' '))),
			$elm$parser$Parser$Advanced$token(
			A2(
				$elm$parser$Parser$Advanced$Token,
				'>',
				$elm$parser$Parser$Expecting('>'))),
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$chompIf,
					$elm$core$Char$isAlpha,
					$elm$parser$Parser$Expecting('Alpha')),
				$elm$parser$Parser$Advanced$chompWhile(
					function (c) {
						return $elm$core$Char$isAlphaNum(c) || _Utils_eq(
							c,
							_Utils_chr('-'));
					})),
			$elm$parser$Parser$Advanced$oneOf(
				_List_fromArray(
					[
						$elm$parser$Parser$Advanced$token(
						A2(
							$elm$parser$Parser$Advanced$Token,
							':',
							$elm$parser$Parser$Expecting(':'))),
						$elm$parser$Parser$Advanced$token(
						A2(
							$elm$parser$Parser$Advanced$Token,
							'@',
							$elm$parser$Parser$Expecting('@'))),
						$elm$parser$Parser$Advanced$token(
						A2(
							$elm$parser$Parser$Advanced$Token,
							'\\',
							$elm$parser$Parser$Expecting('\\'))),
						$elm$parser$Parser$Advanced$token(
						A2(
							$elm$parser$Parser$Advanced$Token,
							'+',
							$elm$parser$Parser$Expecting('+'))),
						$elm$parser$Parser$Advanced$token(
						A2(
							$elm$parser$Parser$Advanced$Token,
							'.',
							$elm$parser$Parser$Expecting('.')))
					])))
		]));
var $dillonkearns$elm_markdown$Markdown$Parser$parseAsParagraphInsteadOfHtmlBlock = $elm$parser$Parser$Advanced$backtrackable(
	A2(
		$elm$parser$Parser$Advanced$mapChompedString,
		F2(
			function (rawLine, _v0) {
				return $dillonkearns$elm_markdown$Markdown$RawBlock$OpenBlockOrParagraph(
					$dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(rawLine));
			}),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$token(
						A2(
							$elm$parser$Parser$Advanced$Token,
							'<',
							$elm$parser$Parser$Expecting('<'))),
					$dillonkearns$elm_markdown$Markdown$Parser$thisIsDefinitelyNotAnHtmlTag),
				$dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd),
			$dillonkearns$elm_markdown$Helpers$lineEndOrEnd)));
var $dillonkearns$elm_markdown$Markdown$CodeBlock$CodeBlock = F2(
	function (language, body) {
		return {body: body, language: language};
	});
var $dillonkearns$elm_markdown$Markdown$CodeBlock$infoString = function (fenceCharacter) {
	var toInfoString = F2(
		function (str, _v2) {
			var _v1 = $elm$core$String$trim(str);
			if (_v1 === '') {
				return $elm$core$Maybe$Nothing;
			} else {
				var trimmed = _v1;
				return $elm$core$Maybe$Just(trimmed);
			}
		});
	var _v0 = fenceCharacter.kind;
	if (_v0.$ === 'Backtick') {
		return A2(
			$elm$parser$Parser$Advanced$mapChompedString,
			toInfoString,
			$elm$parser$Parser$Advanced$chompWhile(
				function (c) {
					return (!_Utils_eq(
						c,
						_Utils_chr('`'))) && (!$dillonkearns$elm_markdown$Whitespace$isLineEnd(c));
				}));
	} else {
		return A2(
			$elm$parser$Parser$Advanced$mapChompedString,
			toInfoString,
			$elm$parser$Parser$Advanced$chompWhile(
				A2($elm$core$Basics$composeL, $elm$core$Basics$not, $dillonkearns$elm_markdown$Whitespace$isLineEnd)));
	}
};
var $dillonkearns$elm_markdown$Markdown$CodeBlock$Backtick = {$: 'Backtick'};
var $dillonkearns$elm_markdown$Parser$Token$backtick = A2(
	$elm$parser$Parser$Advanced$Token,
	'`',
	$elm$parser$Parser$Expecting('a \'`\''));
var $dillonkearns$elm_markdown$Markdown$CodeBlock$backtick = {
	_char: _Utils_chr('`'),
	kind: $dillonkearns$elm_markdown$Markdown$CodeBlock$Backtick,
	token: $dillonkearns$elm_markdown$Parser$Token$backtick
};
var $dillonkearns$elm_markdown$Markdown$CodeBlock$colToIndentation = function (_int) {
	switch (_int) {
		case 1:
			return $elm$parser$Parser$Advanced$succeed(0);
		case 2:
			return $elm$parser$Parser$Advanced$succeed(1);
		case 3:
			return $elm$parser$Parser$Advanced$succeed(2);
		case 4:
			return $elm$parser$Parser$Advanced$succeed(3);
		default:
			return $elm$parser$Parser$Advanced$problem(
				$elm$parser$Parser$Expecting('Fenced code blocks should be indented no more than 3 spaces'));
	}
};
var $dillonkearns$elm_markdown$Markdown$CodeBlock$fenceOfAtLeast = F2(
	function (minLength, fenceCharacter) {
		var builtTokens = A3(
			$elm$core$List$foldl,
			F2(
				function (t, p) {
					return A2($elm$parser$Parser$Advanced$ignorer, p, t);
				}),
			$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0),
			A2(
				$elm$core$List$repeat,
				minLength,
				$elm$parser$Parser$Advanced$token(fenceCharacter.token)));
		return A2(
			$elm$parser$Parser$Advanced$mapChompedString,
			F2(
				function (str, _v0) {
					return _Utils_Tuple2(
						fenceCharacter,
						$elm$core$String$length(str));
				}),
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				builtTokens,
				$elm$parser$Parser$Advanced$chompWhile(
					$elm$core$Basics$eq(fenceCharacter._char))));
	});
var $elm$parser$Parser$Advanced$getCol = $elm$parser$Parser$Advanced$Parser(
	function (s) {
		return A3($elm$parser$Parser$Advanced$Good, false, s.col, s);
	});
var $dillonkearns$elm_markdown$Markdown$CodeBlock$Tilde = {$: 'Tilde'};
var $dillonkearns$elm_markdown$Parser$Token$tilde = A2(
	$elm$parser$Parser$Advanced$Token,
	'~',
	$elm$parser$Parser$Expecting('a `~`'));
var $dillonkearns$elm_markdown$Markdown$CodeBlock$tilde = {
	_char: _Utils_chr('~'),
	kind: $dillonkearns$elm_markdown$Markdown$CodeBlock$Tilde,
	token: $dillonkearns$elm_markdown$Parser$Token$tilde
};
var $dillonkearns$elm_markdown$Whitespace$space = $elm$parser$Parser$Advanced$token($dillonkearns$elm_markdown$Parser$Token$space);
var $dillonkearns$elm_markdown$Whitespace$upToThreeSpaces = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$dillonkearns$elm_markdown$Whitespace$space,
				$elm$parser$Parser$Advanced$oneOf(
					_List_fromArray(
						[
							$dillonkearns$elm_markdown$Whitespace$space,
							$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
						]))),
			$elm$parser$Parser$Advanced$oneOf(
				_List_fromArray(
					[
						$dillonkearns$elm_markdown$Whitespace$space,
						$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
					]))),
			$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
		]));
var $dillonkearns$elm_markdown$Markdown$CodeBlock$openingFence = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed(
				F2(
					function (indent, _v0) {
						var character = _v0.a;
						var length = _v0.b;
						return {character: character, indented: indent, length: length};
					})),
			$dillonkearns$elm_markdown$Whitespace$upToThreeSpaces),
		A2($elm$parser$Parser$Advanced$andThen, $dillonkearns$elm_markdown$Markdown$CodeBlock$colToIndentation, $elm$parser$Parser$Advanced$getCol)),
	$elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2($dillonkearns$elm_markdown$Markdown$CodeBlock$fenceOfAtLeast, 3, $dillonkearns$elm_markdown$Markdown$CodeBlock$backtick),
				A2($dillonkearns$elm_markdown$Markdown$CodeBlock$fenceOfAtLeast, 3, $dillonkearns$elm_markdown$Markdown$CodeBlock$tilde)
			])));
var $elm$parser$Parser$ExpectingEnd = {$: 'ExpectingEnd'};
var $dillonkearns$elm_markdown$Whitespace$isSpace = $elm$core$Basics$eq(
	_Utils_chr(' '));
var $dillonkearns$elm_markdown$Markdown$CodeBlock$closingFence = F2(
	function (minLength, fenceCharacter) {
		return A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0),
						$dillonkearns$elm_markdown$Whitespace$upToThreeSpaces),
					A2($dillonkearns$elm_markdown$Markdown$CodeBlock$fenceOfAtLeast, minLength, fenceCharacter)),
				$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpace)),
			$dillonkearns$elm_markdown$Helpers$lineEndOrEnd);
	});
var $dillonkearns$elm_markdown$Parser$Extra$upTo = F2(
	function (n, parser) {
		var _v0 = A2($elm$core$List$repeat, n, parser);
		if (!_v0.b) {
			return $elm$parser$Parser$Advanced$succeed(_Utils_Tuple0);
		} else {
			var firstParser = _v0.a;
			var remainingParsers = _v0.b;
			return A3(
				$elm$core$List$foldl,
				F2(
					function (p, parsers) {
						return $elm$parser$Parser$Advanced$oneOf(
							_List_fromArray(
								[
									A2($elm$parser$Parser$Advanced$ignorer, p, parsers),
									$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
								]));
					}),
				$elm$parser$Parser$Advanced$oneOf(
					_List_fromArray(
						[
							firstParser,
							$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
						])),
				remainingParsers);
		}
	});
var $dillonkearns$elm_markdown$Markdown$CodeBlock$codeBlockLine = function (indented) {
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
			A2($dillonkearns$elm_markdown$Parser$Extra$upTo, indented, $dillonkearns$elm_markdown$Whitespace$space)),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$getOffset, $dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd),
			$dillonkearns$elm_markdown$Helpers$lineEndOrEnd));
};
var $elm$parser$Parser$Advanced$getSource = $elm$parser$Parser$Advanced$Parser(
	function (s) {
		return A3($elm$parser$Parser$Advanced$Good, false, s.src, s);
	});
var $dillonkearns$elm_markdown$Markdown$CodeBlock$remainingBlockHelp = function (_v0) {
	var fence = _v0.a;
	var body = _v0.b;
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed(
					$elm$parser$Parser$Advanced$Done(body)),
				$elm$parser$Parser$Advanced$end($elm$parser$Parser$ExpectingEnd)),
				A2(
				$elm$parser$Parser$Advanced$mapChompedString,
				F2(
					function (lineEnd, _v1) {
						return $elm$parser$Parser$Advanced$Loop(
							_Utils_Tuple2(
								fence,
								_Utils_ap(body, lineEnd)));
					}),
				$dillonkearns$elm_markdown$Whitespace$lineEnd),
				$elm$parser$Parser$Advanced$backtrackable(
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed(
						$elm$parser$Parser$Advanced$Done(body)),
					A2($dillonkearns$elm_markdown$Markdown$CodeBlock$closingFence, fence.length, fence.character))),
				A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					A2(
						$elm$parser$Parser$Advanced$keeper,
						$elm$parser$Parser$Advanced$succeed(
							F3(
								function (start, end, source) {
									return $elm$parser$Parser$Advanced$Loop(
										_Utils_Tuple2(
											fence,
											_Utils_ap(
												body,
												A3($elm$core$String$slice, start, end, source))));
								})),
						$dillonkearns$elm_markdown$Markdown$CodeBlock$codeBlockLine(fence.indented)),
					$elm$parser$Parser$Advanced$getOffset),
				$elm$parser$Parser$Advanced$getSource)
			]));
};
var $dillonkearns$elm_markdown$Markdown$CodeBlock$remainingBlock = function (fence) {
	return A2(
		$elm$parser$Parser$Advanced$loop,
		_Utils_Tuple2(fence, ''),
		$dillonkearns$elm_markdown$Markdown$CodeBlock$remainingBlockHelp);
};
var $dillonkearns$elm_markdown$Markdown$CodeBlock$parser = A2(
	$elm$parser$Parser$Advanced$andThen,
	function (fence) {
		return A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$CodeBlock$CodeBlock),
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$dillonkearns$elm_markdown$Markdown$CodeBlock$infoString(fence.character),
					$dillonkearns$elm_markdown$Helpers$lineEndOrEnd)),
			$dillonkearns$elm_markdown$Markdown$CodeBlock$remainingBlock(fence));
	},
	$dillonkearns$elm_markdown$Markdown$CodeBlock$openingFence);
var $dillonkearns$elm_markdown$Markdown$Heading$dropTrailingHashes = function (headingString) {
	return A2($elm$core$String$endsWith, '#', headingString) ? $dillonkearns$elm_markdown$Markdown$Heading$dropTrailingHashes(
		A2($elm$core$String$dropRight, 1, headingString)) : headingString;
};
var $elm$core$String$trimRight = _String_trimRight;
var $dillonkearns$elm_markdown$Markdown$Heading$dropClosingSequence = function (headingString) {
	var droppedTrailingHashesString = $dillonkearns$elm_markdown$Markdown$Heading$dropTrailingHashes(headingString);
	return (A2($elm$core$String$endsWith, ' ', droppedTrailingHashesString) || $elm$core$String$isEmpty(droppedTrailingHashesString)) ? $elm$core$String$trimRight(droppedTrailingHashesString) : headingString;
};
var $dillonkearns$elm_markdown$Parser$Token$hash = A2(
	$elm$parser$Parser$Advanced$Token,
	'#',
	$elm$parser$Parser$Expecting('a `#`'));
var $dillonkearns$elm_markdown$Markdown$Heading$isHash = function (c) {
	if ('#' === c.valueOf()) {
		return true;
	} else {
		return false;
	}
};
var $elm$parser$Parser$Advanced$spaces = $elm$parser$Parser$Advanced$chompWhile(
	function (c) {
		return _Utils_eq(
			c,
			_Utils_chr(' ')) || (_Utils_eq(
			c,
			_Utils_chr('\n')) || _Utils_eq(
			c,
			_Utils_chr('\r')));
	});
var $dillonkearns$elm_markdown$Markdown$Heading$parser = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$RawBlock$Heading),
				A2(
					$elm$parser$Parser$Advanced$andThen,
					function (startingSpaces) {
						var startSpace = $elm$core$String$length(startingSpaces);
						return (startSpace >= 4) ? $elm$parser$Parser$Advanced$problem(
							$elm$parser$Parser$Expecting('heading with < 4 spaces in front')) : $elm$parser$Parser$Advanced$succeed(startSpace);
					},
					$elm$parser$Parser$Advanced$getChompedString($elm$parser$Parser$Advanced$spaces))),
			$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$hash)),
		A2(
			$elm$parser$Parser$Advanced$andThen,
			function (additionalHashes) {
				var level = $elm$core$String$length(additionalHashes) + 1;
				return (level >= 7) ? $elm$parser$Parser$Advanced$problem(
					$elm$parser$Parser$Expecting('heading with < 7 #\'s')) : $elm$parser$Parser$Advanced$succeed(level);
			},
			$elm$parser$Parser$Advanced$getChompedString(
				$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Markdown$Heading$isHash)))),
	$elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed(
					$dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines('')),
				$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$newline)),
				A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
					$elm$parser$Parser$Advanced$oneOf(
						_List_fromArray(
							[
								$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$space),
								$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$tab)
							]))),
				A2(
					$elm$parser$Parser$Advanced$mapChompedString,
					F2(
						function (headingText, _v0) {
							return $dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(
								$dillonkearns$elm_markdown$Markdown$Heading$dropClosingSequence(
									$elm$core$String$trim(headingText)));
						}),
					$dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd))
			])));
var $elm$parser$Parser$Advanced$findSubString = _Parser_findSubString;
var $elm$parser$Parser$Advanced$fromInfo = F4(
	function (row, col, x, context) {
		return A2(
			$elm$parser$Parser$Advanced$AddRight,
			$elm$parser$Parser$Advanced$Empty,
			A4($elm$parser$Parser$Advanced$DeadEnd, row, col, x, context));
	});
var $elm$parser$Parser$Advanced$chompUntil = function (_v0) {
	var str = _v0.a;
	var expecting = _v0.b;
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			var _v1 = A5($elm$parser$Parser$Advanced$findSubString, str, s.offset, s.row, s.col, s.src);
			var newOffset = _v1.a;
			var newRow = _v1.b;
			var newCol = _v1.c;
			return _Utils_eq(newOffset, -1) ? A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A4($elm$parser$Parser$Advanced$fromInfo, newRow, newCol, expecting, s.context)) : A3(
				$elm$parser$Parser$Advanced$Good,
				_Utils_cmp(s.offset, newOffset) < 0,
				_Utils_Tuple0,
				{col: newCol, context: s.context, indent: s.indent, offset: newOffset, row: newRow, src: s.src});
		});
};
var $dillonkearns$elm_markdown$Parser$Token$greaterThan = A2(
	$elm$parser$Parser$Advanced$Token,
	'>',
	$elm$parser$Parser$Expecting('a `>`'));
var $elm$parser$Parser$Advanced$Located = F3(
	function (row, col, context) {
		return {col: col, context: context, row: row};
	});
var $elm$parser$Parser$Advanced$changeContext = F2(
	function (newContext, s) {
		return {col: s.col, context: newContext, indent: s.indent, offset: s.offset, row: s.row, src: s.src};
	});
var $elm$parser$Parser$Advanced$inContext = F2(
	function (context, _v0) {
		var parse = _v0.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v1 = parse(
					A2(
						$elm$parser$Parser$Advanced$changeContext,
						A2(
							$elm$core$List$cons,
							A3($elm$parser$Parser$Advanced$Located, s0.row, s0.col, context),
							s0.context),
						s0));
				if (_v1.$ === 'Good') {
					var p = _v1.a;
					var a = _v1.b;
					var s1 = _v1.c;
					return A3(
						$elm$parser$Parser$Advanced$Good,
						p,
						a,
						A2($elm$parser$Parser$Advanced$changeContext, s0.context, s1));
				} else {
					var step = _v1;
					return step;
				}
			});
	});
var $dillonkearns$elm_markdown$Whitespace$isWhitespace = function (_char) {
	switch (_char.valueOf()) {
		case ' ':
			return true;
		case '\n':
			return true;
		case '\t':
			return true;
		case '\u000B':
			return true;
		case '\u000C':
			return true;
		case '\r':
			return true;
		default:
			return false;
	}
};
var $dillonkearns$elm_markdown$Parser$Token$lessThan = A2(
	$elm$parser$Parser$Advanced$Token,
	'<',
	$elm$parser$Parser$Expecting('a `<`'));
var $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$destinationParser = A2(
	$elm$parser$Parser$Advanced$inContext,
	'link destination',
	$elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed($elm$url$Url$percentEncode),
					$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$lessThan)),
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$getChompedString(
						$elm$parser$Parser$Advanced$chompUntil($dillonkearns$elm_markdown$Parser$Token$greaterThan)),
					$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$greaterThan))),
				$elm$parser$Parser$Advanced$getChompedString(
				$dillonkearns$elm_markdown$Parser$Extra$chompOneOrMore(
					A2($elm$core$Basics$composeL, $elm$core$Basics$not, $dillonkearns$elm_markdown$Whitespace$isWhitespace)))
			])));
var $dillonkearns$elm_markdown$Parser$Token$closingSquareBracket = A2(
	$elm$parser$Parser$Advanced$Token,
	']',
	$elm$parser$Parser$Expecting('a `]`'));
var $dillonkearns$elm_markdown$Parser$Token$openingSquareBracket = A2(
	$elm$parser$Parser$Advanced$Token,
	'[',
	$elm$parser$Parser$Expecting('a `[`'));
var $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$labelParser = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$Helpers$prepareRefLabel),
		$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$openingSquareBracket)),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString(
			$elm$parser$Parser$Advanced$chompUntil($dillonkearns$elm_markdown$Parser$Token$closingSquareBracket)),
		$elm$parser$Parser$Advanced$symbol(
			A2(
				$elm$parser$Parser$Advanced$Token,
				']:',
				$elm$parser$Parser$Expecting(']:')))));
var $dillonkearns$elm_markdown$Parser$Token$doubleQuote = A2(
	$elm$parser$Parser$Advanced$Token,
	'\"',
	$elm$parser$Parser$Expecting('a double quote'));
var $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$hasNoBlankLine = function (str) {
	return A2($elm$core$String$contains, '\n\n', str) ? $elm$parser$Parser$Advanced$problem(
		$elm$parser$Parser$Expecting('no blank line')) : $elm$parser$Parser$Advanced$succeed(str);
};
var $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$onlyWhitespaceTillNewline = A2(
	$elm$parser$Parser$Advanced$ignorer,
	$elm$parser$Parser$Advanced$chompWhile(
		function (c) {
			return (!$dillonkearns$elm_markdown$Whitespace$isLineEnd(c)) && $dillonkearns$elm_markdown$Whitespace$isWhitespace(c);
		}),
	$dillonkearns$elm_markdown$Helpers$lineEndOrEnd);
var $dillonkearns$elm_markdown$Whitespace$requiredWhitespace = A2(
	$elm$parser$Parser$Advanced$ignorer,
	A2(
		$elm$parser$Parser$Advanced$chompIf,
		$dillonkearns$elm_markdown$Whitespace$isWhitespace,
		$elm$parser$Parser$Expecting('Required whitespace')),
	$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isWhitespace));
var $dillonkearns$elm_markdown$Parser$Token$singleQuote = A2(
	$elm$parser$Parser$Advanced$Token,
	'\'',
	$elm$parser$Parser$Expecting('a single quote'));
var $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$titleParser = function () {
	var inSingleQuotes = A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Maybe$Just),
			$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$singleQuote)),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$andThen,
					$dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$hasNoBlankLine,
					$elm$parser$Parser$Advanced$getChompedString(
						$elm$parser$Parser$Advanced$chompUntil($dillonkearns$elm_markdown$Parser$Token$singleQuote))),
				$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$singleQuote)),
			$dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$onlyWhitespaceTillNewline));
	var inDoubleQuotes = A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Maybe$Just),
			$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$doubleQuote)),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$andThen,
					$dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$hasNoBlankLine,
					$elm$parser$Parser$Advanced$getChompedString(
						$elm$parser$Parser$Advanced$chompUntil($dillonkearns$elm_markdown$Parser$Token$doubleQuote))),
				$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$doubleQuote)),
			$dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$onlyWhitespaceTillNewline));
	return A2(
		$elm$parser$Parser$Advanced$inContext,
		'title',
		$elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					$elm$parser$Parser$Advanced$backtrackable(
					A2(
						$elm$parser$Parser$Advanced$keeper,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
							$dillonkearns$elm_markdown$Whitespace$requiredWhitespace),
						$elm$parser$Parser$Advanced$oneOf(
							_List_fromArray(
								[
									inDoubleQuotes,
									inSingleQuotes,
									$elm$parser$Parser$Advanced$succeed($elm$core$Maybe$Nothing)
								])))),
					A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed($elm$core$Maybe$Nothing),
					$dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$onlyWhitespaceTillNewline)
				])));
}();
var $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$parser = A2(
	$elm$parser$Parser$Advanced$inContext,
	'link reference definition',
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed(
						F3(
							function (label, destination, title) {
								return _Utils_Tuple2(
									label,
									{destination: destination, title: title});
							})),
					$dillonkearns$elm_markdown$Whitespace$upToThreeSpaces),
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							$dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$labelParser,
							$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab)),
						$elm$parser$Parser$Advanced$oneOf(
							_List_fromArray(
								[
									$dillonkearns$elm_markdown$Whitespace$lineEnd,
									$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
								]))),
					$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab))),
			$dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$destinationParser),
		$dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$titleParser));
var $dillonkearns$elm_markdown$ThematicBreak$ThematicBreak = {$: 'ThematicBreak'};
var $dillonkearns$elm_markdown$ThematicBreak$whitespace = $elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab);
var $dillonkearns$elm_markdown$ThematicBreak$withChar = function (tchar) {
	var token = $dillonkearns$elm_markdown$Parser$Token$parseString(
		$elm$core$String$fromChar(tchar));
	return A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							A2(
								$elm$parser$Parser$Advanced$ignorer,
								$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$ThematicBreak$ThematicBreak),
								token),
							$dillonkearns$elm_markdown$ThematicBreak$whitespace),
						token),
					$dillonkearns$elm_markdown$ThematicBreak$whitespace),
				token),
			$elm$parser$Parser$Advanced$chompWhile(
				function (c) {
					return _Utils_eq(c, tchar) || $dillonkearns$elm_markdown$Whitespace$isSpaceOrTab(c);
				})),
		$dillonkearns$elm_markdown$Helpers$lineEndOrEnd);
};
var $dillonkearns$elm_markdown$ThematicBreak$parseThematicBreak = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			$dillonkearns$elm_markdown$ThematicBreak$withChar(
			_Utils_chr('-')),
			$dillonkearns$elm_markdown$ThematicBreak$withChar(
			_Utils_chr('*')),
			$dillonkearns$elm_markdown$ThematicBreak$withChar(
			_Utils_chr('_'))
		]));
var $dillonkearns$elm_markdown$ThematicBreak$parser = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
						$dillonkearns$elm_markdown$Whitespace$space),
					$elm$parser$Parser$Advanced$oneOf(
						_List_fromArray(
							[
								$dillonkearns$elm_markdown$Whitespace$space,
								$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
							]))),
				$elm$parser$Parser$Advanced$oneOf(
					_List_fromArray(
						[
							$dillonkearns$elm_markdown$Whitespace$space,
							$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
						]))),
			$dillonkearns$elm_markdown$ThematicBreak$parseThematicBreak),
			$dillonkearns$elm_markdown$ThematicBreak$parseThematicBreak
		]));
var $dillonkearns$elm_markdown$Markdown$RawBlock$LevelOne = {$: 'LevelOne'};
var $dillonkearns$elm_markdown$Markdown$RawBlock$LevelTwo = {$: 'LevelTwo'};
var $dillonkearns$elm_markdown$Markdown$RawBlock$SetextLine = F2(
	function (a, b) {
		return {$: 'SetextLine', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Parser$Token$equals = A2(
	$elm$parser$Parser$Advanced$Token,
	'=',
	$elm$parser$Parser$Expecting('a `=`'));
var $dillonkearns$elm_markdown$Parser$Token$minus = A2(
	$elm$parser$Parser$Advanced$Token,
	'-',
	$elm$parser$Parser$Expecting('a `-`'));
var $dillonkearns$elm_markdown$Markdown$Parser$setextLineParser = function () {
	var setextLevel = F3(
		function (level, levelToken, levelChar) {
			return A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed(level),
					$elm$parser$Parser$Advanced$token(levelToken)),
				$elm$parser$Parser$Advanced$chompWhile(
					$elm$core$Basics$eq(levelChar)));
		});
	return A2(
		$elm$parser$Parser$Advanced$mapChompedString,
		F2(
			function (raw, level) {
				return A2($dillonkearns$elm_markdown$Markdown$RawBlock$SetextLine, level, raw);
			}),
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
				$dillonkearns$elm_markdown$Whitespace$upToThreeSpaces),
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$oneOf(
						_List_fromArray(
							[
								A3(
								setextLevel,
								$dillonkearns$elm_markdown$Markdown$RawBlock$LevelOne,
								$dillonkearns$elm_markdown$Parser$Token$equals,
								_Utils_chr('=')),
								A3(
								setextLevel,
								$dillonkearns$elm_markdown$Markdown$RawBlock$LevelTwo,
								$dillonkearns$elm_markdown$Parser$Token$minus,
								_Utils_chr('-'))
							])),
					$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab)),
				$dillonkearns$elm_markdown$Helpers$lineEndOrEnd)));
}();
var $dillonkearns$elm_markdown$Markdown$RawBlock$TableDelimiter = function (a) {
	return {$: 'TableDelimiter', a: a};
};
var $dillonkearns$elm_markdown$Markdown$TableParser$chompSinglelineWhitespace = $elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab);
var $dillonkearns$elm_markdown$Parser$Extra$maybeChomp = function (condition) {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$chompIf,
				condition,
				$elm$parser$Parser$Problem('Character not found')),
				$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
			]));
};
var $dillonkearns$elm_markdown$Markdown$TableParser$requirePipeIfNotFirst = function (columns) {
	return $elm$core$List$isEmpty(columns) ? $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				$dillonkearns$elm_markdown$Parser$Token$parseString('|'),
				$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
			])) : $dillonkearns$elm_markdown$Parser$Token$parseString('|');
};
var $dillonkearns$elm_markdown$Markdown$TableParser$delimiterRowHelp = function (revDelimiterColumns) {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				$elm$parser$Parser$Advanced$backtrackable(
				A2(
					$elm$parser$Parser$Advanced$map,
					function (_v0) {
						return $elm$parser$Parser$Advanced$Done(revDelimiterColumns);
					},
					$dillonkearns$elm_markdown$Parser$Token$parseString('|\n'))),
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v1) {
					return $elm$parser$Parser$Advanced$Done(revDelimiterColumns);
				},
				$dillonkearns$elm_markdown$Parser$Token$parseString('\n')),
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v2) {
					return $elm$parser$Parser$Advanced$Done(revDelimiterColumns);
				},
				$elm$parser$Parser$Advanced$end(
					$elm$parser$Parser$Expecting('end'))),
				$elm$parser$Parser$Advanced$backtrackable(
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed(
							$elm$parser$Parser$Advanced$Done(revDelimiterColumns)),
						$dillonkearns$elm_markdown$Parser$Token$parseString('|')),
					$elm$parser$Parser$Advanced$end(
						$elm$parser$Parser$Expecting('end')))),
				A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed(
							function (column) {
								return $elm$parser$Parser$Advanced$Loop(
									A2($elm$core$List$cons, column, revDelimiterColumns));
							}),
						$dillonkearns$elm_markdown$Markdown$TableParser$requirePipeIfNotFirst(revDelimiterColumns)),
					$dillonkearns$elm_markdown$Markdown$TableParser$chompSinglelineWhitespace),
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$getChompedString(
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							A2(
								$elm$parser$Parser$Advanced$ignorer,
								A2(
									$elm$parser$Parser$Advanced$ignorer,
									$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0),
									$dillonkearns$elm_markdown$Parser$Extra$maybeChomp(
										function (c) {
											return _Utils_eq(
												c,
												_Utils_chr(':'));
										})),
								$dillonkearns$elm_markdown$Parser$Extra$chompOneOrMore(
									function (c) {
										return _Utils_eq(
											c,
											_Utils_chr('-'));
									})),
							$dillonkearns$elm_markdown$Parser$Extra$maybeChomp(
								function (c) {
									return _Utils_eq(
										c,
										_Utils_chr(':'));
								}))),
					$dillonkearns$elm_markdown$Markdown$TableParser$chompSinglelineWhitespace))
			]));
};
var $dillonkearns$elm_markdown$Markdown$Block$AlignCenter = {$: 'AlignCenter'};
var $dillonkearns$elm_markdown$Markdown$Block$AlignLeft = {$: 'AlignLeft'};
var $dillonkearns$elm_markdown$Markdown$Block$AlignRight = {$: 'AlignRight'};
var $dillonkearns$elm_markdown$Markdown$TableParser$delimiterToAlignment = function (cell) {
	var _v0 = _Utils_Tuple2(
		A2($elm$core$String$startsWith, ':', cell),
		A2($elm$core$String$endsWith, ':', cell));
	if (_v0.a) {
		if (_v0.b) {
			return $elm$core$Maybe$Just($dillonkearns$elm_markdown$Markdown$Block$AlignCenter);
		} else {
			return $elm$core$Maybe$Just($dillonkearns$elm_markdown$Markdown$Block$AlignLeft);
		}
	} else {
		if (_v0.b) {
			return $elm$core$Maybe$Just($dillonkearns$elm_markdown$Markdown$Block$AlignRight);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	}
};
var $dillonkearns$elm_markdown$Markdown$TableParser$delimiterRowParser = A2(
	$elm$parser$Parser$Advanced$andThen,
	function (delimiterRow) {
		var trimmed = delimiterRow.a.trimmed;
		var headers = delimiterRow.b;
		return $elm$core$List$isEmpty(headers) ? $elm$parser$Parser$Advanced$problem(
			$elm$parser$Parser$Expecting('Must have at least one column in delimiter row.')) : ((($elm$core$List$length(headers) === 1) && (!(A2($elm$core$String$startsWith, '|', trimmed) && A2($elm$core$String$endsWith, '|', trimmed)))) ? $elm$parser$Parser$Advanced$problem(
			$elm$parser$Parser$Problem('Tables with a single column must have pipes at the start and end of the delimiter row to avoid ambiguity.')) : $elm$parser$Parser$Advanced$succeed(delimiterRow));
	},
	A2(
		$elm$parser$Parser$Advanced$mapChompedString,
		F2(
			function (delimiterText, revDelimiterColumns) {
				return A2(
					$dillonkearns$elm_markdown$Markdown$Table$TableDelimiterRow,
					{
						raw: delimiterText,
						trimmed: $elm$core$String$trim(delimiterText)
					},
					A2(
						$elm$core$List$map,
						$dillonkearns$elm_markdown$Markdown$TableParser$delimiterToAlignment,
						$elm$core$List$reverse(revDelimiterColumns)));
			}),
		A2($elm$parser$Parser$Advanced$loop, _List_Nil, $dillonkearns$elm_markdown$Markdown$TableParser$delimiterRowHelp)));
var $dillonkearns$elm_markdown$Markdown$Parser$tableDelimiterInOpenParagraph = A2($elm$parser$Parser$Advanced$map, $dillonkearns$elm_markdown$Markdown$RawBlock$TableDelimiter, $dillonkearns$elm_markdown$Markdown$TableParser$delimiterRowParser);
var $elm$core$List$takeReverse = F3(
	function (n, list, kept) {
		takeReverse:
		while (true) {
			if (n <= 0) {
				return kept;
			} else {
				if (!list.b) {
					return kept;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs,
						$temp$kept = A2($elm$core$List$cons, x, kept);
					n = $temp$n;
					list = $temp$list;
					kept = $temp$kept;
					continue takeReverse;
				}
			}
		}
	});
var $elm$core$List$takeTailRec = F2(
	function (n, list) {
		return $elm$core$List$reverse(
			A3($elm$core$List$takeReverse, n, list, _List_Nil));
	});
var $elm$core$List$takeFast = F3(
	function (ctr, n, list) {
		if (n <= 0) {
			return _List_Nil;
		} else {
			var _v0 = _Utils_Tuple2(n, list);
			_v0$1:
			while (true) {
				_v0$5:
				while (true) {
					if (!_v0.b.b) {
						return list;
					} else {
						if (_v0.b.b.b) {
							switch (_v0.a) {
								case 1:
									break _v0$1;
								case 2:
									var _v2 = _v0.b;
									var x = _v2.a;
									var _v3 = _v2.b;
									var y = _v3.a;
									return _List_fromArray(
										[x, y]);
								case 3:
									if (_v0.b.b.b.b) {
										var _v4 = _v0.b;
										var x = _v4.a;
										var _v5 = _v4.b;
										var y = _v5.a;
										var _v6 = _v5.b;
										var z = _v6.a;
										return _List_fromArray(
											[x, y, z]);
									} else {
										break _v0$5;
									}
								default:
									if (_v0.b.b.b.b && _v0.b.b.b.b.b) {
										var _v7 = _v0.b;
										var x = _v7.a;
										var _v8 = _v7.b;
										var y = _v8.a;
										var _v9 = _v8.b;
										var z = _v9.a;
										var _v10 = _v9.b;
										var w = _v10.a;
										var tl = _v10.b;
										return (ctr > 1000) ? A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A2($elm$core$List$takeTailRec, n - 4, tl))))) : A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A3($elm$core$List$takeFast, ctr + 1, n - 4, tl)))));
									} else {
										break _v0$5;
									}
							}
						} else {
							if (_v0.a === 1) {
								break _v0$1;
							} else {
								break _v0$5;
							}
						}
					}
				}
				return list;
			}
			var _v1 = _v0.b;
			var x = _v1.a;
			return _List_fromArray(
				[x]);
		}
	});
var $elm$core$List$take = F2(
	function (n, list) {
		return A3($elm$core$List$takeFast, 0, n, list);
	});
var $dillonkearns$elm_markdown$Markdown$TableParser$standardizeRowLength = F2(
	function (expectedLength, row) {
		var rowLength = $elm$core$List$length(row);
		var _v0 = A2($elm$core$Basics$compare, expectedLength, rowLength);
		switch (_v0.$) {
			case 'LT':
				return A2($elm$core$List$take, expectedLength, row);
			case 'EQ':
				return row;
			default:
				return _Utils_ap(
					row,
					A2($elm$core$List$repeat, expectedLength - rowLength, ''));
		}
	});
var $dillonkearns$elm_markdown$Markdown$TableParser$bodyRowParser = function (expectedRowLength) {
	return A2(
		$elm$parser$Parser$Advanced$andThen,
		function (row) {
			return ($elm$core$List$isEmpty(row) || A2($elm$core$List$all, $elm$core$String$isEmpty, row)) ? $elm$parser$Parser$Advanced$problem(
				$elm$parser$Parser$Problem('A line must have at least one column')) : $elm$parser$Parser$Advanced$succeed(
				A2($dillonkearns$elm_markdown$Markdown$TableParser$standardizeRowLength, expectedRowLength, row));
		},
		$dillonkearns$elm_markdown$Markdown$TableParser$rowParser);
};
var $dillonkearns$elm_markdown$Markdown$Parser$tableRowIfTableStarted = function (_v0) {
	var headers = _v0.a;
	var body = _v0.b;
	return A2(
		$elm$parser$Parser$Advanced$map,
		function (row) {
			return $dillonkearns$elm_markdown$Markdown$RawBlock$Table(
				A2(
					$dillonkearns$elm_markdown$Markdown$Table$Table,
					headers,
					_Utils_ap(
						body,
						_List_fromArray(
							[row]))));
		},
		$dillonkearns$elm_markdown$Markdown$TableParser$bodyRowParser(
			$elm$core$List$length(headers)));
};
var $dillonkearns$elm_markdown$Markdown$Block$H1 = {$: 'H1'};
var $dillonkearns$elm_markdown$Markdown$Block$H2 = {$: 'H2'};
var $dillonkearns$elm_markdown$Markdown$Block$H3 = {$: 'H3'};
var $dillonkearns$elm_markdown$Markdown$Block$H4 = {$: 'H4'};
var $dillonkearns$elm_markdown$Markdown$Block$H5 = {$: 'H5'};
var $dillonkearns$elm_markdown$Markdown$Block$H6 = {$: 'H6'};
var $dillonkearns$elm_markdown$Markdown$Parser$toHeading = function (level) {
	switch (level) {
		case 1:
			return $elm$core$Result$Ok($dillonkearns$elm_markdown$Markdown$Block$H1);
		case 2:
			return $elm$core$Result$Ok($dillonkearns$elm_markdown$Markdown$Block$H2);
		case 3:
			return $elm$core$Result$Ok($dillonkearns$elm_markdown$Markdown$Block$H3);
		case 4:
			return $elm$core$Result$Ok($dillonkearns$elm_markdown$Markdown$Block$H4);
		case 5:
			return $elm$core$Result$Ok($dillonkearns$elm_markdown$Markdown$Block$H5);
		case 6:
			return $elm$core$Result$Ok($dillonkearns$elm_markdown$Markdown$Block$H6);
		default:
			return $elm$core$Result$Err(
				$elm$parser$Parser$Expecting(
					'A heading with 1 to 6 #\'s, but found ' + $elm$core$String$fromInt(level)));
	}
};
var $dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock = function (a) {
	return {$: 'UnorderedListBlock', a: a};
};
var $dillonkearns$elm_markdown$Parser$Token$asterisk = A2(
	$elm$parser$Parser$Advanced$Token,
	'*',
	$elm$parser$Parser$Expecting('a `*`'));
var $dillonkearns$elm_markdown$Parser$Token$plus = A2(
	$elm$parser$Parser$Advanced$Token,
	'+',
	$elm$parser$Parser$Expecting('a `+`'));
var $dillonkearns$elm_markdown$Markdown$UnorderedList$listMarkerParser = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Parser$Token$minus),
			$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$minus)),
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Parser$Token$plus),
			$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$plus)),
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Parser$Token$asterisk),
			$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$asterisk))
		]));
var $dillonkearns$elm_markdown$Markdown$ListItem$PlainItem = function (a) {
	return {$: 'PlainItem', a: a};
};
var $dillonkearns$elm_markdown$Markdown$ListItem$TaskItem = F2(
	function (a, b) {
		return {$: 'TaskItem', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$ListItem$Complete = {$: 'Complete'};
var $dillonkearns$elm_markdown$Markdown$ListItem$Incomplete = {$: 'Incomplete'};
var $dillonkearns$elm_markdown$Markdown$ListItem$taskItemParser = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$ListItem$Complete),
			$elm$parser$Parser$Advanced$symbol(
				A2(
					$elm$parser$Parser$Advanced$Token,
					'[x] ',
					$elm$parser$Parser$ExpectingSymbol('[x] ')))),
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$ListItem$Complete),
			$elm$parser$Parser$Advanced$symbol(
				A2(
					$elm$parser$Parser$Advanced$Token,
					'[X] ',
					$elm$parser$Parser$ExpectingSymbol('[X] ')))),
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$ListItem$Incomplete),
			$elm$parser$Parser$Advanced$symbol(
				A2(
					$elm$parser$Parser$Advanced$Token,
					'[ ] ',
					$elm$parser$Parser$ExpectingSymbol('[ ] '))))
		]));
var $dillonkearns$elm_markdown$Markdown$ListItem$parser = A2(
	$elm$parser$Parser$Advanced$keeper,
	$elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$keeper,
				$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$ListItem$TaskItem),
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$dillonkearns$elm_markdown$Markdown$ListItem$taskItemParser,
					$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab))),
				$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$ListItem$PlainItem)
			])),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd),
		$dillonkearns$elm_markdown$Helpers$lineEndOrEnd));
var $dillonkearns$elm_markdown$Markdown$UnorderedList$itemBody = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
				$elm$parser$Parser$Advanced$backtrackable(
					$dillonkearns$elm_markdown$Parser$Extra$chompOneOrMore($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab))),
			$dillonkearns$elm_markdown$Markdown$ListItem$parser),
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed(
				$dillonkearns$elm_markdown$Markdown$ListItem$PlainItem('')),
			$dillonkearns$elm_markdown$Whitespace$lineEnd)
		]));
var $dillonkearns$elm_markdown$Markdown$UnorderedList$singleItemParser = function (listMarker) {
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
			$elm$parser$Parser$Advanced$backtrackable(
				$elm$parser$Parser$Advanced$symbol(listMarker))),
		$dillonkearns$elm_markdown$Markdown$UnorderedList$itemBody);
};
var $dillonkearns$elm_markdown$Markdown$UnorderedList$statementsHelp = F3(
	function (itemParser, firstItem, revStmts) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$Advanced$map,
					function (stmt) {
						return $elm$parser$Parser$Advanced$Loop(
							A2($elm$core$List$cons, stmt, revStmts));
					},
					itemParser),
					$elm$parser$Parser$Advanced$succeed(
					$elm$parser$Parser$Advanced$Done(
						A2(
							$elm$core$List$cons,
							firstItem,
							$elm$core$List$reverse(revStmts))))
				]));
	});
var $dillonkearns$elm_markdown$Markdown$UnorderedList$parser = function () {
	var parseSubsequentItems = F2(
		function (listMarker, firstItem) {
			return A2(
				$elm$parser$Parser$Advanced$loop,
				_List_Nil,
				A2(
					$dillonkearns$elm_markdown$Markdown$UnorderedList$statementsHelp,
					$dillonkearns$elm_markdown$Markdown$UnorderedList$singleItemParser(listMarker),
					firstItem));
		});
	return A2(
		$elm$parser$Parser$Advanced$andThen,
		$elm$core$Basics$identity,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				$elm$parser$Parser$Advanced$succeed(parseSubsequentItems),
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$UnorderedList$listMarkerParser),
					$dillonkearns$elm_markdown$Parser$Extra$chompOneOrMore($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab))),
			$dillonkearns$elm_markdown$Markdown$ListItem$parser));
}();
var $dillonkearns$elm_markdown$Markdown$Parser$unorderedListBlock = function () {
	var parseListItem = function (unparsedListItem) {
		if (unparsedListItem.$ === 'TaskItem') {
			var completion = unparsedListItem.a;
			var body = unparsedListItem.b;
			return {
				body: $dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(body),
				task: $elm$core$Maybe$Just(
					function () {
						if (completion.$ === 'Complete') {
							return true;
						} else {
							return false;
						}
					}())
			};
		} else {
			var body = unparsedListItem.a;
			return {
				body: $dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(body),
				task: $elm$core$Maybe$Nothing
			};
		}
	};
	return A2(
		$elm$parser$Parser$Advanced$map,
		A2(
			$elm$core$Basics$composeR,
			$elm$core$List$map(parseListItem),
			$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock),
		$dillonkearns$elm_markdown$Markdown$UnorderedList$parser);
}();
var $dillonkearns$elm_markdown$Markdown$Parser$childToBlocks = F2(
	function (node, blocks) {
		switch (node.$) {
			case 'Element':
				var tag = node.a;
				var attributes = node.b;
				var children = node.c;
				var _v28 = $dillonkearns$elm_markdown$Markdown$Parser$nodesToBlocks(children);
				if (_v28.$ === 'Ok') {
					var childrenAsBlocks = _v28.a;
					var block = $dillonkearns$elm_markdown$Markdown$Block$HtmlBlock(
						A3($dillonkearns$elm_markdown$Markdown$Block$HtmlElement, tag, attributes, childrenAsBlocks));
					return $elm$core$Result$Ok(
						A2($elm$core$List$cons, block, blocks));
				} else {
					var err = _v28.a;
					return $elm$core$Result$Err(err);
				}
			case 'Text':
				var innerText = node.a;
				var _v29 = $dillonkearns$elm_markdown$Markdown$Parser$parse(innerText);
				if (_v29.$ === 'Ok') {
					var value = _v29.a;
					return $elm$core$Result$Ok(
						_Utils_ap(
							$elm$core$List$reverse(value),
							blocks));
				} else {
					var error = _v29.a;
					return $elm$core$Result$Err(
						$elm$parser$Parser$Expecting(
							A2(
								$elm$core$String$join,
								'\n',
								A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Parser$deadEndToString, error))));
				}
			case 'Comment':
				var string = node.a;
				return $elm$core$Result$Ok(
					A2(
						$elm$core$List$cons,
						$dillonkearns$elm_markdown$Markdown$Block$HtmlBlock(
							$dillonkearns$elm_markdown$Markdown$Block$HtmlComment(string)),
						blocks));
			case 'Cdata':
				var string = node.a;
				return $elm$core$Result$Ok(
					A2(
						$elm$core$List$cons,
						$dillonkearns$elm_markdown$Markdown$Block$HtmlBlock(
							$dillonkearns$elm_markdown$Markdown$Block$Cdata(string)),
						blocks));
			case 'ProcessingInstruction':
				var string = node.a;
				return $elm$core$Result$Ok(
					A2(
						$elm$core$List$cons,
						$dillonkearns$elm_markdown$Markdown$Block$HtmlBlock(
							$dillonkearns$elm_markdown$Markdown$Block$ProcessingInstruction(string)),
						blocks));
			default:
				var declarationType = node.a;
				var content = node.b;
				return $elm$core$Result$Ok(
					A2(
						$elm$core$List$cons,
						$dillonkearns$elm_markdown$Markdown$Block$HtmlBlock(
							A2($dillonkearns$elm_markdown$Markdown$Block$HtmlDeclaration, declarationType, content)),
						blocks));
		}
	});
var $dillonkearns$elm_markdown$Markdown$Parser$inlineParseHelper = F2(
	function (referencesDict, _v23) {
		var unparsedInlines = _v23.a;
		var mappedReferencesDict = $elm$core$Dict$fromList(
			A2(
				$elm$core$List$map,
				$elm$core$Tuple$mapSecond(
					function (_v24) {
						var destination = _v24.destination;
						var title = _v24.title;
						return _Utils_Tuple2(destination, title);
					}),
				referencesDict));
		return A2(
			$elm$core$List$map,
			$dillonkearns$elm_markdown$Markdown$Parser$mapInline,
			A2($dillonkearns$elm_markdown$Markdown$InlineParser$parse, mappedReferencesDict, unparsedInlines));
	});
var $dillonkearns$elm_markdown$Markdown$Parser$mapInline = function (inline) {
	switch (inline.$) {
		case 'Text':
			var string = inline.a;
			return $dillonkearns$elm_markdown$Markdown$Block$Text(string);
		case 'HardLineBreak':
			return $dillonkearns$elm_markdown$Markdown$Block$HardLineBreak;
		case 'CodeInline':
			var string = inline.a;
			return $dillonkearns$elm_markdown$Markdown$Block$CodeSpan(string);
		case 'Link':
			var string = inline.a;
			var maybeString = inline.b;
			var inlines = inline.c;
			return A3(
				$dillonkearns$elm_markdown$Markdown$Block$Link,
				string,
				maybeString,
				A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Parser$mapInline, inlines));
		case 'Image':
			var string = inline.a;
			var maybeString = inline.b;
			var inlines = inline.c;
			return A3(
				$dillonkearns$elm_markdown$Markdown$Block$Image,
				string,
				maybeString,
				A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Parser$mapInline, inlines));
		case 'HtmlInline':
			var node = inline.a;
			return $dillonkearns$elm_markdown$Markdown$Block$HtmlInline(
				$dillonkearns$elm_markdown$Markdown$Parser$nodeToRawBlock(node));
		case 'Emphasis':
			var level = inline.a;
			var inlines = inline.b;
			switch (level) {
				case 1:
					return $dillonkearns$elm_markdown$Markdown$Block$Emphasis(
						A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Parser$mapInline, inlines));
				case 2:
					return $dillonkearns$elm_markdown$Markdown$Block$Strong(
						A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Parser$mapInline, inlines));
				default:
					return $dillonkearns$elm_markdown$Markdown$Block$Strong(
						A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Parser$mapInline, inlines));
			}
		default:
			var inlines = inline.a;
			return $dillonkearns$elm_markdown$Markdown$Block$Strikethrough(
				A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Parser$mapInline, inlines));
	}
};
var $dillonkearns$elm_markdown$Markdown$Parser$nodeToRawBlock = function (node) {
	switch (node.$) {
		case 'Text':
			var innerText = node.a;
			return $dillonkearns$elm_markdown$Markdown$Block$HtmlComment('TODO this never happens, but use types to drop this case.');
		case 'Element':
			var tag = node.a;
			var attributes = node.b;
			var children = node.c;
			var parseChild = function (child) {
				if (child.$ === 'Text') {
					var text = child.a;
					return $dillonkearns$elm_markdown$Markdown$Parser$textNodeToBlocks(text);
				} else {
					return _List_fromArray(
						[
							$dillonkearns$elm_markdown$Markdown$Block$HtmlBlock(
							$dillonkearns$elm_markdown$Markdown$Parser$nodeToRawBlock(child))
						]);
				}
			};
			return A3(
				$dillonkearns$elm_markdown$Markdown$Block$HtmlElement,
				tag,
				attributes,
				A2($elm$core$List$concatMap, parseChild, children));
		case 'Comment':
			var string = node.a;
			return $dillonkearns$elm_markdown$Markdown$Block$HtmlComment(string);
		case 'Cdata':
			var string = node.a;
			return $dillonkearns$elm_markdown$Markdown$Block$Cdata(string);
		case 'ProcessingInstruction':
			var string = node.a;
			return $dillonkearns$elm_markdown$Markdown$Block$ProcessingInstruction(string);
		default:
			var declarationType = node.a;
			var content = node.b;
			return A2($dillonkearns$elm_markdown$Markdown$Block$HtmlDeclaration, declarationType, content);
	}
};
var $dillonkearns$elm_markdown$Markdown$Parser$nodesToBlocks = function (children) {
	return A2($dillonkearns$elm_markdown$Markdown$Parser$nodesToBlocksHelp, children, _List_Nil);
};
var $dillonkearns$elm_markdown$Markdown$Parser$nodesToBlocksHelp = F2(
	function (remaining, soFar) {
		nodesToBlocksHelp:
		while (true) {
			if (remaining.b) {
				var node = remaining.a;
				var rest = remaining.b;
				var _v18 = A2($dillonkearns$elm_markdown$Markdown$Parser$childToBlocks, node, soFar);
				if (_v18.$ === 'Ok') {
					var newSoFar = _v18.a;
					var $temp$remaining = rest,
						$temp$soFar = newSoFar;
					remaining = $temp$remaining;
					soFar = $temp$soFar;
					continue nodesToBlocksHelp;
				} else {
					var e = _v18.a;
					return $elm$core$Result$Err(e);
				}
			} else {
				return $elm$core$Result$Ok(
					$elm$core$List$reverse(soFar));
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$Parser$parse = function (input) {
	var _v14 = A2(
		$elm$parser$Parser$Advanced$run,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
			$dillonkearns$elm_markdown$Helpers$endOfFile),
		input);
	if (_v14.$ === 'Err') {
		var e = _v14.a;
		return $elm$core$Result$Err(e);
	} else {
		var v = _v14.a;
		var _v15 = $dillonkearns$elm_markdown$Markdown$Parser$parseAllInlines(v);
		if (_v15.$ === 'Err') {
			var e = _v15.a;
			return A2(
				$elm$parser$Parser$Advanced$run,
				$elm$parser$Parser$Advanced$problem(e),
				'');
		} else {
			var blocks = _v15.a;
			var isNotEmptyParagraph = function (block) {
				if ((block.$ === 'Paragraph') && (!block.a.b)) {
					return false;
				} else {
					return true;
				}
			};
			return $elm$core$Result$Ok(
				A2($elm$core$List$filter, isNotEmptyParagraph, blocks));
		}
	}
};
var $dillonkearns$elm_markdown$Markdown$Parser$parseAllInlines = function (state) {
	return A3($dillonkearns$elm_markdown$Markdown$Parser$parseAllInlinesHelp, state, state.rawBlocks, _List_Nil);
};
var $dillonkearns$elm_markdown$Markdown$Parser$parseAllInlinesHelp = F3(
	function (state, rawBlocks, parsedBlocks) {
		parseAllInlinesHelp:
		while (true) {
			if (rawBlocks.b) {
				var rawBlock = rawBlocks.a;
				var rest = rawBlocks.b;
				var _v13 = A2($dillonkearns$elm_markdown$Markdown$Parser$parseInlines, state.linkReferenceDefinitions, rawBlock);
				switch (_v13.$) {
					case 'ParsedBlock':
						var newParsedBlock = _v13.a;
						var $temp$state = state,
							$temp$rawBlocks = rest,
							$temp$parsedBlocks = A2($elm$core$List$cons, newParsedBlock, parsedBlocks);
						state = $temp$state;
						rawBlocks = $temp$rawBlocks;
						parsedBlocks = $temp$parsedBlocks;
						continue parseAllInlinesHelp;
					case 'EmptyBlock':
						var $temp$state = state,
							$temp$rawBlocks = rest,
							$temp$parsedBlocks = parsedBlocks;
						state = $temp$state;
						rawBlocks = $temp$rawBlocks;
						parsedBlocks = $temp$parsedBlocks;
						continue parseAllInlinesHelp;
					default:
						var e = _v13.a;
						return $elm$core$Result$Err(e);
				}
			} else {
				return $elm$core$Result$Ok(parsedBlocks);
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$Parser$parseHeaderInlines = F2(
	function (linkReferences, header) {
		return A2(
			$elm$core$List$map,
			function (_v11) {
				var label = _v11.label;
				var alignment = _v11.alignment;
				return A3(
					$dillonkearns$elm_markdown$Markdown$Parser$parseRawInline,
					linkReferences,
					function (parsedHeaderLabel) {
						return {alignment: alignment, label: parsedHeaderLabel};
					},
					$dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(label));
			},
			header);
	});
var $dillonkearns$elm_markdown$Markdown$Parser$parseInlines = F2(
	function (linkReferences, rawBlock) {
		switch (rawBlock.$) {
			case 'Heading':
				var level = rawBlock.a;
				var unparsedInlines = rawBlock.b;
				var _v5 = $dillonkearns$elm_markdown$Markdown$Parser$toHeading(level);
				if (_v5.$ === 'Ok') {
					var parsedLevel = _v5.a;
					return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
						A2(
							$dillonkearns$elm_markdown$Markdown$Block$Heading,
							parsedLevel,
							A2($dillonkearns$elm_markdown$Markdown$Parser$inlineParseHelper, linkReferences, unparsedInlines)));
				} else {
					var e = _v5.a;
					return $dillonkearns$elm_markdown$Markdown$Parser$InlineProblem(e);
				}
			case 'OpenBlockOrParagraph':
				var unparsedInlines = rawBlock.a;
				return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
					$dillonkearns$elm_markdown$Markdown$Block$Paragraph(
						A2($dillonkearns$elm_markdown$Markdown$Parser$inlineParseHelper, linkReferences, unparsedInlines)));
			case 'Html':
				var html = rawBlock.a;
				return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
					$dillonkearns$elm_markdown$Markdown$Block$HtmlBlock(html));
			case 'UnorderedListBlock':
				var unparsedItems = rawBlock.a;
				var parseItem = function (unparsed) {
					var task = function () {
						var _v6 = unparsed.task;
						if (_v6.$ === 'Just') {
							if (!_v6.a) {
								return $dillonkearns$elm_markdown$Markdown$Block$IncompleteTask;
							} else {
								return $dillonkearns$elm_markdown$Markdown$Block$CompletedTask;
							}
						} else {
							return $dillonkearns$elm_markdown$Markdown$Block$NoTask;
						}
					}();
					var parsedInlines = A3($dillonkearns$elm_markdown$Markdown$Parser$parseRawInline, linkReferences, $elm$core$Basics$identity, unparsed.body);
					return A2($dillonkearns$elm_markdown$Markdown$Block$ListItem, task, parsedInlines);
				};
				return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
					$dillonkearns$elm_markdown$Markdown$Block$UnorderedList(
						A2($elm$core$List$map, parseItem, unparsedItems)));
			case 'OrderedListBlock':
				var startingIndex = rawBlock.a;
				var unparsedInlines = rawBlock.b;
				return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
					A2(
						$dillonkearns$elm_markdown$Markdown$Block$OrderedList,
						startingIndex,
						A2(
							$elm$core$List$map,
							A2($dillonkearns$elm_markdown$Markdown$Parser$parseRawInline, linkReferences, $elm$core$Basics$identity),
							unparsedInlines)));
			case 'CodeBlock':
				var codeBlock = rawBlock.a;
				return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
					$dillonkearns$elm_markdown$Markdown$Block$CodeBlock(codeBlock));
			case 'ThematicBreak':
				return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock($dillonkearns$elm_markdown$Markdown$Block$ThematicBreak);
			case 'BlankLine':
				return $dillonkearns$elm_markdown$Markdown$Parser$EmptyBlock;
			case 'BlockQuote':
				var rawBlocks = rawBlock.a;
				var _v7 = A2(
					$elm$parser$Parser$Advanced$run,
					$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
					rawBlocks);
				if (_v7.$ === 'Ok') {
					var value = _v7.a;
					var _v8 = $dillonkearns$elm_markdown$Markdown$Parser$parseAllInlines(value);
					if (_v8.$ === 'Ok') {
						var parsedBlocks = _v8.a;
						return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
							$dillonkearns$elm_markdown$Markdown$Block$BlockQuote(parsedBlocks));
					} else {
						var e = _v8.a;
						return $dillonkearns$elm_markdown$Markdown$Parser$InlineProblem(e);
					}
				} else {
					var error = _v7.a;
					return $dillonkearns$elm_markdown$Markdown$Parser$InlineProblem(
						$elm$parser$Parser$Problem(
							$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(error)));
				}
			case 'IndentedCodeBlock':
				var codeBlockBody = rawBlock.a;
				return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
					$dillonkearns$elm_markdown$Markdown$Block$CodeBlock(
						{body: codeBlockBody, language: $elm$core$Maybe$Nothing}));
			case 'Table':
				var _v9 = rawBlock.a;
				var header = _v9.a;
				var rows = _v9.b;
				return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
					A2(
						$dillonkearns$elm_markdown$Markdown$Block$Table,
						A2($dillonkearns$elm_markdown$Markdown$Parser$parseHeaderInlines, linkReferences, header),
						A2($dillonkearns$elm_markdown$Markdown$Parser$parseRowInlines, linkReferences, rows)));
			case 'TableDelimiter':
				var _v10 = rawBlock.a;
				var text = _v10.a;
				return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
					$dillonkearns$elm_markdown$Markdown$Block$Paragraph(
						A2(
							$dillonkearns$elm_markdown$Markdown$Parser$inlineParseHelper,
							linkReferences,
							$dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(text.raw))));
			default:
				var raw = rawBlock.b;
				return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
					$dillonkearns$elm_markdown$Markdown$Block$Paragraph(
						A2(
							$dillonkearns$elm_markdown$Markdown$Parser$inlineParseHelper,
							linkReferences,
							$dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(raw))));
		}
	});
var $dillonkearns$elm_markdown$Markdown$Parser$parseRawInline = F3(
	function (linkReferences, wrap, unparsedInlines) {
		return wrap(
			A2($dillonkearns$elm_markdown$Markdown$Parser$inlineParseHelper, linkReferences, unparsedInlines));
	});
var $dillonkearns$elm_markdown$Markdown$Parser$parseRowInlines = F2(
	function (linkReferences, rows) {
		return A2(
			$elm$core$List$map,
			function (row) {
				return A2(
					$elm$core$List$map,
					function (column) {
						return A3(
							$dillonkearns$elm_markdown$Markdown$Parser$parseRawInline,
							linkReferences,
							$elm$core$Basics$identity,
							$dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(column));
					},
					row);
			},
			rows);
	});
var $dillonkearns$elm_markdown$Markdown$Parser$stepRawBlock = function (revStmts) {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v2) {
					return $elm$parser$Parser$Advanced$Done(revStmts);
				},
				$dillonkearns$elm_markdown$Helpers$endOfFile),
				A2(
				$elm$parser$Parser$Advanced$map,
				function (reference) {
					return $elm$parser$Parser$Advanced$Loop(
						A2($dillonkearns$elm_markdown$Markdown$Parser$addReference, revStmts, reference));
				},
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$parser)),
				A2(
				$elm$parser$Parser$Advanced$map,
				function (block) {
					return $elm$parser$Parser$Advanced$Loop(
						A2($dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks, revStmts, block));
				},
				function () {
					var _v3 = revStmts.rawBlocks;
					_v3$2:
					while (true) {
						if (_v3.b) {
							switch (_v3.a.$) {
								case 'OpenBlockOrParagraph':
									return $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterOpenBlockOrParagraphParser();
								case 'Table':
									var table = _v3.a.a;
									return $elm$parser$Parser$Advanced$oneOf(
										_List_fromArray(
											[
												$dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser(),
												$dillonkearns$elm_markdown$Markdown$Parser$tableRowIfTableStarted(table)
											]));
								default:
									break _v3$2;
							}
						} else {
							break _v3$2;
						}
					}
					return $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser();
				}()),
				A2(
				$elm$parser$Parser$Advanced$map,
				function (block) {
					return $elm$parser$Parser$Advanced$Loop(
						A2($dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks, revStmts, block));
				},
				$dillonkearns$elm_markdown$Markdown$Parser$openBlockOrParagraphParser)
			]));
};
var $dillonkearns$elm_markdown$Markdown$Parser$textNodeToBlocks = function (textNodeValue) {
	return A2(
		$elm$core$Result$withDefault,
		_List_Nil,
		$dillonkearns$elm_markdown$Markdown$Parser$parse(textNodeValue));
};
var $dillonkearns$elm_markdown$Markdown$Parser$xmlNodeToHtmlNode = function (xmlNode) {
	switch (xmlNode.$) {
		case 'Text':
			var innerText = xmlNode.a;
			return $elm$parser$Parser$Advanced$succeed(
				$dillonkearns$elm_markdown$Markdown$RawBlock$OpenBlockOrParagraph(
					$dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(innerText)));
		case 'Element':
			var tag = xmlNode.a;
			var attributes = xmlNode.b;
			var children = xmlNode.c;
			var _v1 = $dillonkearns$elm_markdown$Markdown$Parser$nodesToBlocks(children);
			if (_v1.$ === 'Ok') {
				var parsedChildren = _v1.a;
				return $elm$parser$Parser$Advanced$succeed(
					$dillonkearns$elm_markdown$Markdown$RawBlock$Html(
						A3($dillonkearns$elm_markdown$Markdown$Block$HtmlElement, tag, attributes, parsedChildren)));
			} else {
				var err = _v1.a;
				return $elm$parser$Parser$Advanced$problem(err);
			}
		case 'Comment':
			var string = xmlNode.a;
			return $elm$parser$Parser$Advanced$succeed(
				$dillonkearns$elm_markdown$Markdown$RawBlock$Html(
					$dillonkearns$elm_markdown$Markdown$Block$HtmlComment(string)));
		case 'Cdata':
			var string = xmlNode.a;
			return $elm$parser$Parser$Advanced$succeed(
				$dillonkearns$elm_markdown$Markdown$RawBlock$Html(
					$dillonkearns$elm_markdown$Markdown$Block$Cdata(string)));
		case 'ProcessingInstruction':
			var string = xmlNode.a;
			return $elm$parser$Parser$Advanced$succeed(
				$dillonkearns$elm_markdown$Markdown$RawBlock$Html(
					$dillonkearns$elm_markdown$Markdown$Block$ProcessingInstruction(string)));
		default:
			var declarationType = xmlNode.a;
			var content = xmlNode.b;
			return $elm$parser$Parser$Advanced$succeed(
				$dillonkearns$elm_markdown$Markdown$RawBlock$Html(
					A2($dillonkearns$elm_markdown$Markdown$Block$HtmlDeclaration, declarationType, content)));
	}
};
function $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser() {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				$dillonkearns$elm_markdown$Markdown$Parser$parseAsParagraphInsteadOfHtmlBlock,
				$dillonkearns$elm_markdown$Markdown$Parser$blankLine,
				$dillonkearns$elm_markdown$Markdown$Parser$blockQuote,
				A2(
				$elm$parser$Parser$Advanced$map,
				$dillonkearns$elm_markdown$Markdown$RawBlock$CodeBlock,
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$CodeBlock$parser)),
				$dillonkearns$elm_markdown$Markdown$Parser$indentedCodeBlock,
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v26) {
					return $dillonkearns$elm_markdown$Markdown$RawBlock$ThematicBreak;
				},
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$ThematicBreak$parser)),
				$dillonkearns$elm_markdown$Markdown$Parser$unorderedListBlock,
				$dillonkearns$elm_markdown$Markdown$Parser$orderedListBlock(false),
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$Heading$parser),
				$dillonkearns$elm_markdown$Markdown$Parser$cyclic$htmlParser()
			]));
}
function $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterOpenBlockOrParagraphParser() {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				$dillonkearns$elm_markdown$Markdown$Parser$parseAsParagraphInsteadOfHtmlBlock,
				$dillonkearns$elm_markdown$Markdown$Parser$blankLine,
				$dillonkearns$elm_markdown$Markdown$Parser$blockQuote,
				A2(
				$elm$parser$Parser$Advanced$map,
				$dillonkearns$elm_markdown$Markdown$RawBlock$CodeBlock,
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$CodeBlock$parser)),
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$Parser$setextLineParser),
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v25) {
					return $dillonkearns$elm_markdown$Markdown$RawBlock$ThematicBreak;
				},
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$ThematicBreak$parser)),
				$dillonkearns$elm_markdown$Markdown$Parser$unorderedListBlock,
				$dillonkearns$elm_markdown$Markdown$Parser$orderedListBlock(true),
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$Heading$parser),
				$dillonkearns$elm_markdown$Markdown$Parser$cyclic$htmlParser(),
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$Parser$tableDelimiterInOpenParagraph)
			]));
}
function $dillonkearns$elm_markdown$Markdown$Parser$cyclic$htmlParser() {
	return A2($elm$parser$Parser$Advanced$andThen, $dillonkearns$elm_markdown$Markdown$Parser$xmlNodeToHtmlNode, $dillonkearns$elm_markdown$HtmlParser$html);
}
function $dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser() {
	return A2(
		$elm$parser$Parser$Advanced$loop,
		{linkReferenceDefinitions: _List_Nil, rawBlocks: _List_Nil},
		$dillonkearns$elm_markdown$Markdown$Parser$stepRawBlock);
}
try {
	var $dillonkearns$elm_markdown$Markdown$Parser$mergeableBlockNotAfterOpenBlockOrParagraphParser = $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser();
	$dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser = function () {
		return $dillonkearns$elm_markdown$Markdown$Parser$mergeableBlockNotAfterOpenBlockOrParagraphParser;
	};
	var $dillonkearns$elm_markdown$Markdown$Parser$mergeableBlockAfterOpenBlockOrParagraphParser = $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterOpenBlockOrParagraphParser();
	$dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterOpenBlockOrParagraphParser = function () {
		return $dillonkearns$elm_markdown$Markdown$Parser$mergeableBlockAfterOpenBlockOrParagraphParser;
	};
	var $dillonkearns$elm_markdown$Markdown$Parser$htmlParser = $dillonkearns$elm_markdown$Markdown$Parser$cyclic$htmlParser();
	$dillonkearns$elm_markdown$Markdown$Parser$cyclic$htmlParser = function () {
		return $dillonkearns$elm_markdown$Markdown$Parser$htmlParser;
	};
	var $dillonkearns$elm_markdown$Markdown$Parser$rawBlockParser = $dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser();
	$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser = function () {
		return $dillonkearns$elm_markdown$Markdown$Parser$rawBlockParser;
	};
} catch ($) {
	throw 'Some top-level definitions from `Markdown.Parser` are causing infinite recursion:\n\n  ┌─────┐\n  │    childToBlocks\n  │     ↓\n  │    mergeableBlockNotAfterOpenBlockOrParagraphParser\n  │     ↓\n  │    mergeableBlockAfterOpenBlockOrParagraphParser\n  │     ↓\n  │    htmlParser\n  │     ↓\n  │    inlineParseHelper\n  │     ↓\n  │    mapInline\n  │     ↓\n  │    nodeToRawBlock\n  │     ↓\n  │    nodesToBlocks\n  │     ↓\n  │    nodesToBlocksHelp\n  │     ↓\n  │    parse\n  │     ↓\n  │    parseAllInlines\n  │     ↓\n  │    parseAllInlinesHelp\n  │     ↓\n  │    parseHeaderInlines\n  │     ↓\n  │    parseInlines\n  │     ↓\n  │    parseRawInline\n  │     ↓\n  │    parseRowInlines\n  │     ↓\n  │    rawBlockParser\n  │     ↓\n  │    stepRawBlock\n  │     ↓\n  │    textNodeToBlocks\n  │     ↓\n  │    xmlNodeToHtmlNode\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $elm$core$Result$map2 = F3(
	function (func, ra, rb) {
		if (ra.$ === 'Err') {
			var x = ra.a;
			return $elm$core$Result$Err(x);
		} else {
			var a = ra.a;
			if (rb.$ === 'Err') {
				var x = rb.a;
				return $elm$core$Result$Err(x);
			} else {
				var b = rb.a;
				return $elm$core$Result$Ok(
					A2(func, a, b));
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$Renderer$combineResults = A2(
	$elm$core$List$foldr,
	$elm$core$Result$map2($elm$core$List$cons),
	$elm$core$Result$Ok(_List_Nil));
var $dillonkearns$elm_markdown$Markdown$Block$foldl = F3(
	function (_function, acc, list) {
		foldl:
		while (true) {
			if (!list.b) {
				return acc;
			} else {
				var block = list.a;
				var remainingBlocks = list.b;
				switch (block.$) {
					case 'HtmlBlock':
						var html = block.a;
						if (html.$ === 'HtmlElement') {
							var children = html.c;
							var $temp$function = _function,
								$temp$acc = A2(_function, block, acc),
								$temp$list = _Utils_ap(children, remainingBlocks);
							_function = $temp$function;
							acc = $temp$acc;
							list = $temp$list;
							continue foldl;
						} else {
							var $temp$function = _function,
								$temp$acc = A2(_function, block, acc),
								$temp$list = remainingBlocks;
							_function = $temp$function;
							acc = $temp$acc;
							list = $temp$list;
							continue foldl;
						}
					case 'UnorderedList':
						var listItems = block.a;
						var $temp$function = _function,
							$temp$acc = A2(_function, block, acc),
							$temp$list = remainingBlocks;
						_function = $temp$function;
						acc = $temp$acc;
						list = $temp$list;
						continue foldl;
					case 'OrderedList':
						var _int = block.a;
						var lists = block.b;
						var $temp$function = _function,
							$temp$acc = A2(_function, block, acc),
							$temp$list = remainingBlocks;
						_function = $temp$function;
						acc = $temp$acc;
						list = $temp$list;
						continue foldl;
					case 'BlockQuote':
						var blocks = block.a;
						var $temp$function = _function,
							$temp$acc = A2(_function, block, acc),
							$temp$list = _Utils_ap(blocks, remainingBlocks);
						_function = $temp$function;
						acc = $temp$acc;
						list = $temp$list;
						continue foldl;
					case 'Heading':
						var $temp$function = _function,
							$temp$acc = A2(_function, block, acc),
							$temp$list = remainingBlocks;
						_function = $temp$function;
						acc = $temp$acc;
						list = $temp$list;
						continue foldl;
					case 'Paragraph':
						var $temp$function = _function,
							$temp$acc = A2(_function, block, acc),
							$temp$list = remainingBlocks;
						_function = $temp$function;
						acc = $temp$acc;
						list = $temp$list;
						continue foldl;
					case 'Table':
						var $temp$function = _function,
							$temp$acc = A2(_function, block, acc),
							$temp$list = remainingBlocks;
						_function = $temp$function;
						acc = $temp$acc;
						list = $temp$list;
						continue foldl;
					case 'CodeBlock':
						var $temp$function = _function,
							$temp$acc = A2(_function, block, acc),
							$temp$list = remainingBlocks;
						_function = $temp$function;
						acc = $temp$acc;
						list = $temp$list;
						continue foldl;
					default:
						var $temp$function = _function,
							$temp$acc = A2(_function, block, acc),
							$temp$list = remainingBlocks;
						_function = $temp$function;
						acc = $temp$acc;
						list = $temp$list;
						continue foldl;
				}
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$Block$extractInlineBlockText = function (block) {
	switch (block.$) {
		case 'Paragraph':
			var inlines = block.a;
			return $dillonkearns$elm_markdown$Markdown$Block$extractInlineText(inlines);
		case 'HtmlBlock':
			var html = block.a;
			if (html.$ === 'HtmlElement') {
				var blocks = html.c;
				return A3(
					$dillonkearns$elm_markdown$Markdown$Block$foldl,
					F2(
						function (nestedBlock, soFar) {
							return _Utils_ap(
								soFar,
								$dillonkearns$elm_markdown$Markdown$Block$extractInlineBlockText(nestedBlock));
						}),
					'',
					blocks);
			} else {
				return '';
			}
		case 'UnorderedList':
			var items = block.a;
			return A2(
				$elm$core$String$join,
				'\n',
				A2(
					$elm$core$List$map,
					function (_v4) {
						var task = _v4.a;
						var inlines = _v4.b;
						return $dillonkearns$elm_markdown$Markdown$Block$extractInlineText(inlines);
					},
					items));
		case 'OrderedList':
			var _int = block.a;
			var items = block.b;
			return A2(
				$elm$core$String$join,
				'\n',
				A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Block$extractInlineText, items));
		case 'BlockQuote':
			var blocks = block.a;
			return A2(
				$elm$core$String$join,
				'\n',
				A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Block$extractInlineBlockText, blocks));
		case 'Heading':
			var headingLevel = block.a;
			var inlines = block.b;
			return $dillonkearns$elm_markdown$Markdown$Block$extractInlineText(inlines);
		case 'Table':
			var header = block.a;
			var rows = block.b;
			return A2(
				$elm$core$String$join,
				'\n',
				$elm$core$List$concat(
					_List_fromArray(
						[
							A2(
							$elm$core$List$map,
							$dillonkearns$elm_markdown$Markdown$Block$extractInlineText,
							A2(
								$elm$core$List$map,
								function ($) {
									return $.label;
								},
								header)),
							$elm$core$List$concat(
							A2(
								$elm$core$List$map,
								$elm$core$List$map($dillonkearns$elm_markdown$Markdown$Block$extractInlineText),
								rows))
						])));
		case 'CodeBlock':
			var body = block.a.body;
			return body;
		default:
			return '';
	}
};
var $dillonkearns$elm_markdown$Markdown$Block$extractInlineText = function (inlines) {
	return A3($elm$core$List$foldl, $dillonkearns$elm_markdown$Markdown$Block$extractTextHelp, '', inlines);
};
var $dillonkearns$elm_markdown$Markdown$Block$extractTextHelp = F2(
	function (inline, text) {
		switch (inline.$) {
			case 'Text':
				var str = inline.a;
				return _Utils_ap(text, str);
			case 'HardLineBreak':
				return text + ' ';
			case 'CodeSpan':
				var str = inline.a;
				return _Utils_ap(text, str);
			case 'Link':
				var inlines = inline.c;
				return _Utils_ap(
					text,
					$dillonkearns$elm_markdown$Markdown$Block$extractInlineText(inlines));
			case 'Image':
				var inlines = inline.c;
				return _Utils_ap(
					text,
					$dillonkearns$elm_markdown$Markdown$Block$extractInlineText(inlines));
			case 'HtmlInline':
				var html = inline.a;
				if (html.$ === 'HtmlElement') {
					var blocks = html.c;
					return A3(
						$dillonkearns$elm_markdown$Markdown$Block$foldl,
						F2(
							function (block, soFar) {
								return _Utils_ap(
									soFar,
									$dillonkearns$elm_markdown$Markdown$Block$extractInlineBlockText(block));
							}),
						text,
						blocks);
				} else {
					return text;
				}
			case 'Strong':
				var inlines = inline.a;
				return _Utils_ap(
					text,
					$dillonkearns$elm_markdown$Markdown$Block$extractInlineText(inlines));
			case 'Emphasis':
				var inlines = inline.a;
				return _Utils_ap(
					text,
					$dillonkearns$elm_markdown$Markdown$Block$extractInlineText(inlines));
			default:
				var inlines = inline.a;
				return _Utils_ap(
					text,
					$dillonkearns$elm_markdown$Markdown$Block$extractInlineText(inlines));
		}
	});
var $dillonkearns$elm_markdown$Markdown$Renderer$renderHtml = F5(
	function (tagName, attributes, children, _v0, renderedChildren) {
		var htmlRenderer = _v0.a;
		return A2(
			$elm$core$Result$andThen,
			function (okChildren) {
				return A2(
					$elm$core$Result$map,
					function (myRenderer) {
						return myRenderer(okChildren);
					},
					A3(htmlRenderer, tagName, attributes, children));
			},
			$dillonkearns$elm_markdown$Markdown$Renderer$combineResults(renderedChildren));
	});
var $dillonkearns$elm_markdown$Markdown$Renderer$foldThing = F3(
	function (renderer, topLevelInline, soFar) {
		var _v7 = A2($dillonkearns$elm_markdown$Markdown$Renderer$renderSingleInline, renderer, topLevelInline);
		if (_v7.$ === 'Just') {
			var inline = _v7.a;
			return A2($elm$core$List$cons, inline, soFar);
		} else {
			return soFar;
		}
	});
var $dillonkearns$elm_markdown$Markdown$Renderer$renderHelper = F2(
	function (renderer, blocks) {
		return A2(
			$elm$core$List$filterMap,
			$dillonkearns$elm_markdown$Markdown$Renderer$renderHelperSingle(renderer),
			blocks);
	});
var $dillonkearns$elm_markdown$Markdown$Renderer$renderHelperSingle = function (renderer) {
	return function (block) {
		switch (block.$) {
			case 'Heading':
				var level = block.a;
				var content = block.b;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$map,
						function (children) {
							return renderer.heading(
								{
									children: children,
									level: level,
									rawText: $dillonkearns$elm_markdown$Markdown$Block$extractInlineText(content)
								});
						},
						A2($dillonkearns$elm_markdown$Markdown$Renderer$renderStyled, renderer, content)));
			case 'Paragraph':
				var content = block.a;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$map,
						renderer.paragraph,
						A2($dillonkearns$elm_markdown$Markdown$Renderer$renderStyled, renderer, content)));
			case 'HtmlBlock':
				var html = block.a;
				if (html.$ === 'HtmlElement') {
					var tag = html.a;
					var attributes = html.b;
					var children = html.c;
					return $elm$core$Maybe$Just(
						A4($dillonkearns$elm_markdown$Markdown$Renderer$renderHtmlNode, renderer, tag, attributes, children));
				} else {
					return $elm$core$Maybe$Nothing;
				}
			case 'UnorderedList':
				var items = block.a;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$map,
						renderer.unorderedList,
						$dillonkearns$elm_markdown$Markdown$Renderer$combineResults(
							A2(
								$elm$core$List$map,
								function (_v4) {
									var task = _v4.a;
									var children = _v4.b;
									return A2(
										$elm$core$Result$map,
										function (renderedBody) {
											return A2($dillonkearns$elm_markdown$Markdown$Block$ListItem, task, renderedBody);
										},
										A2($dillonkearns$elm_markdown$Markdown$Renderer$renderStyled, renderer, children));
								},
								items))));
			case 'OrderedList':
				var startingIndex = block.a;
				var items = block.b;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$map,
						renderer.orderedList(startingIndex),
						$dillonkearns$elm_markdown$Markdown$Renderer$combineResults(
							A2(
								$elm$core$List$map,
								$dillonkearns$elm_markdown$Markdown$Renderer$renderStyled(renderer),
								items))));
			case 'CodeBlock':
				var codeBlock = block.a;
				return $elm$core$Maybe$Just(
					$elm$core$Result$Ok(
						renderer.codeBlock(codeBlock)));
			case 'ThematicBreak':
				return $elm$core$Maybe$Just(
					$elm$core$Result$Ok(renderer.thematicBreak));
			case 'BlockQuote':
				var nestedBlocks = block.a;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$map,
						renderer.blockQuote,
						$dillonkearns$elm_markdown$Markdown$Renderer$combineResults(
							A2($dillonkearns$elm_markdown$Markdown$Renderer$renderHelper, renderer, nestedBlocks))));
			default:
				var header = block.a;
				var rows = block.b;
				var renderedHeaderCells = $dillonkearns$elm_markdown$Markdown$Renderer$combineResults(
					A2(
						$elm$core$List$map,
						function (_v6) {
							var label = _v6.label;
							var alignment = _v6.alignment;
							return A2(
								$elm$core$Result$map,
								$elm$core$Tuple$pair(alignment),
								A2($dillonkearns$elm_markdown$Markdown$Renderer$renderStyled, renderer, label));
						},
						header));
				var renderedHeader = A2(
					$elm$core$Result$map,
					function (listListView) {
						return renderer.tableHeader(
							$elm$core$List$singleton(
								renderer.tableRow(
									A2(
										$elm$core$List$map,
										function (_v5) {
											var maybeAlignment = _v5.a;
											var item = _v5.b;
											return A2(renderer.tableHeaderCell, maybeAlignment, item);
										},
										listListView))));
					},
					renderedHeaderCells);
				var renderedBody = function (r) {
					return $elm$core$List$isEmpty(r) ? _List_Nil : _List_fromArray(
						[
							renderer.tableBody(r)
						]);
				};
				var alignmentForColumn = function (columnIndex) {
					return A2(
						$elm$core$Maybe$andThen,
						function ($) {
							return $.alignment;
						},
						$elm$core$List$head(
							A2($elm$core$List$drop, columnIndex, header)));
				};
				var renderRow = function (cells) {
					return A2(
						$elm$core$Result$map,
						renderer.tableRow,
						A2(
							$elm$core$Result$map,
							$elm$core$List$indexedMap(
								F2(
									function (index, cell) {
										return A2(
											renderer.tableCell,
											alignmentForColumn(index),
											cell);
									})),
							$dillonkearns$elm_markdown$Markdown$Renderer$combineResults(
								A2(
									$elm$core$List$map,
									$dillonkearns$elm_markdown$Markdown$Renderer$renderStyled(renderer),
									cells))));
				};
				var renderedRows = $dillonkearns$elm_markdown$Markdown$Renderer$combineResults(
					A2($elm$core$List$map, renderRow, rows));
				return $elm$core$Maybe$Just(
					A3(
						$elm$core$Result$map2,
						F2(
							function (h, r) {
								return renderer.table(
									A2(
										$elm$core$List$cons,
										h,
										renderedBody(r)));
							}),
						renderedHeader,
						renderedRows));
		}
	};
};
var $dillonkearns$elm_markdown$Markdown$Renderer$renderHtmlNode = F4(
	function (renderer, tag, attributes, children) {
		return A5(
			$dillonkearns$elm_markdown$Markdown$Renderer$renderHtml,
			tag,
			attributes,
			children,
			renderer.html,
			A2($dillonkearns$elm_markdown$Markdown$Renderer$renderHelper, renderer, children));
	});
var $dillonkearns$elm_markdown$Markdown$Renderer$renderSingleInline = F2(
	function (renderer, inline) {
		switch (inline.$) {
			case 'Strong':
				var innerInlines = inline.a;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$map,
						renderer.strong,
						A2($dillonkearns$elm_markdown$Markdown$Renderer$renderStyled, renderer, innerInlines)));
			case 'Emphasis':
				var innerInlines = inline.a;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$map,
						renderer.emphasis,
						A2($dillonkearns$elm_markdown$Markdown$Renderer$renderStyled, renderer, innerInlines)));
			case 'Strikethrough':
				var innerInlines = inline.a;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$map,
						renderer.strikethrough,
						A2($dillonkearns$elm_markdown$Markdown$Renderer$renderStyled, renderer, innerInlines)));
			case 'Image':
				var src = inline.a;
				var title = inline.b;
				var children = inline.c;
				return $elm$core$Maybe$Just(
					$elm$core$Result$Ok(
						renderer.image(
							{
								alt: $dillonkearns$elm_markdown$Markdown$Block$extractInlineText(children),
								src: src,
								title: title
							})));
			case 'Text':
				var string = inline.a;
				return $elm$core$Maybe$Just(
					$elm$core$Result$Ok(
						renderer.text(string)));
			case 'CodeSpan':
				var string = inline.a;
				return $elm$core$Maybe$Just(
					$elm$core$Result$Ok(
						renderer.codeSpan(string)));
			case 'Link':
				var destination = inline.a;
				var title = inline.b;
				var inlines = inline.c;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$andThen,
						function (children) {
							return $elm$core$Result$Ok(
								A2(
									renderer.link,
									{destination: destination, title: title},
									children));
						},
						A2($dillonkearns$elm_markdown$Markdown$Renderer$renderStyled, renderer, inlines)));
			case 'HardLineBreak':
				return $elm$core$Maybe$Just(
					$elm$core$Result$Ok(renderer.hardLineBreak));
			default:
				var html = inline.a;
				if (html.$ === 'HtmlElement') {
					var tag = html.a;
					var attributes = html.b;
					var children = html.c;
					return $elm$core$Maybe$Just(
						A4($dillonkearns$elm_markdown$Markdown$Renderer$renderHtmlNode, renderer, tag, attributes, children));
				} else {
					return $elm$core$Maybe$Nothing;
				}
		}
	});
var $dillonkearns$elm_markdown$Markdown$Renderer$renderStyled = F2(
	function (renderer, styledStrings) {
		return $dillonkearns$elm_markdown$Markdown$Renderer$combineResults(
			A3(
				$elm$core$List$foldr,
				$dillonkearns$elm_markdown$Markdown$Renderer$foldThing(renderer),
				_List_Nil,
				styledStrings));
	});
var $dillonkearns$elm_markdown$Markdown$Renderer$render = F2(
	function (renderer, ast) {
		return $dillonkearns$elm_markdown$Markdown$Renderer$combineResults(
			A2($dillonkearns$elm_markdown$Markdown$Renderer$renderHelper, renderer, ast));
	});
var $elm$html$Html$Attributes$alt = $elm$html$Html$Attributes$stringProperty('alt');
var $elm$html$Html$Attributes$src = function (url) {
	return A2(
		$elm$html$Html$Attributes$stringProperty,
		'src',
		_VirtualDom_noJavaScriptOrHtmlUri(url));
};
var $mdgriffith$elm_ui$Element$image = F2(
	function (attrs, _v0) {
		var src = _v0.src;
		var description = _v0.description;
		var imageAttributes = A2(
			$elm$core$List$filter,
			function (a) {
				switch (a.$) {
					case 'Width':
						return true;
					case 'Height':
						return true;
					default:
						return false;
				}
			},
			attrs);
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.imageContainer),
				attrs),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[
						A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asEl,
						$mdgriffith$elm_ui$Internal$Model$NodeName('img'),
						_Utils_ap(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Internal$Model$Attr(
									$elm$html$Html$Attributes$src(src)),
									$mdgriffith$elm_ui$Internal$Model$Attr(
									$elm$html$Html$Attributes$alt(description))
								]),
							imageAttributes),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(_List_Nil))
					])));
	});
var $author$project$Internal$Markdown$avatarView = function (avatarUrl) {
	return A2(
		$mdgriffith$elm_ui$Element$el,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width(
				$mdgriffith$elm_ui$Element$px(80))
			]),
		A2(
			$mdgriffith$elm_ui$Element$image,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			{description: 'Avatar image', src: avatarUrl}));
};
var $mdgriffith$elm_ui$Internal$Flag$fontAlignment = $mdgriffith$elm_ui$Internal$Flag$flag(12);
var $mdgriffith$elm_ui$Element$Font$center = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontAlignment, $mdgriffith$elm_ui$Internal$Style$classes.textCenter);
var $author$project$Internal$Markdown$icons = F3(
	function (twitter, github, dribbble) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_Nil,
			A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						A2(
						$elm$core$Maybe$map,
						function (twitterHandle) {
							return A2(
								$mdgriffith$elm_ui$Element$link,
								_List_Nil,
								{
									label: A2(
										$mdgriffith$elm_ui$Element$image,
										_List_Nil,
										{description: 'Twitter Logo', src: 'https://i.imgur.com/tXSoThF.png'}),
									url: 'https://twitter.com/' + twitterHandle
								});
						},
						twitter),
						A2(
						$elm$core$Maybe$map,
						function (twitterHandle) {
							return A2(
								$mdgriffith$elm_ui$Element$link,
								_List_Nil,
								{
									label: A2(
										$mdgriffith$elm_ui$Element$image,
										_List_Nil,
										{description: 'Github Logo', src: 'https://i.imgur.com/0o48UoR.png'}),
									url: 'https://github.com/' + twitterHandle
								});
						},
						github),
						A2(
						$elm$core$Maybe$map,
						function (dribbbleHandle) {
							return A2(
								$mdgriffith$elm_ui$Element$link,
								_List_Nil,
								{
									label: A2(
										$mdgriffith$elm_ui$Element$image,
										_List_Nil,
										{description: 'Dribbble Logo', src: 'https://i.imgur.com/1AGmwO3.png'}),
									url: 'https://dribbble.com/' + dribbbleHandle
								});
						},
						dribbble)
					])));
	});
var $mdgriffith$elm_ui$Element$rgba255 = F4(
	function (red, green, blue, a) {
		return A4($mdgriffith$elm_ui$Internal$Model$Rgba, red / 255, green / 255, blue / 255, a);
	});
var $author$project$Internal$Markdown$bioView = F6(
	function (renderedChildren, name, photoUrl, twitter, github, dribbble) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Border$shadow(
					{
						blur: 0.5,
						color: A4($mdgriffith$elm_ui$Element$rgba255, 0, 0, 0, 0.22),
						offset: _Utils_Tuple2(0.3, 0.3),
						size: 2
					}),
					$mdgriffith$elm_ui$Element$padding(20),
					$mdgriffith$elm_ui$Element$spacing(30),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$Font$center
				]),
			A2(
				$elm$core$List$cons,
				A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(20)
						]),
					_List_fromArray(
						[
							$author$project$Internal$Markdown$avatarView(photoUrl),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$bold,
									$mdgriffith$elm_ui$Element$Font$size(30)
								]),
							$mdgriffith$elm_ui$Element$text(name)),
							A3($author$project$Internal$Markdown$icons, twitter, github, dribbble)
						])),
				renderedChildren));
	});
var $elm$html$Html$br = _VirtualDom_node('br');
var $mdgriffith$elm_ui$Element$rgb255 = F3(
	function (red, green, blue) {
		return A4($mdgriffith$elm_ui$Internal$Model$Rgba, red / 255, green / 255, blue / 255, 1);
	});
var $author$project$Internal$Markdown$code = function (snippet) {
	return A2(
		$mdgriffith$elm_ui$Element$el,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Background$color(
				A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.05)),
				$mdgriffith$elm_ui$Element$Border$rounded(2),
				$mdgriffith$elm_ui$Element$Font$size(14),
				$mdgriffith$elm_ui$Element$Font$color(
				A3($mdgriffith$elm_ui$Element$rgb255, 99, 163, 92)),
				$mdgriffith$elm_ui$Element$Font$family(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$typeface('Source Code Pro'),
						$mdgriffith$elm_ui$Element$Font$monospace
					])),
				A2($mdgriffith$elm_ui$Element$paddingXY, 5, 2)
			]),
		$mdgriffith$elm_ui$Element$text(snippet));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$HCode = function (a) {
	return {$: 'HCode', a: a};
};
var $elm$parser$Parser$DeadEnd = F3(
	function (row, col, problem) {
		return {col: col, problem: problem, row: row};
	});
var $elm$parser$Parser$problemToDeadEnd = function (p) {
	return A3($elm$parser$Parser$DeadEnd, p.row, p.col, p.problem);
};
var $elm$parser$Parser$run = F2(
	function (parser, source) {
		var _v0 = A2($elm$parser$Parser$Advanced$run, parser, source);
		if (_v0.$ === 'Ok') {
			var a = _v0.a;
			return $elm$core$Result$Ok(a);
		} else {
			var problems = _v0.a;
			return $elm$core$Result$Err(
				A2($elm$core$List$map, $elm$parser$Parser$problemToDeadEnd, problems));
		}
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$newLine = function (fragments) {
	return {fragments: fragments, highlight: $elm$core$Maybe$Nothing};
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$LineBreak = {$: 'LineBreak'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Comment = {$: 'Comment'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toFragment = F2(
	function (toStyle, _v0) {
		var syntax = _v0.a;
		var text = _v0.b;
		switch (syntax.$) {
			case 'Normal':
				return {additionalClass: '', requiredStyle: $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Default, text: text};
			case 'Comment':
				return {additionalClass: '', requiredStyle: $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Comment, text: text};
			case 'LineBreak':
				return {additionalClass: '', requiredStyle: $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Default, text: text};
			default:
				var c = syntax.a;
				var _v2 = toStyle(c);
				var requiredStyle = _v2.a;
				var additionalClass = _v2.b;
				return {additionalClass: additionalClass, requiredStyle: requiredStyle, text: text};
		}
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toLinesHelp = F3(
	function (toStyle, _v0, _v1) {
		var syntax = _v0.a;
		var text = _v0.b;
		var lines = _v1.a;
		var fragments = _v1.b;
		var maybeLastSyntax = _v1.c;
		if (_Utils_eq(syntax, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$LineBreak)) {
			return _Utils_Tuple3(
				A2(
					$elm$core$List$cons,
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$newLine(fragments),
					lines),
				_List_fromArray(
					[
						A2(
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toFragment,
						toStyle,
						_Utils_Tuple2(syntax, text))
					]),
				$elm$core$Maybe$Nothing);
		} else {
			if (_Utils_eq(
				$elm$core$Maybe$Just(syntax),
				maybeLastSyntax)) {
				if (fragments.b) {
					var headFrag = fragments.a;
					var tailFrags = fragments.b;
					return _Utils_Tuple3(
						lines,
						A2(
							$elm$core$List$cons,
							_Utils_update(
								headFrag,
								{
									text: _Utils_ap(text, headFrag.text)
								}),
							tailFrags),
						maybeLastSyntax);
				} else {
					return _Utils_Tuple3(
						lines,
						A2(
							$elm$core$List$cons,
							A2(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toFragment,
								toStyle,
								_Utils_Tuple2(syntax, text)),
							fragments),
						maybeLastSyntax);
				}
			} else {
				return _Utils_Tuple3(
					lines,
					A2(
						$elm$core$List$cons,
						A2(
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toFragment,
							toStyle,
							_Utils_Tuple2(syntax, text)),
						fragments),
					$elm$core$Maybe$Just(syntax));
			}
		}
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toLines = F2(
	function (toStyle, revTokens) {
		return function (_v0) {
			var lines = _v0.a;
			var frags = _v0.b;
			return A2(
				$elm$core$List$cons,
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$newLine(frags),
				lines);
		}(
			A3(
				$elm$core$List$foldl,
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toLinesHelp(toStyle),
				_Utils_Tuple3(_List_Nil, _List_Nil, $elm$core$Maybe$Nothing),
				revTokens));
	});
var $elm$parser$Parser$map = $elm$parser$Parser$Advanced$map;
var $elm$parser$Parser$toAdvancedStep = function (step) {
	if (step.$ === 'Loop') {
		var s = step.a;
		return $elm$parser$Parser$Advanced$Loop(s);
	} else {
		var a = step.a;
		return $elm$parser$Parser$Advanced$Done(a);
	}
};
var $elm$parser$Parser$loop = F2(
	function (state, callback) {
		return A2(
			$elm$parser$Parser$Advanced$loop,
			state,
			function (s) {
				return A2(
					$elm$parser$Parser$map,
					$elm$parser$Parser$toAdvancedStep,
					callback(s));
			});
	});
var $elm$parser$Parser$Done = function (a) {
	return {$: 'Done', a: a};
};
var $elm$parser$Parser$Loop = function (a) {
	return {$: 'Loop', a: a};
};
var $elm$parser$Parser$andThen = $elm$parser$Parser$Advanced$andThen;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Comment = {$: 'Comment'};
var $elm$parser$Parser$getChompedString = $elm$parser$Parser$Advanced$getChompedString;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak = function (c) {
	return _Utils_eq(
		c,
		_Utils_chr('\n'));
};
var $elm$parser$Parser$symbol = function (str) {
	return $elm$parser$Parser$Advanced$symbol(
		A2(
			$elm$parser$Parser$Advanced$Token,
			str,
			$elm$parser$Parser$ExpectingSymbol(str)));
};
var $elm$parser$Parser$chompWhile = $elm$parser$Parser$Advanced$chompWhile;
var $elm$parser$Parser$ignorer = $elm$parser$Parser$Advanced$ignorer;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile = F2(
	function (isNotRelevant, previousParser) {
		return A2(
			$elm$parser$Parser$ignorer,
			previousParser,
			$elm$parser$Parser$chompWhile(isNotRelevant));
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$inlineComment = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _List_fromArray(
			[
				_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Comment, b)
			]);
	},
	$elm$parser$Parser$getChompedString(
		A2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
			A2($elm$core$Basics$composeL, $elm$core$Basics$not, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak),
			$elm$parser$Parser$symbol('--'))));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$addThen = F3(
	function (f, list, plist) {
		return A2(
			$elm$parser$Parser$andThen,
			function (n) {
				return f(
					_Utils_ap(n, list));
			},
			plist);
	});
var $elm$parser$Parser$UnexpectedChar = {$: 'UnexpectedChar'};
var $elm$parser$Parser$chompIf = function (isGood) {
	return A2($elm$parser$Parser$Advanced$chompIf, isGood, $elm$parser$Parser$UnexpectedChar);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$consThen = F3(
	function (f, list, pn) {
		return A2(
			$elm$parser$Parser$andThen,
			function (n) {
				return f(
					A2($elm$core$List$cons, n, list));
			},
			pn);
	});
var $elm$parser$Parser$end = $elm$parser$Parser$Advanced$end($elm$parser$Parser$ExpectingEnd);
var $elm$parser$Parser$oneOf = $elm$parser$Parser$Advanced$oneOf;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedUnnestable = F2(
	function (options, revAList) {
		var defaultMap = options.defaultMap;
		var isNotRelevant = options.isNotRelevant;
		var end = options.end;
		var innerParsers = options.innerParsers;
		return $elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$map,
					$elm$core$Basics$always(
						A2(
							$elm$core$List$cons,
							defaultMap(end),
							revAList)),
					$elm$parser$Parser$symbol(end)),
					A2(
					$elm$parser$Parser$map,
					$elm$core$Basics$always(revAList),
					$elm$parser$Parser$end),
					A3(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$addThen,
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedUnnestable(options),
					revAList,
					$elm$parser$Parser$oneOf(innerParsers)),
					A3(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$consThen,
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedUnnestable(options),
					revAList,
					A2(
						$elm$parser$Parser$map,
						defaultMap,
						$elm$parser$Parser$getChompedString(
							A2(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
								isNotRelevant,
								$elm$parser$Parser$chompIf(
									$elm$core$Basics$always(true))))))
				]));
	});
var $elm$parser$Parser$succeed = $elm$parser$Parser$Advanced$succeed;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedNestable = F3(
	function (nestLevel, options, revAList) {
		var defaultMap = options.defaultMap;
		var isNotRelevant = options.isNotRelevant;
		var start = options.start;
		var end = options.end;
		var innerParsers = options.innerParsers;
		return $elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$andThen,
					function (n) {
						return (nestLevel === 1) ? $elm$parser$Parser$succeed(n) : A3($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedNestable, nestLevel - 1, options, n);
					},
					A2(
						$elm$parser$Parser$map,
						$elm$core$Basics$always(
							A2(
								$elm$core$List$cons,
								defaultMap(end),
								revAList)),
						$elm$parser$Parser$symbol(end))),
					A3(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$consThen,
					A2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedNestable, nestLevel + 1, options),
					revAList,
					A2(
						$elm$parser$Parser$map,
						defaultMap,
						$elm$parser$Parser$getChompedString(
							A2(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
								isNotRelevant,
								$elm$parser$Parser$symbol(start))))),
					A3(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$addThen,
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedUnnestable(options),
					revAList,
					$elm$parser$Parser$oneOf(innerParsers)),
					A2(
					$elm$parser$Parser$map,
					$elm$core$Basics$always(revAList),
					$elm$parser$Parser$end),
					A3(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$consThen,
					A2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedNestable, nestLevel, options),
					revAList,
					A2(
						$elm$parser$Parser$map,
						defaultMap,
						$elm$parser$Parser$getChompedString(
							A2(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
								isNotRelevant,
								$elm$parser$Parser$chompIf(
									$elm$core$Basics$always(true))))))
				]));
	});
var $elm$parser$Parser$problem = function (msg) {
	return $elm$parser$Parser$Advanced$problem(
		$elm$parser$Parser$Problem(msg));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedHelp = F2(
	function (options, revAList) {
		var start = options.start;
		var end = options.end;
		var isNotRelevant = options.isNotRelevant;
		var _v0 = _Utils_Tuple2(
			$elm$core$String$uncons(options.start),
			$elm$core$String$uncons(options.end));
		if (_v0.a.$ === 'Nothing') {
			var _v1 = _v0.a;
			return $elm$parser$Parser$problem('Trying to parse a delimited helper, but the start token cannot be an empty string!');
		} else {
			if (_v0.b.$ === 'Nothing') {
				var _v2 = _v0.b;
				return $elm$parser$Parser$problem('Trying to parse a delimited helper, but the end token cannot be an empty string!');
			} else {
				var _v3 = _v0.a.a;
				var startChar = _v3.a;
				var _v4 = _v0.b.a;
				var endChar = _v4.a;
				return options.isNestable ? A3(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedNestable,
					1,
					_Utils_update(
						options,
						{
							isNotRelevant: function (c) {
								return isNotRelevant(c) && ((!_Utils_eq(c, startChar)) && (!_Utils_eq(c, endChar)));
							}
						}),
					revAList) : A2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedUnnestable,
					_Utils_update(
						options,
						{
							isNotRelevant: function (c) {
								return isNotRelevant(c) && (!_Utils_eq(c, endChar));
							}
						}),
					revAList);
			}
		}
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited = function (options) {
	var start = options.start;
	var isNotRelevant = options.isNotRelevant;
	var defaultMap = options.defaultMap;
	return A2(
		$elm$parser$Parser$andThen,
		function (n) {
			return A2(
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedHelp,
				options,
				_List_fromArray(
					[n]));
		},
		A2(
			$elm$parser$Parser$map,
			$elm$core$Basics$always(
				defaultMap(start)),
			$elm$parser$Parser$symbol(start)));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$lineBreakList = A2(
	$elm$parser$Parser$map,
	function (_v0) {
		return _List_fromArray(
			[
				_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$LineBreak, '\n')
			]);
	},
	$elm$parser$Parser$symbol('\n'));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$multilineComment = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited(
	{
		defaultMap: function (b) {
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Comment, b);
		},
		end: '-}',
		innerParsers: _List_fromArray(
			[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$lineBreakList]),
		isNestable: true,
		isNotRelevant: function (c) {
			return !$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak(c);
		},
		start: '{-'
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$comment = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$inlineComment, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$multilineComment]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$BasicSymbol = {$: 'BasicSymbol'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C = function (a) {
	return {$: 'C', a: a};
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Capitalized = {$: 'Capitalized'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$GroupSymbol = {$: 'GroupSymbol'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Keyword = {$: 'Keyword'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal = {$: 'Normal'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Number = {$: 'Number'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile = function (isNotRelevant) {
	return A2(
		$elm$parser$Parser$ignorer,
		A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$succeed(_Utils_Tuple0),
			$elm$parser$Parser$chompIf(isNotRelevant)),
		$elm$parser$Parser$chompWhile(isNotRelevant));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$basicSymbols = $elm$core$Set$fromList(
	_List_fromArray(
		[
			_Utils_chr('|'),
			_Utils_chr('.'),
			_Utils_chr('='),
			_Utils_chr('\\'),
			_Utils_chr('/'),
			_Utils_chr('('),
			_Utils_chr(')'),
			_Utils_chr('-'),
			_Utils_chr('>'),
			_Utils_chr('<'),
			_Utils_chr(':'),
			_Utils_chr('+'),
			_Utils_chr('!'),
			_Utils_chr('$'),
			_Utils_chr('%'),
			_Utils_chr('&'),
			_Utils_chr('*')
		]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isBasicSymbol = function (c) {
	return A2($elm$core$Set$member, c, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$basicSymbols);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$basicSymbol = $elm$parser$Parser$getChompedString(
	$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isBasicSymbol));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$groupSymbols = $elm$core$Set$fromList(
	_List_fromArray(
		[
			_Utils_chr(','),
			_Utils_chr('['),
			_Utils_chr(']'),
			_Utils_chr('{'),
			_Utils_chr('}')
		]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isGroupSymbol = function (c) {
	return A2($elm$core$Set$member, c, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$groupSymbols);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isStringLiteralChar = function (c) {
	return _Utils_eq(
		c,
		_Utils_chr('\"')) || _Utils_eq(
		c,
		_Utils_chr('\''));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isSpace = function (c) {
	return _Utils_eq(
		c,
		_Utils_chr(' ')) || _Utils_eq(
		c,
		_Utils_chr('\t'));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isWhitespace = function (c) {
	return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isSpace(c) || $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak(c);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isVariableChar = function (c) {
	return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isWhitespace(c) || ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isBasicSymbol(c) || ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isGroupSymbol(c) || $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isStringLiteralChar(c))));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$capitalized = $elm$parser$Parser$getChompedString(
	A2(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isVariableChar,
		$elm$parser$Parser$chompIf($elm$core$Char$isUpper)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$groupSymbol = $elm$parser$Parser$getChompedString(
	$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isGroupSymbol));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Function = {$: 'Function'};
var $elm$parser$Parser$backtrackable = $elm$parser$Parser$Advanced$backtrackable;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$infixSet = $elm$core$Set$fromList(
	_List_fromArray(
		[
			_Utils_chr('+'),
			_Utils_chr('-'),
			_Utils_chr('/'),
			_Utils_chr('*'),
			_Utils_chr('='),
			_Utils_chr('.'),
			_Utils_chr('$'),
			_Utils_chr('<'),
			_Utils_chr('>'),
			_Utils_chr(':'),
			_Utils_chr('&'),
			_Utils_chr('|'),
			_Utils_chr('^'),
			_Utils_chr('?'),
			_Utils_chr('%'),
			_Utils_chr('#'),
			_Utils_chr('@'),
			_Utils_chr('~'),
			_Utils_chr('!'),
			_Utils_chr(',')
		]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isInfixChar = function (c) {
	return A2($elm$core$Set$member, c, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$infixSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$infixParser = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _Utils_Tuple2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Function),
			b);
	},
	$elm$parser$Parser$getChompedString(
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed(_Utils_Tuple0),
					$elm$parser$Parser$backtrackable(
						$elm$parser$Parser$symbol('('))),
				$elm$parser$Parser$backtrackable(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isInfixChar))),
			$elm$parser$Parser$backtrackable(
				$elm$parser$Parser$symbol(')')))));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$keywordSet = $elm$core$Set$fromList(
	_List_fromArray(
		['as', 'where', 'let', 'in', 'if', 'else', 'then', 'case', 'of', 'type', 'alias']));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isKeyword = function (str) {
	return A2($elm$core$Set$member, str, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$keywordSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isNumber = function (c) {
	return $elm$core$Char$isDigit(c) || _Utils_eq(
		c,
		_Utils_chr('.'));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$positiveNumber = A2(
	$elm$parser$Parser$ignorer,
	A2(
		$elm$parser$Parser$ignorer,
		$elm$parser$Parser$succeed(_Utils_Tuple0),
		$elm$parser$Parser$chompIf($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isNumber)),
	$elm$parser$Parser$chompWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isNumber));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$negativeNumber = A2(
	$elm$parser$Parser$ignorer,
	A2(
		$elm$parser$Parser$ignorer,
		$elm$parser$Parser$succeed(_Utils_Tuple0),
		$elm$parser$Parser$backtrackable(
			$elm$parser$Parser$symbol('-'))),
	$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$positiveNumber);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$number = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$positiveNumber, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$negativeNumber]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$variable = $elm$parser$Parser$getChompedString(
	A2(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isVariableChar,
		$elm$parser$Parser$chompIf($elm$core$Char$isLower)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$weirdText = $elm$parser$Parser$getChompedString(
	$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isVariableChar));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionBodyContent = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$map,
			function (b) {
				return _Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Number),
					b);
			},
			$elm$parser$Parser$getChompedString($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$number)),
			A2(
			$elm$parser$Parser$map,
			$elm$core$Basics$always(
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Capitalized),
					'()')),
			$elm$parser$Parser$symbol('()')),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$infixParser,
			A2(
			$elm$parser$Parser$map,
			function (b) {
				return _Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$BasicSymbol),
					b);
			},
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$basicSymbol),
			A2(
			$elm$parser$Parser$map,
			function (b) {
				return _Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$GroupSymbol),
					b);
			},
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$groupSymbol),
			A2(
			$elm$parser$Parser$map,
			function (b) {
				return _Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Capitalized),
					b);
			},
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$capitalized),
			A2(
			$elm$parser$Parser$map,
			function (n) {
				return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isKeyword(n) ? _Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Keyword),
					n) : _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, n);
			},
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$variable),
			A2(
			$elm$parser$Parser$map,
			function (b) {
				return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
			},
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$weirdText)
		]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$String = {$: 'String'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$escapableSet = $elm$core$Set$fromList(
	_List_fromArray(
		[
			_Utils_chr('\''),
			_Utils_chr('\"'),
			_Utils_chr('\\'),
			_Utils_chr('n'),
			_Utils_chr('r'),
			_Utils_chr('t'),
			_Utils_chr('b'),
			_Utils_chr('f'),
			_Utils_chr('v')
		]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isEscapableChar = function (c) {
	return A2($elm$core$Set$member, c, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$escapableSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$escapable = A2(
	$elm$parser$Parser$ignorer,
	A2(
		$elm$parser$Parser$ignorer,
		$elm$parser$Parser$succeed(_Utils_Tuple0),
		$elm$parser$Parser$backtrackable(
			$elm$parser$Parser$symbol('\\'))),
	$elm$parser$Parser$chompIf($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isEscapableChar));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$elmEscapable = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _List_fromArray(
			[
				_Utils_Tuple2(
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Capitalized),
				b)
			]);
	},
	$elm$parser$Parser$getChompedString($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$escapable));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isEscapable = function (c) {
	return _Utils_eq(
		c,
		_Utils_chr('\\'));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$stringDelimiter = {
	defaultMap: function (b) {
		return _Utils_Tuple2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$String),
			b);
	},
	end: '\"',
	innerParsers: _List_fromArray(
		[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$lineBreakList, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$elmEscapable]),
	isNestable: false,
	isNotRelevant: function (c) {
		return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak(c) || $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isEscapable(c));
	},
	start: '\"'
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$doubleQuote = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$stringDelimiter);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$quote = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited(
	_Utils_update(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$stringDelimiter,
		{end: '\'', start: '\''}));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$tripleDoubleQuote = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited(
	_Utils_update(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$stringDelimiter,
		{end: '\"\"\"', start: '\"\"\"'}));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$stringLiteral = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$tripleDoubleQuote, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$doubleQuote, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$quote]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$lineBreak = A2(
	$elm$parser$Parser$map,
	function (_v0) {
		return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$LineBreak, '\n');
	},
	$elm$parser$Parser$symbol('\n'));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$space = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
	},
	$elm$parser$Parser$getChompedString(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isSpace)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$checkContext = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStep(revTokens),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStep = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$space),
				A2(
				$elm$parser$Parser$andThen,
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$checkContext,
				A2(
					$elm$parser$Parser$map,
					function (n) {
						return A2($elm$core$List$cons, n, revTokens);
					},
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$lineBreak)),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						_Utils_ap(n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$comment)
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionBody = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				function (ns) {
					return $elm$parser$Parser$Loop(
						_Utils_ap(ns, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$stringLiteral),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionBodyContent),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$TypeSignature = {$: 'TypeSignature'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$fnSigIsNotRelevant = function (c) {
	return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isWhitespace(c) || (_Utils_eq(
		c,
		_Utils_chr('(')) || (_Utils_eq(
		c,
		_Utils_chr(')')) || (_Utils_eq(
		c,
		_Utils_chr('-')) || _Utils_eq(
		c,
		_Utils_chr(','))))));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$fnSigContentHelp = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$map,
			$elm$core$Basics$always(
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$TypeSignature),
					'()')),
			$elm$parser$Parser$symbol('()')),
			A2(
			$elm$parser$Parser$map,
			$elm$core$Basics$always(
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$BasicSymbol),
					'->')),
			$elm$parser$Parser$symbol('->')),
			A2(
			$elm$parser$Parser$map,
			function (b) {
				return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
			},
			$elm$parser$Parser$getChompedString(
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile(
					function (c) {
						return _Utils_eq(
							c,
							_Utils_chr('(')) || (_Utils_eq(
							c,
							_Utils_chr(')')) || (_Utils_eq(
							c,
							_Utils_chr('-')) || _Utils_eq(
							c,
							_Utils_chr(','))));
					}))),
			A2(
			$elm$parser$Parser$map,
			function (b) {
				return _Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$TypeSignature),
					b);
			},
			$elm$parser$Parser$getChompedString(
				A2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$fnSigIsNotRelevant,
					$elm$parser$Parser$chompIf($elm$core$Char$isUpper)))),
			A2(
			$elm$parser$Parser$map,
			function (b) {
				return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
			},
			$elm$parser$Parser$getChompedString(
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$fnSigIsNotRelevant)))
		]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$fnSigContent = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$fnSigContentHelp),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionSignature = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Done,
				A2(
					$elm$parser$Parser$andThen,
					function (ns) {
						return A2($elm$parser$Parser$loop, ns, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$fnSigContent);
					},
					A2(
						$elm$parser$Parser$map,
						$elm$core$Basics$always(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$BasicSymbol),
									':'),
								revTokens)),
						$elm$parser$Parser$symbol(':')))),
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Done,
				A2($elm$parser$Parser$loop, revTokens, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionBody)),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isCommentChar = function (c) {
	return _Utils_eq(
		c,
		_Utils_chr('-')) || _Utils_eq(
		c,
		_Utils_chr('{'));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$commentChar = $elm$parser$Parser$getChompedString(
	$elm$parser$Parser$chompIf($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isCommentChar));
var $elm$parser$Parser$ExpectingKeyword = function (a) {
	return {$: 'ExpectingKeyword', a: a};
};
var $elm$parser$Parser$Advanced$keyword = function (_v0) {
	var kwd = _v0.a;
	var expecting = _v0.b;
	var progress = !$elm$core$String$isEmpty(kwd);
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			var _v1 = A5($elm$parser$Parser$Advanced$isSubString, kwd, s.offset, s.row, s.col, s.src);
			var newOffset = _v1.a;
			var newRow = _v1.b;
			var newCol = _v1.c;
			return (_Utils_eq(newOffset, -1) || (0 <= A3(
				$elm$parser$Parser$Advanced$isSubChar,
				function (c) {
					return $elm$core$Char$isAlphaNum(c) || _Utils_eq(
						c,
						_Utils_chr('_'));
				},
				newOffset,
				s.src))) ? A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : A3(
				$elm$parser$Parser$Advanced$Good,
				progress,
				_Utils_Tuple0,
				{col: newCol, context: s.context, indent: s.indent, offset: newOffset, row: newRow, src: s.src});
		});
};
var $elm$parser$Parser$keyword = function (kwd) {
	return $elm$parser$Parser$Advanced$keyword(
		A2(
			$elm$parser$Parser$Advanced$Token,
			kwd,
			$elm$parser$Parser$ExpectingKeyword(kwd)));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$modDecIsNotRelevant = function (c) {
	return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isWhitespace(c) || ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isCommentChar(c) || _Utils_eq(
		c,
		_Utils_chr('('))));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$mdpIsNotRelevant = function (c) {
	return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isWhitespace(c) || ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isCommentChar(c) || (_Utils_eq(
		c,
		_Utils_chr('(')) || (_Utils_eq(
		c,
		_Utils_chr(')')) || (_Utils_eq(
		c,
		_Utils_chr(',')) || _Utils_eq(
		c,
		_Utils_chr('.')))))));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$mdpnIsSpecialChar = function (c) {
	return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak(c) || ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isCommentChar(c) || (_Utils_eq(
		c,
		_Utils_chr('(')) || _Utils_eq(
		c,
		_Utils_chr(')'))));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$checkContextNested = function (_v1) {
	var nestLevel = _v1.a;
	var revTokens = _v1.b;
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStepNested(
				_Utils_Tuple2(nestLevel, revTokens)),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStepNested = function (_v0) {
	var nestLevel = _v0.a;
	var revTokens = _v0.b;
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						_Utils_Tuple2(
							nestLevel,
							A2($elm$core$List$cons, n, revTokens)));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$space),
				A2(
				$elm$parser$Parser$andThen,
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$checkContextNested,
				A2(
					$elm$parser$Parser$map,
					function (n) {
						return _Utils_Tuple2(
							nestLevel,
							A2($elm$core$List$cons, n, revTokens));
					},
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$lineBreak)),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						_Utils_Tuple2(
							nestLevel,
							_Utils_ap(n, revTokens)));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$comment)
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$modDecParNest = function (_v0) {
	var nestLevel = _v0.a;
	var revTokens = _v0.b;
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStepNested(
				_Utils_Tuple2(nestLevel, revTokens)),
				A2(
				$elm$parser$Parser$map,
				function (ns) {
					return $elm$parser$Parser$Loop(
						_Utils_Tuple2(nestLevel + 1, ns));
				},
				A2(
					$elm$parser$Parser$map,
					$elm$core$Basics$always(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, '('),
							revTokens)),
					$elm$parser$Parser$symbol('('))),
				A2(
				$elm$parser$Parser$map,
				function (ns) {
					return (!nestLevel) ? $elm$parser$Parser$Done(ns) : $elm$parser$Parser$Loop(
						_Utils_Tuple2(nestLevel - 1, ns));
				},
				A2(
					$elm$parser$Parser$map,
					$elm$core$Basics$always(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, ')'),
							revTokens)),
					$elm$parser$Parser$symbol(')'))),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						_Utils_Tuple2(
							nestLevel,
							A2($elm$core$List$cons, n, revTokens)));
				},
				$elm$parser$Parser$oneOf(
					_List_fromArray(
						[
							A2(
							$elm$parser$Parser$map,
							function (b) {
								return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
							},
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$commentChar),
							A2(
							$elm$parser$Parser$map,
							function (s) {
								return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, s);
							},
							$elm$parser$Parser$getChompedString(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile(
									A2($elm$core$Basics$composeL, $elm$core$Basics$not, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$mdpnIsSpecialChar))))
						]))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$modDecParentheses = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Done,
				A2(
					$elm$parser$Parser$map,
					$elm$core$Basics$always(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, ')'),
							revTokens)),
					$elm$parser$Parser$symbol(')'))),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, n, revTokens));
				},
				$elm$parser$Parser$oneOf(
					_List_fromArray(
						[
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$infixParser,
							A2(
							$elm$parser$Parser$map,
							function (b) {
								return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
							},
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$commentChar),
							A2(
							$elm$parser$Parser$map,
							function (b) {
								return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
							},
							$elm$parser$Parser$getChompedString(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile(
									function (c) {
										return _Utils_eq(
											c,
											_Utils_chr(',')) || _Utils_eq(
											c,
											_Utils_chr('.'));
									}))),
							A2(
							$elm$parser$Parser$map,
							function (b) {
								return _Utils_Tuple2(
									$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$TypeSignature),
									b);
							},
							$elm$parser$Parser$getChompedString(
								A2(
									$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
									$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$mdpIsNotRelevant,
									$elm$parser$Parser$chompIf($elm$core$Char$isUpper)))),
							A2(
							$elm$parser$Parser$map,
							function (b) {
								return _Utils_Tuple2(
									$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Function),
									b);
							},
							$elm$parser$Parser$getChompedString(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$mdpIsNotRelevant)))
						]))),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Loop,
				A2(
					$elm$parser$Parser$andThen,
					function (n) {
						return A2(
							$elm$parser$Parser$loop,
							_Utils_Tuple2(0, n),
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$modDecParNest);
					},
					A2(
						$elm$parser$Parser$map,
						$elm$core$Basics$always(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, '('),
								revTokens)),
						$elm$parser$Parser$symbol('(')))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$moduleDeclaration = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Loop,
				A2(
					$elm$parser$Parser$andThen,
					function (n) {
						return A2($elm$parser$Parser$loop, n, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$modDecParentheses);
					},
					A2(
						$elm$parser$Parser$map,
						$elm$core$Basics$always(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, '('),
								revTokens)),
						$elm$parser$Parser$symbol('(')))),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, n, revTokens));
				},
				$elm$parser$Parser$oneOf(
					_List_fromArray(
						[
							A2(
							$elm$parser$Parser$map,
							function (b) {
								return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
							},
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$commentChar),
							A2(
							$elm$parser$Parser$map,
							$elm$core$Basics$always(
								_Utils_Tuple2(
									$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Keyword),
									'exposing')),
							$elm$parser$Parser$keyword('exposing')),
							A2(
							$elm$parser$Parser$map,
							$elm$core$Basics$always(
								_Utils_Tuple2(
									$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Keyword),
									'as')),
							$elm$parser$Parser$keyword('as')),
							A2(
							$elm$parser$Parser$map,
							function (b) {
								return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
							},
							$elm$parser$Parser$getChompedString(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$modDecIsNotRelevant)))
						]))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$portDeclarationHelp = F2(
	function (revTokens, str) {
		return (str === 'module') ? A2(
			$elm$parser$Parser$loop,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Keyword),
					str),
				revTokens),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$moduleDeclaration) : A2(
			$elm$parser$Parser$loop,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Function),
					str),
				revTokens),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionSignature);
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$portDeclaration = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Done,
				A2(
					$elm$parser$Parser$andThen,
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$portDeclarationHelp(revTokens),
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$variable)),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Done,
				A2($elm$parser$Parser$loop, revTokens, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionBody)),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$lineStartVariable = F2(
	function (revTokens, n) {
		return ((n === 'module') || (n === 'import')) ? A2(
			$elm$parser$Parser$loop,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Keyword),
					n),
				revTokens),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$moduleDeclaration) : ((n === 'port') ? A2(
			$elm$parser$Parser$loop,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Keyword),
					n),
				revTokens),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$portDeclaration) : ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isKeyword(n) ? A2(
			$elm$parser$Parser$loop,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Keyword),
					n),
				revTokens),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionBody) : A2(
			$elm$parser$Parser$loop,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Function),
					n),
				revTokens),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionSignature)));
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$mainLoop = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$space),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$lineBreak),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						_Utils_ap(n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$comment),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Loop,
				A2(
					$elm$parser$Parser$andThen,
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$lineStartVariable(revTokens),
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$variable)),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Loop,
				A2(
					$elm$parser$Parser$andThen,
					function (s) {
						return A2(
							$elm$parser$Parser$loop,
							_Utils_ap(s, revTokens),
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionBody);
					},
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$stringLiteral)),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Loop,
				A2(
					$elm$parser$Parser$andThen,
					function (s) {
						return A2(
							$elm$parser$Parser$loop,
							A2($elm$core$List$cons, s, revTokens),
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionBody);
					},
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionBodyContent)),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$toRevTokens = A2($elm$parser$Parser$loop, _List_Nil, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$mainLoop);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$toLines = A2(
	$elm$core$Basics$composeR,
	$elm$parser$Parser$run($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$toRevTokens),
	$elm$core$Result$map(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toLines($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$syntaxToStyle)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$elm = A2(
	$elm$core$Basics$composeR,
	$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$toLines,
	$elm$core$Result$map($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$HCode));
var $elm$html$Html$pre = _VirtualDom_node('pre');
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Add = {$: 'Add'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Del = {$: 'Del'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Normal = {$: 'Normal'};
var $elm$html$Html$Attributes$classList = function (classes) {
	return $elm$html$Html$Attributes$class(
		A2(
			$elm$core$String$join,
			' ',
			A2(
				$elm$core$List$map,
				$elm$core$Tuple$first,
				A2($elm$core$List$filter, $elm$core$Tuple$second, classes))));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$requiredStyleToString = function (required) {
	return 'elmsh' + function () {
		switch (required.$) {
			case 'Default':
				return '0';
			case 'Comment':
				return '-comm';
			case 'Style1':
				return '1';
			case 'Style2':
				return '2';
			case 'Style3':
				return '3';
			case 'Style4':
				return '4';
			case 'Style5':
				return '5';
			case 'Style6':
				return '6';
			default:
				return '7';
		}
	}();
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$fragmentView = function (_v0) {
	var text = _v0.text;
	var requiredStyle = _v0.requiredStyle;
	var additionalClass = _v0.additionalClass;
	return (_Utils_eq(requiredStyle, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Default) && $elm$core$String$isEmpty(additionalClass)) ? $elm$html$Html$text(text) : A2(
		$elm$html$Html$span,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$classList(
				_List_fromArray(
					[
						_Utils_Tuple2(
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$requiredStyleToString(requiredStyle),
						!_Utils_eq(requiredStyle, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Default)),
						_Utils_Tuple2('elmsh-' + additionalClass, additionalClass !== '')
					]))
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(text)
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$lineView = F3(
	function (start, index, _v0) {
		var fragments = _v0.fragments;
		var highlight = _v0.highlight;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$classList(
					_List_fromArray(
						[
							_Utils_Tuple2('elmsh-line', true),
							_Utils_Tuple2(
							'elmsh-hl',
							_Utils_eq(
								highlight,
								$elm$core$Maybe$Just($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Normal))),
							_Utils_Tuple2(
							'elmsh-add',
							_Utils_eq(
								highlight,
								$elm$core$Maybe$Just($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Add))),
							_Utils_Tuple2(
							'elmsh-del',
							_Utils_eq(
								highlight,
								$elm$core$Maybe$Just($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Del)))
						])),
					A2(
					$elm$html$Html$Attributes$attribute,
					'data-elmsh-lc',
					$elm$core$String$fromInt(start + index))
				]),
			A2($elm$core$List$map, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$fragmentView, fragments));
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$toInlineHtml = function (lines) {
	return A2(
		$elm$html$Html$code,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('elmsh')
			]),
		$elm$core$List$concat(
			A2(
				$elm$core$List$map,
				function (_v0) {
					var highlight = _v0.highlight;
					var fragments = _v0.fragments;
					return _Utils_eq(highlight, $elm$core$Maybe$Nothing) ? A2($elm$core$List$map, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$fragmentView, fragments) : _List_fromArray(
						[
							A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$classList(
									_List_fromArray(
										[
											_Utils_Tuple2(
											'elmsh-hl',
											_Utils_eq(
												highlight,
												$elm$core$Maybe$Just($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Normal))),
											_Utils_Tuple2(
											'elmsh-add',
											_Utils_eq(
												highlight,
												$elm$core$Maybe$Just($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Add))),
											_Utils_Tuple2(
											'elmsh-del',
											_Utils_eq(
												highlight,
												$elm$core$Maybe$Just($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Del)))
										]))
								]),
							A2($elm$core$List$map, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$fragmentView, fragments))
						]);
				},
				lines)));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$toBlockHtml = F2(
	function (maybeStart, lines) {
		if (maybeStart.$ === 'Nothing') {
			return A2(
				$elm$html$Html$pre,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('elmsh')
					]),
				_List_fromArray(
					[
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$toInlineHtml(lines)
					]));
		} else {
			var start = maybeStart.a;
			return A2(
				$elm$html$Html$pre,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('elmsh')
					]),
				$elm$core$List$singleton(
					A2(
						$elm$html$Html$code,
						_List_Nil,
						A2(
							$elm$core$List$indexedMap,
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$lineView(start),
							lines))));
		}
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$toBlockHtml = F2(
	function (maybeStart, _v0) {
		var lines = _v0.a;
		return A2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$toBlockHtml, maybeStart, lines);
	});
var $author$project$Internal$Markdown$codeBlock = function (details) {
	return A2(
		$mdgriffith$elm_ui$Element$el,
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Element$paddingXY, 0, 10),
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
			]),
		A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$scrollbars,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Border$width(1),
					$mdgriffith$elm_ui$Element$Border$color(
					A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.2)),
					$mdgriffith$elm_ui$Element$Border$rounded(5),
					$mdgriffith$elm_ui$Element$Background$color(
					A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.05)),
					$mdgriffith$elm_ui$Element$padding(10)
				]),
			$mdgriffith$elm_ui$Element$html(
				A2(
					$elm$core$Result$withDefault,
					A2(
						$elm$html$Html$pre,
						_List_Nil,
						_List_fromArray(
							[
								A2(
								$elm$html$Html$code,
								_List_Nil,
								_List_fromArray(
									[
										$elm$html$Html$text(details.body)
									]))
							])),
					A2(
						$elm$core$Result$map,
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$toBlockHtml(
							$elm$core$Maybe$Just(1)),
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$elm(details.body))))));
};
var $mdgriffith$elm_ui$Element$Input$defaultCheckbox = function (checked) {
	return A2(
		$mdgriffith$elm_ui$Element$el,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Internal$Model$htmlClass('focusable'),
				$mdgriffith$elm_ui$Element$width(
				$mdgriffith$elm_ui$Element$px(14)),
				$mdgriffith$elm_ui$Element$height(
				$mdgriffith$elm_ui$Element$px(14)),
				$mdgriffith$elm_ui$Element$Font$color($mdgriffith$elm_ui$Element$Input$white),
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$Font$size(9),
				$mdgriffith$elm_ui$Element$Font$center,
				$mdgriffith$elm_ui$Element$Border$rounded(3),
				$mdgriffith$elm_ui$Element$Border$color(
				checked ? A3($mdgriffith$elm_ui$Element$rgb, 59 / 255, 153 / 255, 252 / 255) : A3($mdgriffith$elm_ui$Element$rgb, 211 / 255, 211 / 255, 211 / 255)),
				$mdgriffith$elm_ui$Element$Border$shadow(
				{
					blur: 1,
					color: checked ? A4($mdgriffith$elm_ui$Element$rgba, 238 / 255, 238 / 255, 238 / 255, 0) : A3($mdgriffith$elm_ui$Element$rgb, 238 / 255, 238 / 255, 238 / 255),
					offset: _Utils_Tuple2(0, 0),
					size: 1
				}),
				$mdgriffith$elm_ui$Element$Background$color(
				checked ? A3($mdgriffith$elm_ui$Element$rgb, 59 / 255, 153 / 255, 252 / 255) : $mdgriffith$elm_ui$Element$Input$white),
				$mdgriffith$elm_ui$Element$Border$width(
				checked ? 0 : 1)
			]),
		checked ? A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Border$color($mdgriffith$elm_ui$Element$Input$white),
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(6)),
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(9)),
					$mdgriffith$elm_ui$Element$rotate(
					$elm$core$Basics$degrees(-45)),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$centerY,
					$mdgriffith$elm_ui$Element$moveUp(1),
					$mdgriffith$elm_ui$Element$Border$widthEach(
					{bottom: 2, left: 2, right: 0, top: 0})
				]),
			$mdgriffith$elm_ui$Element$none) : $mdgriffith$elm_ui$Element$none);
};
var $dillonkearns$elm_markdown$Markdown$Block$headingLevelToInt = function (headingLevel) {
	switch (headingLevel.$) {
		case 'H1':
			return 1;
		case 'H2':
			return 2;
		case 'H3':
			return 3;
		case 'H4':
			return 4;
		case 'H5':
			return 5;
		default:
			return 6;
	}
};
var $author$project$Internal$Markdown$rawTextToId = function (rawText) {
	return $elm$core$String$toLower(
		A2(
			$elm$core$String$join,
			'-',
			A2($elm$core$String$split, ' ', rawText)));
};
var $author$project$Internal$Markdown$heading = function (_v0) {
	var level = _v0.level;
	var rawText = _v0.rawText;
	var children = _v0.children;
	return A2(
		$mdgriffith$elm_ui$Element$paragraph,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Font$size(
				function () {
					switch (level.$) {
						case 'H1':
							return 26;
						case 'H2':
							return 22;
						case 'H3':
							return 18;
						default:
							return 16;
					}
				}()),
				$mdgriffith$elm_ui$Element$Font$bold,
				$mdgriffith$elm_ui$Element$Region$heading(
				$dillonkearns$elm_markdown$Markdown$Block$headingLevelToInt(level)),
				$mdgriffith$elm_ui$Element$htmlAttribute(
				A2(
					$elm$html$Html$Attributes$attribute,
					'name',
					$author$project$Internal$Markdown$rawTextToId(rawText))),
				$mdgriffith$elm_ui$Element$htmlAttribute(
				$elm$html$Html$Attributes$id(
					$author$project$Internal$Markdown$rawTextToId(rawText)))
			]),
		children);
};
var $mdgriffith$elm_ui$Element$Font$italic = $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.italic);
var $dillonkearns$elm_markdown$Markdown$HtmlRenderer$HtmlRenderer = function (a) {
	return {$: 'HtmlRenderer', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Html$resultOr = F2(
	function (ra, rb) {
		if (ra.$ === 'Err') {
			var singleError = ra.a;
			if (rb.$ === 'Ok') {
				var okValue = rb.a;
				return $elm$core$Result$Ok(okValue);
			} else {
				var errorsSoFar = rb.a;
				return $elm$core$Result$Err(
					A2($elm$core$List$cons, singleError, errorsSoFar));
			}
		} else {
			var okValue = ra.a;
			return $elm$core$Result$Ok(okValue);
		}
	});
var $dillonkearns$elm_markdown$Markdown$Html$attributesToString = function (attributes) {
	return A2(
		$elm$core$String$join,
		' ',
		A2(
			$elm$core$List$map,
			function (_v0) {
				var name = _v0.name;
				var value = _v0.value;
				return name + ('=\"' + (value + '\"'));
			},
			attributes));
};
var $dillonkearns$elm_markdown$Markdown$Html$tagToString = F2(
	function (tagName, attributes) {
		return $elm$core$List$isEmpty(attributes) ? ('<' + (tagName + '>')) : ('<' + (tagName + (' ' + ($dillonkearns$elm_markdown$Markdown$Html$attributesToString(attributes) + '>'))));
	});
var $dillonkearns$elm_markdown$Markdown$Html$oneOf = function (decoders) {
	var unwrappedDecoders = A2(
		$elm$core$List$map,
		function (_v1) {
			var rawDecoder = _v1.a;
			return rawDecoder;
		},
		decoders);
	return function (rawDecoder) {
		return $dillonkearns$elm_markdown$Markdown$HtmlRenderer$HtmlRenderer(
			F3(
				function (tagName, attributes, innerBlocks) {
					return A2(
						$elm$core$Result$mapError,
						function (errors) {
							if (!errors.b) {
								return 'Ran into a oneOf with no possibilities!';
							} else {
								if (!errors.b.b) {
									var singleError = errors.a;
									return 'Problem with the given value:\n\n' + (A2($dillonkearns$elm_markdown$Markdown$Html$tagToString, tagName, attributes) + ('\n\n' + (singleError + '\n')));
								} else {
									return 'oneOf failed parsing this value:\n    ' + (A2($dillonkearns$elm_markdown$Markdown$Html$tagToString, tagName, attributes) + ('\n\nParsing failed in the following 2 ways:\n\n\n' + (A2(
										$elm$core$String$join,
										'\n\n',
										A2(
											$elm$core$List$indexedMap,
											F2(
												function (index, error) {
													return '(' + ($elm$core$String$fromInt(index + 1) + (') ' + error));
												}),
											errors)) + '\n')));
								}
							}
						},
						A3(rawDecoder, tagName, attributes, innerBlocks));
				}));
	}(
		A3(
			$elm$core$List$foldl,
			F2(
				function (decoder, soFar) {
					return F3(
						function (tagName, attributes, children) {
							return A2(
								$dillonkearns$elm_markdown$Markdown$Html$resultOr,
								A3(decoder, tagName, attributes, children),
								A3(soFar, tagName, attributes, children));
						});
				}),
			F3(
				function (tagName, attributes, children) {
					return $elm$core$Result$Err(_List_Nil);
				}),
			unwrappedDecoders));
};
var $mdgriffith$elm_ui$Element$Font$strike = $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.strike);
var $author$project$Internal$Markdown$elmUiRenderer = {
	blockQuote: function (children) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Border$widthEach(
					{bottom: 0, left: 10, right: 0, top: 0}),
					$mdgriffith$elm_ui$Element$padding(10),
					$mdgriffith$elm_ui$Element$Border$color(
					A3($mdgriffith$elm_ui$Element$rgb255, 145, 145, 145)),
					$mdgriffith$elm_ui$Element$Background$color(
					A3($mdgriffith$elm_ui$Element$rgb255, 245, 245, 245))
				]),
			children);
	},
	codeBlock: $author$project$Internal$Markdown$codeBlock,
	codeSpan: $author$project$Internal$Markdown$code,
	emphasis: function (content) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$Font$italic]),
			content);
	},
	hardLineBreak: $mdgriffith$elm_ui$Element$html(
		A2($elm$html$Html$br, _List_Nil, _List_Nil)),
	heading: $author$project$Internal$Markdown$heading,
	html: $dillonkearns$elm_markdown$Markdown$Html$oneOf(_List_Nil),
	image: function (image_) {
		var _v0 = image_.title;
		if (_v0.$ === 'Just') {
			return A2(
				$mdgriffith$elm_ui$Element$image,
				_List_Nil,
				{description: image_.alt, src: image_.src});
		} else {
			return A2(
				$mdgriffith$elm_ui$Element$image,
				_List_Nil,
				{description: image_.alt, src: image_.src});
		}
	},
	link: F2(
		function (_v1, body) {
			var title = _v1.title;
			var destination = _v1.destination;
			return A2(
				$mdgriffith$elm_ui$Element$newTabLink,
				_List_Nil,
				{
					label: A2($mdgriffith$elm_ui$Element$paragraph, _List_Nil, body),
					url: destination
				});
		}),
	orderedList: F2(
		function (startingIndex, items) {
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(15)
					]),
				A2(
					$elm$core$List$indexedMap,
					F2(
						function (index, itemBlocks) {
							return A2(
								$mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(5)
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[$mdgriffith$elm_ui$Element$alignTop]),
										A2(
											$elm$core$List$cons,
											$mdgriffith$elm_ui$Element$text(
												$elm$core$String$fromInt(index + startingIndex) + ' '),
											itemBlocks))
									]));
						}),
					items));
		}),
	paragraph: $mdgriffith$elm_ui$Element$paragraph(
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(8)
			])),
	strikethrough: function (content) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$Font$strike]),
			content);
	},
	strong: function (content) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$Font$bold]),
			content);
	},
	table: $mdgriffith$elm_ui$Element$column(_List_Nil),
	tableBody: $mdgriffith$elm_ui$Element$column(_List_Nil),
	tableCell: F2(
		function (_v2, children) {
			return A2($mdgriffith$elm_ui$Element$paragraph, _List_Nil, children);
		}),
	tableHeader: $mdgriffith$elm_ui$Element$column(_List_Nil),
	tableHeaderCell: F2(
		function (_v3, children) {
			return A2($mdgriffith$elm_ui$Element$paragraph, _List_Nil, children);
		}),
	tableRow: $mdgriffith$elm_ui$Element$row(_List_Nil),
	text: $mdgriffith$elm_ui$Element$text,
	thematicBreak: $mdgriffith$elm_ui$Element$none,
	unorderedList: function (items) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(5),
					$mdgriffith$elm_ui$Element$paddingEach(
					{bottom: 0, left: 20, right: 0, top: 0})
				]),
			A2(
				$elm$core$List$map,
				function (_v4) {
					var task = _v4.a;
					var children = _v4.b;
					return A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(10)
							]),
						A2(
							$elm$core$List$cons,
							A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[$mdgriffith$elm_ui$Element$alignTop]),
								function () {
									switch (task.$) {
										case 'IncompleteTask':
											return $mdgriffith$elm_ui$Element$Input$defaultCheckbox(false);
										case 'CompletedTask':
											return $mdgriffith$elm_ui$Element$Input$defaultCheckbox(true);
										default:
											return $mdgriffith$elm_ui$Element$text('•');
									}
								}()),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$paragraph,
									_List_fromArray(
										[$mdgriffith$elm_ui$Element$alignTop]),
									children)
								])));
				},
				items));
	}
};
var $dillonkearns$elm_markdown$Markdown$Html$tag = F2(
	function (expectedTag, a) {
		return $dillonkearns$elm_markdown$Markdown$HtmlRenderer$HtmlRenderer(
			F3(
				function (tagName, attributes, children) {
					return _Utils_eq(tagName, expectedTag) ? $elm$core$Result$Ok(a) : $elm$core$Result$Err('Expected ' + (expectedTag + (' but was ' + tagName)));
				}));
	});
var $dillonkearns$elm_markdown$List$Helpers$find = F2(
	function (predicate, list) {
		find:
		while (true) {
			if (!list.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var first = list.a;
				var rest = list.b;
				if (predicate(first)) {
					return $elm$core$Maybe$Just(first);
				} else {
					var $temp$predicate = predicate,
						$temp$list = rest;
					predicate = $temp$predicate;
					list = $temp$list;
					continue find;
				}
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$Html$withAttribute = F2(
	function (attributeName, _v0) {
		var renderer = _v0.a;
		return $dillonkearns$elm_markdown$Markdown$HtmlRenderer$HtmlRenderer(
			F3(
				function (tagName, attributes, innerBlocks) {
					return function () {
						var _v1 = A2(
							$dillonkearns$elm_markdown$List$Helpers$find,
							function (_v2) {
								var name = _v2.name;
								var value = _v2.value;
								return _Utils_eq(name, attributeName);
							},
							attributes);
						if (_v1.$ === 'Just') {
							var value = _v1.a.value;
							return $elm$core$Result$map(
								$elm$core$Basics$apR(value));
						} else {
							return function (_v3) {
								return $elm$core$Result$Err('Expecting attribute \"' + (attributeName + '\".'));
							};
						}
					}()(
						A3(renderer, tagName, attributes, innerBlocks));
				}));
	});
var $dillonkearns$elm_markdown$Markdown$Html$withOptionalAttribute = F2(
	function (attributeName, _v0) {
		var renderer = _v0.a;
		return $dillonkearns$elm_markdown$Markdown$HtmlRenderer$HtmlRenderer(
			F3(
				function (tagName, attributes, innerBlocks) {
					return function () {
						var _v1 = A2(
							$dillonkearns$elm_markdown$List$Helpers$find,
							function (_v2) {
								var name = _v2.name;
								var value = _v2.value;
								return _Utils_eq(name, attributeName);
							},
							attributes);
						if (_v1.$ === 'Just') {
							var value = _v1.a.value;
							return $elm$core$Result$map(
								$elm$core$Basics$apR(
									$elm$core$Maybe$Just(value)));
						} else {
							return $elm$core$Result$map(
								$elm$core$Basics$apR($elm$core$Maybe$Nothing));
						}
					}()(
						A3(renderer, tagName, attributes, innerBlocks));
				}));
	});
var $author$project$Internal$Markdown$renderer = _Utils_update(
	$author$project$Internal$Markdown$elmUiRenderer,
	{
		html: $dillonkearns$elm_markdown$Markdown$Html$oneOf(
			_List_fromArray(
				[
					A2(
					$dillonkearns$elm_markdown$Markdown$Html$withOptionalAttribute,
					'dribbble',
					A2(
						$dillonkearns$elm_markdown$Markdown$Html$withOptionalAttribute,
						'github',
						A2(
							$dillonkearns$elm_markdown$Markdown$Html$withOptionalAttribute,
							'twitter',
							A2(
								$dillonkearns$elm_markdown$Markdown$Html$withAttribute,
								'photo',
								A2(
									$dillonkearns$elm_markdown$Markdown$Html$withAttribute,
									'name',
									A2(
										$dillonkearns$elm_markdown$Markdown$Html$tag,
										'bio',
										F6(
											function (name, photoUrl, twitter, github, dribbble, renderedChildren) {
												return A6($author$project$Internal$Markdown$bioView, renderedChildren, name, photoUrl, twitter, github, dribbble);
											})))))))
				]))
	});
var $author$project$Internal$Markdown$markdownView = function (string) {
	return A2(
		$elm$core$Result$andThen,
		$dillonkearns$elm_markdown$Markdown$Renderer$render($author$project$Internal$Markdown$renderer),
		A2(
			$elm$core$Result$mapError,
			function (error) {
				return A2(
					$elm$core$String$join,
					'\n',
					A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Parser$deadEndToString, error));
			},
			$dillonkearns$elm_markdown$Markdown$Parser$parse(string)));
};
var $author$project$Internal$Markdown$markdown = function (string) {
	var _v0 = $author$project$Internal$Markdown$markdownView(string);
	if (_v0.$ === 'Ok') {
		var res = _v0.a;
		return res;
	} else {
		var err = _v0.a;
		return _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$text('Error: ' + err)
			]);
	}
};
var $elm_community$string_extra$String$Extra$changeCase = F2(
	function (mutator, word) {
		return A2(
			$elm$core$Maybe$withDefault,
			'',
			A2(
				$elm$core$Maybe$map,
				function (_v0) {
					var head = _v0.a;
					var tail = _v0.b;
					return A2(
						$elm$core$String$cons,
						mutator(head),
						tail);
				},
				$elm$core$String$uncons(word)));
	});
var $elm$core$Char$toUpper = _Char_toUpper;
var $elm_community$string_extra$String$Extra$toSentenceCase = function (word) {
	return A2($elm_community$string_extra$String$Extra$changeCase, $elm$core$Char$toUpper, word);
};
var $author$project$Internal$Views$viewMainTitle = function (string) {
	return A2(
		$mdgriffith$elm_ui$Element$paragraph,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Region$heading(2),
				$mdgriffith$elm_ui$Element$Font$size(24),
				$mdgriffith$elm_ui$Element$Font$bold,
				$mdgriffith$elm_ui$Element$moveDown(20)
			]),
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$text(string)
			]));
};
var $feathericons$elm_feather$FeatherIcons$Icon = function (a) {
	return {$: 'Icon', a: a};
};
var $feathericons$elm_feather$FeatherIcons$defaultAttributes = function (name) {
	return {
		_class: $elm$core$Maybe$Just('feather feather-' + name),
		size: 24,
		sizeUnit: '',
		strokeWidth: 2,
		viewBox: '0 0 24 24'
	};
};
var $feathericons$elm_feather$FeatherIcons$makeBuilder = F2(
	function (name, src) {
		return $feathericons$elm_feather$FeatherIcons$Icon(
			{
				attrs: $feathericons$elm_feather$FeatherIcons$defaultAttributes(name),
				src: src
			});
	});
var $elm$svg$Svg$Attributes$points = _VirtualDom_attribute('points');
var $elm$svg$Svg$polyline = $elm$svg$Svg$trustedNode('polyline');
var $feathericons$elm_feather$FeatherIcons$check = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'check',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$polyline,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('20 6 9 17 4 12')
				]),
			_List_Nil)
		]));
var $author$project$Internal$Views$failureReasonToString = function (failureReason) {
	switch (failureReason.$) {
		case 'Equality':
			var expected = failureReason.a;
			var actual = failureReason.b;
			return 'because I was given `' + (actual + ('` instead of `' + (expected + '`')));
		case 'Custom':
			return 'Custom';
		case 'Comparison':
			var string1 = failureReason.a;
			var string2 = failureReason.b;
			return 'Comparison `' + (string1 + ('`,  `' + (string2 + '`')));
		case 'ListDiff':
			var listString1 = failureReason.a;
			var listString2 = failureReason.b;
			return 'ListDiff `' + (A2($elm$core$String$join, ', ', listString1) + ('`, `' + (A2($elm$core$String$join, ', ', listString2) + '`')));
		case 'CollectionDiff':
			var record = failureReason.a;
			return 'CollectionDiff, Expected = ' + (record.expected + (', Actual = ' + (record.actual + (', Extra = ' + (A2($elm$core$String$join, '|', record.extra) + (', Missing = ' + A2($elm$core$String$join, '|', record.missing)))))));
		case 'TODO':
			return 'TODO';
		default:
			var invalidReason = failureReason.a;
			return 'Invalid, ' + function () {
				switch (invalidReason.$) {
					case 'EmptyList':
						return 'EmptyList';
					case 'NonpositiveFuzzCount':
						return 'NonpositiveFuzzCount';
					case 'InvalidFuzzer':
						return 'InvalidFuzzer';
					case 'BadDescription':
						return 'BadDescription';
					default:
						return 'DuplicatedName';
				}
			}();
	}
};
var $author$project$Internal$Views$green = A3($mdgriffith$elm_ui$Element$rgb, 0, 0.6, 0);
var $author$project$Internal$Views$getAt = F2(
	function (idx, xs) {
		return (idx < 0) ? $elm$core$Maybe$Nothing : $elm$core$List$head(
			A2($elm$core$List$drop, idx, xs));
	});
var $author$project$Internal$Views$indexedFoldl = F3(
	function (func, acc, list) {
		var step = F2(
			function (x, _v0) {
				var i = _v0.a;
				var thisAcc = _v0.b;
				return _Utils_Tuple2(
					i + 1,
					A3(func, i, x, thisAcc));
			});
		return A3(
			$elm$core$List$foldl,
			step,
			_Utils_Tuple2(0, acc),
			list).b;
	});
var $author$project$Internal$Views$previousAndNext = F2(
	function (exerciseData, listIndex) {
		var maybeCurrentPosition = A3(
			$author$project$Internal$Views$indexedFoldl,
			F3(
				function (i, index, acc) {
					if (_Utils_eq(exerciseData.id, index.id)) {
						if (acc.$ === 'Nothing') {
							return $elm$core$Maybe$Just(i);
						} else {
							return acc;
						}
					} else {
						return acc;
					}
				}),
			$elm$core$Maybe$Nothing,
			listIndex);
		if (maybeCurrentPosition.$ === 'Nothing') {
			return _Utils_Tuple2($elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing);
		} else {
			var currentPosition = maybeCurrentPosition.a;
			return _Utils_Tuple2(
				A2($author$project$Internal$Views$getAt, currentPosition - 1, listIndex),
				A2($author$project$Internal$Views$getAt, currentPosition + 1, listIndex));
		}
	});
var $author$project$Internal$Views$red = A3($mdgriffith$elm_ui$Element$rgb, 0.8, 0, 0);
var $elm$svg$Svg$Attributes$class = _VirtualDom_attribute('class');
var $elm$svg$Svg$map = $elm$virtual_dom$VirtualDom$map;
var $elm$svg$Svg$Attributes$stroke = _VirtualDom_attribute('stroke');
var $elm$svg$Svg$Attributes$strokeLinecap = _VirtualDom_attribute('stroke-linecap');
var $elm$svg$Svg$Attributes$strokeLinejoin = _VirtualDom_attribute('stroke-linejoin');
var $elm$svg$Svg$Attributes$strokeWidth = _VirtualDom_attribute('stroke-width');
var $feathericons$elm_feather$FeatherIcons$toHtml = F2(
	function (attributes, _v0) {
		var src = _v0.a.src;
		var attrs = _v0.a.attrs;
		var strSize = $elm$core$String$fromFloat(attrs.size);
		var baseAttributes = _List_fromArray(
			[
				$elm$svg$Svg$Attributes$fill('none'),
				$elm$svg$Svg$Attributes$height(
				_Utils_ap(strSize, attrs.sizeUnit)),
				$elm$svg$Svg$Attributes$width(
				_Utils_ap(strSize, attrs.sizeUnit)),
				$elm$svg$Svg$Attributes$stroke('currentColor'),
				$elm$svg$Svg$Attributes$strokeLinecap('round'),
				$elm$svg$Svg$Attributes$strokeLinejoin('round'),
				$elm$svg$Svg$Attributes$strokeWidth(
				$elm$core$String$fromFloat(attrs.strokeWidth)),
				$elm$svg$Svg$Attributes$viewBox(attrs.viewBox)
			]);
		var combinedAttributes = _Utils_ap(
			function () {
				var _v1 = attrs._class;
				if (_v1.$ === 'Just') {
					var c = _v1.a;
					return A2(
						$elm$core$List$cons,
						$elm$svg$Svg$Attributes$class(c),
						baseAttributes);
				} else {
					return baseAttributes;
				}
			}(),
			attributes);
		return A2(
			$elm$svg$Svg$svg,
			combinedAttributes,
			A2(
				$elm$core$List$map,
				$elm$svg$Svg$map($elm$core$Basics$never),
				src));
	});
var $feathericons$elm_feather$FeatherIcons$withClass = F2(
	function (_class, _v0) {
		var attrs = _v0.a.attrs;
		var src = _v0.a.src;
		return $feathericons$elm_feather$FeatherIcons$Icon(
			{
				attrs: _Utils_update(
					attrs,
					{
						_class: $elm$core$Maybe$Just(_class)
					}),
				src: src
			});
	});
var $feathericons$elm_feather$FeatherIcons$withSize = F2(
	function (size, _v0) {
		var attrs = _v0.a.attrs;
		var src = _v0.a.src;
		return $feathericons$elm_feather$FeatherIcons$Icon(
			{
				attrs: _Utils_update(
					attrs,
					{size: size}),
				src: src
			});
	});
var $elm$svg$Svg$line = $elm$svg$Svg$trustedNode('line');
var $elm$svg$Svg$Attributes$x1 = _VirtualDom_attribute('x1');
var $elm$svg$Svg$Attributes$x2 = _VirtualDom_attribute('x2');
var $elm$svg$Svg$Attributes$y1 = _VirtualDom_attribute('y1');
var $elm$svg$Svg$Attributes$y2 = _VirtualDom_attribute('y2');
var $feathericons$elm_feather$FeatherIcons$x = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'x',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('18'),
					$elm$svg$Svg$Attributes$y1('6'),
					$elm$svg$Svg$Attributes$x2('6'),
					$elm$svg$Svg$Attributes$y2('18')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('6'),
					$elm$svg$Svg$Attributes$y1('6'),
					$elm$svg$Svg$Attributes$x2('18'),
					$elm$svg$Svg$Attributes$y2('18')
				]),
			_List_Nil)
		]));
var $author$project$Internal$Views$zip = $elm$core$List$map2($elm$core$Tuple$pair);
var $author$project$Internal$Views$viewTests = function (model) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(20),
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
			]),
		_Utils_ap(
			_List_Nil,
			_Utils_ap(
				_List_fromArray(
					[
						function () {
						var total = $elm$core$List$length(model.failureReasons);
						var failed = $elm$core$List$length(
							A2(
								$elm$core$List$filter,
								function (failureReason) {
									if (failureReason.$ === 'Just') {
										return true;
									} else {
										return false;
									}
								},
								model.failureReasons));
						switch (failed) {
							case 0:
								return A2(
									$mdgriffith$elm_ui$Element$column,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$spacing(15)
										]),
									_Utils_ap(
										_List_Nil,
										_Utils_ap(
											_List_fromArray(
												[
													A2(
													$mdgriffith$elm_ui$Element$paragraph,
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$Font$color($author$project$Internal$Views$green),
															$mdgriffith$elm_ui$Element$Font$size(20)
														]),
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$text('The current implementation passed all tests! 🎉')
														]))
												]),
											function () {
												var maybeNext = A2($author$project$Internal$Views$previousAndNext, model.exerciseData, model.index).b;
												if (maybeNext.$ === 'Just') {
													var next = maybeNext.a;
													return _List_fromArray(
														[
															A2(
															$mdgriffith$elm_ui$Element$paragraph,
															_List_fromArray(
																[
																	$mdgriffith$elm_ui$Element$Font$color($author$project$Internal$Views$green),
																	$mdgriffith$elm_ui$Element$Font$size(20)
																]),
															_List_fromArray(
																[
																	A2(
																	$mdgriffith$elm_ui$Element$el,
																	_List_Nil,
																	$mdgriffith$elm_ui$Element$text('Check the next exercise: ')),
																	A2(
																	$mdgriffith$elm_ui$Element$newTabLink,
																	_List_Nil,
																	{
																		label: A2(
																			$mdgriffith$elm_ui$Element$paragraph,
																			_List_Nil,
																			_List_fromArray(
																				[
																					A2(
																					$mdgriffith$elm_ui$Element$el,
																					_List_Nil,
																					$mdgriffith$elm_ui$Element$text(next.title))
																				])),
																		url: 'https://ellie-app.com/' + next.ellieId
																	})
																]))
														]);
												} else {
													return _List_Nil;
												}
											}())));
							case 1:
								return A2(
									$mdgriffith$elm_ui$Element$paragraph,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Font$color($author$project$Internal$Views$red)
										]),
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$text('The current implementation failed one test, try again!')
										]));
							default:
								var x = failed;
								return A2(
									$mdgriffith$elm_ui$Element$paragraph,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Font$color($author$project$Internal$Views$red)
										]),
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$text(
											'The current implementation failed ' + ($elm$core$String$fromInt(x) + ' tests, try again'))
										]));
						}
					}()
					]),
				function () {
					var zipped = A2($author$project$Internal$Views$zip, model.exerciseData.tests, model.failureReasons);
					return A2(
						$elm$core$List$map,
						function (_v3) {
							var test = _v3.a;
							var failureReason = _v3.b;
							if (failureReason.$ === 'Nothing') {
								return A2(
									$mdgriffith$elm_ui$Element$wrappedRow,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$spacing(6),
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
										]),
									_List_fromArray(
										[
											A2(
											$mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$alignTop,
													$mdgriffith$elm_ui$Element$moveDown(4)
												]),
											$mdgriffith$elm_ui$Element$html(
												A2(
													$feathericons$elm_feather$FeatherIcons$toHtml,
													_List_Nil,
													A2(
														$feathericons$elm_feather$FeatherIcons$withClass,
														'pass',
														A2($feathericons$elm_feather$FeatherIcons$withSize, 16, $feathericons$elm_feather$FeatherIcons$check))))),
											A2(
											$mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$Font$color($author$project$Internal$Views$green),
													$mdgriffith$elm_ui$Element$width(
													$mdgriffith$elm_ui$Element$px(50)),
													$mdgriffith$elm_ui$Element$alignTop,
													$mdgriffith$elm_ui$Element$moveDown(3)
												]),
											$mdgriffith$elm_ui$Element$text('Passed')),
											A2(
											$mdgriffith$elm_ui$Element$paragraph,
											_List_Nil,
											$author$project$Internal$Markdown$markdown('`' + (test + '`')))
										]));
							} else {
								var reason = failureReason.a;
								return A2(
									$mdgriffith$elm_ui$Element$wrappedRow,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$spacing(6),
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
										]),
									_List_fromArray(
										[
											A2(
											$mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$alignTop,
													$mdgriffith$elm_ui$Element$moveDown(4)
												]),
											$mdgriffith$elm_ui$Element$html(
												A2(
													$feathericons$elm_feather$FeatherIcons$toHtml,
													_List_Nil,
													A2(
														$feathericons$elm_feather$FeatherIcons$withClass,
														'fail',
														A2($feathericons$elm_feather$FeatherIcons$withSize, 16, $feathericons$elm_feather$FeatherIcons$x))))),
											A2(
											$mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$Font$color($author$project$Internal$Views$red),
													$mdgriffith$elm_ui$Element$width(
													$mdgriffith$elm_ui$Element$px(50)),
													$mdgriffith$elm_ui$Element$alignTop,
													$mdgriffith$elm_ui$Element$moveDown(3)
												]),
											$mdgriffith$elm_ui$Element$text('Failed')),
											A2(
											$mdgriffith$elm_ui$Element$paragraph,
											_List_Nil,
											$author$project$Internal$Markdown$markdown(
												'`' + (test + ('` ' + $author$project$Internal$Views$failureReasonToString(reason.reason)))))
										]));
							}
						},
						zipped);
				}())));
};
var $author$project$Internal$Views$viewBody = F2(
	function (tea, model) {
		var paddingRight = 60;
		var paddingLeft = 20;
		var isLargeWindow = function (width) {
			return width > 700;
		};
		var columnSpacing = 20;
		var widthColumn = isLargeWindow(model.width) ? (((((model.width - paddingLeft) - paddingRight) - columnSpacing) / 2) | 0) : ((model.width - paddingLeft) - paddingRight);
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(40),
					$mdgriffith$elm_ui$Element$paddingEach(
					{bottom: 20, left: paddingLeft, right: paddingRight, top: 10}),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_Utils_ap(
				_List_Nil,
				_Utils_ap(
					_List_fromArray(
						[
							A2(
							isLargeWindow(model.width) ? $mdgriffith$elm_ui$Element$row : $mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(columnSpacing)
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$column,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$spacing(40),
											$mdgriffith$elm_ui$Element$alignTop,
											$mdgriffith$elm_ui$Element$width(
											$mdgriffith$elm_ui$Element$px(widthColumn))
										]),
									_Utils_ap(
										_List_Nil,
										_Utils_ap(
											_List_fromArray(
												[
													$author$project$Internal$Views$viewMainTitle('Problem')
												]),
											_List_fromArray(
												[
													A2(
													$mdgriffith$elm_ui$Element$column,
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$spacing(16),
															$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
														]),
													_Utils_ap(
														_List_Nil,
														_Utils_ap(
															$author$project$Internal$Markdown$markdown(
																_Utils_ap(
																	model.exerciseData.problem,
																	$elm$core$String$isEmpty(model.exerciseData.example) ? '' : ('\n## Examples\n```elm\n' + (model.exerciseData.example + '\n```\n\n')))),
															_Utils_ap(
																_List_fromArray(
																	[
																		A2(
																		$mdgriffith$elm_ui$Element$paragraph,
																		_List_fromArray(
																			[
																				$mdgriffith$elm_ui$Element$alpha(0.5)
																			]),
																		_List_fromArray(
																			[
																				$mdgriffith$elm_ui$Element$text('Diffculty level: '),
																				A2(
																				$mdgriffith$elm_ui$Element$el,
																				_List_Nil,
																				$mdgriffith$elm_ui$Element$text(
																					$elm_community$string_extra$String$Extra$toSentenceCase(
																						$author$project$Internal$Data$difficultyToString(model.exerciseData.difficulty))))
																			]))
																	]),
																$elm$core$String$isEmpty(model.exerciseData.reference) ? _List_Nil : _List_fromArray(
																	[
																		A2(
																		$mdgriffith$elm_ui$Element$paragraph,
																		_List_fromArray(
																			[
																				$mdgriffith$elm_ui$Element$alpha(0.5)
																			]),
																		_List_fromArray(
																			[
																				$mdgriffith$elm_ui$Element$text('Reference: '),
																				A2(
																				$mdgriffith$elm_ui$Element$newTabLink,
																				_List_Nil,
																				{
																					label: $mdgriffith$elm_ui$Element$text(model.exerciseData.reference),
																					url: model.exerciseData.reference
																				})
																			]))
																	])))))
												])))),
									A2(
									$mdgriffith$elm_ui$Element$column,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$spacing(40),
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
											$mdgriffith$elm_ui$Element$alignTop,
											$mdgriffith$elm_ui$Element$width(
											$mdgriffith$elm_ui$Element$px(widthColumn))
										]),
									_Utils_ap(
										_List_Nil,
										_Utils_ap(
											_List_fromArray(
												[
													$author$project$Internal$Views$viewMainTitle('Tests')
												]),
											_List_fromArray(
												[
													$author$project$Internal$Views$viewTests(model)
												]))))
								]))
						]),
					function () {
						var _v0 = tea.maybeView;
						if (_v0.$ === 'Just') {
							var view_ = _v0.a;
							return _List_fromArray(
								[
									$author$project$Internal$Views$viewMainTitle('Result'),
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
										]),
									A2(
										$mdgriffith$elm_ui$Element$map,
										$author$project$Internal$Data$MsgTEA,
										view_(model.modelExercise)))
								]);
						} else {
							return _List_Nil;
						}
					}())));
	});
var $author$project$Internal$Data$ChangeMenu = function (a) {
	return {$: 'ChangeMenu', a: a};
};
var $author$project$Internal$Views$attrsButton = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$Border$width(1),
		$mdgriffith$elm_ui$Element$Border$color(
		A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.2)),
		$mdgriffith$elm_ui$Element$Border$rounded(2),
		$mdgriffith$elm_ui$Element$mouseOver(
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Border$shadow(
				{
					blur: 0,
					color: A4($mdgriffith$elm_ui$Element$rgba255, 18, 147, 216, 0.8),
					offset: _Utils_Tuple2(0, 0),
					size: 1
				})
			])),
		A2($mdgriffith$elm_ui$Element$paddingXY, 7, 5),
		$mdgriffith$elm_ui$Element$alignTop
	]);
var $author$project$Internal$Views$footerLink = F3(
	function (content, icon, string) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_Utils_ap(
				$author$project$Internal$Views$attrsButton,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$padding(10),
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$Border$width(0)
					])),
			{
				label: A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(7)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerX]),
							$mdgriffith$elm_ui$Element$html(
								A2(
									$feathericons$elm_feather$FeatherIcons$toHtml,
									_List_Nil,
									A2($feathericons$elm_feather$FeatherIcons$withSize, 16, icon)))),
							$mdgriffith$elm_ui$Element$text(string)
						])),
				onPress: $elm$core$Maybe$Just(
					$author$project$Internal$Data$ChangeMenu(content))
			});
	});
var $feathericons$elm_feather$FeatherIcons$bookOpen = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'book-open',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$path,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$d('M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$path,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$d('M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z')
				]),
			_List_Nil)
		]));
var $elm$svg$Svg$rect = $elm$svg$Svg$trustedNode('rect');
var $elm$svg$Svg$Attributes$rx = _VirtualDom_attribute('rx');
var $elm$svg$Svg$Attributes$ry = _VirtualDom_attribute('ry');
var $elm$svg$Svg$Attributes$x = _VirtualDom_attribute('x');
var $elm$svg$Svg$Attributes$y = _VirtualDom_attribute('y');
var $feathericons$elm_feather$FeatherIcons$calendar = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'calendar',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$rect,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x('3'),
					$elm$svg$Svg$Attributes$y('4'),
					$elm$svg$Svg$Attributes$width('18'),
					$elm$svg$Svg$Attributes$height('18'),
					$elm$svg$Svg$Attributes$rx('2'),
					$elm$svg$Svg$Attributes$ry('2')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('16'),
					$elm$svg$Svg$Attributes$y1('2'),
					$elm$svg$Svg$Attributes$x2('16'),
					$elm$svg$Svg$Attributes$y2('6')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('8'),
					$elm$svg$Svg$Attributes$y1('2'),
					$elm$svg$Svg$Attributes$x2('8'),
					$elm$svg$Svg$Attributes$y2('6')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('3'),
					$elm$svg$Svg$Attributes$y1('10'),
					$elm$svg$Svg$Attributes$x2('21'),
					$elm$svg$Svg$Attributes$y2('10')
				]),
			_List_Nil)
		]));
var $feathericons$elm_feather$FeatherIcons$crosshair = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'crosshair',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$circle,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$cx('12'),
					$elm$svg$Svg$Attributes$cy('12'),
					$elm$svg$Svg$Attributes$r('10')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('22'),
					$elm$svg$Svg$Attributes$y1('12'),
					$elm$svg$Svg$Attributes$x2('18'),
					$elm$svg$Svg$Attributes$y2('12')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('6'),
					$elm$svg$Svg$Attributes$y1('12'),
					$elm$svg$Svg$Attributes$x2('2'),
					$elm$svg$Svg$Attributes$y2('12')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('12'),
					$elm$svg$Svg$Attributes$y1('6'),
					$elm$svg$Svg$Attributes$x2('12'),
					$elm$svg$Svg$Attributes$y2('2')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('12'),
					$elm$svg$Svg$Attributes$y1('22'),
					$elm$svg$Svg$Attributes$x2('12'),
					$elm$svg$Svg$Attributes$y2('18')
				]),
			_List_Nil)
		]));
var $feathericons$elm_feather$FeatherIcons$heart = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'heart',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$path,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$d('M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z')
				]),
			_List_Nil)
		]));
var $feathericons$elm_feather$FeatherIcons$helpCircle = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'help-circle',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$circle,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$cx('12'),
					$elm$svg$Svg$Attributes$cy('12'),
					$elm$svg$Svg$Attributes$r('10')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$path,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$d('M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('12'),
					$elm$svg$Svg$Attributes$y1('17'),
					$elm$svg$Svg$Attributes$x2('12.01'),
					$elm$svg$Svg$Attributes$y2('17')
				]),
			_List_Nil)
		]));
var $feathericons$elm_feather$FeatherIcons$list = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'list',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('8'),
					$elm$svg$Svg$Attributes$y1('6'),
					$elm$svg$Svg$Attributes$x2('21'),
					$elm$svg$Svg$Attributes$y2('6')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('8'),
					$elm$svg$Svg$Attributes$y1('12'),
					$elm$svg$Svg$Attributes$x2('21'),
					$elm$svg$Svg$Attributes$y2('12')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('8'),
					$elm$svg$Svg$Attributes$y1('18'),
					$elm$svg$Svg$Attributes$x2('21'),
					$elm$svg$Svg$Attributes$y2('18')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('3'),
					$elm$svg$Svg$Attributes$y1('6'),
					$elm$svg$Svg$Attributes$x2('3.01'),
					$elm$svg$Svg$Attributes$y2('6')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('3'),
					$elm$svg$Svg$Attributes$y1('12'),
					$elm$svg$Svg$Attributes$x2('3.01'),
					$elm$svg$Svg$Attributes$y2('12')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('3'),
					$elm$svg$Svg$Attributes$y1('18'),
					$elm$svg$Svg$Attributes$x2('3.01'),
					$elm$svg$Svg$Attributes$y2('18')
				]),
			_List_Nil)
		]));
var $author$project$Internal$Views$icons = {contribute: $feathericons$elm_feather$FeatherIcons$heart, help: $feathericons$elm_feather$FeatherIcons$helpCircle, hints: $feathericons$elm_feather$FeatherIcons$crosshair, history: $feathericons$elm_feather$FeatherIcons$calendar, otherExercises: $feathericons$elm_feather$FeatherIcons$list, solutions: $feathericons$elm_feather$FeatherIcons$bookOpen};
var $author$project$Internal$Views$version = '2.0.4';
var $author$project$Internal$Views$viewFooter = A2(
	$mdgriffith$elm_ui$Element$column,
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
			$mdgriffith$elm_ui$Element$Background$color(
			A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.05)),
			$mdgriffith$elm_ui$Element$Font$color(
			A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.5)),
			A2($mdgriffith$elm_ui$Element$paddingXY, 10, 0)
		]),
	_List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$centerX]),
			A2(
				$mdgriffith$elm_ui$Element$wrappedRow,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$paddingEach(
						{bottom: 0, left: 0, right: 0, top: 40}),
						$mdgriffith$elm_ui$Element$Font$color(
						A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.5)),
						$mdgriffith$elm_ui$Element$spacing(15)
					]),
				_List_fromArray(
					[
						A3($author$project$Internal$Views$footerLink, $author$project$Internal$Data$ContentHints, $author$project$Internal$Views$icons.hints, 'Hints'),
						A3($author$project$Internal$Views$footerLink, $author$project$Internal$Data$ContentSolutions, $author$project$Internal$Views$icons.solutions, 'Solutions'),
						A3($author$project$Internal$Views$footerLink, $author$project$Internal$Data$ContentHistory, $author$project$Internal$Views$icons.history, 'History'),
						A3($author$project$Internal$Views$footerLink, $author$project$Internal$Data$ContentOtherExercises, $author$project$Internal$Views$icons.otherExercises, 'Other Exercises'),
						A3($author$project$Internal$Views$footerLink, $author$project$Internal$Data$ContentHelp, $author$project$Internal$Views$icons.help, 'Help'),
						A3($author$project$Internal$Views$footerLink, $author$project$Internal$Data$ContentContribute, $author$project$Internal$Views$icons.contribute, 'Contribute')
					]))),
			A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$center,
					$mdgriffith$elm_ui$Element$Font$size(14),
					A2($mdgriffith$elm_ui$Element$paddingXY, 0, 30)
				]),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text('Made with '),
					A2(
					$mdgriffith$elm_ui$Element$newTabLink,
					_List_Nil,
					{
						label: $mdgriffith$elm_ui$Element$text('elm-exercises'),
						url: 'https://package.elm-lang.org/packages/lucamug/elm-exercises/latest/'
					}),
					$mdgriffith$elm_ui$Element$text(' '),
					$mdgriffith$elm_ui$Element$text($author$project$Internal$Views$version)
				]))
		]));
var $feathericons$elm_feather$FeatherIcons$chevronsRight = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'chevrons-right',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$polyline,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('13 17 18 12 13 7')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$polyline,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('6 17 11 12 6 7')
				]),
			_List_Nil)
		]));
var $elm$svg$Svg$polygon = $elm$svg$Svg$trustedNode('polygon');
var $author$project$Internal$Views$logo = A2(
	$elm$svg$Svg$svg,
	_List_fromArray(
		[
			$elm$svg$Svg$Attributes$fill('#fff'),
			$elm$svg$Svg$Attributes$width('40'),
			$elm$svg$Svg$Attributes$height('40'),
			$elm$svg$Svg$Attributes$viewBox('0 0 600 600')
		]),
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$polygon,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('0,20 280,300 0,580')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$polygon,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('20,600 300,320 580,600')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$polygon,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('320,0 600,0 600,280')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$polygon,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('20,0 280,0 402,122 142,122')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$polygon,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('170,150 430,150 300,280')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$polygon,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('320,300 450,170 580,300 450,430')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$polygon,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('470,450 600,320 600,580')
				]),
			_List_Nil)
		]));
var $author$project$Internal$Views$viewHeader = function (model) {
	return A2(
		$mdgriffith$elm_ui$Element$row,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$spacing(20),
				$mdgriffith$elm_ui$Element$padding(20),
				$mdgriffith$elm_ui$Element$Background$color(
				A3($mdgriffith$elm_ui$Element$rgb255, 53, 71, 92)),
				$mdgriffith$elm_ui$Element$Background$color(
				A3($mdgriffith$elm_ui$Element$rgb255, 38, 121, 165)),
				$mdgriffith$elm_ui$Element$Background$color(
				A3($mdgriffith$elm_ui$Element$rgb255, 18, 147, 216)),
				$mdgriffith$elm_ui$Element$Background$color(
				A3($mdgriffith$elm_ui$Element$rgb255, 0, 127, 196)),
				$mdgriffith$elm_ui$Element$Font$color(
				A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
				$mdgriffith$elm_ui$Element$Font$size(16),
				$mdgriffith$elm_ui$Element$Font$family(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$typeface('Source Sans Pro'),
						$mdgriffith$elm_ui$Element$Font$sansSerif
					]))
			]),
		_Utils_ap(
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$alignTop]),
					$mdgriffith$elm_ui$Element$html($author$project$Internal$Views$logo)),
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(10),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					_Utils_ap(
						_List_Nil,
						_Utils_ap(
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$paragraph,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Font$size(14)
										]),
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$text(
											'Elm Exercise #' + $elm$core$String$fromInt(model.exerciseData.id))
										]))
								]),
							_Utils_ap(
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$paragraph,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$moveUp(5),
												$mdgriffith$elm_ui$Element$Region$heading(1),
												$mdgriffith$elm_ui$Element$Font$size(25)
											]),
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text(model.exerciseData.title)
											]))
									]),
								function () {
									var maybeNext = A2($author$project$Internal$Views$previousAndNext, model.exerciseData, model.index).b;
									if (maybeNext.$ === 'Just') {
										var next = maybeNext.a;
										return _List_fromArray(
											[
												A2(
												$mdgriffith$elm_ui$Element$paragraph,
												_List_Nil,
												_List_fromArray(
													[
														A2(
														$mdgriffith$elm_ui$Element$newTabLink,
														_List_fromArray(
															[
																$mdgriffith$elm_ui$Element$htmlAttribute(
																$elm$html$Html$Attributes$class('linkInTheHeader'))
															]),
														{
															label: A2(
																$mdgriffith$elm_ui$Element$row,
																_List_fromArray(
																	[
																		$mdgriffith$elm_ui$Element$spacing(5)
																	]),
																_List_fromArray(
																	[
																		A2(
																		$mdgriffith$elm_ui$Element$el,
																		_List_fromArray(
																			[
																				$mdgriffith$elm_ui$Element$moveDown(1.5),
																				$mdgriffith$elm_ui$Element$alignTop
																			]),
																		$mdgriffith$elm_ui$Element$html(
																			A2(
																				$feathericons$elm_feather$FeatherIcons$toHtml,
																				_List_Nil,
																				A2($feathericons$elm_feather$FeatherIcons$withSize, 20, $feathericons$elm_feather$FeatherIcons$chevronsRight)))),
																		A2(
																		$mdgriffith$elm_ui$Element$paragraph,
																		_List_Nil,
																		_List_fromArray(
																			[
																				$mdgriffith$elm_ui$Element$text('Next exercise: '),
																				$mdgriffith$elm_ui$Element$text(next.title)
																			]))
																	])),
															url: 'https://ellie-app.com/' + next.ellieId
														})
													]))
											]);
									} else {
										return _List_Nil;
									}
								}()))))
				])));
};
var $author$project$Internal$Views$viewElement = F2(
	function (tea, model) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(0),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Font$size(16),
					$mdgriffith$elm_ui$Element$Font$family(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$typeface('Source Sans Pro'),
							$mdgriffith$elm_ui$Element$Font$sansSerif
						])),
					$mdgriffith$elm_ui$Element$inFront(
					$mdgriffith$elm_ui$Element$html(
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$useTheme($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$gitHub))),
					$mdgriffith$elm_ui$Element$inFront(
					$mdgriffith$elm_ui$Element$html(
						A3(
							$elm$html$Html$node,
							'style',
							_List_Nil,
							_List_fromArray(
								[
									$elm$html$Html$text('\n            /* unvisited link */\n            a:link {\n                color: rgb(18, 147, 216);\n            }\n\n            /* visited link */\n            a:visited {\n                color: rgb(0, 100, 180);\n            }\n\n            /* mouse over link */\n            a:hover {\n                color: rgb(0, 100, 180);\n            }\n\n            /* selected link */\n            a:active {\n                color: rgb(0, 100, 180);\n            }\n\n            a.linkInTheHeader:link {\n                color: rgba(255, 255, 255, 0.5);\n                transition: .2s;\n            }\n\n            a.linkInTheHeader:hover {\n                color: rgb(255, 255, 255);\n            }\n            \n            .fail {\n                stroke: rgb(204, 0, 0);\n            }\n            \n            .pass { \n                stroke: rgb(0, 153, 0);\n            }\n\n            .elmsh {\n                background-color: rgba(0,0,0,0);\n                font-size: 14px;\n                line-height: 18px;\n                font-family: \'Source Code Pro\', monospace;\n            }\n            \n            \n            pre {margin: 0px; padding: 10px}\n            \n            .s.r > s:first-of-type.accx { flex-grow: 0 !important; }\n            .s.r > s:last-of-type.accx { flex-grow: 0 !important; }\n            .cx > .wrp { justify-content: center !important; }\n            \n            ')
								]))))
				]),
			_Utils_ap(
				_List_Nil,
				_Utils_ap(
					_List_fromArray(
						[
							$author$project$Internal$Views$viewHeader(model)
						]),
					_Utils_ap(
						_List_fromArray(
							[
								A2($author$project$Internal$Views$viewBody, tea, model)
							]),
						_List_fromArray(
							[$author$project$Internal$Views$viewFooter])))));
	});
var $author$project$Exercises$viewElement = $author$project$Internal$Views$viewElement;
var $mdgriffith$elm_ui$Internal$Model$Right = {$: 'Right'};
var $mdgriffith$elm_ui$Element$alignRight = $mdgriffith$elm_ui$Internal$Model$AlignX($mdgriffith$elm_ui$Internal$Model$Right);
var $author$project$Internal$Data$MenuOver = function (a) {
	return {$: 'MenuOver', a: a};
};
var $author$project$Internal$Views$maybeLength = function (list) {
	var length = $elm$core$List$length(list);
	return (!length) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(length);
};
var $elm$html$Html$Events$onMouseEnter = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'mouseenter',
		$elm$json$Json$Decode$succeed(msg));
};
var $mdgriffith$elm_ui$Element$Events$onMouseEnter = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Events$onMouseEnter);
var $elm$html$Html$Events$onMouseLeave = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'mouseleave',
		$elm$json$Json$Decode$succeed(msg));
};
var $mdgriffith$elm_ui$Element$Events$onMouseLeave = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Events$onMouseLeave);
var $mdgriffith$elm_ui$Element$Border$roundEach = function (_v0) {
	var topLeft = _v0.topLeft;
	var topRight = _v0.topRight;
	var bottomLeft = _v0.bottomLeft;
	var bottomRight = _v0.bottomRight;
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderRound,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Single,
			'br-' + ($elm$core$String$fromInt(topLeft) + ('-' + ($elm$core$String$fromInt(topRight) + ($elm$core$String$fromInt(bottomLeft) + ('-' + $elm$core$String$fromInt(bottomRight)))))),
			'border-radius',
			$elm$core$String$fromInt(topLeft) + ('px ' + ($elm$core$String$fromInt(topRight) + ('px ' + ($elm$core$String$fromInt(bottomRight) + ('px ' + ($elm$core$String$fromInt(bottomLeft) + 'px'))))))));
};
var $elm$core$String$toUpper = _String_toUpper;
var $author$project$Internal$Views$sideButton = F4(
	function (content, icon, string, quantity) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_Utils_ap(
				_List_Nil,
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$padding(13),
							$mdgriffith$elm_ui$Element$Border$widthEach(
							{bottom: 1, left: 1, right: 0, top: 1}),
							$mdgriffith$elm_ui$Element$Border$roundEach(
							{bottomLeft: 4, bottomRight: 0, topLeft: 4, topRight: 0}),
							$mdgriffith$elm_ui$Element$Border$color(
							A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.2)),
							$mdgriffith$elm_ui$Element$Background$color(
							A4($mdgriffith$elm_ui$Element$rgba, 1, 1, 1, 0.9)),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(145))
						]),
					function () {
						if (quantity.$ === 'Nothing') {
							return _List_Nil;
						} else {
							var qty = quantity.a;
							return _List_fromArray(
								[
									$mdgriffith$elm_ui$Element$inFront(
									A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$width(
												$mdgriffith$elm_ui$Element$px(16)),
												$mdgriffith$elm_ui$Element$height(
												$mdgriffith$elm_ui$Element$px(16)),
												$mdgriffith$elm_ui$Element$Background$color(
												A3($mdgriffith$elm_ui$Element$rgb, 0.2, 0.6, 0.9)),
												$mdgriffith$elm_ui$Element$Font$color(
												A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
												$mdgriffith$elm_ui$Element$Font$size(12),
												$mdgriffith$elm_ui$Element$Border$rounded(16),
												$mdgriffith$elm_ui$Element$moveRight(28),
												$mdgriffith$elm_ui$Element$moveDown(6)
											]),
										A2(
											$mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY]),
											$mdgriffith$elm_ui$Element$text(
												$elm$core$String$fromInt(qty)))))
								]);
						}
					}())),
			{
				label: A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerX]),
							$mdgriffith$elm_ui$Element$html(
								A2($feathericons$elm_feather$FeatherIcons$toHtml, _List_Nil, icon))),
							A2(
							$mdgriffith$elm_ui$Element$paragraph,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$spacing(4)
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Font$size(12)
										]),
									$mdgriffith$elm_ui$Element$text(
										$elm$core$String$toUpper(string)))
								]))
						])),
				onPress: $elm$core$Maybe$Just(
					$author$project$Internal$Data$ChangeMenu(content))
			});
	});
var $author$project$Internal$Views$viewSideButtons = function (model) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$alignRight,
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$spacing(10),
				$mdgriffith$elm_ui$Element$Events$onMouseEnter(
				$author$project$Internal$Data$MenuOver(true)),
				$mdgriffith$elm_ui$Element$Events$onMouseLeave(
				$author$project$Internal$Data$MenuOver(false)),
				$mdgriffith$elm_ui$Element$htmlAttribute(
				A2($elm$html$Html$Attributes$style, 'transition', '0.2s')),
				model.localStorageRecord.menuOpen ? (model.menuOver ? $mdgriffith$elm_ui$Element$moveRight(0) : $mdgriffith$elm_ui$Element$moveRight(130)) : (model.menuOver ? $mdgriffith$elm_ui$Element$moveRight(0) : $mdgriffith$elm_ui$Element$moveRight(93))
			]),
		_List_fromArray(
			[
				A4(
				$author$project$Internal$Views$sideButton,
				$author$project$Internal$Data$ContentHints,
				$author$project$Internal$Views$icons.hints,
				'Hints',
				$author$project$Internal$Views$maybeLength(model.exerciseData.hints)),
				A4(
				$author$project$Internal$Views$sideButton,
				$author$project$Internal$Data$ContentSolutions,
				$author$project$Internal$Views$icons.solutions,
				'Solutions',
				$author$project$Internal$Views$maybeLength(model.exerciseData.solutions)),
				A4(
				$author$project$Internal$Views$sideButton,
				$author$project$Internal$Data$ContentHistory,
				$author$project$Internal$Views$icons.history,
				'History',
				$author$project$Internal$Views$maybeLength(
					$elm$core$Dict$toList(model.localStorage))),
				A4($author$project$Internal$Views$sideButton, $author$project$Internal$Data$ContentOtherExercises, $author$project$Internal$Views$icons.otherExercises, 'Other Exercises', $elm$core$Maybe$Nothing),
				A4($author$project$Internal$Views$sideButton, $author$project$Internal$Data$ContentHelp, $author$project$Internal$Views$icons.help, 'Help', $elm$core$Maybe$Nothing),
				A4($author$project$Internal$Views$sideButton, $author$project$Internal$Data$ContentContribute, $author$project$Internal$Views$icons.contribute, 'Contribute', $elm$core$Maybe$Nothing)
			]));
};
var $author$project$Internal$Views$gitHubDirectLink = function (id) {
	return 'https://github.com/lucamug/elm-exercises/edit/master/exercises/src/E' + (A3(
		$elm$core$String$padLeft,
		3,
		_Utils_chr('0'),
		$elm$core$String$fromInt(id)) + '.elm');
};
var $author$project$Internal$Views$viewTitle = function (string) {
	return A2(
		$mdgriffith$elm_ui$Element$paragraph,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Region$heading(2),
				$mdgriffith$elm_ui$Element$Font$size(20),
				$mdgriffith$elm_ui$Element$Font$bold,
				$mdgriffith$elm_ui$Element$Font$color(
				A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.8))
			]),
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$text(string)
			]));
};
var $author$project$Internal$Views$contentContribute = function (id) {
	return _Utils_Tuple3(
		'Contribute',
		$author$project$Internal$Views$icons.contribute,
		_Utils_ap(
			_List_Nil,
			_Utils_ap(
				_List_fromArray(
					[
						$author$project$Internal$Views$viewTitle('Improve this exercise')
					]),
				_Utils_ap(
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(16),
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
								]),
							$author$project$Internal$Markdown$markdown(
								'If you find some mistake or you have some goot hint or a nice solution to add to this exercise, you can [edit it directly](' + ($author$project$Internal$Views$gitHubDirectLink(id) + ').')))
						]),
					_Utils_ap(
						_List_fromArray(
							[
								$author$project$Internal$Views$viewTitle('Crate new exercises')
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(16),
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$column,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$spacing(16),
												$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
											]),
										$author$project$Internal$Markdown$markdown('If you have some exercise that you would like to add to this list or if you have any other feedback, [learn how you can contribute](https://github.com/lucamug/elm-exercises/blob/master/CONTRIBUTING.md).'))
									]))
							]))))));
};
var $author$project$Internal$Views$contentHelp = _Utils_Tuple3(
	'Help',
	$author$project$Internal$Views$icons.help,
	_Utils_ap(
		_List_Nil,
		_Utils_ap(
			_List_fromArray(
				[
					$author$project$Internal$Views$viewTitle('How does this work?')
				]),
			_Utils_ap(
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(16),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$paragraph,
								_List_Nil,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$text('Try solving the problem by writing Elm code in the editor on the left. Then click the '),
										A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Background$color(
												A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.5)),
												$mdgriffith$elm_ui$Element$Font$color(
												A4($mdgriffith$elm_ui$Element$rgba, 1, 1, 1, 0.9)),
												$mdgriffith$elm_ui$Element$Border$rounded(2),
												A2($mdgriffith$elm_ui$Element$paddingXY, 4, 1),
												$mdgriffith$elm_ui$Element$Font$size(11),
												$mdgriffith$elm_ui$Element$spacing(3),
												$mdgriffith$elm_ui$Element$Border$color(
												A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.8)),
												$mdgriffith$elm_ui$Element$Border$width(1)
											]),
										_List_fromArray(
											[
												A2(
												$mdgriffith$elm_ui$Element$el,
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$Font$size(10)
													]),
												$mdgriffith$elm_ui$Element$text('▶')),
												A2(
												$mdgriffith$elm_ui$Element$el,
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$Font$color(
														A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.2))
													]),
												$mdgriffith$elm_ui$Element$text('|')),
												$mdgriffith$elm_ui$Element$text('COMPILE')
											])),
										$mdgriffith$elm_ui$Element$text(' button that you find at the top and check if your implementation passes all tests. If not, try again!')
									])),
								A2(
								$mdgriffith$elm_ui$Element$paragraph,
								_List_Nil,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$text('You need to write only Elm language, so you can minimize the HTML editor in the left bottom area, to optimize your working space.')
									])),
								A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(16),
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
									]),
								$author$project$Internal$Markdown$markdown('If you need support, [join the Elm community in Slack](https://elmlang.herokuapp.com/).\n\nThere are also a lot of valuable resources to learn Elm on-line. for example:\n\n* [An Introduction to Elm](https://guide.elm-lang.org/) - The official Elm Guide\n* [Elm Packages](https://package.elm-lang.org/) - Documentation of Elm Packages\n* [Elm Cheat Sheet](https://lucamug.github.io/elm-cheat-sheet/) - A condensate list of the most useful Elm concepts\n* [Awesome Elm](https://github.com/sporto/awesome-elm) - A list of Elm resources'))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$center,
								A2($mdgriffith$elm_ui$Element$paddingXY, 10, 30)
							]),
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$text('♡ Happy coding! ♡')
							]))
					])))));
var $author$project$Internal$Data$HideHint = function (a) {
	return {$: 'HideHint', a: a};
};
var $author$project$Internal$Data$ShowHint = function (a) {
	return {$: 'ShowHint', a: a};
};
var $author$project$Internal$Data$ShowHintsAll = {$: 'ShowHintsAll'};
var $author$project$Internal$Data$ShowHintsNone = {$: 'ShowHintsNone'};
var $author$project$Internal$Views$isOpen = F2(
	function (show, index) {
		switch (show.$) {
			case 'ShowAll':
				return true;
			case 'ShowNone':
				return false;
			default:
				var set = show.a;
				return A2($elm$core$Set$member, index, set);
		}
	});
var $author$project$Internal$Views$accordion = function (_v0) {
	var items = _v0.items;
	var hideItem = _v0.hideItem;
	var showItem = _v0.showItem;
	var itemsContent = _v0.itemsContent;
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(0),
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
			]),
		A2(
			$elm$core$List$indexedMap,
			F2(
				function (index, solution) {
					return A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$spacing(5)
							]),
						_List_fromArray(
							[
								A2($author$project$Internal$Views$isOpen, items, index) ? A2(
								$mdgriffith$elm_ui$Element$Input$button,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$alignTop,
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
									]),
								{
									label: A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
												$mdgriffith$elm_ui$Element$spacing(10),
												$mdgriffith$elm_ui$Element$mouseOver(
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$Background$color(
														A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.05))
													])),
												A2($mdgriffith$elm_ui$Element$paddingXY, 0, 6)
											]),
										_List_fromArray(
											[
												A2(
												$mdgriffith$elm_ui$Element$el,
												$author$project$Internal$Views$attrsButton,
												$mdgriffith$elm_ui$Element$text(
													$elm$core$String$fromInt(index + 1))),
												A2(
												$mdgriffith$elm_ui$Element$el,
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$htmlAttribute(
														A2($elm$html$Html$Attributes$style, 'transition', '.2s')),
														$mdgriffith$elm_ui$Element$rotate(-$elm$core$Basics$pi)
													]),
												$mdgriffith$elm_ui$Element$text('▼')),
												A2(
												$mdgriffith$elm_ui$Element$el,
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$Font$size(14)
													]),
												$mdgriffith$elm_ui$Element$text(' Hide'))
											])),
									onPress: $elm$core$Maybe$Just(
										hideItem(index))
								}) : A2(
								$mdgriffith$elm_ui$Element$Input$button,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$alignTop,
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
									]),
								{
									label: A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
												$mdgriffith$elm_ui$Element$spacing(10),
												$mdgriffith$elm_ui$Element$mouseOver(
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$Background$color(
														A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.05))
													])),
												A2($mdgriffith$elm_ui$Element$paddingXY, 0, 6)
											]),
										_List_fromArray(
											[
												A2(
												$mdgriffith$elm_ui$Element$el,
												$author$project$Internal$Views$attrsButton,
												$mdgriffith$elm_ui$Element$text(
													$elm$core$String$fromInt(index + 1))),
												A2(
												$mdgriffith$elm_ui$Element$el,
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$htmlAttribute(
														A2($elm$html$Html$Attributes$style, 'transition', '.2s'))
													]),
												$mdgriffith$elm_ui$Element$text('▼')),
												A2(
												$mdgriffith$elm_ui$Element$el,
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$Font$size(14)
													]),
												$mdgriffith$elm_ui$Element$text(' Show'))
											])),
									onPress: $elm$core$Maybe$Just(
										showItem(index))
								}),
								A2(
								$mdgriffith$elm_ui$Element$column,
								_Utils_ap(
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$alignTop,
											$mdgriffith$elm_ui$Element$paddingEach(
											{bottom: 10, left: 30, right: 0, top: 0}),
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
										]),
									A2($author$project$Internal$Views$isOpen, items, index) ? _List_Nil : _List_fromArray(
										[
											$mdgriffith$elm_ui$Element$htmlAttribute(
											A2($elm$html$Html$Attributes$style, 'display', 'none'))
										])),
								$author$project$Internal$Markdown$markdown(solution))
							]));
				}),
			itemsContent));
};
var $author$project$Internal$Views$contentHints = function (model) {
	return _Utils_Tuple3(
		'Hints',
		$author$project$Internal$Views$icons.hints,
		$elm$core$List$isEmpty(model.exerciseData.solutions) ? _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						A2($mdgriffith$elm_ui$Element$paddingXY, 50, 0)
					]),
				A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$centerY,
							$mdgriffith$elm_ui$Element$Font$center,
							$mdgriffith$elm_ui$Element$spacing(16),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					$author$project$Internal$Markdown$markdown(
						'Sorry, no hints for this exercise yet. If you have a hint, [please add it here](' + ($author$project$Internal$Views$gitHubDirectLink(model.exerciseData.id) + ').'))))
			]) : _Utils_ap(
			_List_Nil,
			_Utils_ap(
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$wrappedRow,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(10)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internal$Views$attrsButton,
								{
									label: $mdgriffith$elm_ui$Element$text('Show All'),
									onPress: $elm$core$Maybe$Just($author$project$Internal$Data$ShowHintsAll)
								}),
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internal$Views$attrsButton,
								{
									label: $mdgriffith$elm_ui$Element$text('Hide All'),
									onPress: $elm$core$Maybe$Just($author$project$Internal$Data$ShowHintsNone)
								})
							]))
					]),
				_List_fromArray(
					[
						$author$project$Internal$Views$accordion(
						{hideItem: $author$project$Internal$Data$HideHint, items: model.localStorageRecord.hints, itemsContent: model.exerciseData.hints, showItem: $author$project$Internal$Data$ShowHint})
					]))));
};
var $author$project$Internal$Data$RemoveHistory = {$: 'RemoveHistory'};
var $terezka$charts$Internal$Property$Property = function (a) {
	return {$: 'Property', a: a};
};
var $terezka$charts$Internal$Property$property = F3(
	function (value, inter, attrs) {
		return $terezka$charts$Internal$Property$Property(
			{
				attrs: attrs,
				extra: F5(
					function (_v0, _v1, _v2, _v3, _v4) {
						return _List_Nil;
					}),
				format: A2(
					$elm$core$Basics$composeR,
					value,
					A2(
						$elm$core$Basics$composeR,
						$elm$core$Maybe$map($elm$core$String$fromFloat),
						$elm$core$Maybe$withDefault('N/A'))),
				inter: inter,
				meta: $elm$core$Maybe$Nothing,
				value: value,
				visual: value
			});
	});
var $terezka$charts$Chart$bar = function (y) {
	return A2(
		$terezka$charts$Internal$Property$property,
		A2($elm$core$Basics$composeR, y, $elm$core$Maybe$Just),
		_List_Nil);
};
var $terezka$charts$Internal$Helpers$apply = F2(
	function (funcs, _default) {
		var apply_ = F2(
			function (f, a) {
				return f(a);
			});
		return A3($elm$core$List$foldl, apply_, _default, funcs);
	});
var $terezka$charts$Internal$Svg$defaultLabel = {anchor: $elm$core$Maybe$Nothing, attrs: _List_Nil, border: 'white', borderWidth: 0, color: '#808BAB', fontSize: $elm$core$Maybe$Nothing, rotate: 0, uppercase: false, xOff: 0, yOff: 0};
var $terezka$charts$Internal$Coordinates$bottom = function (pos) {
	return {x: pos.x1 + ((pos.x2 - pos.x1) / 2), y: pos.y1};
};
var $terezka$charts$Internal$Item$getPosition = F2(
	function (plane, _v0) {
		var item = _v0.a;
		return A2(item.toPosition, plane, item.config);
	});
var $terezka$charts$Chart$Item$getBottom = function (p) {
	return A2(
		$elm$core$Basics$composeR,
		$terezka$charts$Internal$Item$getPosition(p),
		$terezka$charts$Internal$Coordinates$bottom);
};
var $terezka$charts$Chart$defaultLabel = {anchor: $terezka$charts$Internal$Svg$defaultLabel.anchor, attrs: $terezka$charts$Internal$Svg$defaultLabel.attrs, border: $terezka$charts$Internal$Svg$defaultLabel.border, borderWidth: $terezka$charts$Internal$Svg$defaultLabel.borderWidth, color: $terezka$charts$Internal$Svg$defaultLabel.color, fontSize: $terezka$charts$Internal$Svg$defaultLabel.fontSize, format: $elm$core$Maybe$Nothing, position: $terezka$charts$Chart$Item$getBottom, rotate: $terezka$charts$Internal$Svg$defaultLabel.rotate, uppercase: $terezka$charts$Internal$Svg$defaultLabel.uppercase, xOff: $terezka$charts$Internal$Svg$defaultLabel.xOff, yOff: $terezka$charts$Internal$Svg$defaultLabel.yOff};
var $terezka$charts$Chart$SubElements = function (a) {
	return {$: 'SubElements', a: a};
};
var $terezka$charts$Internal$Many$Remodel = F2(
	function (a, b) {
		return {$: 'Remodel', a: a, b: b};
	});
var $terezka$charts$Internal$Many$andThen = F2(
	function (_v0, _v1) {
		var toPos2 = _v0.a;
		var func2 = _v0.b;
		var toPos1 = _v1.a;
		var func1 = _v1.b;
		return A2(
			$terezka$charts$Internal$Many$Remodel,
			toPos2,
			function (items) {
				return func2(
					func1(items));
			});
	});
var $terezka$charts$Chart$Item$andThen = $terezka$charts$Internal$Many$andThen;
var $terezka$charts$Internal$Many$apply = F2(
	function (_v0, items) {
		var func = _v0.b;
		return func(items);
	});
var $terezka$charts$Chart$Item$apply = $terezka$charts$Internal$Many$apply;
var $terezka$charts$Internal$Item$Bar = function (a) {
	return {$: 'Bar', a: a};
};
var $terezka$charts$Internal$Item$Rendered = function (a) {
	return {$: 'Rendered', a: a};
};
var $terezka$charts$Internal$Commands$Arc = F7(
	function (a, b, c, d, e, f, g) {
		return {$: 'Arc', a: a, b: b, c: c, d: d, e: e, f: f, g: g};
	});
var $terezka$charts$Internal$Commands$Line = F2(
	function (a, b) {
		return {$: 'Line', a: a, b: b};
	});
var $terezka$charts$Internal$Commands$Move = F2(
	function (a, b) {
		return {$: 'Move', a: a, b: b};
	});
var $elm$core$Basics$abs = function (n) {
	return (n < 0) ? (-n) : n;
};
var $terezka$charts$Internal$Svg$clipperStyle = F2(
	function (plane, limits) {
		var topCut = ((plane.y.max - limits.y2) / $elm$core$Basics$abs(limits.y2 - limits.y1)) * 100;
		var rightCut = ((plane.x.max - limits.x2) / $elm$core$Basics$abs(limits.x2 - limits.x1)) * 100;
		var leftCut = ((plane.x.min - limits.x1) / $elm$core$Basics$abs(limits.x2 - limits.x1)) * 100;
		var bottomCut = ((plane.y.min - limits.y1) / $elm$core$Basics$abs(limits.y2 - limits.y1)) * 100;
		var path = A2(
			$elm$core$String$join,
			' ',
			_List_fromArray(
				[
					$elm$core$String$fromFloat(-topCut) + '%',
					$elm$core$String$fromFloat(-rightCut) + '%',
					$elm$core$String$fromFloat(bottomCut) + '%',
					$elm$core$String$fromFloat(leftCut) + '%'
				]));
		return 'clip-path: inset(' + (path + ');');
	});
var $terezka$charts$Internal$Commands$joinCommands = function (commands) {
	return A2($elm$core$String$join, ' ', commands);
};
var $terezka$charts$Internal$Commands$stringBoolInt = function (bool) {
	return bool ? '1' : '0';
};
var $terezka$charts$Internal$Commands$stringPoint = function (_v0) {
	var x = _v0.a;
	var y = _v0.b;
	return $elm$core$String$fromFloat(x) + (' ' + $elm$core$String$fromFloat(y));
};
var $terezka$charts$Internal$Commands$stringPoints = function (points) {
	return A2(
		$elm$core$String$join,
		',',
		A2($elm$core$List$map, $terezka$charts$Internal$Commands$stringPoint, points));
};
var $terezka$charts$Internal$Commands$stringCommand = function (command) {
	switch (command.$) {
		case 'Move':
			var x = command.a;
			var y = command.b;
			return 'M' + $terezka$charts$Internal$Commands$stringPoint(
				_Utils_Tuple2(x, y));
		case 'Line':
			var x = command.a;
			var y = command.b;
			return 'L' + $terezka$charts$Internal$Commands$stringPoint(
				_Utils_Tuple2(x, y));
		case 'CubicBeziers':
			var cx1 = command.a;
			var cy1 = command.b;
			var cx2 = command.c;
			var cy2 = command.d;
			var x = command.e;
			var y = command.f;
			return 'C' + $terezka$charts$Internal$Commands$stringPoints(
				_List_fromArray(
					[
						_Utils_Tuple2(cx1, cy1),
						_Utils_Tuple2(cx2, cy2),
						_Utils_Tuple2(x, y)
					]));
		case 'CubicBeziersShort':
			var cx1 = command.a;
			var cy1 = command.b;
			var x = command.c;
			var y = command.d;
			return 'Q' + $terezka$charts$Internal$Commands$stringPoints(
				_List_fromArray(
					[
						_Utils_Tuple2(cx1, cy1),
						_Utils_Tuple2(x, y)
					]));
		case 'QuadraticBeziers':
			var cx1 = command.a;
			var cy1 = command.b;
			var x = command.c;
			var y = command.d;
			return 'Q' + $terezka$charts$Internal$Commands$stringPoints(
				_List_fromArray(
					[
						_Utils_Tuple2(cx1, cy1),
						_Utils_Tuple2(x, y)
					]));
		case 'QuadraticBeziersShort':
			var x = command.a;
			var y = command.b;
			return 'T' + $terezka$charts$Internal$Commands$stringPoint(
				_Utils_Tuple2(x, y));
		case 'Arc':
			var rx = command.a;
			var ry = command.b;
			var xAxisRotation = command.c;
			var largeArcFlag = command.d;
			var sweepFlag = command.e;
			var x = command.f;
			var y = command.g;
			return 'A ' + $terezka$charts$Internal$Commands$joinCommands(
				_List_fromArray(
					[
						$terezka$charts$Internal$Commands$stringPoint(
						_Utils_Tuple2(rx, ry)),
						$elm$core$String$fromInt(xAxisRotation),
						$terezka$charts$Internal$Commands$stringBoolInt(largeArcFlag),
						$terezka$charts$Internal$Commands$stringBoolInt(sweepFlag),
						$terezka$charts$Internal$Commands$stringPoint(
						_Utils_Tuple2(x, y))
					]));
		default:
			return 'Z';
	}
};
var $terezka$charts$Internal$Commands$Close = {$: 'Close'};
var $terezka$charts$Internal$Commands$CubicBeziers = F6(
	function (a, b, c, d, e, f) {
		return {$: 'CubicBeziers', a: a, b: b, c: c, d: d, e: e, f: f};
	});
var $terezka$charts$Internal$Commands$CubicBeziersShort = F4(
	function (a, b, c, d) {
		return {$: 'CubicBeziersShort', a: a, b: b, c: c, d: d};
	});
var $terezka$charts$Internal$Commands$QuadraticBeziers = F4(
	function (a, b, c, d) {
		return {$: 'QuadraticBeziers', a: a, b: b, c: c, d: d};
	});
var $terezka$charts$Internal$Commands$QuadraticBeziersShort = F2(
	function (a, b) {
		return {$: 'QuadraticBeziersShort', a: a, b: b};
	});
var $terezka$charts$Internal$Coordinates$innerWidth = function (plane) {
	return A2($elm$core$Basics$max, 1, (plane.width - plane.margin.left) - plane.margin.right);
};
var $terezka$charts$Internal$Coordinates$range = function (limits) {
	var diff = limits.max - limits.min;
	return (diff > 0) ? diff : 1;
};
var $terezka$charts$Internal$Coordinates$scaleSVGX = F2(
	function (plane, value) {
		return (value * $terezka$charts$Internal$Coordinates$innerWidth(plane)) / $terezka$charts$Internal$Coordinates$range(plane.x);
	});
var $terezka$charts$Internal$Coordinates$toSVGX = F2(
	function (plane, value) {
		return A2($terezka$charts$Internal$Coordinates$scaleSVGX, plane, value - plane.x.min) + plane.margin.left;
	});
var $terezka$charts$Internal$Coordinates$innerHeight = function (plane) {
	return A2($elm$core$Basics$max, 1, (plane.height - plane.margin.top) - plane.margin.bottom);
};
var $terezka$charts$Internal$Coordinates$scaleSVGY = F2(
	function (plane, value) {
		return (value * $terezka$charts$Internal$Coordinates$innerHeight(plane)) / $terezka$charts$Internal$Coordinates$range(plane.y);
	});
var $terezka$charts$Internal$Coordinates$toSVGY = F2(
	function (plane, value) {
		return A2($terezka$charts$Internal$Coordinates$scaleSVGY, plane, plane.y.max - value) + plane.margin.top;
	});
var $terezka$charts$Internal$Commands$translate = F2(
	function (plane, command) {
		switch (command.$) {
			case 'Move':
				var x = command.a;
				var y = command.b;
				return A2(
					$terezka$charts$Internal$Commands$Move,
					A2($terezka$charts$Internal$Coordinates$toSVGX, plane, x),
					A2($terezka$charts$Internal$Coordinates$toSVGY, plane, y));
			case 'Line':
				var x = command.a;
				var y = command.b;
				return A2(
					$terezka$charts$Internal$Commands$Line,
					A2($terezka$charts$Internal$Coordinates$toSVGX, plane, x),
					A2($terezka$charts$Internal$Coordinates$toSVGY, plane, y));
			case 'CubicBeziers':
				var cx1 = command.a;
				var cy1 = command.b;
				var cx2 = command.c;
				var cy2 = command.d;
				var x = command.e;
				var y = command.f;
				return A6(
					$terezka$charts$Internal$Commands$CubicBeziers,
					A2($terezka$charts$Internal$Coordinates$toSVGX, plane, cx1),
					A2($terezka$charts$Internal$Coordinates$toSVGY, plane, cy1),
					A2($terezka$charts$Internal$Coordinates$toSVGX, plane, cx2),
					A2($terezka$charts$Internal$Coordinates$toSVGY, plane, cy2),
					A2($terezka$charts$Internal$Coordinates$toSVGX, plane, x),
					A2($terezka$charts$Internal$Coordinates$toSVGY, plane, y));
			case 'CubicBeziersShort':
				var cx1 = command.a;
				var cy1 = command.b;
				var x = command.c;
				var y = command.d;
				return A4(
					$terezka$charts$Internal$Commands$CubicBeziersShort,
					A2($terezka$charts$Internal$Coordinates$toSVGX, plane, cx1),
					A2($terezka$charts$Internal$Coordinates$toSVGY, plane, cy1),
					A2($terezka$charts$Internal$Coordinates$toSVGX, plane, x),
					A2($terezka$charts$Internal$Coordinates$toSVGY, plane, y));
			case 'QuadraticBeziers':
				var cx1 = command.a;
				var cy1 = command.b;
				var x = command.c;
				var y = command.d;
				return A4(
					$terezka$charts$Internal$Commands$QuadraticBeziers,
					A2($terezka$charts$Internal$Coordinates$toSVGX, plane, cx1),
					A2($terezka$charts$Internal$Coordinates$toSVGY, plane, cy1),
					A2($terezka$charts$Internal$Coordinates$toSVGX, plane, x),
					A2($terezka$charts$Internal$Coordinates$toSVGY, plane, y));
			case 'QuadraticBeziersShort':
				var x = command.a;
				var y = command.b;
				return A2(
					$terezka$charts$Internal$Commands$QuadraticBeziersShort,
					A2($terezka$charts$Internal$Coordinates$toSVGX, plane, x),
					A2($terezka$charts$Internal$Coordinates$toSVGY, plane, y));
			case 'Arc':
				var rx = command.a;
				var ry = command.b;
				var xAxisRotation = command.c;
				var largeArcFlag = command.d;
				var sweepFlag = command.e;
				var x = command.f;
				var y = command.g;
				return A7(
					$terezka$charts$Internal$Commands$Arc,
					rx,
					ry,
					xAxisRotation,
					largeArcFlag,
					sweepFlag,
					A2($terezka$charts$Internal$Coordinates$toSVGX, plane, x),
					A2($terezka$charts$Internal$Coordinates$toSVGY, plane, y));
			default:
				return $terezka$charts$Internal$Commands$Close;
		}
	});
var $terezka$charts$Internal$Commands$description = F2(
	function (plane, commands) {
		return $terezka$charts$Internal$Commands$joinCommands(
			A2(
				$elm$core$List$map,
				A2(
					$elm$core$Basics$composeR,
					$terezka$charts$Internal$Commands$translate(plane),
					$terezka$charts$Internal$Commands$stringCommand),
				commands));
	});
var $elm$svg$Svg$Attributes$fillOpacity = _VirtualDom_attribute('fill-opacity');
var $terezka$charts$Internal$Coordinates$scaleCartesianX = F2(
	function (plane, value) {
		return (value * $terezka$charts$Internal$Coordinates$range(plane.x)) / $terezka$charts$Internal$Coordinates$innerWidth(plane);
	});
var $terezka$charts$Internal$Coordinates$scaleCartesianY = F2(
	function (plane, value) {
		return (value * $terezka$charts$Internal$Coordinates$range(plane.y)) / $terezka$charts$Internal$Coordinates$innerHeight(plane);
	});
var $elm$svg$Svg$Attributes$strokeOpacity = _VirtualDom_attribute('stroke-opacity');
var $elm$svg$Svg$Attributes$style = _VirtualDom_attribute('style');
var $terezka$charts$Internal$Svg$apply = F2(
	function (funcs, _default) {
		var apply_ = F2(
			function (f, a) {
				return f(a);
			});
		return A3($elm$core$List$foldl, apply_, _default, funcs);
	});
var $elm$svg$Svg$defs = $elm$svg$Svg$trustedNode('defs');
var $elm$svg$Svg$Attributes$id = _VirtualDom_attribute('id');
var $elm$svg$Svg$linearGradient = $elm$svg$Svg$trustedNode('linearGradient');
var $elm$svg$Svg$Attributes$offset = _VirtualDom_attribute('offset');
var $elm$svg$Svg$pattern = $elm$svg$Svg$trustedNode('pattern');
var $elm$svg$Svg$Attributes$patternTransform = _VirtualDom_attribute('patternTransform');
var $elm$svg$Svg$Attributes$patternUnits = _VirtualDom_attribute('patternUnits');
var $elm$svg$Svg$stop = $elm$svg$Svg$trustedNode('stop');
var $elm$svg$Svg$Attributes$stopColor = _VirtualDom_attribute('stop-color');
var $terezka$charts$Internal$Svg$toPattern = F2(
	function (defaultColor, design) {
		var toPatternId = function (props) {
			return A3(
				$elm$core$String$replace,
				'(',
				'-',
				A3(
					$elm$core$String$replace,
					')',
					'-',
					A3(
						$elm$core$String$replace,
						'.',
						'-',
						A3(
							$elm$core$String$replace,
							',',
							'-',
							A3(
								$elm$core$String$replace,
								' ',
								'-',
								A2(
									$elm$core$String$join,
									'-',
									_Utils_ap(
										_List_fromArray(
											[
												'elm-charts__pattern',
												function () {
												switch (design.$) {
													case 'Striped':
														return 'striped';
													case 'Dotted':
														return 'dotted';
													default:
														return 'gradient';
												}
											}()
											]),
										props)))))));
		};
		var toPatternDefs = F4(
			function (id, spacing, rotate, inside) {
				return A2(
					$elm$svg$Svg$defs,
					_List_Nil,
					_List_fromArray(
						[
							A2(
							$elm$svg$Svg$pattern,
							_List_fromArray(
								[
									$elm$svg$Svg$Attributes$id(id),
									$elm$svg$Svg$Attributes$patternUnits('userSpaceOnUse'),
									$elm$svg$Svg$Attributes$width(
									$elm$core$String$fromFloat(spacing)),
									$elm$svg$Svg$Attributes$height(
									$elm$core$String$fromFloat(spacing)),
									$elm$svg$Svg$Attributes$patternTransform(
									'rotate(' + ($elm$core$String$fromFloat(rotate) + ')'))
								]),
							_List_fromArray(
								[inside]))
						]));
			});
		var _v0 = function () {
			switch (design.$) {
				case 'Striped':
					var edits = design.a;
					var config = A2(
						$terezka$charts$Internal$Svg$apply,
						edits,
						{color: defaultColor, rotate: 45, spacing: 4, width: 3});
					var theId = toPatternId(
						_List_fromArray(
							[
								config.color,
								$elm$core$String$fromFloat(config.width),
								$elm$core$String$fromFloat(config.spacing),
								$elm$core$String$fromFloat(config.rotate)
							]));
					return _Utils_Tuple2(
						A4(
							toPatternDefs,
							theId,
							config.spacing,
							config.rotate,
							A2(
								$elm$svg$Svg$line,
								_List_fromArray(
									[
										$elm$svg$Svg$Attributes$x1('0'),
										$elm$svg$Svg$Attributes$y('0'),
										$elm$svg$Svg$Attributes$x2('0'),
										$elm$svg$Svg$Attributes$y2(
										$elm$core$String$fromFloat(config.spacing)),
										$elm$svg$Svg$Attributes$stroke(config.color),
										$elm$svg$Svg$Attributes$strokeWidth(
										$elm$core$String$fromFloat(config.width))
									]),
								_List_Nil)),
						theId);
				case 'Dotted':
					var edits = design.a;
					var config = A2(
						$terezka$charts$Internal$Svg$apply,
						edits,
						{color: defaultColor, rotate: 45, spacing: 4, width: 3});
					var theId = toPatternId(
						_List_fromArray(
							[
								config.color,
								$elm$core$String$fromFloat(config.width),
								$elm$core$String$fromFloat(config.spacing),
								$elm$core$String$fromFloat(config.rotate)
							]));
					return _Utils_Tuple2(
						A4(
							toPatternDefs,
							theId,
							config.spacing,
							config.rotate,
							A2(
								$elm$svg$Svg$circle,
								_List_fromArray(
									[
										$elm$svg$Svg$Attributes$fill(config.color),
										$elm$svg$Svg$Attributes$cx(
										$elm$core$String$fromFloat(config.width / 3)),
										$elm$svg$Svg$Attributes$cy(
										$elm$core$String$fromFloat(config.width / 3)),
										$elm$svg$Svg$Attributes$r(
										$elm$core$String$fromFloat(config.width / 3))
									]),
								_List_Nil)),
						theId);
				default:
					var edits = design.a;
					var colors = _Utils_eq(edits, _List_Nil) ? _List_fromArray(
						[defaultColor, 'white']) : edits;
					var theId = toPatternId(colors);
					var totalColors = $elm$core$List$length(colors);
					var toPercentage = function (i) {
						return (i * 100) / (totalColors - 1);
					};
					var toStop = F2(
						function (i, c) {
							return A2(
								$elm$svg$Svg$stop,
								_List_fromArray(
									[
										$elm$svg$Svg$Attributes$offset(
										$elm$core$String$fromFloat(
											toPercentage(i)) + '%'),
										$elm$svg$Svg$Attributes$stopColor(c)
									]),
								_List_Nil);
						});
					return _Utils_Tuple2(
						A2(
							$elm$svg$Svg$defs,
							_List_Nil,
							_List_fromArray(
								[
									A2(
									$elm$svg$Svg$linearGradient,
									_List_fromArray(
										[
											$elm$svg$Svg$Attributes$id(theId),
											$elm$svg$Svg$Attributes$x1('0'),
											$elm$svg$Svg$Attributes$x2('0'),
											$elm$svg$Svg$Attributes$y1('0'),
											$elm$svg$Svg$Attributes$y2('1')
										]),
									A2($elm$core$List$indexedMap, toStop, colors))
								])),
						theId);
			}
		}();
		var patternDefs = _v0.a;
		var patternId = _v0.b;
		return _Utils_Tuple2(patternDefs, 'url(#' + (patternId + ')'));
	});
var $elm$html$Html$Attributes$map = $elm$virtual_dom$VirtualDom$mapAttribute;
var $terezka$charts$Internal$Svg$withAttrs = F3(
	function (attrs, toEl, defaultAttrs) {
		return toEl(
			_Utils_ap(
				defaultAttrs,
				A2(
					$elm$core$List$map,
					$elm$html$Html$Attributes$map($elm$core$Basics$never),
					attrs)));
	});
var $terezka$charts$Internal$Svg$bar = F3(
	function (plane, config, point) {
		var viewBar = F7(
			function (fill, fillOpacity, border, borderWidth, strokeOpacity, cmds, limits) {
				return A4(
					$terezka$charts$Internal$Svg$withAttrs,
					config.attrs,
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$class('elm-charts__bar'),
							$elm$svg$Svg$Attributes$fill(fill),
							$elm$svg$Svg$Attributes$fillOpacity(
							$elm$core$String$fromFloat(fillOpacity)),
							$elm$svg$Svg$Attributes$stroke(border),
							$elm$svg$Svg$Attributes$strokeWidth(
							$elm$core$String$fromFloat(borderWidth)),
							$elm$svg$Svg$Attributes$strokeOpacity(
							$elm$core$String$fromFloat(strokeOpacity)),
							$elm$svg$Svg$Attributes$d(
							A2($terezka$charts$Internal$Commands$description, plane, cmds)),
							$elm$svg$Svg$Attributes$style(
							A2($terezka$charts$Internal$Svg$clipperStyle, plane, limits))
						]),
					_List_Nil);
			});
		var highlightColor = (config.highlightColor === '') ? config.color : config.highlightColor;
		var borderWidthCarY = A2($terezka$charts$Internal$Coordinates$scaleCartesianY, plane, config.borderWidth / 2);
		var highlightWidthCarY = borderWidthCarY + A2($terezka$charts$Internal$Coordinates$scaleCartesianY, plane, config.highlightWidth / 2);
		var borderWidthCarX = A2($terezka$charts$Internal$Coordinates$scaleCartesianX, plane, config.borderWidth / 2);
		var highlightWidthCarX = borderWidthCarX + A2($terezka$charts$Internal$Coordinates$scaleCartesianX, plane, config.highlightWidth / 2);
		var pos = {
			x1: A2($elm$core$Basics$min, point.x1, point.x2) + borderWidthCarX,
			x2: A2($elm$core$Basics$max, point.x1, point.x2) - borderWidthCarX,
			y1: A2($elm$core$Basics$min, point.y1, point.y2) + borderWidthCarY,
			y2: A2($elm$core$Basics$max, point.y1, point.y2) - borderWidthCarY
		};
		var highlightPos = {x1: pos.x1 - highlightWidthCarX, x2: pos.x2 + highlightWidthCarX, y1: pos.y1 - highlightWidthCarY, y2: pos.y2 + highlightWidthCarY};
		var w = $elm$core$Basics$abs(pos.x2 - pos.x1);
		var roundingBottom = (A2($terezka$charts$Internal$Coordinates$scaleSVGX, plane, w) * 0.5) * A3($elm$core$Basics$clamp, 0, 1, config.roundBottom);
		var radiusBottomX = A2($terezka$charts$Internal$Coordinates$scaleCartesianX, plane, roundingBottom);
		var radiusBottomY = A2($terezka$charts$Internal$Coordinates$scaleCartesianY, plane, roundingBottom);
		var roundingTop = (A2($terezka$charts$Internal$Coordinates$scaleSVGX, plane, w) * 0.5) * A3($elm$core$Basics$clamp, 0, 1, config.roundTop);
		var radiusTopX = A2($terezka$charts$Internal$Coordinates$scaleCartesianX, plane, roundingTop);
		var radiusTopY = A2($terezka$charts$Internal$Coordinates$scaleCartesianY, plane, roundingTop);
		var _v0 = function () {
			if (_Utils_eq(pos.y1, pos.y2)) {
				return _Utils_Tuple3(_List_Nil, _List_Nil, highlightPos);
			} else {
				var _v1 = _Utils_Tuple2(config.roundTop > 0, config.roundBottom > 0);
				if (!_v1.a) {
					if (!_v1.b) {
						return _Utils_Tuple3(
							_List_fromArray(
								[
									A2($terezka$charts$Internal$Commands$Move, pos.x1, pos.y1),
									A2($terezka$charts$Internal$Commands$Line, pos.x1, pos.y2),
									A2($terezka$charts$Internal$Commands$Line, pos.x2, pos.y2),
									A2($terezka$charts$Internal$Commands$Line, pos.x2, pos.y1),
									A2($terezka$charts$Internal$Commands$Line, pos.x1, pos.y1)
								]),
							_List_fromArray(
								[
									A2($terezka$charts$Internal$Commands$Move, highlightPos.x1, pos.y1),
									A2($terezka$charts$Internal$Commands$Line, highlightPos.x1, highlightPos.y2),
									A2($terezka$charts$Internal$Commands$Line, highlightPos.x2, highlightPos.y2),
									A2($terezka$charts$Internal$Commands$Line, highlightPos.x2, pos.y1),
									A2($terezka$charts$Internal$Commands$Line, pos.x2, pos.y1),
									A2($terezka$charts$Internal$Commands$Line, pos.x2, pos.y2),
									A2($terezka$charts$Internal$Commands$Line, pos.x1, pos.y2),
									A2($terezka$charts$Internal$Commands$Line, pos.x1, pos.y1)
								]),
							{x1: pos.x1 - highlightWidthCarX, x2: pos.x2 + highlightWidthCarX, y1: pos.y1, y2: pos.y2 + highlightWidthCarY});
					} else {
						return _Utils_Tuple3(
							_List_fromArray(
								[
									A2($terezka$charts$Internal$Commands$Move, pos.x1 + radiusBottomX, pos.y1),
									A7($terezka$charts$Internal$Commands$Arc, roundingBottom, roundingBottom, -45, false, true, pos.x1, pos.y1 + radiusBottomY),
									A2($terezka$charts$Internal$Commands$Line, pos.x1, pos.y2),
									A2($terezka$charts$Internal$Commands$Line, pos.x2, pos.y2),
									A2($terezka$charts$Internal$Commands$Line, pos.x2, pos.y1 + radiusBottomY),
									A7($terezka$charts$Internal$Commands$Arc, roundingBottom, roundingBottom, -45, false, true, pos.x2 - radiusBottomX, pos.y1),
									A2($terezka$charts$Internal$Commands$Line, pos.x1 + radiusBottomX, pos.y1)
								]),
							_List_fromArray(
								[
									A2($terezka$charts$Internal$Commands$Move, highlightPos.x1 + radiusBottomX, highlightPos.y1),
									A7($terezka$charts$Internal$Commands$Arc, roundingBottom, roundingBottom, -45, false, true, highlightPos.x1, highlightPos.y1 + radiusBottomY),
									A2($terezka$charts$Internal$Commands$Line, highlightPos.x1, highlightPos.y2),
									A2($terezka$charts$Internal$Commands$Line, highlightPos.x2, highlightPos.y2),
									A2($terezka$charts$Internal$Commands$Line, highlightPos.x2, highlightPos.y1 + radiusBottomY),
									A7($terezka$charts$Internal$Commands$Arc, roundingBottom, roundingBottom, -45, false, true, highlightPos.x2 - radiusBottomX, highlightPos.y1),
									A2($terezka$charts$Internal$Commands$Line, highlightPos.x1 + radiusBottomX, highlightPos.y1),
									A2($terezka$charts$Internal$Commands$Line, pos.x2 - radiusBottomX, pos.y1),
									A7($terezka$charts$Internal$Commands$Arc, roundingBottom, roundingBottom, -45, false, false, pos.x2, pos.y1 + radiusBottomY),
									A2($terezka$charts$Internal$Commands$Line, pos.x2, pos.y2),
									A2($terezka$charts$Internal$Commands$Line, pos.x1, pos.y2),
									A2($terezka$charts$Internal$Commands$Line, pos.x1, pos.y1 + radiusBottomY),
									A2($terezka$charts$Internal$Commands$Line, pos.x2, pos.y1)
								]),
							{x1: pos.x1 - highlightWidthCarX, x2: pos.x2 + highlightWidthCarX, y1: pos.y1 - highlightWidthCarY, y2: pos.y2 + highlightWidthCarY});
					}
				} else {
					if (!_v1.b) {
						return _Utils_Tuple3(
							_List_fromArray(
								[
									A2($terezka$charts$Internal$Commands$Move, pos.x1, pos.y1),
									A2($terezka$charts$Internal$Commands$Line, pos.x1, pos.y2 - radiusTopY),
									A7($terezka$charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, true, pos.x1 + radiusTopX, pos.y2),
									A2($terezka$charts$Internal$Commands$Line, pos.x2 - radiusTopX, pos.y2),
									A7($terezka$charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, true, pos.x2, pos.y2 - radiusTopY),
									A2($terezka$charts$Internal$Commands$Line, pos.x2, pos.y1),
									A2($terezka$charts$Internal$Commands$Line, pos.x1, pos.y1)
								]),
							_List_fromArray(
								[
									A2($terezka$charts$Internal$Commands$Move, highlightPos.x1, pos.y1),
									A2($terezka$charts$Internal$Commands$Line, highlightPos.x1, highlightPos.y2 - radiusTopY),
									A7($terezka$charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, true, highlightPos.x1 + radiusTopX, highlightPos.y2),
									A2($terezka$charts$Internal$Commands$Line, highlightPos.x2 - radiusTopX, highlightPos.y2),
									A7($terezka$charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, true, highlightPos.x2, highlightPos.y2 - radiusTopY),
									A2($terezka$charts$Internal$Commands$Line, highlightPos.x2, pos.y1),
									A2($terezka$charts$Internal$Commands$Line, pos.x2, pos.y1),
									A2($terezka$charts$Internal$Commands$Line, pos.x2, pos.y2 - radiusTopY),
									A7($terezka$charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, false, pos.x2 - radiusTopX, pos.y2),
									A2($terezka$charts$Internal$Commands$Line, pos.x1 + radiusTopX, pos.y2),
									A7($terezka$charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, false, pos.x1, pos.y2 - radiusTopY),
									A2($terezka$charts$Internal$Commands$Line, pos.x1, pos.y1)
								]),
							{x1: pos.x1 - highlightWidthCarX, x2: pos.x2 + highlightWidthCarX, y1: pos.y1, y2: pos.y2 + highlightWidthCarY});
					} else {
						return _Utils_Tuple3(
							_List_fromArray(
								[
									A2($terezka$charts$Internal$Commands$Move, pos.x1 + radiusBottomX, pos.y1),
									A7($terezka$charts$Internal$Commands$Arc, roundingBottom, roundingBottom, -45, false, true, pos.x1, pos.y1 + radiusBottomY),
									A2($terezka$charts$Internal$Commands$Line, pos.x1, pos.y2 - radiusTopY),
									A7($terezka$charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, true, pos.x1 + radiusTopX, pos.y2),
									A2($terezka$charts$Internal$Commands$Line, pos.x2 - radiusTopX, pos.y2),
									A7($terezka$charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, true, pos.x2, pos.y2 - radiusTopY),
									A2($terezka$charts$Internal$Commands$Line, pos.x2, pos.y1 + radiusBottomY),
									A7($terezka$charts$Internal$Commands$Arc, roundingBottom, roundingBottom, -45, false, true, pos.x2 - radiusBottomX, pos.y1),
									A2($terezka$charts$Internal$Commands$Line, pos.x1 + radiusBottomX, pos.y1)
								]),
							_List_fromArray(
								[
									A2($terezka$charts$Internal$Commands$Move, highlightPos.x1 + radiusBottomX, highlightPos.y1),
									A7($terezka$charts$Internal$Commands$Arc, roundingBottom, roundingBottom, -45, false, true, highlightPos.x1, highlightPos.y1 + radiusBottomY),
									A2($terezka$charts$Internal$Commands$Line, highlightPos.x1, highlightPos.y2 - radiusTopY),
									A7($terezka$charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, true, highlightPos.x1 + radiusTopX, highlightPos.y2),
									A2($terezka$charts$Internal$Commands$Line, highlightPos.x2 - radiusTopX, highlightPos.y2),
									A7($terezka$charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, true, highlightPos.x2, highlightPos.y2 - radiusTopY),
									A2($terezka$charts$Internal$Commands$Line, highlightPos.x2, highlightPos.y1 + radiusBottomY),
									A7($terezka$charts$Internal$Commands$Arc, roundingBottom, roundingBottom, -45, false, true, highlightPos.x2 - radiusBottomX, highlightPos.y1),
									A2($terezka$charts$Internal$Commands$Line, highlightPos.x1 + radiusBottomX, highlightPos.y1),
									A2($terezka$charts$Internal$Commands$Line, pos.x2 - radiusBottomX, pos.y1),
									A7($terezka$charts$Internal$Commands$Arc, roundingBottom, roundingBottom, -45, false, false, pos.x2, pos.y1 + radiusBottomY),
									A2($terezka$charts$Internal$Commands$Line, pos.x2, pos.y2 - radiusTopY),
									A7($terezka$charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, false, pos.x2 - radiusTopX, pos.y2),
									A2($terezka$charts$Internal$Commands$Line, pos.x1 + radiusTopX, pos.y2),
									A7($terezka$charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, false, pos.x1, pos.y2 - radiusTopY),
									A2($terezka$charts$Internal$Commands$Line, pos.x1, pos.y1 + radiusBottomY),
									A2($terezka$charts$Internal$Commands$Line, pos.x2, pos.y1)
								]),
							{x1: pos.x1 - highlightWidthCarX, x2: pos.x2 + highlightWidthCarX, y1: pos.y1 - highlightWidthCarY, y2: pos.y2 + highlightWidthCarY});
					}
				}
			}
		}();
		var commands = _v0.a;
		var highlightCommands = _v0.b;
		var highlightCut = _v0.c;
		var viewAuraBar = function (fill) {
			return (!config.highlight) ? A7(viewBar, fill, config.opacity, config.border, config.borderWidth, 1, commands, pos) : A2(
				$elm$svg$Svg$g,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$class('elm-charts__bar-with-highlight')
					]),
				_List_fromArray(
					[
						A7(viewBar, highlightColor, config.highlight, 'transparent', 0, 0, highlightCommands, highlightCut),
						A7(viewBar, fill, config.opacity, config.border, config.borderWidth, 1, commands, pos)
					]));
		};
		var _v2 = config.design;
		if (_v2.$ === 'Nothing') {
			return viewAuraBar(config.color);
		} else {
			var design = _v2.a;
			var _v3 = A2($terezka$charts$Internal$Svg$toPattern, config.color, design);
			var patternDefs = _v3.a;
			var fill = _v3.b;
			return A2(
				$elm$svg$Svg$g,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$class('elm-charts__bar-with-pattern')
					]),
				_List_fromArray(
					[
						patternDefs,
						viewAuraBar(fill)
					]));
		}
	});
var $terezka$charts$Internal$Item$isBar = function (_v0) {
	var item = _v0.a;
	var _v1 = item.config.product;
	if (_v1.$ === 'Bar') {
		var bar = _v1.a;
		return $elm$core$Maybe$Just(
			$terezka$charts$Internal$Item$Rendered(
				{
					config: {product: bar, toAny: $terezka$charts$Internal$Item$Bar, tooltipInfo: item.config.tooltipInfo, values: item.config.values},
					toHtml: function (c) {
						return item.toHtml(item.config);
					},
					toLimits: function (_v2) {
						return item.toLimits(item.config);
					},
					toPosition: F2(
						function (plane, _v3) {
							return A2(item.toPosition, plane, item.config);
						}),
					toSvg: F2(
						function (plane, config) {
							return A2($terezka$charts$Internal$Svg$bar, plane, config.product);
						})
				}));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $terezka$charts$Internal$Many$bars = A2(
	$terezka$charts$Internal$Many$Remodel,
	$terezka$charts$Internal$Item$getPosition,
	$elm$core$List$filterMap($terezka$charts$Internal$Item$isBar));
var $terezka$charts$Chart$Item$bars = $terezka$charts$Internal$Many$bars;
var $terezka$charts$Internal$Item$isReal = function (_v0) {
	var item = _v0.a;
	return item.config.values.isReal;
};
var $terezka$charts$Internal$Many$real = A2(
	$terezka$charts$Internal$Many$Remodel,
	$terezka$charts$Internal$Item$getPosition,
	$elm$core$List$filter($terezka$charts$Internal$Item$isReal));
var $terezka$charts$Chart$Item$real = $terezka$charts$Internal$Many$real;
var $terezka$charts$Chart$eachBar = function (func) {
	return $terezka$charts$Chart$SubElements(
		F2(
			function (p, is) {
				return A2(
					$elm$core$List$concatMap,
					func(p),
					A2(
						$terezka$charts$Chart$Item$apply,
						A2($terezka$charts$Chart$Item$andThen, $terezka$charts$Chart$Item$real, $terezka$charts$Chart$Item$bars),
						is));
			}));
};
var $terezka$charts$Internal$Coordinates$top = function (pos) {
	return {x: pos.x1 + ((pos.x2 - pos.x1) / 2), y: pos.y2};
};
var $terezka$charts$Chart$Item$getTop = function (p) {
	return A2(
		$elm$core$Basics$composeR,
		$terezka$charts$Internal$Item$getPosition(p),
		$terezka$charts$Internal$Coordinates$top);
};
var $terezka$charts$Internal$Item$getY = function (_v0) {
	var item = _v0.a;
	return item.config.values.y;
};
var $terezka$charts$Chart$Item$getY = $terezka$charts$Internal$Item$getY;
var $elm$svg$Svg$Attributes$transform = _VirtualDom_attribute('transform');
var $terezka$charts$Internal$Svg$position = F6(
	function (plane, rotation, x_, y_, xOff_, yOff_) {
		return $elm$svg$Svg$Attributes$transform(
			'translate(' + ($elm$core$String$fromFloat(
				A2($terezka$charts$Internal$Coordinates$toSVGX, plane, x_) + xOff_) + (',' + ($elm$core$String$fromFloat(
				A2($terezka$charts$Internal$Coordinates$toSVGY, plane, y_) + yOff_) + (') rotate(' + ($elm$core$String$fromFloat(rotation) + ')'))))));
	});
var $elm$svg$Svg$text_ = $elm$svg$Svg$trustedNode('text');
var $elm$svg$Svg$tspan = $elm$svg$Svg$trustedNode('tspan');
var $terezka$charts$Internal$Svg$label = F4(
	function (plane, config, inner, point) {
		var uppercaseStyle = config.uppercase ? 'text-transform: uppercase;' : '';
		var fontStyle = function () {
			var _v4 = config.fontSize;
			if (_v4.$ === 'Just') {
				var size_ = _v4.a;
				return 'font-size: ' + ($elm$core$String$fromInt(size_) + 'px;');
			} else {
				return '';
			}
		}();
		var anchorStyle = function () {
			var _v0 = config.anchor;
			if (_v0.$ === 'Nothing') {
				return 'text-anchor: middle;';
			} else {
				switch (_v0.a.$) {
					case 'End':
						var _v1 = _v0.a;
						return 'text-anchor: end;';
					case 'Start':
						var _v2 = _v0.a;
						return 'text-anchor: start;';
					default:
						var _v3 = _v0.a;
						return 'text-anchor: middle;';
				}
			}
		}();
		return A4(
			$terezka$charts$Internal$Svg$withAttrs,
			config.attrs,
			$elm$svg$Svg$text_,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$class('elm-charts__label'),
					$elm$svg$Svg$Attributes$stroke(config.border),
					$elm$svg$Svg$Attributes$strokeWidth(
					$elm$core$String$fromFloat(config.borderWidth)),
					$elm$svg$Svg$Attributes$fill(config.color),
					A6($terezka$charts$Internal$Svg$position, plane, -config.rotate, point.x, point.y, config.xOff, config.yOff),
					$elm$svg$Svg$Attributes$style(
					A2(
						$elm$core$String$join,
						' ',
						_List_fromArray(
							['pointer-events: none;', fontStyle, anchorStyle, uppercaseStyle])))
				]),
			_List_fromArray(
				[
					A2($elm$svg$Svg$tspan, _List_Nil, inner)
				]));
	});
var $terezka$charts$Chart$SvgElement = function (a) {
	return {$: 'SvgElement', a: a};
};
var $terezka$charts$Chart$svg = function (func) {
	return $terezka$charts$Chart$SvgElement(
		function (p) {
			return func(p);
		});
};
var $elm$svg$Svg$text = $elm$virtual_dom$VirtualDom$text;
var $terezka$charts$Chart$toLabelFromItemLabel = function (config) {
	return {anchor: config.anchor, attrs: config.attrs, border: config.border, borderWidth: config.borderWidth, color: config.color, fontSize: config.fontSize, rotate: config.rotate, uppercase: config.uppercase, xOff: config.xOff, yOff: config.yOff};
};
var $terezka$charts$Chart$barLabels = function (edits) {
	return $terezka$charts$Chart$eachBar(
		F2(
			function (p, item) {
				var config = A2(
					$terezka$charts$Internal$Helpers$apply,
					edits,
					_Utils_update(
						$terezka$charts$Chart$defaultLabel,
						{position: $terezka$charts$Chart$Item$getTop}));
				var text = function () {
					var _v1 = config.format;
					if (_v1.$ === 'Just') {
						var formatting = _v1.a;
						return formatting(item);
					} else {
						return $elm$core$String$fromFloat(
							$terezka$charts$Chart$Item$getY(item));
					}
				}();
				return _List_fromArray(
					[
						$terezka$charts$Chart$svg(
						function (_v0) {
							return A4(
								$terezka$charts$Internal$Svg$label,
								p,
								$terezka$charts$Chart$toLabelFromItemLabel(config),
								_List_fromArray(
									[
										$elm$svg$Svg$text(text)
									]),
								A2(config.position, p, item));
						})
					]);
			}));
};
var $terezka$charts$Chart$BarsElement = F5(
	function (a, b, c, d, e) {
		return {$: 'BarsElement', a: a, b: b, c: c, d: d, e: e};
	});
var $terezka$charts$Chart$Indexed = function (a) {
	return {$: 'Indexed', a: a};
};
var $terezka$charts$Internal$Many$editLimits = F2(
	function (edit, _v0) {
		var group_ = _v0.a;
		return $terezka$charts$Internal$Item$Rendered(
			_Utils_update(
				group_,
				{
					toLimits: function (c) {
						return function (_v1) {
							var x = _v1.a;
							var xs = _v1.b;
							return A2(
								edit,
								x,
								group_.toLimits(c));
						}(c.items);
					}
				}));
	});
var $terezka$charts$Internal$Item$getX1 = function (_v0) {
	var item = _v0.a;
	return item.config.values.x1;
};
var $terezka$charts$Internal$Item$getX2 = function (_v0) {
	var item = _v0.a;
	return item.config.values.x2;
};
var $elm$core$List$partition = F2(
	function (pred, list) {
		var step = F2(
			function (x, _v0) {
				var trues = _v0.a;
				var falses = _v0.b;
				return pred(x) ? _Utils_Tuple2(
					A2($elm$core$List$cons, x, trues),
					falses) : _Utils_Tuple2(
					trues,
					A2($elm$core$List$cons, x, falses));
			});
		return A3(
			$elm$core$List$foldr,
			step,
			_Utils_Tuple2(_List_Nil, _List_Nil),
			list);
	});
var $terezka$charts$Internal$Helpers$gatherWith = F2(
	function (testFn, list) {
		var helper = F2(
			function (scattered, gathered) {
				if (!scattered.b) {
					return $elm$core$List$reverse(gathered);
				} else {
					var toGather = scattered.a;
					var population = scattered.b;
					var _v1 = A2(
						$elm$core$List$partition,
						testFn(toGather),
						population);
					var gathering = _v1.a;
					var remaining = _v1.b;
					return A2(
						helper,
						remaining,
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2(toGather, gathering),
							gathered));
				}
			});
		return A2(helper, list, _List_Nil);
	});
var $terezka$charts$Internal$Coordinates$Position = F4(
	function (x1, x2, y1, y2) {
		return {x1: x1, x2: x2, y1: y1, y2: y2};
	});
var $terezka$charts$Internal$Coordinates$foldPosition = F2(
	function (func, data) {
		var fold = F2(
			function (datum, posM) {
				if (posM.$ === 'Just') {
					var pos = posM.a;
					return $elm$core$Maybe$Just(
						{
							x1: A2(
								$elm$core$Basics$min,
								func(datum).x1,
								pos.x1),
							x2: A2(
								$elm$core$Basics$max,
								func(datum).x2,
								pos.x2),
							y1: A2(
								$elm$core$Basics$min,
								func(datum).y1,
								pos.y1),
							y2: A2(
								$elm$core$Basics$max,
								func(datum).y2,
								pos.y2)
						});
				} else {
					return $elm$core$Maybe$Just(
						func(datum));
				}
			});
		return A2(
			$elm$core$Maybe$withDefault,
			A4($terezka$charts$Internal$Coordinates$Position, 0, 0, 0, 0),
			A3($elm$core$List$foldl, fold, $elm$core$Maybe$Nothing, data));
	});
var $terezka$charts$Internal$Item$getLimits = function (_v0) {
	var item = _v0.a;
	return item.toLimits(item.config);
};
var $elm$html$Html$table = _VirtualDom_node('table');
var $terezka$charts$Internal$Item$toHtml = function (_v0) {
	var item = _v0.a;
	return item.toHtml(item.config);
};
var $terezka$charts$Internal$Item$toSvg = F2(
	function (plane, _v0) {
		var item = _v0.a;
		return A3(
			item.toSvg,
			plane,
			item.config,
			A2(item.toPosition, plane, item.config));
	});
var $terezka$charts$Internal$Many$toGroup = F2(
	function (first, rest) {
		var concatTuple = function (_v1) {
			var x = _v1.a;
			var xs = _v1.b;
			return A2($elm$core$List$cons, x, xs);
		};
		return $terezka$charts$Internal$Item$Rendered(
			{
				config: {
					items: _Utils_Tuple2(first, rest)
				},
				toHtml: function (c) {
					return _List_fromArray(
						[
							A2(
							$elm$html$Html$table,
							_List_Nil,
							A2(
								$elm$core$List$concatMap,
								$terezka$charts$Internal$Item$toHtml,
								concatTuple(c.items)))
						]);
				},
				toLimits: function (c) {
					return A2(
						$terezka$charts$Internal$Coordinates$foldPosition,
						$terezka$charts$Internal$Item$getLimits,
						concatTuple(c.items));
				},
				toPosition: F2(
					function (p, c) {
						return A2(
							$terezka$charts$Internal$Coordinates$foldPosition,
							$terezka$charts$Internal$Item$getPosition(p),
							concatTuple(c.items));
					}),
				toSvg: F3(
					function (p, c, _v0) {
						return A2(
							$elm$svg$Svg$g,
							_List_fromArray(
								[
									$elm$svg$Svg$Attributes$class('elm-charts__group')
								]),
							A2(
								$elm$core$List$map,
								$terezka$charts$Internal$Item$toSvg(p),
								concatTuple(c.items)));
					})
			});
	});
var $terezka$charts$Internal$Many$groupingHelp = F2(
	function (_v0, items) {
		var shared = _v0.shared;
		var equality = _v0.equality;
		var edits = _v0.edits;
		var toShared = function (_v2) {
			var item = _v2.a;
			return shared(item.config);
		};
		var toNewGroup = function (_v1) {
			var i = _v1.a;
			var is = _v1.b;
			return edits(
				A2($terezka$charts$Internal$Many$toGroup, i, is));
		};
		var toEquality = F2(
			function (aO, bO) {
				return A2(
					equality,
					toShared(aO),
					toShared(bO));
			});
		return A2(
			$elm$core$List$map,
			toNewGroup,
			A2($terezka$charts$Internal$Helpers$gatherWith, toEquality, items));
	});
var $terezka$charts$Internal$Many$bins = A2(
	$terezka$charts$Internal$Many$Remodel,
	$terezka$charts$Internal$Item$getPosition,
	$terezka$charts$Internal$Many$groupingHelp(
		{
			edits: $terezka$charts$Internal$Many$editLimits(
				F2(
					function (item, pos) {
						return _Utils_update(
							pos,
							{
								x1: $terezka$charts$Internal$Item$getX1(item),
								x2: $terezka$charts$Internal$Item$getX2(item)
							});
					})),
			equality: F2(
				function (a, b) {
					return _Utils_eq(a.x1, b.x1) && (_Utils_eq(a.x2, b.x2) && (_Utils_eq(a.elIndex, b.elIndex) && _Utils_eq(a.dataIndex, b.dataIndex)));
				}),
			shared: function (config) {
				return {dataIndex: config.tooltipInfo.data, elIndex: config.tooltipInfo.elIndex, x1: config.values.x1, x2: config.values.x2};
			}
		}));
var $terezka$charts$Chart$Item$bins = $terezka$charts$Internal$Many$bins;
var $terezka$charts$Internal$Produce$defaultBars = {grid: false, grouped: true, margin: 0.1, roundBottom: 0, roundTop: 0, spacing: 0.05, x1: $elm$core$Maybe$Nothing, x2: $elm$core$Maybe$Nothing};
var $terezka$charts$Internal$Item$generalize = F2(
	function (toAny, _v0) {
		var item = _v0.a;
		return $terezka$charts$Internal$Item$Rendered(
			{
				config: {
					product: toAny(item.config.product),
					toAny: $elm$core$Basics$identity,
					tooltipInfo: item.config.tooltipInfo,
					values: item.config.values
				},
				toHtml: function (c) {
					return $terezka$charts$Internal$Item$toHtml(
						$terezka$charts$Internal$Item$Rendered(item));
				},
				toLimits: function (_v1) {
					return item.toLimits(item.config);
				},
				toPosition: F2(
					function (plane, _v2) {
						return A2(item.toPosition, plane, item.config);
					}),
				toSvg: F3(
					function (plane, _v3, _v4) {
						return A2(
							$terezka$charts$Internal$Item$toSvg,
							plane,
							$terezka$charts$Internal$Item$Rendered(item));
					})
			});
	});
var $terezka$charts$Internal$Many$getMembers = function (_v0) {
	var group_ = _v0.a;
	return function (_v1) {
		var x = _v1.a;
		var xs = _v1.b;
		return A2($elm$core$List$cons, x, xs);
	}(group_.config.items);
};
var $terezka$charts$Internal$Many$getGenerals = function (group_) {
	var generalize = function (_v0) {
		var item = _v0.a;
		return A2(
			$terezka$charts$Internal$Item$generalize,
			item.config.toAny,
			$terezka$charts$Internal$Item$Rendered(item));
	};
	return A2(
		$elm$core$List$map,
		generalize,
		$terezka$charts$Internal$Many$getMembers(group_));
};
var $terezka$charts$Chart$Item$getLimits = $terezka$charts$Internal$Item$getLimits;
var $terezka$charts$Internal$Item$map = F2(
	function (func, _v0) {
		var item = _v0.a;
		return $terezka$charts$Internal$Item$Rendered(
			{
				config: {
					product: item.config.product,
					toAny: item.config.toAny,
					tooltipInfo: item.config.tooltipInfo,
					values: {
						datum: func(item.config.values.datum),
						isReal: item.config.values.isReal,
						x1: item.config.values.x1,
						x2: item.config.values.x2,
						y: item.config.values.y
					}
				},
				toHtml: function (_v1) {
					return $terezka$charts$Internal$Item$toHtml(
						$terezka$charts$Internal$Item$Rendered(item));
				},
				toLimits: function (_v2) {
					return item.toLimits(item.config);
				},
				toPosition: F2(
					function (plane, _v3) {
						return A2(item.toPosition, plane, item.config);
					}),
				toSvg: F3(
					function (plane, _v4, _v5) {
						return A2(
							$terezka$charts$Internal$Item$toSvg,
							plane,
							$terezka$charts$Internal$Item$Rendered(item));
					})
			});
	});
var $terezka$charts$Internal$Legend$BarLegend = F2(
	function (a, b) {
		return {$: 'BarLegend', a: a, b: b};
	});
var $terezka$charts$Chart$Attributes$border = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{border: v});
	});
var $terezka$charts$Chart$Attributes$color = F2(
	function (v, config) {
		return (v === '') ? config : _Utils_update(
			config,
			{color: v});
	});
var $terezka$charts$Internal$Helpers$pink = '#ea60df';
var $terezka$charts$Internal$Svg$defaultBar = {attrs: _List_Nil, border: 'white', borderWidth: 0, color: $terezka$charts$Internal$Helpers$pink, design: $elm$core$Maybe$Nothing, highlight: 0, highlightColor: '', highlightWidth: 10, opacity: 1, roundBottom: 0, roundTop: 0};
var $terezka$charts$Chart$Attributes$roundBottom = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{roundBottom: v});
	});
var $terezka$charts$Chart$Attributes$roundTop = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{roundTop: v});
	});
var $terezka$charts$Internal$Property$toConfigs = function (prop) {
	if (prop.$ === 'Property') {
		var config = prop.a;
		return _List_fromArray(
			[config]);
	} else {
		var configs = prop.a;
		return configs;
	}
};
var $terezka$charts$Internal$Helpers$blue = '#12A5ED';
var $terezka$charts$Internal$Helpers$green = '#71c614';
var $terezka$charts$Internal$Helpers$orange = '#FF8400';
var $terezka$charts$Internal$Helpers$purple = '#7b4dff';
var $terezka$charts$Internal$Helpers$red = '#F5325B';
var $terezka$charts$Internal$Helpers$toDefault = F3(
	function (_default, items, index) {
		var dict = $elm$core$Dict$fromList(
			A2($elm$core$List$indexedMap, $elm$core$Tuple$pair, items));
		var numOfItems = $elm$core$Dict$size(dict);
		var itemIndex = index % numOfItems;
		return A2(
			$elm$core$Maybe$withDefault,
			_default,
			A2($elm$core$Dict$get, itemIndex, dict));
	});
var $terezka$charts$Internal$Helpers$yellow = '#FFCA00';
var $terezka$charts$Internal$Helpers$toDefaultColor = A2(
	$terezka$charts$Internal$Helpers$toDefault,
	$terezka$charts$Internal$Helpers$pink,
	_List_fromArray(
		[$terezka$charts$Internal$Helpers$purple, $terezka$charts$Internal$Helpers$pink, $terezka$charts$Internal$Helpers$blue, $terezka$charts$Internal$Helpers$green, $terezka$charts$Internal$Helpers$red, $terezka$charts$Internal$Helpers$yellow, $terezka$charts$Internal$Helpers$orange]));
var $terezka$charts$Internal$Legend$toBarLegends = F3(
	function (elIndex, barsAttrs, properties) {
		var toBarConfig = function (attrs) {
			return A2($terezka$charts$Internal$Helpers$apply, attrs, $terezka$charts$Internal$Svg$defaultBar);
		};
		var barsConfig = A2($terezka$charts$Internal$Helpers$apply, barsAttrs, $terezka$charts$Internal$Produce$defaultBars);
		var toBarLegend = F2(
			function (colorIndex, prop) {
				var rounding = A2($elm$core$Basics$max, barsConfig.roundTop, barsConfig.roundBottom);
				var defaultName = 'Property #' + $elm$core$String$fromInt(colorIndex + 1);
				var defaultColor = $terezka$charts$Internal$Helpers$toDefaultColor(colorIndex);
				var defaultAttrs = _List_fromArray(
					[
						$terezka$charts$Chart$Attributes$roundTop(rounding),
						$terezka$charts$Chart$Attributes$roundBottom(rounding),
						$terezka$charts$Chart$Attributes$color(defaultColor),
						$terezka$charts$Chart$Attributes$border(defaultColor)
					]);
				var attrsOrg = _Utils_ap(defaultAttrs, prop.attrs);
				var productOrg = toBarConfig(attrsOrg);
				var attrs = _Utils_eq(productOrg.border, defaultColor) ? _Utils_ap(
					attrsOrg,
					_List_fromArray(
						[
							$terezka$charts$Chart$Attributes$border(productOrg.color)
						])) : attrsOrg;
				return A2(
					$terezka$charts$Internal$Legend$BarLegend,
					A2($elm$core$Maybe$withDefault, defaultName, prop.meta),
					attrs);
			});
		return A2(
			$elm$core$List$indexedMap,
			function (propIndex) {
				return toBarLegend(elIndex + propIndex);
			},
			A2($elm$core$List$concatMap, $terezka$charts$Internal$Property$toConfigs, properties));
	});
var $terezka$charts$Internal$Produce$toDefaultName = F2(
	function (index, name) {
		return A2(
			$elm$core$Maybe$withDefault,
			'Property #' + $elm$core$String$fromInt(index + 1),
			name);
	});
var $elm$html$Html$td = _VirtualDom_node('td');
var $elm$html$Html$tr = _VirtualDom_node('tr');
var $terezka$charts$Internal$Produce$tooltipRow = F3(
	function (color, title, text) {
		return A2(
			$elm$html$Html$tr,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$elm$html$Html$td,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'color', color),
							A2($elm$html$Html$Attributes$style, 'padding', '0'),
							A2($elm$html$Html$Attributes$style, 'padding-right', '3px')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(title + ':')
						])),
					A2(
					$elm$html$Html$td,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'text-align', 'right'),
							A2($elm$html$Html$Attributes$style, 'padding', '0')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(text)
						]))
				]));
	});
var $terezka$charts$Internal$Helpers$withSurround = F2(
	function (all, func) {
		var fold = F4(
			function (index, prev, acc, list) {
				fold:
				while (true) {
					if (list.b) {
						if (list.b.b) {
							var a = list.a;
							var _v1 = list.b;
							var b = _v1.a;
							var rest = _v1.b;
							var $temp$index = index + 1,
								$temp$prev = $elm$core$Maybe$Just(a),
								$temp$acc = _Utils_ap(
								acc,
								_List_fromArray(
									[
										A4(
										func,
										index,
										prev,
										a,
										$elm$core$Maybe$Just(b))
									])),
								$temp$list = A2($elm$core$List$cons, b, rest);
							index = $temp$index;
							prev = $temp$prev;
							acc = $temp$acc;
							list = $temp$list;
							continue fold;
						} else {
							var a = list.a;
							return _Utils_ap(
								acc,
								_List_fromArray(
									[
										A4(func, index, prev, a, $elm$core$Maybe$Nothing)
									]));
						}
					} else {
						return acc;
					}
				}
			});
		return A4(fold, 0, $elm$core$Maybe$Nothing, _List_Nil, all);
	});
var $terezka$charts$Internal$Produce$toBarSeries = F4(
	function (elIndex, barsAttrs, properties, data) {
		var toBarConfig = function (attrs) {
			return A2($terezka$charts$Internal$Helpers$apply, attrs, $terezka$charts$Internal$Svg$defaultBar);
		};
		var barsConfig = A2($terezka$charts$Internal$Helpers$apply, barsAttrs, $terezka$charts$Internal$Produce$defaultBars);
		var toBarItem = F7(
			function (sections, barIndex, sectionIndex, section, colorIndex, dataIndex, bin) {
				var visual = section.visual(bin.datum);
				var value = section.value(bin.datum);
				var start = bin.start;
				var numOfSections = $elm$core$List$length(sections);
				var numOfBars = barsConfig.grouped ? $elm$core$List$length(properties) : 1;
				var minY = (numOfSections > 1) ? $elm$core$Basics$max(0) : $elm$core$Basics$identity;
				var y1 = minY(
					A2($elm$core$Maybe$withDefault, 0, visual) - A2($elm$core$Maybe$withDefault, 0, value));
				var y2 = minY(
					A2($elm$core$Maybe$withDefault, 0, visual));
				var isSingle = numOfSections === 1;
				var isLast = _Utils_eq(sectionIndex, numOfSections - 1);
				var roundTop = (isSingle || isLast) ? barsConfig.roundTop : 0;
				var isFirst = !sectionIndex;
				var roundBottom = (isSingle || isFirst) ? barsConfig.roundBottom : 0;
				var end = bin.end;
				var length = end - start;
				var margin = length * barsConfig.margin;
				var spacing = length * barsConfig.spacing;
				var width = ((length - (margin * 2)) - ((numOfBars - 1) * spacing)) / numOfBars;
				var offset = barsConfig.grouped ? ((barIndex * width) + (barIndex * spacing)) : 0;
				var x1 = (start + margin) + offset;
				var x2 = ((start + margin) + offset) + width;
				var defaultColor = $terezka$charts$Internal$Helpers$toDefaultColor(colorIndex);
				var defaultAttrs = _List_fromArray(
					[
						$terezka$charts$Chart$Attributes$roundTop(roundTop),
						$terezka$charts$Chart$Attributes$roundBottom(roundBottom),
						$terezka$charts$Chart$Attributes$color(defaultColor),
						$terezka$charts$Chart$Attributes$border(defaultColor)
					]);
				var attrs = _Utils_ap(
					defaultAttrs,
					_Utils_ap(
						section.attrs,
						A5(section.extra, barIndex, sectionIndex, dataIndex, section.meta, bin.datum)));
				var productOrg = toBarConfig(attrs);
				var product = function (p) {
					return _Utils_eq(p.border, defaultColor) ? _Utils_update(
						p,
						{border: p.color}) : p;
				}(
					function (p) {
						var _v21 = p.design;
						if (((_v21.$ === 'Just') && (_v21.a.$ === 'Gradient')) && _v21.a.a.b) {
							var _v22 = _v21.a.a;
							var color = _v22.a;
							return _Utils_eq(p.color, defaultColor) ? _Utils_update(
								p,
								{color: color}) : p;
						} else {
							return p;
						}
					}(productOrg));
				return $terezka$charts$Internal$Item$Rendered(
					{
						config: {
							product: product,
							toAny: $terezka$charts$Internal$Item$Bar,
							tooltipInfo: {
								border: product.border,
								borderWidth: product.borderWidth,
								color: product.color,
								data: dataIndex,
								elIndex: elIndex,
								formatted: section.format(bin.datum),
								index: colorIndex,
								name: section.meta,
								property: barIndex,
								stack: sectionIndex
							},
							values: {
								datum: bin.datum,
								isReal: function () {
									if (value.$ === 'Just') {
										return true;
									} else {
										return false;
									}
								}(),
								x1: start,
								x2: end,
								y: A2($elm$core$Maybe$withDefault, 0, value)
							}
						},
						toHtml: function (c) {
							return _List_fromArray(
								[
									A3(
									$terezka$charts$Internal$Produce$tooltipRow,
									c.tooltipInfo.color,
									A2($terezka$charts$Internal$Produce$toDefaultName, colorIndex, c.tooltipInfo.name),
									section.format(bin.datum))
								]);
						},
						toLimits: function (config) {
							return {
								x1: x1,
								x2: x2,
								y1: A2($elm$core$Basics$min, y1, y2),
								y2: A2($elm$core$Basics$max, y1, y2)
							};
						},
						toPosition: F2(
							function (_v20, config) {
								return {x1: x1, x2: x2, y1: y1, y2: y2};
							}),
						toSvg: F3(
							function (plane, config, position) {
								return A3($terezka$charts$Internal$Svg$bar, plane, product, position);
							})
					});
			});
		var toSeriesItem = F6(
			function (bins, sections, barIndex, sectionIndex, section, colorIndex) {
				var _v13 = A2(
					$elm$core$List$indexedMap,
					A5(toBarItem, sections, barIndex, sectionIndex, section, colorIndex),
					bins);
				if (!_v13.b) {
					return $elm$core$Maybe$Nothing;
				} else {
					var first = _v13.a;
					var rest = _v13.b;
					return $elm$core$Maybe$Just(
						$terezka$charts$Internal$Item$Rendered(
							{
								config: {
									items: _Utils_Tuple2(first, rest)
								},
								toHtml: function (c) {
									return _List_fromArray(
										[
											A2(
											$elm$html$Html$table,
											_List_fromArray(
												[
													A2($elm$html$Html$Attributes$style, 'margin', '0')
												]),
											A2(
												$elm$core$List$concatMap,
												$terezka$charts$Internal$Item$toHtml,
												function (_v14) {
													var x = _v14.a;
													var xs = _v14.b;
													return A2($elm$core$List$cons, x, xs);
												}(c.items)))
										]);
								},
								toLimits: function (c) {
									return A2(
										$terezka$charts$Internal$Coordinates$foldPosition,
										$terezka$charts$Internal$Item$getLimits,
										function (_v15) {
											var x = _v15.a;
											var xs = _v15.b;
											return A2($elm$core$List$cons, x, xs);
										}(c.items));
								},
								toPosition: F2(
									function (plane, c) {
										return A2(
											$terezka$charts$Internal$Coordinates$foldPosition,
											$terezka$charts$Internal$Item$getPosition(plane),
											function (_v16) {
												var x = _v16.a;
												var xs = _v16.b;
												return A2($elm$core$List$cons, x, xs);
											}(c.items));
									}),
								toSvg: F3(
									function (plane, c, _v17) {
										return A2(
											$elm$svg$Svg$g,
											_List_fromArray(
												[
													$elm$svg$Svg$Attributes$class('elm-charts__bar-series')
												]),
											A2(
												$elm$core$List$map,
												$terezka$charts$Internal$Item$toSvg(plane),
												function (_v18) {
													var x = _v18.a;
													var xs = _v18.b;
													return A2($elm$core$List$cons, x, xs);
												}(c.items)));
									})
							}));
				}
			});
		var toBin = F4(
			function (index, prevM, curr, nextM) {
				var _v0 = _Utils_Tuple2(barsConfig.x1, barsConfig.x2);
				if (_v0.a.$ === 'Nothing') {
					if (_v0.b.$ === 'Nothing') {
						var _v1 = _v0.a;
						var _v2 = _v0.b;
						return {datum: curr, end: (index + 1) + 0.5, start: (index + 1) - 0.5};
					} else {
						var _v8 = _v0.a;
						var toEnd = _v0.b.a;
						var _v9 = _Utils_Tuple2(prevM, nextM);
						if (_v9.a.$ === 'Just') {
							var prev = _v9.a.a;
							return {
								datum: curr,
								end: toEnd(curr),
								start: toEnd(prev)
							};
						} else {
							if (_v9.b.$ === 'Just') {
								var _v10 = _v9.a;
								var next = _v9.b.a;
								return {
									datum: curr,
									end: toEnd(curr),
									start: toEnd(curr) - (toEnd(next) - toEnd(curr))
								};
							} else {
								var _v11 = _v9.a;
								var _v12 = _v9.b;
								return {
									datum: curr,
									end: toEnd(curr),
									start: toEnd(curr) - 1
								};
							}
						}
					}
				} else {
					if (_v0.b.$ === 'Nothing') {
						var toStart = _v0.a.a;
						var _v3 = _v0.b;
						var _v4 = _Utils_Tuple2(prevM, nextM);
						if (_v4.b.$ === 'Just') {
							var next = _v4.b.a;
							return {
								datum: curr,
								end: toStart(next),
								start: toStart(curr)
							};
						} else {
							if (_v4.a.$ === 'Just') {
								var prev = _v4.a.a;
								var _v5 = _v4.b;
								return {
									datum: curr,
									end: toStart(curr) + (toStart(curr) - toStart(prev)),
									start: toStart(curr)
								};
							} else {
								var _v6 = _v4.a;
								var _v7 = _v4.b;
								return {
									datum: curr,
									end: toStart(curr) + 1,
									start: toStart(curr)
								};
							}
						}
					} else {
						var toStart = _v0.a.a;
						var toEnd = _v0.b.a;
						return {
							datum: curr,
							end: toEnd(curr),
							start: toStart(curr)
						};
					}
				}
			});
		return function (bins) {
			return A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				A2(
					$elm$core$List$indexedMap,
					F2(
						function (propIndex, f) {
							return f(elIndex + propIndex);
						}),
					$elm$core$List$concat(
						A2(
							$elm$core$List$indexedMap,
							F2(
								function (barIndex, stacks) {
									return A2(
										$elm$core$List$indexedMap,
										A3(toSeriesItem, bins, stacks, barIndex),
										$elm$core$List$reverse(stacks));
								}),
							A2($elm$core$List$map, $terezka$charts$Internal$Property$toConfigs, properties)))));
		}(
			A2($terezka$charts$Internal$Helpers$withSurround, data, toBin));
	});
var $terezka$charts$Chart$barsMap = F4(
	function (mapData, edits, properties, data) {
		return $terezka$charts$Chart$Indexed(
			function (index) {
				var legends_ = A3($terezka$charts$Internal$Legend$toBarLegends, index, edits, properties);
				var items = A4($terezka$charts$Internal$Produce$toBarSeries, index, edits, properties, data);
				var generalized = A2(
					$elm$core$List$map,
					$terezka$charts$Internal$Item$map(mapData),
					A2($elm$core$List$concatMap, $terezka$charts$Internal$Many$getGenerals, items));
				var bins = A2($terezka$charts$Chart$Item$apply, $terezka$charts$Chart$Item$bins, generalized);
				var toLimits = A2($elm$core$List$map, $terezka$charts$Internal$Item$getLimits, bins);
				var barsConfig = A2($terezka$charts$Internal$Helpers$apply, edits, $terezka$charts$Internal$Produce$defaultBars);
				var toTicks = F2(
					function (plane, acc) {
						return _Utils_update(
							acc,
							{
								xs: _Utils_ap(
									acc.xs,
									barsConfig.grid ? A2(
										$elm$core$List$concatMap,
										A2(
											$elm$core$Basics$composeR,
											$terezka$charts$Chart$Item$getLimits,
											function (pos) {
												return _List_fromArray(
													[pos.x1, pos.x2]);
											}),
										bins) : _List_Nil)
							});
					});
				return _Utils_Tuple2(
					A5(
						$terezka$charts$Chart$BarsElement,
						toLimits,
						generalized,
						legends_,
						toTicks,
						function (plane) {
							return A2(
								$elm$svg$Svg$map,
								$elm$core$Basics$never,
								A2(
									$elm$svg$Svg$g,
									_List_fromArray(
										[
											$elm$svg$Svg$Attributes$class('elm-charts__bar-series')
										]),
									A2(
										$elm$core$List$map,
										$terezka$charts$Internal$Item$toSvg(plane),
										items)));
						}),
					index + $elm$core$List$length(
						A2($elm$core$List$concatMap, $terezka$charts$Internal$Property$toConfigs, properties)));
			});
	});
var $terezka$charts$Chart$bars = F3(
	function (edits, properties, data) {
		return A4($terezka$charts$Chart$barsMap, $elm$core$Basics$identity, edits, properties, data);
	});
var $terezka$charts$Chart$eachCustom = F2(
	function (grouping, func) {
		return $terezka$charts$Chart$SubElements(
			F2(
				function (p, items) {
					var processed = A2($terezka$charts$Chart$Item$apply, grouping, items);
					return A2(
						$elm$core$List$concatMap,
						func(p),
						processed);
				}));
	});
var $terezka$charts$Internal$Item$getDatum = function (_v0) {
	var item = _v0.a;
	return item.config.values.datum;
};
var $terezka$charts$Internal$Many$getData = function (_v0) {
	var group_ = _v0.a;
	return function (_v1) {
		var x = _v1.a;
		var xs = _v1.b;
		return $terezka$charts$Internal$Item$getDatum(x);
	}(group_.config.items);
};
var $terezka$charts$Chart$Item$getOneData = $terezka$charts$Internal$Many$getData;
var $terezka$charts$Chart$binLabels = F2(
	function (toLabel, edits) {
		return A2(
			$terezka$charts$Chart$eachCustom,
			A2($terezka$charts$Chart$Item$andThen, $terezka$charts$Chart$Item$bins, $terezka$charts$Chart$Item$bars),
			F2(
				function (p, item) {
					var config = A2($terezka$charts$Internal$Helpers$apply, edits, $terezka$charts$Chart$defaultLabel);
					var text = function () {
						var _v1 = config.format;
						if (_v1.$ === 'Just') {
							var formatting = _v1.a;
							return formatting(item);
						} else {
							return toLabel(
								$terezka$charts$Chart$Item$getOneData(item));
						}
					}();
					return _List_fromArray(
						[
							$terezka$charts$Chart$svg(
							function (_v0) {
								return A4(
									$terezka$charts$Internal$Svg$label,
									p,
									$terezka$charts$Chart$toLabelFromItemLabel(config),
									_List_fromArray(
										[
											$elm$svg$Svg$text(text)
										]),
									A2(config.position, p, item));
							})
						]);
				}));
	});
var $terezka$charts$Chart$Attributes$blue = $terezka$charts$Internal$Helpers$blue;
var $terezka$charts$Internal$Svg$Event = F2(
	function (name, handler) {
		return {handler: handler, name: name};
	});
var $debois$elm_dom$DOM$offsetHeight = A2($elm$json$Json$Decode$field, 'offsetHeight', $elm$json$Json$Decode$float);
var $debois$elm_dom$DOM$offsetWidth = A2($elm$json$Json$Decode$field, 'offsetWidth', $elm$json$Json$Decode$float);
var $elm$json$Json$Decode$map4 = _Json_map4;
var $debois$elm_dom$DOM$offsetLeft = A2($elm$json$Json$Decode$field, 'offsetLeft', $elm$json$Json$Decode$float);
var $elm$json$Json$Decode$null = _Json_decodeNull;
var $debois$elm_dom$DOM$offsetParent = F2(
	function (x, decoder) {
		return $elm$json$Json$Decode$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$json$Json$Decode$field,
					'offsetParent',
					$elm$json$Json$Decode$null(x)),
					A2($elm$json$Json$Decode$field, 'offsetParent', decoder)
				]));
	});
var $debois$elm_dom$DOM$offsetTop = A2($elm$json$Json$Decode$field, 'offsetTop', $elm$json$Json$Decode$float);
var $debois$elm_dom$DOM$scrollLeft = A2($elm$json$Json$Decode$field, 'scrollLeft', $elm$json$Json$Decode$float);
var $debois$elm_dom$DOM$scrollTop = A2($elm$json$Json$Decode$field, 'scrollTop', $elm$json$Json$Decode$float);
var $debois$elm_dom$DOM$position = F2(
	function (x, y) {
		return A2(
			$elm$json$Json$Decode$andThen,
			function (_v0) {
				var x_ = _v0.a;
				var y_ = _v0.b;
				return A2(
					$debois$elm_dom$DOM$offsetParent,
					_Utils_Tuple2(x_, y_),
					A2($debois$elm_dom$DOM$position, x_, y_));
			},
			A5(
				$elm$json$Json$Decode$map4,
				F4(
					function (scrollLeftP, scrollTopP, offsetLeftP, offsetTopP) {
						return _Utils_Tuple2((x + offsetLeftP) - scrollLeftP, (y + offsetTopP) - scrollTopP);
					}),
				$debois$elm_dom$DOM$scrollLeft,
				$debois$elm_dom$DOM$scrollTop,
				$debois$elm_dom$DOM$offsetLeft,
				$debois$elm_dom$DOM$offsetTop));
	});
var $debois$elm_dom$DOM$boundingClientRect = A4(
	$elm$json$Json$Decode$map3,
	F3(
		function (_v0, width, height) {
			var x = _v0.a;
			var y = _v0.b;
			return {height: height, left: x, top: y, width: width};
		}),
	A2($debois$elm_dom$DOM$position, 0, 0),
	$debois$elm_dom$DOM$offsetWidth,
	$debois$elm_dom$DOM$offsetHeight);
var $debois$elm_dom$DOM$parentElement = function (decoder) {
	return A2($elm$json$Json$Decode$field, 'parentElement', decoder);
};
function $terezka$charts$Internal$Svg$cyclic$decodePosition() {
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				$debois$elm_dom$DOM$boundingClientRect,
				$elm$json$Json$Decode$lazy(
				function (_v0) {
					return $debois$elm_dom$DOM$parentElement(
						$terezka$charts$Internal$Svg$cyclic$decodePosition());
				})
			]));
}
try {
	var $terezka$charts$Internal$Svg$decodePosition = $terezka$charts$Internal$Svg$cyclic$decodePosition();
	$terezka$charts$Internal$Svg$cyclic$decodePosition = function () {
		return $terezka$charts$Internal$Svg$decodePosition;
	};
} catch ($) {
	throw 'Some top-level definitions from `Internal.Svg` are causing infinite recursion:\n\n  ┌─────┐\n  │    decodePosition\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $terezka$charts$Internal$Coordinates$toCartesianX = F2(
	function (plane, value) {
		return A2($terezka$charts$Internal$Coordinates$scaleCartesianX, plane, value - plane.margin.left) + plane.x.min;
	});
var $terezka$charts$Internal$Coordinates$toCartesianY = F2(
	function (plane, value) {
		return ($terezka$charts$Internal$Coordinates$range(plane.y) - A2($terezka$charts$Internal$Coordinates$scaleCartesianY, plane, value - plane.margin.top)) + plane.y.min;
	});
var $terezka$charts$Internal$Svg$fromSvg = F2(
	function (plane, point) {
		return {
			x: A2($terezka$charts$Internal$Coordinates$toCartesianX, plane, point.x),
			y: A2($terezka$charts$Internal$Coordinates$toCartesianY, plane, point.y)
		};
	});
var $debois$elm_dom$DOM$target = function (decoder) {
	return A2($elm$json$Json$Decode$field, 'target', decoder);
};
var $terezka$charts$Internal$Svg$decoder = F2(
	function (plane, toMsg) {
		var handle = F3(
			function (mouseX, mouseY, box) {
				var yPrev = plane.y;
				var xPrev = plane.x;
				var widthPercent = box.width / plane.width;
				var heightPercent = box.height / plane.height;
				var newPlane = _Utils_update(
					plane,
					{
						height: box.height,
						margin: {bottom: plane.margin.bottom * heightPercent, left: plane.margin.left * widthPercent, right: plane.margin.right * widthPercent, top: plane.margin.top * heightPercent},
						width: box.width
					});
				var searched = A2(
					$terezka$charts$Internal$Svg$fromSvg,
					newPlane,
					{x: mouseX - box.left, y: mouseY - box.top});
				return A2(toMsg, newPlane, searched);
			});
		return A4(
			$elm$json$Json$Decode$map3,
			handle,
			A2($elm$json$Json$Decode$field, 'pageX', $elm$json$Json$Decode$float),
			A2($elm$json$Json$Decode$field, 'pageY', $elm$json$Json$Decode$float),
			$debois$elm_dom$DOM$target($terezka$charts$Internal$Svg$decodePosition));
	});
var $elm$svg$Svg$Events$on = $elm$html$Html$Events$on;
var $terezka$charts$Internal$Svg$container = F5(
	function (plane, config, below, chartEls, above) {
		var toEvent = function (event) {
			return A2(
				$elm$svg$Svg$Events$on,
				event.name,
				A2($terezka$charts$Internal$Svg$decoder, plane, event.handler));
		};
		var svgAttrsSize = config.responsive ? _List_fromArray(
			[
				$elm$svg$Svg$Attributes$viewBox(
				'0 0 ' + ($elm$core$String$fromFloat(plane.width) + (' ' + $elm$core$String$fromFloat(plane.height)))),
				A2($elm$html$Html$Attributes$style, 'display', 'block')
			]) : _List_fromArray(
			[
				$elm$svg$Svg$Attributes$width(
				$elm$core$String$fromFloat(plane.width)),
				$elm$svg$Svg$Attributes$height(
				$elm$core$String$fromFloat(plane.height)),
				A2($elm$html$Html$Attributes$style, 'display', 'block')
			]);
		var htmlAttrsSize = config.responsive ? _List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'width', '100%'),
				A2($elm$html$Html$Attributes$style, 'height', '100%')
			]) : _List_fromArray(
			[
				A2(
				$elm$html$Html$Attributes$style,
				'width',
				$elm$core$String$fromFloat(plane.width) + 'px'),
				A2(
				$elm$html$Html$Attributes$style,
				'height',
				$elm$core$String$fromFloat(plane.height) + 'px')
			]);
		var htmlAttrsDef = _List_fromArray(
			[
				$elm$html$Html$Attributes$class('elm-charts__container-inner')
			]);
		var htmlAttrs = _Utils_ap(
			config.htmlAttrs,
			_Utils_ap(htmlAttrsDef, htmlAttrsSize));
		var chartPosition = _List_fromArray(
			[
				$elm$svg$Svg$Attributes$x(
				$elm$core$String$fromFloat(plane.margin.left)),
				$elm$svg$Svg$Attributes$y(
				$elm$core$String$fromFloat(plane.margin.top)),
				$elm$svg$Svg$Attributes$width(
				$elm$core$String$fromFloat((plane.width - plane.margin.left) - plane.margin.right)),
				$elm$svg$Svg$Attributes$height(
				$elm$core$String$fromFloat((plane.height - plane.margin.bottom) - plane.margin.top)),
				$elm$svg$Svg$Attributes$fill('transparent')
			]);
		var catcher = A2(
			$elm$svg$Svg$rect,
			_Utils_ap(
				chartPosition,
				A2($elm$core$List$map, toEvent, config.events)),
			_List_Nil);
		var chart = A2(
			$elm$svg$Svg$svg,
			_Utils_ap(svgAttrsSize, config.attrs),
			_Utils_ap(
				chartEls,
				_List_fromArray(
					[catcher])));
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('elm-charts__container'),
					A2($elm$html$Html$Attributes$style, 'position', 'relative')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					htmlAttrs,
					_Utils_ap(
						below,
						_Utils_ap(
							_List_fromArray(
								[chart]),
							above)))
				]));
	});
var $terezka$charts$Chart$Attributes$lowest = F3(
	function (v, edit, b) {
		return _Utils_update(
			b,
			{
				min: A3(edit, v, b.min, b.dataMin)
			});
	});
var $terezka$charts$Chart$Attributes$orLower = F3(
	function (least, real, _v0) {
		return (_Utils_cmp(real, least) > 0) ? least : real;
	});
var $terezka$charts$Chart$definePlane = F2(
	function (config, elements) {
		var toLimit = F2(
			function (min, max) {
				return {dataMax: max, dataMin: min, max: max, min: min};
			});
		var fixSingles = function (bs) {
			return _Utils_eq(bs.min, bs.max) ? _Utils_update(
				bs,
				{max: bs.min + 10}) : bs;
		};
		var collectLimits = F2(
			function (el, acc) {
				switch (el.$) {
					case 'Indexed':
						return acc;
					case 'SeriesElement':
						var lims = el.a;
						return _Utils_ap(acc, lims);
					case 'BarsElement':
						var lims = el.a;
						return _Utils_ap(acc, lims);
					case 'CustomElement':
						return acc;
					case 'AxisElement':
						return acc;
					case 'TicksElement':
						return acc;
					case 'TickElement':
						return acc;
					case 'LabelsElement':
						return acc;
					case 'LabelElement':
						return acc;
					case 'GridElement':
						return acc;
					case 'SubElements':
						return acc;
					case 'ListOfElements':
						var subs = el.a;
						return A3($elm$core$List$foldl, collectLimits, acc, subs);
					case 'SvgElement':
						return acc;
					default:
						return acc;
				}
			});
		var limits_ = function (pos) {
			return function (_v3) {
				var x = _v3.x;
				var y = _v3.y;
				return {
					x: fixSingles(x),
					y: fixSingles(y)
				};
			}(
				{
					x: A2(toLimit, pos.x1, pos.x2),
					y: A2(toLimit, pos.y1, pos.y2)
				});
		}(
			A2(
				$terezka$charts$Internal$Coordinates$foldPosition,
				$elm$core$Basics$identity,
				A3($elm$core$List$foldl, collectLimits, _List_Nil, elements)));
		var calcRange = function () {
			var _v2 = config.range;
			if (!_v2.b) {
				return limits_.x;
			} else {
				var some = _v2;
				return A3(
					$elm$core$List$foldl,
					F2(
						function (f, b) {
							return f(b);
						}),
					limits_.x,
					some);
			}
		}();
		var calcDomain = function () {
			var _v1 = config.domain;
			if (!_v1.b) {
				return A3($terezka$charts$Chart$Attributes$lowest, 0, $terezka$charts$Chart$Attributes$orLower, limits_.y);
			} else {
				var some = _v1;
				return A3(
					$elm$core$List$foldl,
					F2(
						function (f, b) {
							return f(b);
						}),
					limits_.y,
					some);
			}
		}();
		var unpadded = {
			height: A2($elm$core$Basics$max, 1, (config.height - config.padding.bottom) - config.padding.top),
			margin: config.margin,
			width: A2($elm$core$Basics$max, 1, (config.width - config.padding.left) - config.padding.right),
			x: calcRange,
			y: calcDomain
		};
		var scalePadX = $terezka$charts$Internal$Coordinates$scaleCartesianX(unpadded);
		var xMax = calcRange.max + scalePadX(config.padding.right);
		var xMin = calcRange.min - scalePadX(config.padding.left);
		var scalePadY = $terezka$charts$Internal$Coordinates$scaleCartesianY(unpadded);
		var yMax = calcDomain.max + scalePadY(config.padding.top);
		var yMin = calcDomain.min - scalePadY(config.padding.bottom);
		return {
			height: config.height,
			margin: config.margin,
			width: config.width,
			x: _Utils_update(
				calcRange,
				{
					max: A2($elm$core$Basics$max, xMin, xMax),
					min: A2($elm$core$Basics$min, xMin, xMax)
				}),
			y: _Utils_update(
				calcDomain,
				{
					max: A2($elm$core$Basics$max, yMin, yMax),
					min: A2($elm$core$Basics$min, yMin, yMax)
				})
		};
	});
var $terezka$charts$Chart$getItems = F2(
	function (plane, elements) {
		var toItems = F2(
			function (el, acc) {
				switch (el.$) {
					case 'Indexed':
						return acc;
					case 'SeriesElement':
						var items = el.b;
						return _Utils_ap(acc, items);
					case 'BarsElement':
						var items = el.b;
						return _Utils_ap(acc, items);
					case 'CustomElement':
						var item = el.a;
						return _Utils_ap(
							acc,
							_List_fromArray(
								[item]));
					case 'AxisElement':
						var func = el.a;
						return acc;
					case 'TicksElement':
						return acc;
					case 'TickElement':
						return acc;
					case 'LabelsElement':
						return acc;
					case 'LabelElement':
						return acc;
					case 'GridElement':
						return acc;
					case 'SubElements':
						return acc;
					case 'ListOfElements':
						var subs = el.a;
						return A3($elm$core$List$foldl, toItems, acc, subs);
					case 'SvgElement':
						return acc;
					default:
						return acc;
				}
			});
		return A3($elm$core$List$foldl, toItems, _List_Nil, elements);
	});
var $terezka$charts$Chart$getLegends = function (elements) {
	var toLegends = F2(
		function (el, acc) {
			switch (el.$) {
				case 'Indexed':
					return acc;
				case 'SeriesElement':
					var legends_ = el.c;
					return _Utils_ap(acc, legends_);
				case 'BarsElement':
					var legends_ = el.c;
					return _Utils_ap(acc, legends_);
				case 'CustomElement':
					return acc;
				case 'AxisElement':
					return acc;
				case 'TicksElement':
					return acc;
				case 'TickElement':
					return acc;
				case 'LabelsElement':
					return acc;
				case 'LabelElement':
					return acc;
				case 'GridElement':
					return acc;
				case 'SubElements':
					return acc;
				case 'ListOfElements':
					var subs = el.a;
					return A3($elm$core$List$foldl, toLegends, acc, subs);
				case 'SvgElement':
					return acc;
				default:
					return acc;
			}
		});
	return A3($elm$core$List$foldl, toLegends, _List_Nil, elements);
};
var $terezka$charts$Chart$TickValues = F4(
	function (xAxis, yAxis, xs, ys) {
		return {xAxis: xAxis, xs: xs, yAxis: yAxis, ys: ys};
	});
var $terezka$charts$Chart$getTickValues = F3(
	function (plane, items, elements) {
		var toValues = F2(
			function (el, acc) {
				switch (el.$) {
					case 'Indexed':
						return acc;
					case 'SeriesElement':
						return acc;
					case 'BarsElement':
						var func = el.d;
						return A2(func, plane, acc);
					case 'CustomElement':
						var func = el.b;
						return acc;
					case 'AxisElement':
						var func = el.a;
						return A2(func, plane, acc);
					case 'TicksElement':
						var func = el.a;
						return A2(func, plane, acc);
					case 'TickElement':
						var toC = el.a;
						var func = el.b;
						return A3(
							func,
							plane,
							toC(plane),
							acc);
					case 'LabelsElement':
						var toC = el.a;
						var func = el.b;
						return A3(
							func,
							plane,
							toC(plane),
							acc);
					case 'LabelElement':
						var toC = el.a;
						var func = el.b;
						return A3(
							func,
							plane,
							toC(plane),
							acc);
					case 'SubElements':
						var func = el.a;
						return A3(
							$elm$core$List$foldl,
							toValues,
							acc,
							A2(func, plane, items));
					case 'GridElement':
						return acc;
					case 'ListOfElements':
						var subs = el.a;
						return A3($elm$core$List$foldl, toValues, acc, subs);
					case 'SvgElement':
						return acc;
					default:
						return acc;
				}
			});
		return A3(
			$elm$core$List$foldl,
			toValues,
			A4($terezka$charts$Chart$TickValues, _List_Nil, _List_Nil, _List_Nil, _List_Nil),
			elements);
	});
var $terezka$charts$Chart$GridElement = function (a) {
	return {$: 'GridElement', a: a};
};
var $terezka$charts$Internal$Svg$Circle = {$: 'Circle'};
var $terezka$charts$Chart$Attributes$circle = function (config) {
	return _Utils_update(
		config,
		{
			shape: $elm$core$Maybe$Just($terezka$charts$Internal$Svg$Circle)
		});
};
var $terezka$charts$Internal$Helpers$darkGray = 'rgb(200 200 200)';
var $terezka$charts$Chart$Attributes$dashed = F2(
	function (value, config) {
		return _Utils_update(
			config,
			{dashed: value});
	});
var $terezka$charts$Internal$Svg$defaultDot = {border: '', borderWidth: 0, color: $terezka$charts$Internal$Helpers$pink, highlight: 0, highlightColor: '', highlightWidth: 5, opacity: 1, shape: $elm$core$Maybe$Nothing, size: 6};
var $terezka$charts$Internal$Svg$isWithinPlane = F3(
	function (plane, x, y) {
		return _Utils_eq(
			A3($elm$core$Basics$clamp, plane.x.min, plane.x.max, x),
			x) && _Utils_eq(
			A3($elm$core$Basics$clamp, plane.y.min, plane.y.max, y),
			y);
	});
var $elm$core$Basics$sqrt = _Basics_sqrt;
var $terezka$charts$Internal$Svg$plusPath = F4(
	function (area_, off, x_, y_) {
		var side = $elm$core$Basics$sqrt(area_ / 4) + off;
		var r6 = side / 2;
		var r3 = side;
		return A2(
			$elm$core$String$join,
			' ',
			_List_fromArray(
				[
					'M' + ($elm$core$String$fromFloat(x_ - r6) + (' ' + $elm$core$String$fromFloat(((y_ - r3) - r6) + off))),
					'v' + $elm$core$String$fromFloat(r3 - off),
					'h' + $elm$core$String$fromFloat((-r3) + off),
					'v' + $elm$core$String$fromFloat(r3),
					'h' + $elm$core$String$fromFloat(r3 - off),
					'v' + $elm$core$String$fromFloat(r3 - off),
					'h' + $elm$core$String$fromFloat(r3),
					'v' + $elm$core$String$fromFloat((-r3) + off),
					'h' + $elm$core$String$fromFloat(r3 - off),
					'v' + $elm$core$String$fromFloat(-r3),
					'h' + $elm$core$String$fromFloat((-r3) + off),
					'v' + $elm$core$String$fromFloat((-r3) + off),
					'h' + $elm$core$String$fromFloat(-r3),
					'v' + $elm$core$String$fromFloat(r3 - off)
				]));
	});
var $elm$core$Basics$tan = _Basics_tan;
var $terezka$charts$Internal$Svg$trianglePath = F4(
	function (area_, off, x_, y_) {
		var side = $elm$core$Basics$sqrt(
			(area_ * 4) / $elm$core$Basics$sqrt(3)) + (off * $elm$core$Basics$sqrt(3));
		var height = ($elm$core$Basics$sqrt(3) * side) / 2;
		var fromMiddle = height - (($elm$core$Basics$tan(
			$elm$core$Basics$degrees(30)) * side) / 2);
		return A2(
			$elm$core$String$join,
			' ',
			_List_fromArray(
				[
					'M' + ($elm$core$String$fromFloat(x_) + (' ' + $elm$core$String$fromFloat(y_ - fromMiddle))),
					'l' + ($elm$core$String$fromFloat((-side) / 2) + (' ' + $elm$core$String$fromFloat(height))),
					'h' + $elm$core$String$fromFloat(side),
					'z'
				]));
	});
var $terezka$charts$Internal$Svg$dot = F5(
	function (plane, toX, toY, config, datum_) {
		var y_ = A2(
			$terezka$charts$Internal$Coordinates$toSVGY,
			plane,
			toY(datum_));
		var x_ = A2(
			$terezka$charts$Internal$Coordinates$toSVGX,
			plane,
			toX(datum_));
		var styleAttrs = _List_fromArray(
			[
				$elm$svg$Svg$Attributes$stroke(
				(config.border === '') ? config.color : config.border),
				$elm$svg$Svg$Attributes$strokeWidth(
				$elm$core$String$fromFloat(config.borderWidth)),
				$elm$svg$Svg$Attributes$fillOpacity(
				$elm$core$String$fromFloat(config.opacity)),
				$elm$svg$Svg$Attributes$fill(config.color),
				$elm$svg$Svg$Attributes$class('elm-charts__dot')
			]);
		var highlightColor = (config.highlightColor === '') ? config.color : config.highlightColor;
		var highlightAttrs = _List_fromArray(
			[
				$elm$svg$Svg$Attributes$stroke(highlightColor),
				$elm$svg$Svg$Attributes$strokeWidth(
				$elm$core$String$fromFloat(config.highlightWidth)),
				$elm$svg$Svg$Attributes$strokeOpacity(
				$elm$core$String$fromFloat(config.highlight)),
				$elm$svg$Svg$Attributes$fill('transparent'),
				$elm$svg$Svg$Attributes$class('elm-charts__dot-highlight')
			]);
		var view = F3(
			function (toEl, highlightOff, toAttrs) {
				return (config.highlight > 0) ? A2(
					$elm$svg$Svg$g,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$class('elm-charts__dot-container')
						]),
					_List_fromArray(
						[
							A2(
							toEl,
							_Utils_ap(
								toAttrs(highlightOff),
								highlightAttrs),
							_List_Nil),
							A2(
							toEl,
							_Utils_ap(
								toAttrs(0),
								styleAttrs),
							_List_Nil)
						])) : A2(
					toEl,
					_Utils_ap(
						toAttrs(0),
						styleAttrs),
					_List_Nil);
			});
		var area_ = (2 * $elm$core$Basics$pi) * config.size;
		if (!A3(
			$terezka$charts$Internal$Svg$isWithinPlane,
			plane,
			toX(datum_),
			toY(datum_))) {
			return $elm$svg$Svg$text('');
		} else {
			var _v0 = config.shape;
			if (_v0.$ === 'Nothing') {
				return $elm$svg$Svg$text('');
			} else {
				switch (_v0.a.$) {
					case 'Circle':
						var _v1 = _v0.a;
						return A3(
							view,
							$elm$svg$Svg$circle,
							config.highlightWidth / 2,
							function (off) {
								var radius = $elm$core$Basics$sqrt(area_ / $elm$core$Basics$pi);
								return _List_fromArray(
									[
										$elm$svg$Svg$Attributes$cx(
										$elm$core$String$fromFloat(x_)),
										$elm$svg$Svg$Attributes$cy(
										$elm$core$String$fromFloat(y_)),
										$elm$svg$Svg$Attributes$r(
										$elm$core$String$fromFloat(radius + off))
									]);
							});
					case 'Triangle':
						var _v2 = _v0.a;
						return A3(
							view,
							$elm$svg$Svg$path,
							config.highlightWidth,
							function (off) {
								return _List_fromArray(
									[
										$elm$svg$Svg$Attributes$d(
										A4($terezka$charts$Internal$Svg$trianglePath, area_, off, x_, y_))
									]);
							});
					case 'Square':
						var _v3 = _v0.a;
						return A3(
							view,
							$elm$svg$Svg$rect,
							config.highlightWidth,
							function (off) {
								var side = $elm$core$Basics$sqrt(area_);
								var sideOff = side + off;
								return _List_fromArray(
									[
										$elm$svg$Svg$Attributes$x(
										$elm$core$String$fromFloat(x_ - (sideOff / 2))),
										$elm$svg$Svg$Attributes$y(
										$elm$core$String$fromFloat(y_ - (sideOff / 2))),
										$elm$svg$Svg$Attributes$width(
										$elm$core$String$fromFloat(sideOff)),
										$elm$svg$Svg$Attributes$height(
										$elm$core$String$fromFloat(sideOff))
									]);
							});
					case 'Diamond':
						var _v4 = _v0.a;
						return A3(
							view,
							$elm$svg$Svg$rect,
							config.highlightWidth,
							function (off) {
								var side = $elm$core$Basics$sqrt(area_);
								var sideOff = side + off;
								return _List_fromArray(
									[
										$elm$svg$Svg$Attributes$x(
										$elm$core$String$fromFloat(x_ - (sideOff / 2))),
										$elm$svg$Svg$Attributes$y(
										$elm$core$String$fromFloat(y_ - (sideOff / 2))),
										$elm$svg$Svg$Attributes$width(
										$elm$core$String$fromFloat(sideOff)),
										$elm$svg$Svg$Attributes$height(
										$elm$core$String$fromFloat(sideOff)),
										$elm$svg$Svg$Attributes$transform(
										'rotate(45 ' + ($elm$core$String$fromFloat(x_) + (' ' + ($elm$core$String$fromFloat(y_) + ')'))))
									]);
							});
					case 'Cross':
						var _v5 = _v0.a;
						return A3(
							view,
							$elm$svg$Svg$path,
							config.highlightWidth,
							function (off) {
								return _List_fromArray(
									[
										$elm$svg$Svg$Attributes$d(
										A4($terezka$charts$Internal$Svg$plusPath, area_, off, x_, y_)),
										$elm$svg$Svg$Attributes$transform(
										'rotate(45 ' + ($elm$core$String$fromFloat(x_) + (' ' + ($elm$core$String$fromFloat(y_) + ')'))))
									]);
							});
					default:
						var _v6 = _v0.a;
						return A3(
							view,
							$elm$svg$Svg$path,
							config.highlightWidth,
							function (off) {
								return _List_fromArray(
									[
										$elm$svg$Svg$Attributes$d(
										A4($terezka$charts$Internal$Svg$plusPath, area_, off, x_, y_))
									]);
							});
				}
			}
		}
	});
var $terezka$charts$Chart$Svg$dot = F4(
	function (plane, toX, toY, edits) {
		return A4(
			$terezka$charts$Internal$Svg$dot,
			plane,
			toX,
			toY,
			A2($terezka$charts$Internal$Helpers$apply, edits, $terezka$charts$Internal$Svg$defaultDot));
	});
var $terezka$charts$Internal$Helpers$gray = '#EFF2FA';
var $terezka$charts$Internal$Svg$defaultLine = {attrs: _List_Nil, _break: false, color: 'rgb(210, 210, 210)', dashed: _List_Nil, flip: false, opacity: 1, tickDirection: -90, tickLength: 0, width: 1, x1: $elm$core$Maybe$Nothing, x2: $elm$core$Maybe$Nothing, x2Svg: $elm$core$Maybe$Nothing, xOff: 0, y1: $elm$core$Maybe$Nothing, y2: $elm$core$Maybe$Nothing, y2Svg: $elm$core$Maybe$Nothing, yOff: 0};
var $elm$core$Basics$cos = _Basics_cos;
var $terezka$charts$Internal$Svg$lengthInCartesianX = $terezka$charts$Internal$Coordinates$scaleCartesianX;
var $terezka$charts$Internal$Svg$lengthInCartesianY = $terezka$charts$Internal$Coordinates$scaleCartesianY;
var $elm$core$Basics$sin = _Basics_sin;
var $elm$svg$Svg$Attributes$strokeDasharray = _VirtualDom_attribute('stroke-dasharray');
var $terezka$charts$Internal$Svg$line = F2(
	function (plane, config) {
		var angle = $elm$core$Basics$degrees(config.tickDirection);
		var _v0 = function () {
			var _v3 = _Utils_Tuple3(
				_Utils_Tuple2(config.x1, config.x2),
				_Utils_Tuple2(config.y1, config.y2),
				_Utils_Tuple2(config.x2Svg, config.y2Svg));
			if (_v3.a.a.$ === 'Just') {
				if (_v3.a.b.$ === 'Just') {
					if (_v3.b.a.$ === 'Nothing') {
						if (_v3.b.b.$ === 'Nothing') {
							var _v4 = _v3.a;
							var a = _v4.a.a;
							var b = _v4.b.a;
							var _v5 = _v3.b;
							var _v6 = _v5.a;
							var _v7 = _v5.b;
							return _Utils_Tuple2(
								_Utils_Tuple2(a, b),
								_Utils_Tuple2(plane.y.min, plane.y.min));
						} else {
							var _v38 = _v3.a;
							var a = _v38.a.a;
							var b = _v38.b.a;
							var _v39 = _v3.b;
							var _v40 = _v39.a;
							var c = _v39.b.a;
							return _Utils_Tuple2(
								_Utils_Tuple2(a, b),
								_Utils_Tuple2(c, c));
						}
					} else {
						if (_v3.b.b.$ === 'Nothing') {
							var _v41 = _v3.a;
							var a = _v41.a.a;
							var b = _v41.b.a;
							var _v42 = _v3.b;
							var c = _v42.a.a;
							var _v43 = _v42.b;
							return _Utils_Tuple2(
								_Utils_Tuple2(a, b),
								_Utils_Tuple2(c, c));
						} else {
							return _Utils_Tuple2(
								_Utils_Tuple2(
									A2($elm$core$Maybe$withDefault, plane.x.min, config.x1),
									A2($elm$core$Maybe$withDefault, plane.x.max, config.x2)),
								_Utils_Tuple2(
									A2($elm$core$Maybe$withDefault, plane.y.min, config.y1),
									A2($elm$core$Maybe$withDefault, plane.y.max, config.y2)));
						}
					}
				} else {
					if (_v3.b.a.$ === 'Nothing') {
						if (_v3.b.b.$ === 'Nothing') {
							var _v8 = _v3.a;
							var a = _v8.a.a;
							var _v9 = _v8.b;
							var _v10 = _v3.b;
							var _v11 = _v10.a;
							var _v12 = _v10.b;
							return _Utils_Tuple2(
								_Utils_Tuple2(a, a),
								_Utils_Tuple2(plane.y.min, plane.y.max));
						} else {
							if (_v3.c.a.$ === 'Just') {
								if (_v3.c.b.$ === 'Just') {
									var _v51 = _v3.a;
									var a = _v51.a.a;
									var _v52 = _v51.b;
									var _v53 = _v3.b;
									var _v54 = _v53.a;
									var b = _v53.b.a;
									var _v55 = _v3.c;
									var xOff = _v55.a.a;
									var yOff = _v55.b.a;
									return _Utils_Tuple2(
										_Utils_Tuple2(
											a,
											a + A2($terezka$charts$Internal$Coordinates$scaleCartesianX, plane, xOff)),
										_Utils_Tuple2(
											b,
											b + A2($terezka$charts$Internal$Coordinates$scaleCartesianY, plane, yOff)));
								} else {
									var _v56 = _v3.a;
									var a = _v56.a.a;
									var _v57 = _v56.b;
									var _v58 = _v3.b;
									var _v59 = _v58.a;
									var b = _v58.b.a;
									var _v60 = _v3.c;
									var xOff = _v60.a.a;
									var _v61 = _v60.b;
									return _Utils_Tuple2(
										_Utils_Tuple2(
											a,
											a + A2($terezka$charts$Internal$Coordinates$scaleCartesianX, plane, xOff)),
										_Utils_Tuple2(b, b));
								}
							} else {
								if (_v3.c.b.$ === 'Nothing') {
									var _v44 = _v3.a;
									var a = _v44.a.a;
									var _v45 = _v44.b;
									var _v46 = _v3.b;
									var _v47 = _v46.a;
									var b = _v46.b.a;
									var _v48 = _v3.c;
									var _v49 = _v48.a;
									var _v50 = _v48.b;
									return _Utils_Tuple2(
										_Utils_Tuple2(a, plane.x.max),
										_Utils_Tuple2(b, b));
								} else {
									var _v62 = _v3.a;
									var a = _v62.a.a;
									var _v63 = _v62.b;
									var _v64 = _v3.b;
									var _v65 = _v64.a;
									var b = _v64.b.a;
									var _v66 = _v3.c;
									var _v67 = _v66.a;
									var yOff = _v66.b.a;
									return _Utils_Tuple2(
										_Utils_Tuple2(a, a),
										_Utils_Tuple2(
											b,
											b + A2($terezka$charts$Internal$Coordinates$scaleCartesianY, plane, yOff)));
								}
							}
						}
					} else {
						if (_v3.b.b.$ === 'Just') {
							var _v35 = _v3.a;
							var c = _v35.a.a;
							var _v36 = _v35.b;
							var _v37 = _v3.b;
							var a = _v37.a.a;
							var b = _v37.b.a;
							return _Utils_Tuple2(
								_Utils_Tuple2(c, c),
								_Utils_Tuple2(a, b));
						} else {
							if (_v3.c.a.$ === 'Just') {
								if (_v3.c.b.$ === 'Just') {
									var _v75 = _v3.a;
									var a = _v75.a.a;
									var _v76 = _v75.b;
									var _v77 = _v3.b;
									var b = _v77.a.a;
									var _v78 = _v77.b;
									var _v79 = _v3.c;
									var xOff = _v79.a.a;
									var yOff = _v79.b.a;
									return _Utils_Tuple2(
										_Utils_Tuple2(
											a,
											a + A2($terezka$charts$Internal$Coordinates$scaleCartesianX, plane, xOff)),
										_Utils_Tuple2(
											b,
											b + A2($terezka$charts$Internal$Coordinates$scaleCartesianY, plane, yOff)));
								} else {
									var _v80 = _v3.a;
									var a = _v80.a.a;
									var _v81 = _v80.b;
									var _v82 = _v3.b;
									var b = _v82.a.a;
									var _v83 = _v82.b;
									var _v84 = _v3.c;
									var xOff = _v84.a.a;
									var _v85 = _v84.b;
									return _Utils_Tuple2(
										_Utils_Tuple2(
											a,
											a + A2($terezka$charts$Internal$Coordinates$scaleCartesianX, plane, xOff)),
										_Utils_Tuple2(b, b));
								}
							} else {
								if (_v3.c.b.$ === 'Nothing') {
									var _v68 = _v3.a;
									var a = _v68.a.a;
									var _v69 = _v68.b;
									var _v70 = _v3.b;
									var b = _v70.a.a;
									var _v71 = _v70.b;
									var _v72 = _v3.c;
									var _v73 = _v72.a;
									var _v74 = _v72.b;
									return _Utils_Tuple2(
										_Utils_Tuple2(a, plane.x.max),
										_Utils_Tuple2(b, b));
								} else {
									var _v86 = _v3.a;
									var a = _v86.a.a;
									var _v87 = _v86.b;
									var _v88 = _v3.b;
									var b = _v88.a.a;
									var _v89 = _v88.b;
									var _v90 = _v3.c;
									var _v91 = _v90.a;
									var yOff = _v90.b.a;
									return _Utils_Tuple2(
										_Utils_Tuple2(a, a),
										_Utils_Tuple2(
											b,
											b + A2($terezka$charts$Internal$Coordinates$scaleCartesianY, plane, yOff)));
								}
							}
						}
					}
				}
			} else {
				if (_v3.a.b.$ === 'Just') {
					if (_v3.b.a.$ === 'Nothing') {
						if (_v3.b.b.$ === 'Nothing') {
							var _v13 = _v3.a;
							var _v14 = _v13.a;
							var b = _v13.b.a;
							var _v15 = _v3.b;
							var _v16 = _v15.a;
							var _v17 = _v15.b;
							return _Utils_Tuple2(
								_Utils_Tuple2(b, b),
								_Utils_Tuple2(plane.y.min, plane.y.max));
						} else {
							if (_v3.c.a.$ === 'Just') {
								if (_v3.c.b.$ === 'Just') {
									var _v99 = _v3.a;
									var _v100 = _v99.a;
									var a = _v99.b.a;
									var _v101 = _v3.b;
									var _v102 = _v101.a;
									var b = _v101.b.a;
									var _v103 = _v3.c;
									var xOff = _v103.a.a;
									var yOff = _v103.b.a;
									return _Utils_Tuple2(
										_Utils_Tuple2(
											a,
											a + A2($terezka$charts$Internal$Coordinates$scaleCartesianX, plane, xOff)),
										_Utils_Tuple2(
											b,
											b + A2($terezka$charts$Internal$Coordinates$scaleCartesianY, plane, yOff)));
								} else {
									var _v104 = _v3.a;
									var _v105 = _v104.a;
									var a = _v104.b.a;
									var _v106 = _v3.b;
									var _v107 = _v106.a;
									var b = _v106.b.a;
									var _v108 = _v3.c;
									var xOff = _v108.a.a;
									var _v109 = _v108.b;
									return _Utils_Tuple2(
										_Utils_Tuple2(
											a,
											a + A2($terezka$charts$Internal$Coordinates$scaleCartesianX, plane, xOff)),
										_Utils_Tuple2(b, b));
								}
							} else {
								if (_v3.c.b.$ === 'Nothing') {
									var _v92 = _v3.a;
									var _v93 = _v92.a;
									var a = _v92.b.a;
									var _v94 = _v3.b;
									var _v95 = _v94.a;
									var b = _v94.b.a;
									var _v96 = _v3.c;
									var _v97 = _v96.a;
									var _v98 = _v96.b;
									return _Utils_Tuple2(
										_Utils_Tuple2(a, plane.x.max),
										_Utils_Tuple2(b, b));
								} else {
									var _v110 = _v3.a;
									var _v111 = _v110.a;
									var a = _v110.b.a;
									var _v112 = _v3.b;
									var _v113 = _v112.a;
									var b = _v112.b.a;
									var _v114 = _v3.c;
									var _v115 = _v114.a;
									var yOff = _v114.b.a;
									return _Utils_Tuple2(
										_Utils_Tuple2(a, a),
										_Utils_Tuple2(
											b,
											b + A2($terezka$charts$Internal$Coordinates$scaleCartesianY, plane, yOff)));
								}
							}
						}
					} else {
						if (_v3.b.b.$ === 'Just') {
							var _v32 = _v3.a;
							var _v33 = _v32.a;
							var c = _v32.b.a;
							var _v34 = _v3.b;
							var a = _v34.a.a;
							var b = _v34.b.a;
							return _Utils_Tuple2(
								_Utils_Tuple2(c, c),
								_Utils_Tuple2(a, b));
						} else {
							if (_v3.c.a.$ === 'Just') {
								if (_v3.c.b.$ === 'Just') {
									var _v123 = _v3.a;
									var _v124 = _v123.a;
									var a = _v123.b.a;
									var _v125 = _v3.b;
									var b = _v125.a.a;
									var _v126 = _v125.b;
									var _v127 = _v3.c;
									var xOff = _v127.a.a;
									var yOff = _v127.b.a;
									return _Utils_Tuple2(
										_Utils_Tuple2(
											a,
											a + A2($terezka$charts$Internal$Coordinates$scaleCartesianX, plane, xOff)),
										_Utils_Tuple2(
											b,
											b + A2($terezka$charts$Internal$Coordinates$scaleCartesianY, plane, yOff)));
								} else {
									var _v128 = _v3.a;
									var _v129 = _v128.a;
									var a = _v128.b.a;
									var _v130 = _v3.b;
									var b = _v130.a.a;
									var _v131 = _v130.b;
									var _v132 = _v3.c;
									var xOff = _v132.a.a;
									var _v133 = _v132.b;
									return _Utils_Tuple2(
										_Utils_Tuple2(
											a,
											a + A2($terezka$charts$Internal$Coordinates$scaleCartesianX, plane, xOff)),
										_Utils_Tuple2(b, b));
								}
							} else {
								if (_v3.c.b.$ === 'Nothing') {
									var _v116 = _v3.a;
									var _v117 = _v116.a;
									var a = _v116.b.a;
									var _v118 = _v3.b;
									var b = _v118.a.a;
									var _v119 = _v118.b;
									var _v120 = _v3.c;
									var _v121 = _v120.a;
									var _v122 = _v120.b;
									return _Utils_Tuple2(
										_Utils_Tuple2(a, plane.x.max),
										_Utils_Tuple2(b, b));
								} else {
									var _v134 = _v3.a;
									var _v135 = _v134.a;
									var a = _v134.b.a;
									var _v136 = _v3.b;
									var b = _v136.a.a;
									var _v137 = _v136.b;
									var _v138 = _v3.c;
									var _v139 = _v138.a;
									var yOff = _v138.b.a;
									return _Utils_Tuple2(
										_Utils_Tuple2(a, a),
										_Utils_Tuple2(
											b,
											b + A2($terezka$charts$Internal$Coordinates$scaleCartesianY, plane, yOff)));
								}
							}
						}
					}
				} else {
					if (_v3.b.a.$ === 'Just') {
						if (_v3.b.b.$ === 'Just') {
							var _v18 = _v3.a;
							var _v19 = _v18.a;
							var _v20 = _v18.b;
							var _v21 = _v3.b;
							var a = _v21.a.a;
							var b = _v21.b.a;
							return _Utils_Tuple2(
								_Utils_Tuple2(plane.x.min, plane.x.min),
								_Utils_Tuple2(a, b));
						} else {
							var _v22 = _v3.a;
							var _v23 = _v22.a;
							var _v24 = _v22.b;
							var _v25 = _v3.b;
							var a = _v25.a.a;
							var _v26 = _v25.b;
							return _Utils_Tuple2(
								_Utils_Tuple2(plane.x.min, plane.x.max),
								_Utils_Tuple2(a, a));
						}
					} else {
						if (_v3.b.b.$ === 'Just') {
							var _v27 = _v3.a;
							var _v28 = _v27.a;
							var _v29 = _v27.b;
							var _v30 = _v3.b;
							var _v31 = _v30.a;
							var b = _v30.b.a;
							return _Utils_Tuple2(
								_Utils_Tuple2(plane.x.min, plane.x.max),
								_Utils_Tuple2(b, b));
						} else {
							var _v140 = _v3.a;
							var _v141 = _v140.a;
							var _v142 = _v140.b;
							var _v143 = _v3.b;
							var _v144 = _v143.a;
							var _v145 = _v143.b;
							return _Utils_Tuple2(
								_Utils_Tuple2(plane.x.min, plane.x.max),
								_Utils_Tuple2(plane.y.min, plane.y.max));
						}
					}
				}
			}
		}();
		var _v1 = _v0.a;
		var x1 = _v1.a;
		var x2 = _v1.b;
		var _v2 = _v0.b;
		var y1 = _v2.a;
		var y2 = _v2.b;
		var x1_ = x1 + A2($terezka$charts$Internal$Svg$lengthInCartesianX, plane, config.xOff);
		var x2_ = x2 + A2($terezka$charts$Internal$Svg$lengthInCartesianX, plane, config.xOff);
		var y1_ = y1 - A2($terezka$charts$Internal$Svg$lengthInCartesianY, plane, config.yOff);
		var y2_ = y2 - A2($terezka$charts$Internal$Svg$lengthInCartesianY, plane, config.yOff);
		var _v146 = (config.tickLength > 0) ? _Utils_Tuple2(
			A2(
				$terezka$charts$Internal$Svg$lengthInCartesianX,
				plane,
				$elm$core$Basics$cos(angle) * config.tickLength),
			A2(
				$terezka$charts$Internal$Svg$lengthInCartesianY,
				plane,
				$elm$core$Basics$sin(angle) * config.tickLength)) : _Utils_Tuple2(0, 0);
		var tickOffsetX = _v146.a;
		var tickOffsetY = _v146.b;
		var cmds = config.flip ? _Utils_ap(
			(config.tickLength > 0) ? _List_fromArray(
				[
					A2($terezka$charts$Internal$Commands$Move, x2_ + tickOffsetX, y2_ + tickOffsetY),
					A2($terezka$charts$Internal$Commands$Line, x2_, y2_)
				]) : _List_fromArray(
				[
					A2($terezka$charts$Internal$Commands$Move, x2_, y2_)
				]),
			_Utils_ap(
				config._break ? _List_fromArray(
					[
						A2($terezka$charts$Internal$Commands$Line, x2_, y1_),
						A2($terezka$charts$Internal$Commands$Line, x1_, y1_)
					]) : _List_fromArray(
					[
						A2($terezka$charts$Internal$Commands$Line, x1_, y1_)
					]),
				(config.tickLength > 0) ? _List_fromArray(
					[
						A2($terezka$charts$Internal$Commands$Line, x1_ + tickOffsetX, y1_ + tickOffsetY)
					]) : _List_Nil)) : _Utils_ap(
			(config.tickLength > 0) ? _List_fromArray(
				[
					A2($terezka$charts$Internal$Commands$Move, x1_ + tickOffsetX, y1_ + tickOffsetY),
					A2($terezka$charts$Internal$Commands$Line, x1_, y1_)
				]) : _List_fromArray(
				[
					A2($terezka$charts$Internal$Commands$Move, x1_, y1_)
				]),
			_Utils_ap(
				config._break ? _List_fromArray(
					[
						A2($terezka$charts$Internal$Commands$Line, x1_, y2_),
						A2($terezka$charts$Internal$Commands$Line, x2_, y2_)
					]) : _List_fromArray(
					[
						A2($terezka$charts$Internal$Commands$Line, x2_, y2_)
					]),
				(config.tickLength > 0) ? _List_fromArray(
					[
						A2($terezka$charts$Internal$Commands$Line, x2_ + tickOffsetX, y2_ + tickOffsetY)
					]) : _List_Nil));
		return A4(
			$terezka$charts$Internal$Svg$withAttrs,
			config.attrs,
			$elm$svg$Svg$path,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$class('elm-charts__line'),
					$elm$svg$Svg$Attributes$fill('transparent'),
					$elm$svg$Svg$Attributes$stroke(config.color),
					$elm$svg$Svg$Attributes$strokeWidth(
					$elm$core$String$fromFloat(config.width)),
					$elm$svg$Svg$Attributes$strokeOpacity(
					$elm$core$String$fromFloat(config.opacity)),
					$elm$svg$Svg$Attributes$strokeDasharray(
					A2(
						$elm$core$String$join,
						' ',
						A2($elm$core$List$map, $elm$core$String$fromFloat, config.dashed))),
					$elm$svg$Svg$Attributes$d(
					A2($terezka$charts$Internal$Commands$description, plane, cmds))
				]),
			_List_Nil);
	});
var $terezka$charts$Chart$Svg$line = F2(
	function (plane, edits) {
		return A2(
			$terezka$charts$Internal$Svg$line,
			plane,
			A2($terezka$charts$Internal$Helpers$apply, edits, $terezka$charts$Internal$Svg$defaultLine));
	});
var $terezka$charts$Chart$Attributes$size = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{size: v});
	});
var $terezka$charts$Chart$Attributes$width = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{width: v});
	});
var $terezka$charts$Chart$Attributes$x1 = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{
				x1: $elm$core$Maybe$Just(v)
			});
	});
var $terezka$charts$Chart$Attributes$y1 = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{
				y1: $elm$core$Maybe$Just(v)
			});
	});
var $terezka$charts$Chart$grid = function (edits) {
	var config = A2(
		$terezka$charts$Internal$Helpers$apply,
		edits,
		{color: '', dashed: _List_Nil, dotGrid: false, width: 0});
	var width = (!config.width) ? (config.dotGrid ? 0.5 : 1) : config.width;
	var color = $elm$core$String$isEmpty(config.color) ? (config.dotGrid ? $terezka$charts$Internal$Helpers$darkGray : $terezka$charts$Internal$Helpers$gray) : config.color;
	var toDot = F4(
		function (vs, p, x, y) {
			return (A2($elm$core$List$member, x, vs.xAxis) || A2($elm$core$List$member, y, vs.yAxis)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
				A5(
					$terezka$charts$Chart$Svg$dot,
					p,
					function ($) {
						return $.x;
					},
					function ($) {
						return $.y;
					},
					_List_fromArray(
						[
							$terezka$charts$Chart$Attributes$color(color),
							$terezka$charts$Chart$Attributes$size(width),
							$terezka$charts$Chart$Attributes$circle
						]),
					{x: x, y: y}));
		});
	var toXGrid = F3(
		function (vs, p, v) {
			return A2($elm$core$List$member, v, vs.xAxis) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
				A2(
					$terezka$charts$Chart$Svg$line,
					p,
					_List_fromArray(
						[
							$terezka$charts$Chart$Attributes$color(color),
							$terezka$charts$Chart$Attributes$width(width),
							$terezka$charts$Chart$Attributes$x1(v),
							$terezka$charts$Chart$Attributes$dashed(config.dashed)
						])));
		});
	var toYGrid = F3(
		function (vs, p, v) {
			return A2($elm$core$List$member, v, vs.yAxis) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
				A2(
					$terezka$charts$Chart$Svg$line,
					p,
					_List_fromArray(
						[
							$terezka$charts$Chart$Attributes$color(color),
							$terezka$charts$Chart$Attributes$width(width),
							$terezka$charts$Chart$Attributes$y1(v),
							$terezka$charts$Chart$Attributes$dashed(config.dashed)
						])));
		});
	return $terezka$charts$Chart$GridElement(
		F2(
			function (p, vs) {
				return A2(
					$elm$svg$Svg$g,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$class('elm-charts__grid')
						]),
					config.dotGrid ? A2(
						$elm$core$List$concatMap,
						function (x) {
							return A2(
								$elm$core$List$filterMap,
								A3(toDot, vs, p, x),
								vs.ys);
						},
						vs.xs) : _List_fromArray(
						[
							A2(
							$elm$svg$Svg$g,
							_List_fromArray(
								[
									$elm$svg$Svg$Attributes$class('elm-charts__x-grid')
								]),
							A2(
								$elm$core$List$filterMap,
								A2(toXGrid, vs, p),
								vs.xs)),
							A2(
							$elm$svg$Svg$g,
							_List_fromArray(
								[
									$elm$svg$Svg$Attributes$class('elm-charts__y-grid')
								]),
							A2(
								$elm$core$List$filterMap,
								A2(toYGrid, vs, p),
								vs.ys))
						]));
			}));
};
var $terezka$charts$Chart$viewElements = F6(
	function (config, plane, tickValues, allItems, allLegends, elements) {
		var viewOne = F2(
			function (el, _v0) {
				var before = _v0.a;
				var chart_ = _v0.b;
				var after = _v0.c;
				switch (el.$) {
					case 'Indexed':
						return _Utils_Tuple3(before, chart_, after);
					case 'SeriesElement':
						var view = el.d;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								view(plane),
								chart_),
							after);
					case 'BarsElement':
						var view = el.e;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								view(plane),
								chart_),
							after);
					case 'CustomElement':
						var view = el.b;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								view(plane),
								chart_),
							after);
					case 'AxisElement':
						var view = el.b;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								view(plane),
								chart_),
							after);
					case 'TicksElement':
						var view = el.b;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								view(plane),
								chart_),
							after);
					case 'TickElement':
						var toC = el.a;
						var view = el.c;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								A2(
									view,
									plane,
									toC(plane)),
								chart_),
							after);
					case 'LabelsElement':
						var toC = el.a;
						var view = el.c;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								A2(
									view,
									plane,
									toC(plane)),
								chart_),
							after);
					case 'LabelElement':
						var toC = el.a;
						var view = el.c;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								A2(
									view,
									plane,
									toC(plane)),
								chart_),
							after);
					case 'GridElement':
						var view = el.a;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								A2(view, plane, tickValues),
								chart_),
							after);
					case 'SubElements':
						var func = el.a;
						return A3(
							$elm$core$List$foldr,
							viewOne,
							_Utils_Tuple3(before, chart_, after),
							A2(func, plane, allItems));
					case 'ListOfElements':
						var els = el.a;
						return A3(
							$elm$core$List$foldr,
							viewOne,
							_Utils_Tuple3(before, chart_, after),
							els);
					case 'SvgElement':
						var view = el.a;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								view(plane),
								chart_),
							after);
					default:
						var view = el.a;
						return _Utils_Tuple3(
							($elm$core$List$length(chart_) > 0) ? A2(
								$elm$core$List$cons,
								A2(view, plane, allLegends),
								before) : before,
							chart_,
							($elm$core$List$length(chart_) > 0) ? after : A2(
								$elm$core$List$cons,
								A2(view, plane, allLegends),
								after));
				}
			});
		return A3(
			$elm$core$List$foldr,
			viewOne,
			_Utils_Tuple3(_List_Nil, _List_Nil, _List_Nil),
			elements);
	});
var $terezka$charts$Chart$chart = F2(
	function (edits, unindexedElements) {
		var indexedElements = function () {
			var toIndexedEl = F2(
				function (el, _v4) {
					var acc = _v4.a;
					var index = _v4.b;
					switch (el.$) {
						case 'Indexed':
							var toElAndIndex = el.a;
							var _v6 = toElAndIndex(index);
							var newEl = _v6.a;
							var newIndex = _v6.b;
							return _Utils_Tuple2(
								_Utils_ap(
									acc,
									_List_fromArray(
										[newEl])),
								newIndex);
						case 'ListOfElements':
							var els = el.a;
							return A3(
								$elm$core$List$foldl,
								toIndexedEl,
								_Utils_Tuple2(acc, index),
								els);
						default:
							return _Utils_Tuple2(
								_Utils_ap(
									acc,
									_List_fromArray(
										[el])),
								index);
					}
				});
			return A3(
				$elm$core$List$foldl,
				toIndexedEl,
				_Utils_Tuple2(_List_Nil, 0),
				unindexedElements).a;
		}();
		var elements = function () {
			var isGrid = function (el) {
				if (el.$ === 'GridElement') {
					return true;
				} else {
					return false;
				}
			};
			return A2($elm$core$List$any, isGrid, indexedElements) ? indexedElements : A2(
				$elm$core$List$cons,
				$terezka$charts$Chart$grid(_List_Nil),
				indexedElements);
		}();
		var legends_ = $terezka$charts$Chart$getLegends(elements);
		var config = A2(
			$terezka$charts$Internal$Helpers$apply,
			edits,
			{
				attrs: _List_fromArray(
					[
						$elm$svg$Svg$Attributes$style('overflow: visible;')
					]),
				domain: _List_Nil,
				events: _List_Nil,
				height: 300,
				htmlAttrs: _List_Nil,
				margin: {bottom: 0, left: 0, right: 0, top: 0},
				padding: {bottom: 0, left: 0, right: 0, top: 0},
				range: _List_Nil,
				responsive: true,
				width: 300
			});
		var plane = A2($terezka$charts$Chart$definePlane, config, elements);
		var items = A2($terezka$charts$Chart$getItems, plane, elements);
		var toEvent = function (_v2) {
			var event_ = _v2.a;
			var _v1 = event_.decoder;
			var decoder = _v1.a;
			return A2(
				$terezka$charts$Internal$Svg$Event,
				event_.name,
				decoder(items));
		};
		var tickValues = A3($terezka$charts$Chart$getTickValues, plane, items, elements);
		var _v0 = A6($terezka$charts$Chart$viewElements, config, plane, tickValues, items, legends_, elements);
		var beforeEls = _v0.a;
		var chartEls = _v0.b;
		var afterEls = _v0.c;
		return A5(
			$terezka$charts$Internal$Svg$container,
			plane,
			{
				attrs: config.attrs,
				events: A2($elm$core$List$map, toEvent, config.events),
				htmlAttrs: config.htmlAttrs,
				responsive: config.responsive
			},
			beforeEls,
			chartEls,
			afterEls);
	});
var $terezka$charts$Chart$Attributes$height = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{height: v});
	});
var $terezka$charts$Chart$Attributes$moveDown = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{yOff: config.yOff + v});
	});
var $terezka$charts$Chart$Attributes$moveUp = F2(
	function (v, config) {
		return _Utils_update(
			config,
			{yOff: config.yOff - v});
	});
var $terezka$charts$Chart$Attributes$withGrid = function (config) {
	return _Utils_update(
		config,
		{grid: true});
};
var $terezka$charts$Internal$Svg$End = {$: 'End'};
var $terezka$charts$Internal$Svg$Floats = {$: 'Floats'};
var $terezka$charts$Chart$LabelsElement = F3(
	function (a, b, c) {
		return {$: 'LabelsElement', a: a, b: b, c: c};
	});
var $terezka$charts$Internal$Svg$Start = {$: 'Start'};
var $terezka$charts$Internal$Svg$Generator = function (a) {
	return {$: 'Generator', a: a};
};
var $terezka$intervals$Intervals$Around = function (a) {
	return {$: 'Around', a: a};
};
var $terezka$intervals$Intervals$around = $terezka$intervals$Intervals$Around;
var $terezka$intervals$Intervals$ceilingTo = F2(
	function (prec, number) {
		return prec * $elm$core$Basics$ceiling(number / prec);
	});
var $terezka$intervals$Intervals$getBeginning = F2(
	function (min, interval) {
		var multiple = min / interval;
		return _Utils_eq(
			multiple,
			$elm$core$Basics$round(multiple)) ? min : A2($terezka$intervals$Intervals$ceilingTo, interval, min);
	});
var $myrho$elm_round$Round$addSign = F2(
	function (signed, str) {
		var isNotZero = A2(
			$elm$core$List$any,
			function (c) {
				return (!_Utils_eq(
					c,
					_Utils_chr('0'))) && (!_Utils_eq(
					c,
					_Utils_chr('.')));
			},
			$elm$core$String$toList(str));
		return _Utils_ap(
			(signed && isNotZero) ? '-' : '',
			str);
	});
var $myrho$elm_round$Round$increaseNum = function (_v0) {
	var head = _v0.a;
	var tail = _v0.b;
	if (_Utils_eq(
		head,
		_Utils_chr('9'))) {
		var _v1 = $elm$core$String$uncons(tail);
		if (_v1.$ === 'Nothing') {
			return '01';
		} else {
			var headtail = _v1.a;
			return A2(
				$elm$core$String$cons,
				_Utils_chr('0'),
				$myrho$elm_round$Round$increaseNum(headtail));
		}
	} else {
		var c = $elm$core$Char$toCode(head);
		return ((c >= 48) && (c < 57)) ? A2(
			$elm$core$String$cons,
			$elm$core$Char$fromCode(c + 1),
			tail) : '0';
	}
};
var $elm$core$Basics$isInfinite = _Basics_isInfinite;
var $elm$core$String$padRight = F3(
	function (n, _char, string) {
		return _Utils_ap(
			string,
			A2(
				$elm$core$String$repeat,
				n - $elm$core$String$length(string),
				$elm$core$String$fromChar(_char)));
	});
var $myrho$elm_round$Round$splitComma = function (str) {
	var _v0 = A2($elm$core$String$split, '.', str);
	if (_v0.b) {
		if (_v0.b.b) {
			var before = _v0.a;
			var _v1 = _v0.b;
			var after = _v1.a;
			return _Utils_Tuple2(before, after);
		} else {
			var before = _v0.a;
			return _Utils_Tuple2(before, '0');
		}
	} else {
		return _Utils_Tuple2('0', '0');
	}
};
var $myrho$elm_round$Round$toDecimal = function (fl) {
	var _v0 = A2(
		$elm$core$String$split,
		'e',
		$elm$core$String$fromFloat(
			$elm$core$Basics$abs(fl)));
	if (_v0.b) {
		if (_v0.b.b) {
			var num = _v0.a;
			var _v1 = _v0.b;
			var exp = _v1.a;
			var e = A2(
				$elm$core$Maybe$withDefault,
				0,
				$elm$core$String$toInt(
					A2($elm$core$String$startsWith, '+', exp) ? A2($elm$core$String$dropLeft, 1, exp) : exp));
			var _v2 = $myrho$elm_round$Round$splitComma(num);
			var before = _v2.a;
			var after = _v2.b;
			var total = _Utils_ap(before, after);
			var zeroed = (e < 0) ? A2(
				$elm$core$Maybe$withDefault,
				'0',
				A2(
					$elm$core$Maybe$map,
					function (_v3) {
						var a = _v3.a;
						var b = _v3.b;
						return a + ('.' + b);
					},
					A2(
						$elm$core$Maybe$map,
						$elm$core$Tuple$mapFirst($elm$core$String$fromChar),
						$elm$core$String$uncons(
							_Utils_ap(
								A2(
									$elm$core$String$repeat,
									$elm$core$Basics$abs(e),
									'0'),
								total))))) : A3(
				$elm$core$String$padRight,
				e + 1,
				_Utils_chr('0'),
				total);
			return _Utils_ap(
				(fl < 0) ? '-' : '',
				zeroed);
		} else {
			var num = _v0.a;
			return _Utils_ap(
				(fl < 0) ? '-' : '',
				num);
		}
	} else {
		return '';
	}
};
var $myrho$elm_round$Round$roundFun = F3(
	function (functor, s, fl) {
		if ($elm$core$Basics$isInfinite(fl) || $elm$core$Basics$isNaN(fl)) {
			return $elm$core$String$fromFloat(fl);
		} else {
			var signed = fl < 0;
			var _v0 = $myrho$elm_round$Round$splitComma(
				$myrho$elm_round$Round$toDecimal(
					$elm$core$Basics$abs(fl)));
			var before = _v0.a;
			var after = _v0.b;
			var r = $elm$core$String$length(before) + s;
			var normalized = _Utils_ap(
				A2($elm$core$String$repeat, (-r) + 1, '0'),
				A3(
					$elm$core$String$padRight,
					r,
					_Utils_chr('0'),
					_Utils_ap(before, after)));
			var totalLen = $elm$core$String$length(normalized);
			var roundDigitIndex = A2($elm$core$Basics$max, 1, r);
			var increase = A2(
				functor,
				signed,
				A3($elm$core$String$slice, roundDigitIndex, totalLen, normalized));
			var remains = A3($elm$core$String$slice, 0, roundDigitIndex, normalized);
			var num = increase ? $elm$core$String$reverse(
				A2(
					$elm$core$Maybe$withDefault,
					'1',
					A2(
						$elm$core$Maybe$map,
						$myrho$elm_round$Round$increaseNum,
						$elm$core$String$uncons(
							$elm$core$String$reverse(remains))))) : remains;
			var numLen = $elm$core$String$length(num);
			var numZeroed = (num === '0') ? num : ((s <= 0) ? _Utils_ap(
				num,
				A2(
					$elm$core$String$repeat,
					$elm$core$Basics$abs(s),
					'0')) : ((_Utils_cmp(
				s,
				$elm$core$String$length(after)) < 0) ? (A3($elm$core$String$slice, 0, numLen - s, num) + ('.' + A3($elm$core$String$slice, numLen - s, numLen, num))) : _Utils_ap(
				before + '.',
				A3(
					$elm$core$String$padRight,
					s,
					_Utils_chr('0'),
					after))));
			return A2($myrho$elm_round$Round$addSign, signed, numZeroed);
		}
	});
var $myrho$elm_round$Round$round = $myrho$elm_round$Round$roundFun(
	F2(
		function (signed, str) {
			var _v0 = $elm$core$String$uncons(str);
			if (_v0.$ === 'Nothing') {
				return false;
			} else {
				if ('5' === _v0.a.a.valueOf()) {
					if (_v0.a.b === '') {
						var _v1 = _v0.a;
						return !signed;
					} else {
						var _v2 = _v0.a;
						return true;
					}
				} else {
					var _v3 = _v0.a;
					var _int = _v3.a;
					return function (i) {
						return ((i > 53) && signed) || ((i >= 53) && (!signed));
					}(
						$elm$core$Char$toCode(_int));
				}
			}
		}));
var $terezka$intervals$Intervals$correctFloat = function (prec) {
	return A2(
		$elm$core$Basics$composeR,
		$myrho$elm_round$Round$round(prec),
		A2(
			$elm$core$Basics$composeR,
			$elm$core$String$toFloat,
			$elm$core$Maybe$withDefault(0)));
};
var $terezka$intervals$Intervals$getMultiples = F3(
	function (magnitude, allowDecimals, hasTickAmount) {
		var defaults = hasTickAmount ? _List_fromArray(
			[1, 1.2, 1.5, 2, 2.5, 3, 4, 5, 6, 8, 10]) : _List_fromArray(
			[1, 2, 2.5, 5, 10]);
		return allowDecimals ? defaults : ((magnitude === 1) ? A2(
			$elm$core$List$filter,
			function (n) {
				return _Utils_eq(
					$elm$core$Basics$round(n),
					n);
			},
			defaults) : ((magnitude <= 0.1) ? _List_fromArray(
			[1 / magnitude]) : defaults));
	});
var $terezka$intervals$Intervals$getPrecision = function (number) {
	var _v0 = A2(
		$elm$core$String$split,
		'e',
		$elm$core$String$fromFloat(number));
	if ((_v0.b && _v0.b.b) && (!_v0.b.b.b)) {
		var before = _v0.a;
		var _v1 = _v0.b;
		var after = _v1.a;
		return $elm$core$Basics$abs(
			A2(
				$elm$core$Maybe$withDefault,
				0,
				$elm$core$String$toInt(after)));
	} else {
		var _v2 = A2(
			$elm$core$String$split,
			'.',
			$elm$core$String$fromFloat(number));
		if ((_v2.b && _v2.b.b) && (!_v2.b.b.b)) {
			var before = _v2.a;
			var _v3 = _v2.b;
			var after = _v3.a;
			return $elm$core$String$length(after);
		} else {
			return 0;
		}
	}
};
var $elm$core$Basics$e = _Basics_e;
var $terezka$intervals$Intervals$toMagnitude = function (num) {
	return A2(
		$elm$core$Basics$pow,
		10,
		$elm$core$Basics$floor(
			A2($elm$core$Basics$logBase, $elm$core$Basics$e, num) / A2($elm$core$Basics$logBase, $elm$core$Basics$e, 10)));
};
var $terezka$intervals$Intervals$getInterval = F3(
	function (intervalRaw, allowDecimals, hasTickAmount) {
		var magnitude = $terezka$intervals$Intervals$toMagnitude(intervalRaw);
		var multiples = A3($terezka$intervals$Intervals$getMultiples, magnitude, allowDecimals, hasTickAmount);
		var normalized = intervalRaw / magnitude;
		var findMultipleExact = function (multiples_) {
			findMultipleExact:
			while (true) {
				if (multiples_.b) {
					var m1 = multiples_.a;
					var rest = multiples_.b;
					if (_Utils_cmp(m1 * magnitude, intervalRaw) > -1) {
						return m1;
					} else {
						var $temp$multiples_ = rest;
						multiples_ = $temp$multiples_;
						continue findMultipleExact;
					}
				} else {
					return 1;
				}
			}
		};
		var findMultiple = function (multiples_) {
			findMultiple:
			while (true) {
				if (multiples_.b) {
					if (multiples_.b.b) {
						var m1 = multiples_.a;
						var _v2 = multiples_.b;
						var m2 = _v2.a;
						var rest = _v2.b;
						if (_Utils_cmp(normalized, (m1 + m2) / 2) < 1) {
							return m1;
						} else {
							var $temp$multiples_ = A2($elm$core$List$cons, m2, rest);
							multiples_ = $temp$multiples_;
							continue findMultiple;
						}
					} else {
						var m1 = multiples_.a;
						var rest = multiples_.b;
						if (_Utils_cmp(normalized, m1) < 1) {
							return m1;
						} else {
							var $temp$multiples_ = rest;
							multiples_ = $temp$multiples_;
							continue findMultiple;
						}
					}
				} else {
					return 1;
				}
			}
		};
		var multiple = hasTickAmount ? findMultipleExact(multiples) : findMultiple(multiples);
		var precision = $terezka$intervals$Intervals$getPrecision(magnitude) + $terezka$intervals$Intervals$getPrecision(multiple);
		return A2($terezka$intervals$Intervals$correctFloat, precision, multiple * magnitude);
	});
var $terezka$intervals$Intervals$positions = F5(
	function (range, beginning, interval, m, acc) {
		positions:
		while (true) {
			var nextPosition = A2(
				$terezka$intervals$Intervals$correctFloat,
				$terezka$intervals$Intervals$getPrecision(interval),
				beginning + (m * interval));
			if (_Utils_cmp(nextPosition, range.max) > 0) {
				return acc;
			} else {
				var $temp$range = range,
					$temp$beginning = beginning,
					$temp$interval = interval,
					$temp$m = m + 1,
					$temp$acc = _Utils_ap(
					acc,
					_List_fromArray(
						[nextPosition]));
				range = $temp$range;
				beginning = $temp$beginning;
				interval = $temp$interval;
				m = $temp$m;
				acc = $temp$acc;
				continue positions;
			}
		}
	});
var $terezka$intervals$Intervals$values = F4(
	function (allowDecimals, exact, amountRough, range) {
		var intervalRough = (range.max - range.min) / amountRough;
		var interval = A3($terezka$intervals$Intervals$getInterval, intervalRough, allowDecimals, exact);
		var intervalSafe = (!interval) ? 1 : interval;
		var beginning = A2($terezka$intervals$Intervals$getBeginning, range.min, intervalSafe);
		var amountRoughSafe = (!amountRough) ? 1 : amountRough;
		return A5($terezka$intervals$Intervals$positions, range, beginning, intervalSafe, 0, _List_Nil);
	});
var $terezka$intervals$Intervals$floats = function (amount) {
	if (amount.$ === 'Exactly') {
		var number = amount.a;
		return A3($terezka$intervals$Intervals$values, true, true, number);
	} else {
		var number = amount.a;
		return A3($terezka$intervals$Intervals$values, true, false, number);
	}
};
var $terezka$charts$Internal$Svg$floats = $terezka$charts$Internal$Svg$Generator(
	F2(
		function (i, b) {
			return A2(
				$terezka$intervals$Intervals$floats,
				$terezka$intervals$Intervals$around(i),
				{max: b.max, min: b.min});
		}));
var $terezka$charts$Chart$Svg$floats = $terezka$charts$Internal$Svg$floats;
var $ryannhg$date_format$DateFormat$Language$Language = F6(
	function (toMonthName, toMonthAbbreviation, toWeekdayName, toWeekdayAbbreviation, toAmPm, toOrdinalSuffix) {
		return {toAmPm: toAmPm, toMonthAbbreviation: toMonthAbbreviation, toMonthName: toMonthName, toOrdinalSuffix: toOrdinalSuffix, toWeekdayAbbreviation: toWeekdayAbbreviation, toWeekdayName: toWeekdayName};
	});
var $ryannhg$date_format$DateFormat$Language$toEnglishAmPm = function (hour) {
	return (hour > 11) ? 'pm' : 'am';
};
var $ryannhg$date_format$DateFormat$Language$toEnglishMonthName = function (month) {
	switch (month.$) {
		case 'Jan':
			return 'January';
		case 'Feb':
			return 'February';
		case 'Mar':
			return 'March';
		case 'Apr':
			return 'April';
		case 'May':
			return 'May';
		case 'Jun':
			return 'June';
		case 'Jul':
			return 'July';
		case 'Aug':
			return 'August';
		case 'Sep':
			return 'September';
		case 'Oct':
			return 'October';
		case 'Nov':
			return 'November';
		default:
			return 'December';
	}
};
var $ryannhg$date_format$DateFormat$Language$toEnglishSuffix = function (num) {
	var _v0 = A2($elm$core$Basics$modBy, 100, num);
	switch (_v0) {
		case 11:
			return 'th';
		case 12:
			return 'th';
		case 13:
			return 'th';
		default:
			var _v1 = A2($elm$core$Basics$modBy, 10, num);
			switch (_v1) {
				case 1:
					return 'st';
				case 2:
					return 'nd';
				case 3:
					return 'rd';
				default:
					return 'th';
			}
	}
};
var $ryannhg$date_format$DateFormat$Language$toEnglishWeekdayName = function (weekday) {
	switch (weekday.$) {
		case 'Mon':
			return 'Monday';
		case 'Tue':
			return 'Tuesday';
		case 'Wed':
			return 'Wednesday';
		case 'Thu':
			return 'Thursday';
		case 'Fri':
			return 'Friday';
		case 'Sat':
			return 'Saturday';
		default:
			return 'Sunday';
	}
};
var $ryannhg$date_format$DateFormat$Language$english = A6(
	$ryannhg$date_format$DateFormat$Language$Language,
	$ryannhg$date_format$DateFormat$Language$toEnglishMonthName,
	A2(
		$elm$core$Basics$composeR,
		$ryannhg$date_format$DateFormat$Language$toEnglishMonthName,
		$elm$core$String$left(3)),
	$ryannhg$date_format$DateFormat$Language$toEnglishWeekdayName,
	A2(
		$elm$core$Basics$composeR,
		$ryannhg$date_format$DateFormat$Language$toEnglishWeekdayName,
		$elm$core$String$left(3)),
	$ryannhg$date_format$DateFormat$Language$toEnglishAmPm,
	$ryannhg$date_format$DateFormat$Language$toEnglishSuffix);
var $elm$time$Time$flooredDiv = F2(
	function (numerator, denominator) {
		return $elm$core$Basics$floor(numerator / denominator);
	});
var $elm$time$Time$toAdjustedMinutesHelp = F3(
	function (defaultOffset, posixMinutes, eras) {
		toAdjustedMinutesHelp:
		while (true) {
			if (!eras.b) {
				return posixMinutes + defaultOffset;
			} else {
				var era = eras.a;
				var olderEras = eras.b;
				if (_Utils_cmp(era.start, posixMinutes) < 0) {
					return posixMinutes + era.offset;
				} else {
					var $temp$defaultOffset = defaultOffset,
						$temp$posixMinutes = posixMinutes,
						$temp$eras = olderEras;
					defaultOffset = $temp$defaultOffset;
					posixMinutes = $temp$posixMinutes;
					eras = $temp$eras;
					continue toAdjustedMinutesHelp;
				}
			}
		}
	});
var $elm$time$Time$toAdjustedMinutes = F2(
	function (_v0, time) {
		var defaultOffset = _v0.a;
		var eras = _v0.b;
		return A3(
			$elm$time$Time$toAdjustedMinutesHelp,
			defaultOffset,
			A2(
				$elm$time$Time$flooredDiv,
				$elm$time$Time$posixToMillis(time),
				60000),
			eras);
	});
var $elm$time$Time$toHour = F2(
	function (zone, time) {
		return A2(
			$elm$core$Basics$modBy,
			24,
			A2(
				$elm$time$Time$flooredDiv,
				A2($elm$time$Time$toAdjustedMinutes, zone, time),
				60));
	});
var $ryannhg$date_format$DateFormat$amPm = F3(
	function (language, zone, posix) {
		return language.toAmPm(
			A2($elm$time$Time$toHour, zone, posix));
	});
var $elm$time$Time$toCivil = function (minutes) {
	var rawDay = A2($elm$time$Time$flooredDiv, minutes, 60 * 24) + 719468;
	var era = (((rawDay >= 0) ? rawDay : (rawDay - 146096)) / 146097) | 0;
	var dayOfEra = rawDay - (era * 146097);
	var yearOfEra = ((((dayOfEra - ((dayOfEra / 1460) | 0)) + ((dayOfEra / 36524) | 0)) - ((dayOfEra / 146096) | 0)) / 365) | 0;
	var dayOfYear = dayOfEra - (((365 * yearOfEra) + ((yearOfEra / 4) | 0)) - ((yearOfEra / 100) | 0));
	var mp = (((5 * dayOfYear) + 2) / 153) | 0;
	var month = mp + ((mp < 10) ? 3 : (-9));
	var year = yearOfEra + (era * 400);
	return {
		day: (dayOfYear - ((((153 * mp) + 2) / 5) | 0)) + 1,
		month: month,
		year: year + ((month <= 2) ? 1 : 0)
	};
};
var $elm$time$Time$toDay = F2(
	function (zone, time) {
		return $elm$time$Time$toCivil(
			A2($elm$time$Time$toAdjustedMinutes, zone, time)).day;
	});
var $ryannhg$date_format$DateFormat$dayOfMonth = $elm$time$Time$toDay;
var $elm$time$Time$Sun = {$: 'Sun'};
var $elm$time$Time$Fri = {$: 'Fri'};
var $elm$time$Time$Mon = {$: 'Mon'};
var $elm$time$Time$Sat = {$: 'Sat'};
var $elm$time$Time$Thu = {$: 'Thu'};
var $elm$time$Time$Tue = {$: 'Tue'};
var $elm$time$Time$Wed = {$: 'Wed'};
var $ryannhg$date_format$DateFormat$days = _List_fromArray(
	[$elm$time$Time$Sun, $elm$time$Time$Mon, $elm$time$Time$Tue, $elm$time$Time$Wed, $elm$time$Time$Thu, $elm$time$Time$Fri, $elm$time$Time$Sat]);
var $elm$time$Time$toWeekday = F2(
	function (zone, time) {
		var _v0 = A2(
			$elm$core$Basics$modBy,
			7,
			A2(
				$elm$time$Time$flooredDiv,
				A2($elm$time$Time$toAdjustedMinutes, zone, time),
				60 * 24));
		switch (_v0) {
			case 0:
				return $elm$time$Time$Thu;
			case 1:
				return $elm$time$Time$Fri;
			case 2:
				return $elm$time$Time$Sat;
			case 3:
				return $elm$time$Time$Sun;
			case 4:
				return $elm$time$Time$Mon;
			case 5:
				return $elm$time$Time$Tue;
			default:
				return $elm$time$Time$Wed;
		}
	});
var $ryannhg$date_format$DateFormat$dayOfWeek = F2(
	function (zone, posix) {
		return function (_v1) {
			var i = _v1.a;
			return i;
		}(
			A2(
				$elm$core$Maybe$withDefault,
				_Utils_Tuple2(0, $elm$time$Time$Sun),
				$elm$core$List$head(
					A2(
						$elm$core$List$filter,
						function (_v0) {
							var day = _v0.b;
							return _Utils_eq(
								day,
								A2($elm$time$Time$toWeekday, zone, posix));
						},
						A2(
							$elm$core$List$indexedMap,
							F2(
								function (i, day) {
									return _Utils_Tuple2(i, day);
								}),
							$ryannhg$date_format$DateFormat$days)))));
	});
var $ryannhg$date_format$DateFormat$isLeapYear = function (year_) {
	return (!(!A2($elm$core$Basics$modBy, 4, year_))) ? false : ((!(!A2($elm$core$Basics$modBy, 100, year_))) ? true : ((!(!A2($elm$core$Basics$modBy, 400, year_))) ? false : true));
};
var $ryannhg$date_format$DateFormat$daysInMonth = F2(
	function (year_, month) {
		switch (month.$) {
			case 'Jan':
				return 31;
			case 'Feb':
				return $ryannhg$date_format$DateFormat$isLeapYear(year_) ? 29 : 28;
			case 'Mar':
				return 31;
			case 'Apr':
				return 30;
			case 'May':
				return 31;
			case 'Jun':
				return 30;
			case 'Jul':
				return 31;
			case 'Aug':
				return 31;
			case 'Sep':
				return 30;
			case 'Oct':
				return 31;
			case 'Nov':
				return 30;
			default:
				return 31;
		}
	});
var $elm$time$Time$Jan = {$: 'Jan'};
var $elm$time$Time$Apr = {$: 'Apr'};
var $elm$time$Time$Aug = {$: 'Aug'};
var $elm$time$Time$Dec = {$: 'Dec'};
var $elm$time$Time$Feb = {$: 'Feb'};
var $elm$time$Time$Jul = {$: 'Jul'};
var $elm$time$Time$Jun = {$: 'Jun'};
var $elm$time$Time$Mar = {$: 'Mar'};
var $elm$time$Time$May = {$: 'May'};
var $elm$time$Time$Nov = {$: 'Nov'};
var $elm$time$Time$Oct = {$: 'Oct'};
var $elm$time$Time$Sep = {$: 'Sep'};
var $ryannhg$date_format$DateFormat$months = _List_fromArray(
	[$elm$time$Time$Jan, $elm$time$Time$Feb, $elm$time$Time$Mar, $elm$time$Time$Apr, $elm$time$Time$May, $elm$time$Time$Jun, $elm$time$Time$Jul, $elm$time$Time$Aug, $elm$time$Time$Sep, $elm$time$Time$Oct, $elm$time$Time$Nov, $elm$time$Time$Dec]);
var $elm$time$Time$toMonth = F2(
	function (zone, time) {
		var _v0 = $elm$time$Time$toCivil(
			A2($elm$time$Time$toAdjustedMinutes, zone, time)).month;
		switch (_v0) {
			case 1:
				return $elm$time$Time$Jan;
			case 2:
				return $elm$time$Time$Feb;
			case 3:
				return $elm$time$Time$Mar;
			case 4:
				return $elm$time$Time$Apr;
			case 5:
				return $elm$time$Time$May;
			case 6:
				return $elm$time$Time$Jun;
			case 7:
				return $elm$time$Time$Jul;
			case 8:
				return $elm$time$Time$Aug;
			case 9:
				return $elm$time$Time$Sep;
			case 10:
				return $elm$time$Time$Oct;
			case 11:
				return $elm$time$Time$Nov;
			default:
				return $elm$time$Time$Dec;
		}
	});
var $ryannhg$date_format$DateFormat$monthPair = F2(
	function (zone, posix) {
		return A2(
			$elm$core$Maybe$withDefault,
			_Utils_Tuple2(0, $elm$time$Time$Jan),
			$elm$core$List$head(
				A2(
					$elm$core$List$filter,
					function (_v0) {
						var i = _v0.a;
						var m = _v0.b;
						return _Utils_eq(
							m,
							A2($elm$time$Time$toMonth, zone, posix));
					},
					A2(
						$elm$core$List$indexedMap,
						F2(
							function (a, b) {
								return _Utils_Tuple2(a, b);
							}),
						$ryannhg$date_format$DateFormat$months))));
	});
var $ryannhg$date_format$DateFormat$monthNumber_ = F2(
	function (zone, posix) {
		return 1 + function (_v0) {
			var i = _v0.a;
			var m = _v0.b;
			return i;
		}(
			A2($ryannhg$date_format$DateFormat$monthPair, zone, posix));
	});
var $elm$core$List$sum = function (numbers) {
	return A3($elm$core$List$foldl, $elm$core$Basics$add, 0, numbers);
};
var $elm$time$Time$toYear = F2(
	function (zone, time) {
		return $elm$time$Time$toCivil(
			A2($elm$time$Time$toAdjustedMinutes, zone, time)).year;
	});
var $ryannhg$date_format$DateFormat$dayOfYear = F2(
	function (zone, posix) {
		var monthsBeforeThisOne = A2(
			$elm$core$List$take,
			A2($ryannhg$date_format$DateFormat$monthNumber_, zone, posix) - 1,
			$ryannhg$date_format$DateFormat$months);
		var daysBeforeThisMonth = $elm$core$List$sum(
			A2(
				$elm$core$List$map,
				$ryannhg$date_format$DateFormat$daysInMonth(
					A2($elm$time$Time$toYear, zone, posix)),
				monthsBeforeThisOne));
		return daysBeforeThisMonth + A2($ryannhg$date_format$DateFormat$dayOfMonth, zone, posix);
	});
var $ryannhg$date_format$DateFormat$quarter = F2(
	function (zone, posix) {
		return (A2($ryannhg$date_format$DateFormat$monthNumber_, zone, posix) / 4) | 0;
	});
var $ryannhg$date_format$DateFormat$toFixedLength = F2(
	function (totalChars, num) {
		var numStr = $elm$core$String$fromInt(num);
		var numZerosNeeded = totalChars - $elm$core$String$length(numStr);
		var zeros = A2(
			$elm$core$String$join,
			'',
			A2(
				$elm$core$List$map,
				function (_v0) {
					return '0';
				},
				A2($elm$core$List$range, 1, numZerosNeeded)));
		return _Utils_ap(zeros, numStr);
	});
var $elm$time$Time$toMillis = F2(
	function (_v0, time) {
		return A2(
			$elm$core$Basics$modBy,
			1000,
			$elm$time$Time$posixToMillis(time));
	});
var $elm$time$Time$toMinute = F2(
	function (zone, time) {
		return A2(
			$elm$core$Basics$modBy,
			60,
			A2($elm$time$Time$toAdjustedMinutes, zone, time));
	});
var $ryannhg$date_format$DateFormat$toNonMilitary = function (num) {
	return (!num) ? 12 : ((num <= 12) ? num : (num - 12));
};
var $elm$time$Time$toSecond = F2(
	function (_v0, time) {
		return A2(
			$elm$core$Basics$modBy,
			60,
			A2(
				$elm$time$Time$flooredDiv,
				$elm$time$Time$posixToMillis(time),
				1000));
	});
var $ryannhg$date_format$DateFormat$millisecondsPerYear = $elm$core$Basics$round((((1000 * 60) * 60) * 24) * 365.25);
var $ryannhg$date_format$DateFormat$firstDayOfYear = F2(
	function (zone, time) {
		return $elm$time$Time$millisToPosix(
			$ryannhg$date_format$DateFormat$millisecondsPerYear * A2($elm$time$Time$toYear, zone, time));
	});
var $ryannhg$date_format$DateFormat$weekOfYear = F2(
	function (zone, posix) {
		var firstDay = A2($ryannhg$date_format$DateFormat$firstDayOfYear, zone, posix);
		var firstDayOffset = A2($ryannhg$date_format$DateFormat$dayOfWeek, zone, firstDay);
		var daysSoFar = A2($ryannhg$date_format$DateFormat$dayOfYear, zone, posix);
		return (((daysSoFar + firstDayOffset) / 7) | 0) + 1;
	});
var $ryannhg$date_format$DateFormat$year = F2(
	function (zone, time) {
		return $elm$core$String$fromInt(
			A2($elm$time$Time$toYear, zone, time));
	});
var $ryannhg$date_format$DateFormat$piece = F4(
	function (language, zone, posix, token) {
		switch (token.$) {
			case 'MonthNumber':
				return $elm$core$String$fromInt(
					A2($ryannhg$date_format$DateFormat$monthNumber_, zone, posix));
			case 'MonthSuffix':
				return function (num) {
					return _Utils_ap(
						$elm$core$String$fromInt(num),
						language.toOrdinalSuffix(num));
				}(
					A2($ryannhg$date_format$DateFormat$monthNumber_, zone, posix));
			case 'MonthFixed':
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					2,
					A2($ryannhg$date_format$DateFormat$monthNumber_, zone, posix));
			case 'MonthNameAbbreviated':
				return language.toMonthAbbreviation(
					A2($elm$time$Time$toMonth, zone, posix));
			case 'MonthNameFull':
				return language.toMonthName(
					A2($elm$time$Time$toMonth, zone, posix));
			case 'QuarterNumber':
				return $elm$core$String$fromInt(
					1 + A2($ryannhg$date_format$DateFormat$quarter, zone, posix));
			case 'QuarterSuffix':
				return function (num) {
					return _Utils_ap(
						$elm$core$String$fromInt(num),
						language.toOrdinalSuffix(num));
				}(
					1 + A2($ryannhg$date_format$DateFormat$quarter, zone, posix));
			case 'DayOfMonthNumber':
				return $elm$core$String$fromInt(
					A2($ryannhg$date_format$DateFormat$dayOfMonth, zone, posix));
			case 'DayOfMonthSuffix':
				return function (num) {
					return _Utils_ap(
						$elm$core$String$fromInt(num),
						language.toOrdinalSuffix(num));
				}(
					A2($ryannhg$date_format$DateFormat$dayOfMonth, zone, posix));
			case 'DayOfMonthFixed':
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					2,
					A2($ryannhg$date_format$DateFormat$dayOfMonth, zone, posix));
			case 'DayOfYearNumber':
				return $elm$core$String$fromInt(
					A2($ryannhg$date_format$DateFormat$dayOfYear, zone, posix));
			case 'DayOfYearSuffix':
				return function (num) {
					return _Utils_ap(
						$elm$core$String$fromInt(num),
						language.toOrdinalSuffix(num));
				}(
					A2($ryannhg$date_format$DateFormat$dayOfYear, zone, posix));
			case 'DayOfYearFixed':
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					3,
					A2($ryannhg$date_format$DateFormat$dayOfYear, zone, posix));
			case 'DayOfWeekNumber':
				return $elm$core$String$fromInt(
					A2($ryannhg$date_format$DateFormat$dayOfWeek, zone, posix));
			case 'DayOfWeekSuffix':
				return function (num) {
					return _Utils_ap(
						$elm$core$String$fromInt(num),
						language.toOrdinalSuffix(num));
				}(
					A2($ryannhg$date_format$DateFormat$dayOfWeek, zone, posix));
			case 'DayOfWeekNameAbbreviated':
				return language.toWeekdayAbbreviation(
					A2($elm$time$Time$toWeekday, zone, posix));
			case 'DayOfWeekNameFull':
				return language.toWeekdayName(
					A2($elm$time$Time$toWeekday, zone, posix));
			case 'WeekOfYearNumber':
				return $elm$core$String$fromInt(
					A2($ryannhg$date_format$DateFormat$weekOfYear, zone, posix));
			case 'WeekOfYearSuffix':
				return function (num) {
					return _Utils_ap(
						$elm$core$String$fromInt(num),
						language.toOrdinalSuffix(num));
				}(
					A2($ryannhg$date_format$DateFormat$weekOfYear, zone, posix));
			case 'WeekOfYearFixed':
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					2,
					A2($ryannhg$date_format$DateFormat$weekOfYear, zone, posix));
			case 'YearNumberLastTwo':
				return A2(
					$elm$core$String$right,
					2,
					A2($ryannhg$date_format$DateFormat$year, zone, posix));
			case 'YearNumber':
				return A2($ryannhg$date_format$DateFormat$year, zone, posix);
			case 'AmPmUppercase':
				return $elm$core$String$toUpper(
					A3($ryannhg$date_format$DateFormat$amPm, language, zone, posix));
			case 'AmPmLowercase':
				return $elm$core$String$toLower(
					A3($ryannhg$date_format$DateFormat$amPm, language, zone, posix));
			case 'HourMilitaryNumber':
				return $elm$core$String$fromInt(
					A2($elm$time$Time$toHour, zone, posix));
			case 'HourMilitaryFixed':
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					2,
					A2($elm$time$Time$toHour, zone, posix));
			case 'HourNumber':
				return $elm$core$String$fromInt(
					$ryannhg$date_format$DateFormat$toNonMilitary(
						A2($elm$time$Time$toHour, zone, posix)));
			case 'HourFixed':
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					2,
					$ryannhg$date_format$DateFormat$toNonMilitary(
						A2($elm$time$Time$toHour, zone, posix)));
			case 'HourMilitaryFromOneNumber':
				return $elm$core$String$fromInt(
					1 + A2($elm$time$Time$toHour, zone, posix));
			case 'HourMilitaryFromOneFixed':
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					2,
					1 + A2($elm$time$Time$toHour, zone, posix));
			case 'MinuteNumber':
				return $elm$core$String$fromInt(
					A2($elm$time$Time$toMinute, zone, posix));
			case 'MinuteFixed':
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					2,
					A2($elm$time$Time$toMinute, zone, posix));
			case 'SecondNumber':
				return $elm$core$String$fromInt(
					A2($elm$time$Time$toSecond, zone, posix));
			case 'SecondFixed':
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					2,
					A2($elm$time$Time$toSecond, zone, posix));
			case 'MillisecondNumber':
				return $elm$core$String$fromInt(
					A2($elm$time$Time$toMillis, zone, posix));
			case 'MillisecondFixed':
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					3,
					A2($elm$time$Time$toMillis, zone, posix));
			default:
				var string = token.a;
				return string;
		}
	});
var $ryannhg$date_format$DateFormat$formatWithLanguage = F4(
	function (language, tokens, zone, time) {
		return A2(
			$elm$core$String$join,
			'',
			A2(
				$elm$core$List$map,
				A3($ryannhg$date_format$DateFormat$piece, language, zone, time),
				tokens));
	});
var $ryannhg$date_format$DateFormat$format = $ryannhg$date_format$DateFormat$formatWithLanguage($ryannhg$date_format$DateFormat$Language$english);
var $ryannhg$date_format$DateFormat$HourMilitaryFixed = {$: 'HourMilitaryFixed'};
var $ryannhg$date_format$DateFormat$hourMilitaryFixed = $ryannhg$date_format$DateFormat$HourMilitaryFixed;
var $ryannhg$date_format$DateFormat$MinuteFixed = {$: 'MinuteFixed'};
var $ryannhg$date_format$DateFormat$minuteFixed = $ryannhg$date_format$DateFormat$MinuteFixed;
var $ryannhg$date_format$DateFormat$Text = function (a) {
	return {$: 'Text', a: a};
};
var $ryannhg$date_format$DateFormat$text = $ryannhg$date_format$DateFormat$Text;
var $terezka$charts$Internal$Svg$formatClock = $ryannhg$date_format$DateFormat$format(
	_List_fromArray(
		[
			$ryannhg$date_format$DateFormat$hourMilitaryFixed,
			$ryannhg$date_format$DateFormat$text(':'),
			$ryannhg$date_format$DateFormat$minuteFixed
		]));
var $ryannhg$date_format$DateFormat$MillisecondFixed = {$: 'MillisecondFixed'};
var $ryannhg$date_format$DateFormat$millisecondFixed = $ryannhg$date_format$DateFormat$MillisecondFixed;
var $ryannhg$date_format$DateFormat$SecondFixed = {$: 'SecondFixed'};
var $ryannhg$date_format$DateFormat$secondFixed = $ryannhg$date_format$DateFormat$SecondFixed;
var $terezka$charts$Internal$Svg$formatClockMillis = $ryannhg$date_format$DateFormat$format(
	_List_fromArray(
		[
			$ryannhg$date_format$DateFormat$hourMilitaryFixed,
			$ryannhg$date_format$DateFormat$text(':'),
			$ryannhg$date_format$DateFormat$minuteFixed,
			$ryannhg$date_format$DateFormat$text(':'),
			$ryannhg$date_format$DateFormat$secondFixed,
			$ryannhg$date_format$DateFormat$text(':'),
			$ryannhg$date_format$DateFormat$millisecondFixed
		]));
var $terezka$charts$Internal$Svg$formatClockSecond = $ryannhg$date_format$DateFormat$format(
	_List_fromArray(
		[
			$ryannhg$date_format$DateFormat$hourMilitaryFixed,
			$ryannhg$date_format$DateFormat$text(':'),
			$ryannhg$date_format$DateFormat$minuteFixed,
			$ryannhg$date_format$DateFormat$text(':'),
			$ryannhg$date_format$DateFormat$secondFixed
		]));
var $ryannhg$date_format$DateFormat$DayOfMonthNumber = {$: 'DayOfMonthNumber'};
var $ryannhg$date_format$DateFormat$dayOfMonthNumber = $ryannhg$date_format$DateFormat$DayOfMonthNumber;
var $ryannhg$date_format$DateFormat$MonthNumber = {$: 'MonthNumber'};
var $ryannhg$date_format$DateFormat$monthNumber = $ryannhg$date_format$DateFormat$MonthNumber;
var $terezka$charts$Internal$Svg$formatDate = $ryannhg$date_format$DateFormat$format(
	_List_fromArray(
		[
			$ryannhg$date_format$DateFormat$monthNumber,
			$ryannhg$date_format$DateFormat$text('/'),
			$ryannhg$date_format$DateFormat$dayOfMonthNumber
		]));
var $ryannhg$date_format$DateFormat$MonthNameAbbreviated = {$: 'MonthNameAbbreviated'};
var $ryannhg$date_format$DateFormat$monthNameAbbreviated = $ryannhg$date_format$DateFormat$MonthNameAbbreviated;
var $terezka$charts$Internal$Svg$formatMonth = $ryannhg$date_format$DateFormat$format(
	_List_fromArray(
		[$ryannhg$date_format$DateFormat$monthNameAbbreviated]));
var $ryannhg$date_format$DateFormat$DayOfWeekNameFull = {$: 'DayOfWeekNameFull'};
var $ryannhg$date_format$DateFormat$dayOfWeekNameFull = $ryannhg$date_format$DateFormat$DayOfWeekNameFull;
var $terezka$charts$Internal$Svg$formatWeekday = $ryannhg$date_format$DateFormat$format(
	_List_fromArray(
		[$ryannhg$date_format$DateFormat$dayOfWeekNameFull]));
var $ryannhg$date_format$DateFormat$YearNumber = {$: 'YearNumber'};
var $ryannhg$date_format$DateFormat$yearNumber = $ryannhg$date_format$DateFormat$YearNumber;
var $terezka$charts$Internal$Svg$formatYear = $ryannhg$date_format$DateFormat$format(
	_List_fromArray(
		[$ryannhg$date_format$DateFormat$yearNumber]));
var $terezka$charts$Internal$Svg$formatTime = F2(
	function (zone, time) {
		var _v0 = A2($elm$core$Maybe$withDefault, time.unit, time.change);
		switch (_v0.$) {
			case 'Millisecond':
				return A2($terezka$charts$Internal$Svg$formatClockMillis, zone, time.timestamp);
			case 'Second':
				return A2($terezka$charts$Internal$Svg$formatClockSecond, zone, time.timestamp);
			case 'Minute':
				return A2($terezka$charts$Internal$Svg$formatClock, zone, time.timestamp);
			case 'Hour':
				return A2($terezka$charts$Internal$Svg$formatClock, zone, time.timestamp);
			case 'Day':
				return (time.multiple === 7) ? A2($terezka$charts$Internal$Svg$formatWeekday, zone, time.timestamp) : A2($terezka$charts$Internal$Svg$formatDate, zone, time.timestamp);
			case 'Month':
				return A2($terezka$charts$Internal$Svg$formatMonth, zone, time.timestamp);
			default:
				return A2($terezka$charts$Internal$Svg$formatYear, zone, time.timestamp);
		}
	});
var $terezka$charts$Chart$Svg$formatTime = $terezka$charts$Internal$Svg$formatTime;
var $terezka$charts$Internal$Svg$generate = F3(
	function (amount, _v0, limits) {
		var func = _v0.a;
		return A2(func, amount, limits);
	});
var $terezka$charts$Chart$Svg$generate = $terezka$charts$Internal$Svg$generate;
var $terezka$intervals$Intervals$ints = F2(
	function (amount, range) {
		return A2(
			$elm$core$List$map,
			$elm$core$Basics$round,
			function () {
				if (amount.$ === 'Exactly') {
					var number = amount.a;
					return A4($terezka$intervals$Intervals$values, false, true, number, range);
				} else {
					var number = amount.a;
					return A4($terezka$intervals$Intervals$values, false, false, number, range);
				}
			}());
	});
var $terezka$charts$Internal$Svg$ints = $terezka$charts$Internal$Svg$Generator(
	F2(
		function (i, b) {
			return A2(
				$terezka$intervals$Intervals$ints,
				$terezka$intervals$Intervals$around(i),
				{max: b.max, min: b.min});
		}));
var $terezka$charts$Chart$Svg$ints = $terezka$charts$Internal$Svg$ints;
var $terezka$intervals$Intervals$Day = {$: 'Day'};
var $terezka$intervals$Intervals$Hour = {$: 'Hour'};
var $terezka$intervals$Intervals$Millisecond = {$: 'Millisecond'};
var $terezka$intervals$Intervals$Minute = {$: 'Minute'};
var $terezka$intervals$Intervals$Month = {$: 'Month'};
var $terezka$intervals$Intervals$Second = {$: 'Second'};
var $terezka$intervals$Intervals$Year = {$: 'Year'};
var $justinmimbs$time_extra$Time$Extra$Day = {$: 'Day'};
var $justinmimbs$date$Date$Days = {$: 'Days'};
var $justinmimbs$time_extra$Time$Extra$Millisecond = {$: 'Millisecond'};
var $justinmimbs$time_extra$Time$Extra$Month = {$: 'Month'};
var $justinmimbs$date$Date$Months = {$: 'Months'};
var $justinmimbs$date$Date$RD = function (a) {
	return {$: 'RD', a: a};
};
var $justinmimbs$date$Date$isLeapYear = function (y) {
	return ((!A2($elm$core$Basics$modBy, 4, y)) && (!(!A2($elm$core$Basics$modBy, 100, y)))) || (!A2($elm$core$Basics$modBy, 400, y));
};
var $justinmimbs$date$Date$daysBeforeMonth = F2(
	function (y, m) {
		var leapDays = $justinmimbs$date$Date$isLeapYear(y) ? 1 : 0;
		switch (m.$) {
			case 'Jan':
				return 0;
			case 'Feb':
				return 31;
			case 'Mar':
				return 59 + leapDays;
			case 'Apr':
				return 90 + leapDays;
			case 'May':
				return 120 + leapDays;
			case 'Jun':
				return 151 + leapDays;
			case 'Jul':
				return 181 + leapDays;
			case 'Aug':
				return 212 + leapDays;
			case 'Sep':
				return 243 + leapDays;
			case 'Oct':
				return 273 + leapDays;
			case 'Nov':
				return 304 + leapDays;
			default:
				return 334 + leapDays;
		}
	});
var $justinmimbs$date$Date$floorDiv = F2(
	function (a, b) {
		return $elm$core$Basics$floor(a / b);
	});
var $justinmimbs$date$Date$daysBeforeYear = function (y1) {
	var y = y1 - 1;
	var leapYears = (A2($justinmimbs$date$Date$floorDiv, y, 4) - A2($justinmimbs$date$Date$floorDiv, y, 100)) + A2($justinmimbs$date$Date$floorDiv, y, 400);
	return (365 * y) + leapYears;
};
var $justinmimbs$date$Date$daysInMonth = F2(
	function (y, m) {
		switch (m.$) {
			case 'Jan':
				return 31;
			case 'Feb':
				return $justinmimbs$date$Date$isLeapYear(y) ? 29 : 28;
			case 'Mar':
				return 31;
			case 'Apr':
				return 30;
			case 'May':
				return 31;
			case 'Jun':
				return 30;
			case 'Jul':
				return 31;
			case 'Aug':
				return 31;
			case 'Sep':
				return 30;
			case 'Oct':
				return 31;
			case 'Nov':
				return 30;
			default:
				return 31;
		}
	});
var $justinmimbs$date$Date$monthToNumber = function (m) {
	switch (m.$) {
		case 'Jan':
			return 1;
		case 'Feb':
			return 2;
		case 'Mar':
			return 3;
		case 'Apr':
			return 4;
		case 'May':
			return 5;
		case 'Jun':
			return 6;
		case 'Jul':
			return 7;
		case 'Aug':
			return 8;
		case 'Sep':
			return 9;
		case 'Oct':
			return 10;
		case 'Nov':
			return 11;
		default:
			return 12;
	}
};
var $justinmimbs$date$Date$numberToMonth = function (mn) {
	var _v0 = A2($elm$core$Basics$max, 1, mn);
	switch (_v0) {
		case 1:
			return $elm$time$Time$Jan;
		case 2:
			return $elm$time$Time$Feb;
		case 3:
			return $elm$time$Time$Mar;
		case 4:
			return $elm$time$Time$Apr;
		case 5:
			return $elm$time$Time$May;
		case 6:
			return $elm$time$Time$Jun;
		case 7:
			return $elm$time$Time$Jul;
		case 8:
			return $elm$time$Time$Aug;
		case 9:
			return $elm$time$Time$Sep;
		case 10:
			return $elm$time$Time$Oct;
		case 11:
			return $elm$time$Time$Nov;
		default:
			return $elm$time$Time$Dec;
	}
};
var $justinmimbs$date$Date$toCalendarDateHelp = F3(
	function (y, m, d) {
		toCalendarDateHelp:
		while (true) {
			var monthDays = A2($justinmimbs$date$Date$daysInMonth, y, m);
			var mn = $justinmimbs$date$Date$monthToNumber(m);
			if ((mn < 12) && (_Utils_cmp(d, monthDays) > 0)) {
				var $temp$y = y,
					$temp$m = $justinmimbs$date$Date$numberToMonth(mn + 1),
					$temp$d = d - monthDays;
				y = $temp$y;
				m = $temp$m;
				d = $temp$d;
				continue toCalendarDateHelp;
			} else {
				return {day: d, month: m, year: y};
			}
		}
	});
var $justinmimbs$date$Date$divWithRemainder = F2(
	function (a, b) {
		return _Utils_Tuple2(
			A2($justinmimbs$date$Date$floorDiv, a, b),
			A2($elm$core$Basics$modBy, b, a));
	});
var $justinmimbs$date$Date$year = function (_v0) {
	var rd = _v0.a;
	var _v1 = A2($justinmimbs$date$Date$divWithRemainder, rd, 146097);
	var n400 = _v1.a;
	var r400 = _v1.b;
	var _v2 = A2($justinmimbs$date$Date$divWithRemainder, r400, 36524);
	var n100 = _v2.a;
	var r100 = _v2.b;
	var _v3 = A2($justinmimbs$date$Date$divWithRemainder, r100, 1461);
	var n4 = _v3.a;
	var r4 = _v3.b;
	var _v4 = A2($justinmimbs$date$Date$divWithRemainder, r4, 365);
	var n1 = _v4.a;
	var r1 = _v4.b;
	var n = (!r1) ? 0 : 1;
	return ((((n400 * 400) + (n100 * 100)) + (n4 * 4)) + n1) + n;
};
var $justinmimbs$date$Date$toOrdinalDate = function (_v0) {
	var rd = _v0.a;
	var y = $justinmimbs$date$Date$year(
		$justinmimbs$date$Date$RD(rd));
	return {
		ordinalDay: rd - $justinmimbs$date$Date$daysBeforeYear(y),
		year: y
	};
};
var $justinmimbs$date$Date$toCalendarDate = function (_v0) {
	var rd = _v0.a;
	var date = $justinmimbs$date$Date$toOrdinalDate(
		$justinmimbs$date$Date$RD(rd));
	return A3($justinmimbs$date$Date$toCalendarDateHelp, date.year, $elm$time$Time$Jan, date.ordinalDay);
};
var $justinmimbs$date$Date$add = F3(
	function (unit, n, _v0) {
		var rd = _v0.a;
		switch (unit.$) {
			case 'Years':
				return A3(
					$justinmimbs$date$Date$add,
					$justinmimbs$date$Date$Months,
					12 * n,
					$justinmimbs$date$Date$RD(rd));
			case 'Months':
				var date = $justinmimbs$date$Date$toCalendarDate(
					$justinmimbs$date$Date$RD(rd));
				var wholeMonths = ((12 * (date.year - 1)) + ($justinmimbs$date$Date$monthToNumber(date.month) - 1)) + n;
				var m = $justinmimbs$date$Date$numberToMonth(
					A2($elm$core$Basics$modBy, 12, wholeMonths) + 1);
				var y = A2($justinmimbs$date$Date$floorDiv, wholeMonths, 12) + 1;
				return $justinmimbs$date$Date$RD(
					($justinmimbs$date$Date$daysBeforeYear(y) + A2($justinmimbs$date$Date$daysBeforeMonth, y, m)) + A2(
						$elm$core$Basics$min,
						date.day,
						A2($justinmimbs$date$Date$daysInMonth, y, m)));
			case 'Weeks':
				return $justinmimbs$date$Date$RD(rd + (7 * n));
			default:
				return $justinmimbs$date$Date$RD(rd + n);
		}
	});
var $justinmimbs$date$Date$fromCalendarDate = F3(
	function (y, m, d) {
		return $justinmimbs$date$Date$RD(
			($justinmimbs$date$Date$daysBeforeYear(y) + A2($justinmimbs$date$Date$daysBeforeMonth, y, m)) + A3(
				$elm$core$Basics$clamp,
				1,
				A2($justinmimbs$date$Date$daysInMonth, y, m),
				d));
	});
var $justinmimbs$date$Date$fromPosix = F2(
	function (zone, posix) {
		return A3(
			$justinmimbs$date$Date$fromCalendarDate,
			A2($elm$time$Time$toYear, zone, posix),
			A2($elm$time$Time$toMonth, zone, posix),
			A2($elm$time$Time$toDay, zone, posix));
	});
var $justinmimbs$date$Date$toRataDie = function (_v0) {
	var rd = _v0.a;
	return rd;
};
var $justinmimbs$time_extra$Time$Extra$dateToMillis = function (date) {
	var daysSinceEpoch = $justinmimbs$date$Date$toRataDie(date) - 719163;
	return daysSinceEpoch * 86400000;
};
var $justinmimbs$time_extra$Time$Extra$timeFromClock = F4(
	function (hour, minute, second, millisecond) {
		return (((hour * 3600000) + (minute * 60000)) + (second * 1000)) + millisecond;
	});
var $justinmimbs$time_extra$Time$Extra$timeFromPosix = F2(
	function (zone, posix) {
		return A4(
			$justinmimbs$time_extra$Time$Extra$timeFromClock,
			A2($elm$time$Time$toHour, zone, posix),
			A2($elm$time$Time$toMinute, zone, posix),
			A2($elm$time$Time$toSecond, zone, posix),
			A2($elm$time$Time$toMillis, zone, posix));
	});
var $justinmimbs$time_extra$Time$Extra$toOffset = F2(
	function (zone, posix) {
		var millis = $elm$time$Time$posixToMillis(posix);
		var localMillis = $justinmimbs$time_extra$Time$Extra$dateToMillis(
			A2($justinmimbs$date$Date$fromPosix, zone, posix)) + A2($justinmimbs$time_extra$Time$Extra$timeFromPosix, zone, posix);
		return ((localMillis - millis) / 60000) | 0;
	});
var $justinmimbs$time_extra$Time$Extra$posixFromDateTime = F3(
	function (zone, date, time) {
		var millis = $justinmimbs$time_extra$Time$Extra$dateToMillis(date) + time;
		var offset0 = A2(
			$justinmimbs$time_extra$Time$Extra$toOffset,
			zone,
			$elm$time$Time$millisToPosix(millis));
		var posix1 = $elm$time$Time$millisToPosix(millis - (offset0 * 60000));
		var offset1 = A2($justinmimbs$time_extra$Time$Extra$toOffset, zone, posix1);
		if (_Utils_eq(offset0, offset1)) {
			return posix1;
		} else {
			var posix2 = $elm$time$Time$millisToPosix(millis - (offset1 * 60000));
			var offset2 = A2($justinmimbs$time_extra$Time$Extra$toOffset, zone, posix2);
			return _Utils_eq(offset1, offset2) ? posix2 : posix1;
		}
	});
var $justinmimbs$time_extra$Time$Extra$add = F4(
	function (interval, n, zone, posix) {
		add:
		while (true) {
			switch (interval.$) {
				case 'Millisecond':
					return $elm$time$Time$millisToPosix(
						$elm$time$Time$posixToMillis(posix) + n);
				case 'Second':
					var $temp$interval = $justinmimbs$time_extra$Time$Extra$Millisecond,
						$temp$n = n * 1000,
						$temp$zone = zone,
						$temp$posix = posix;
					interval = $temp$interval;
					n = $temp$n;
					zone = $temp$zone;
					posix = $temp$posix;
					continue add;
				case 'Minute':
					var $temp$interval = $justinmimbs$time_extra$Time$Extra$Millisecond,
						$temp$n = n * 60000,
						$temp$zone = zone,
						$temp$posix = posix;
					interval = $temp$interval;
					n = $temp$n;
					zone = $temp$zone;
					posix = $temp$posix;
					continue add;
				case 'Hour':
					var $temp$interval = $justinmimbs$time_extra$Time$Extra$Millisecond,
						$temp$n = n * 3600000,
						$temp$zone = zone,
						$temp$posix = posix;
					interval = $temp$interval;
					n = $temp$n;
					zone = $temp$zone;
					posix = $temp$posix;
					continue add;
				case 'Day':
					return A3(
						$justinmimbs$time_extra$Time$Extra$posixFromDateTime,
						zone,
						A3(
							$justinmimbs$date$Date$add,
							$justinmimbs$date$Date$Days,
							n,
							A2($justinmimbs$date$Date$fromPosix, zone, posix)),
						A2($justinmimbs$time_extra$Time$Extra$timeFromPosix, zone, posix));
				case 'Month':
					return A3(
						$justinmimbs$time_extra$Time$Extra$posixFromDateTime,
						zone,
						A3(
							$justinmimbs$date$Date$add,
							$justinmimbs$date$Date$Months,
							n,
							A2($justinmimbs$date$Date$fromPosix, zone, posix)),
						A2($justinmimbs$time_extra$Time$Extra$timeFromPosix, zone, posix));
				case 'Year':
					var $temp$interval = $justinmimbs$time_extra$Time$Extra$Month,
						$temp$n = n * 12,
						$temp$zone = zone,
						$temp$posix = posix;
					interval = $temp$interval;
					n = $temp$n;
					zone = $temp$zone;
					posix = $temp$posix;
					continue add;
				case 'Quarter':
					var $temp$interval = $justinmimbs$time_extra$Time$Extra$Month,
						$temp$n = n * 3,
						$temp$zone = zone,
						$temp$posix = posix;
					interval = $temp$interval;
					n = $temp$n;
					zone = $temp$zone;
					posix = $temp$posix;
					continue add;
				case 'Week':
					var $temp$interval = $justinmimbs$time_extra$Time$Extra$Day,
						$temp$n = n * 7,
						$temp$zone = zone,
						$temp$posix = posix;
					interval = $temp$interval;
					n = $temp$n;
					zone = $temp$zone;
					posix = $temp$posix;
					continue add;
				default:
					var weekday = interval;
					var $temp$interval = $justinmimbs$time_extra$Time$Extra$Day,
						$temp$n = n * 7,
						$temp$zone = zone,
						$temp$posix = posix;
					interval = $temp$interval;
					n = $temp$n;
					zone = $temp$zone;
					posix = $temp$posix;
					continue add;
			}
		}
	});
var $justinmimbs$time_extra$Time$Extra$Week = {$: 'Week'};
var $justinmimbs$date$Date$Day = {$: 'Day'};
var $justinmimbs$date$Date$Friday = {$: 'Friday'};
var $justinmimbs$date$Date$Monday = {$: 'Monday'};
var $justinmimbs$date$Date$Month = {$: 'Month'};
var $justinmimbs$date$Date$Quarter = {$: 'Quarter'};
var $justinmimbs$date$Date$Saturday = {$: 'Saturday'};
var $justinmimbs$date$Date$Sunday = {$: 'Sunday'};
var $justinmimbs$date$Date$Thursday = {$: 'Thursday'};
var $justinmimbs$date$Date$Tuesday = {$: 'Tuesday'};
var $justinmimbs$date$Date$Wednesday = {$: 'Wednesday'};
var $justinmimbs$date$Date$Week = {$: 'Week'};
var $justinmimbs$date$Date$Year = {$: 'Year'};
var $justinmimbs$date$Date$weekdayNumber = function (_v0) {
	var rd = _v0.a;
	var _v1 = A2($elm$core$Basics$modBy, 7, rd);
	if (!_v1) {
		return 7;
	} else {
		var n = _v1;
		return n;
	}
};
var $justinmimbs$date$Date$weekdayToNumber = function (wd) {
	switch (wd.$) {
		case 'Mon':
			return 1;
		case 'Tue':
			return 2;
		case 'Wed':
			return 3;
		case 'Thu':
			return 4;
		case 'Fri':
			return 5;
		case 'Sat':
			return 6;
		default:
			return 7;
	}
};
var $justinmimbs$date$Date$daysSincePreviousWeekday = F2(
	function (wd, date) {
		return A2(
			$elm$core$Basics$modBy,
			7,
			($justinmimbs$date$Date$weekdayNumber(date) + 7) - $justinmimbs$date$Date$weekdayToNumber(wd));
	});
var $justinmimbs$date$Date$firstOfMonth = F2(
	function (y, m) {
		return $justinmimbs$date$Date$RD(
			($justinmimbs$date$Date$daysBeforeYear(y) + A2($justinmimbs$date$Date$daysBeforeMonth, y, m)) + 1);
	});
var $justinmimbs$date$Date$firstOfYear = function (y) {
	return $justinmimbs$date$Date$RD(
		$justinmimbs$date$Date$daysBeforeYear(y) + 1);
};
var $justinmimbs$date$Date$month = A2(
	$elm$core$Basics$composeR,
	$justinmimbs$date$Date$toCalendarDate,
	function ($) {
		return $.month;
	});
var $justinmimbs$date$Date$monthToQuarter = function (m) {
	return (($justinmimbs$date$Date$monthToNumber(m) + 2) / 3) | 0;
};
var $justinmimbs$date$Date$quarter = A2($elm$core$Basics$composeR, $justinmimbs$date$Date$month, $justinmimbs$date$Date$monthToQuarter);
var $justinmimbs$date$Date$quarterToMonth = function (q) {
	return $justinmimbs$date$Date$numberToMonth((q * 3) - 2);
};
var $justinmimbs$date$Date$floor = F2(
	function (interval, date) {
		var rd = date.a;
		switch (interval.$) {
			case 'Year':
				return $justinmimbs$date$Date$firstOfYear(
					$justinmimbs$date$Date$year(date));
			case 'Quarter':
				return A2(
					$justinmimbs$date$Date$firstOfMonth,
					$justinmimbs$date$Date$year(date),
					$justinmimbs$date$Date$quarterToMonth(
						$justinmimbs$date$Date$quarter(date)));
			case 'Month':
				return A2(
					$justinmimbs$date$Date$firstOfMonth,
					$justinmimbs$date$Date$year(date),
					$justinmimbs$date$Date$month(date));
			case 'Week':
				return $justinmimbs$date$Date$RD(
					rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, $elm$time$Time$Mon, date));
			case 'Monday':
				return $justinmimbs$date$Date$RD(
					rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, $elm$time$Time$Mon, date));
			case 'Tuesday':
				return $justinmimbs$date$Date$RD(
					rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, $elm$time$Time$Tue, date));
			case 'Wednesday':
				return $justinmimbs$date$Date$RD(
					rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, $elm$time$Time$Wed, date));
			case 'Thursday':
				return $justinmimbs$date$Date$RD(
					rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, $elm$time$Time$Thu, date));
			case 'Friday':
				return $justinmimbs$date$Date$RD(
					rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, $elm$time$Time$Fri, date));
			case 'Saturday':
				return $justinmimbs$date$Date$RD(
					rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, $elm$time$Time$Sat, date));
			case 'Sunday':
				return $justinmimbs$date$Date$RD(
					rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, $elm$time$Time$Sun, date));
			default:
				return date;
		}
	});
var $justinmimbs$time_extra$Time$Extra$floorDate = F3(
	function (dateInterval, zone, posix) {
		return A3(
			$justinmimbs$time_extra$Time$Extra$posixFromDateTime,
			zone,
			A2(
				$justinmimbs$date$Date$floor,
				dateInterval,
				A2($justinmimbs$date$Date$fromPosix, zone, posix)),
			0);
	});
var $justinmimbs$time_extra$Time$Extra$floor = F3(
	function (interval, zone, posix) {
		switch (interval.$) {
			case 'Millisecond':
				return posix;
			case 'Second':
				return A3(
					$justinmimbs$time_extra$Time$Extra$posixFromDateTime,
					zone,
					A2($justinmimbs$date$Date$fromPosix, zone, posix),
					A4(
						$justinmimbs$time_extra$Time$Extra$timeFromClock,
						A2($elm$time$Time$toHour, zone, posix),
						A2($elm$time$Time$toMinute, zone, posix),
						A2($elm$time$Time$toSecond, zone, posix),
						0));
			case 'Minute':
				return A3(
					$justinmimbs$time_extra$Time$Extra$posixFromDateTime,
					zone,
					A2($justinmimbs$date$Date$fromPosix, zone, posix),
					A4(
						$justinmimbs$time_extra$Time$Extra$timeFromClock,
						A2($elm$time$Time$toHour, zone, posix),
						A2($elm$time$Time$toMinute, zone, posix),
						0,
						0));
			case 'Hour':
				return A3(
					$justinmimbs$time_extra$Time$Extra$posixFromDateTime,
					zone,
					A2($justinmimbs$date$Date$fromPosix, zone, posix),
					A4(
						$justinmimbs$time_extra$Time$Extra$timeFromClock,
						A2($elm$time$Time$toHour, zone, posix),
						0,
						0,
						0));
			case 'Day':
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, $justinmimbs$date$Date$Day, zone, posix);
			case 'Month':
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, $justinmimbs$date$Date$Month, zone, posix);
			case 'Year':
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, $justinmimbs$date$Date$Year, zone, posix);
			case 'Quarter':
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, $justinmimbs$date$Date$Quarter, zone, posix);
			case 'Week':
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, $justinmimbs$date$Date$Week, zone, posix);
			case 'Monday':
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, $justinmimbs$date$Date$Monday, zone, posix);
			case 'Tuesday':
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, $justinmimbs$date$Date$Tuesday, zone, posix);
			case 'Wednesday':
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, $justinmimbs$date$Date$Wednesday, zone, posix);
			case 'Thursday':
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, $justinmimbs$date$Date$Thursday, zone, posix);
			case 'Friday':
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, $justinmimbs$date$Date$Friday, zone, posix);
			case 'Saturday':
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, $justinmimbs$date$Date$Saturday, zone, posix);
			default:
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, $justinmimbs$date$Date$Sunday, zone, posix);
		}
	});
var $justinmimbs$time_extra$Time$Extra$ceiling = F3(
	function (interval, zone, posix) {
		var floored = A3($justinmimbs$time_extra$Time$Extra$floor, interval, zone, posix);
		return _Utils_eq(floored, posix) ? posix : A4($justinmimbs$time_extra$Time$Extra$add, interval, 1, zone, floored);
	});
var $terezka$intervals$Intervals$Time$ceilingDay = F3(
	function (zone, mult, stamp) {
		return (mult === 7) ? A3($justinmimbs$time_extra$Time$Extra$ceiling, $justinmimbs$time_extra$Time$Extra$Week, zone, stamp) : A3($justinmimbs$time_extra$Time$Extra$ceiling, $justinmimbs$time_extra$Time$Extra$Day, zone, stamp);
	});
var $justinmimbs$time_extra$Time$Extra$Hour = {$: 'Hour'};
var $justinmimbs$time_extra$Time$Extra$partsToPosix = F2(
	function (zone, _v0) {
		var year = _v0.year;
		var month = _v0.month;
		var day = _v0.day;
		var hour = _v0.hour;
		var minute = _v0.minute;
		var second = _v0.second;
		var millisecond = _v0.millisecond;
		return A3(
			$justinmimbs$time_extra$Time$Extra$posixFromDateTime,
			zone,
			A3($justinmimbs$date$Date$fromCalendarDate, year, month, day),
			A4(
				$justinmimbs$time_extra$Time$Extra$timeFromClock,
				A3($elm$core$Basics$clamp, 0, 23, hour),
				A3($elm$core$Basics$clamp, 0, 59, minute),
				A3($elm$core$Basics$clamp, 0, 59, second),
				A3($elm$core$Basics$clamp, 0, 999, millisecond)));
	});
var $justinmimbs$time_extra$Time$Extra$posixToParts = F2(
	function (zone, posix) {
		return {
			day: A2($elm$time$Time$toDay, zone, posix),
			hour: A2($elm$time$Time$toHour, zone, posix),
			millisecond: A2($elm$time$Time$toMillis, zone, posix),
			minute: A2($elm$time$Time$toMinute, zone, posix),
			month: A2($elm$time$Time$toMonth, zone, posix),
			second: A2($elm$time$Time$toSecond, zone, posix),
			year: A2($elm$time$Time$toYear, zone, posix)
		};
	});
var $terezka$intervals$Intervals$Time$ceilingHour = F3(
	function (zone, mult, stamp) {
		var parts = A2(
			$justinmimbs$time_extra$Time$Extra$posixToParts,
			zone,
			A3($justinmimbs$time_extra$Time$Extra$ceiling, $justinmimbs$time_extra$Time$Extra$Hour, zone, stamp));
		var rem = parts.hour % mult;
		return (!rem) ? A2($justinmimbs$time_extra$Time$Extra$partsToPosix, zone, parts) : A4($justinmimbs$time_extra$Time$Extra$add, $justinmimbs$time_extra$Time$Extra$Hour, mult - rem, zone, stamp);
	});
var $justinmimbs$time_extra$Time$Extra$Minute = {$: 'Minute'};
var $terezka$intervals$Intervals$Time$ceilingMinute = F3(
	function (zone, mult, stamp) {
		var parts = A2(
			$justinmimbs$time_extra$Time$Extra$posixToParts,
			zone,
			A3($justinmimbs$time_extra$Time$Extra$ceiling, $justinmimbs$time_extra$Time$Extra$Minute, zone, stamp));
		var rem = parts.minute % mult;
		return (!rem) ? A2($justinmimbs$time_extra$Time$Extra$partsToPosix, zone, parts) : A4($justinmimbs$time_extra$Time$Extra$add, $justinmimbs$time_extra$Time$Extra$Minute, mult - rem, zone, stamp);
	});
var $terezka$intervals$Intervals$Time$intAsMonth = function (_int) {
	switch (_int) {
		case 1:
			return $elm$time$Time$Jan;
		case 2:
			return $elm$time$Time$Feb;
		case 3:
			return $elm$time$Time$Mar;
		case 4:
			return $elm$time$Time$Apr;
		case 5:
			return $elm$time$Time$May;
		case 6:
			return $elm$time$Time$Jun;
		case 7:
			return $elm$time$Time$Jul;
		case 8:
			return $elm$time$Time$Aug;
		case 9:
			return $elm$time$Time$Sep;
		case 10:
			return $elm$time$Time$Oct;
		case 11:
			return $elm$time$Time$Nov;
		case 12:
			return $elm$time$Time$Dec;
		default:
			return $elm$time$Time$Dec;
	}
};
var $terezka$intervals$Intervals$Time$monthAsInt = function (month) {
	switch (month.$) {
		case 'Jan':
			return 1;
		case 'Feb':
			return 2;
		case 'Mar':
			return 3;
		case 'Apr':
			return 4;
		case 'May':
			return 5;
		case 'Jun':
			return 6;
		case 'Jul':
			return 7;
		case 'Aug':
			return 8;
		case 'Sep':
			return 9;
		case 'Oct':
			return 10;
		case 'Nov':
			return 11;
		default:
			return 12;
	}
};
var $terezka$intervals$Intervals$Time$ceilingMonth = F3(
	function (zone, mult, stamp) {
		var parts = A2(
			$justinmimbs$time_extra$Time$Extra$posixToParts,
			zone,
			A3($justinmimbs$time_extra$Time$Extra$ceiling, $justinmimbs$time_extra$Time$Extra$Month, zone, stamp));
		var monthInt = $terezka$intervals$Intervals$Time$monthAsInt(parts.month);
		var rem = (monthInt - 1) % mult;
		var newMonth = (!rem) ? monthInt : ((monthInt - rem) + mult);
		return A2(
			$justinmimbs$time_extra$Time$Extra$partsToPosix,
			zone,
			(newMonth > 12) ? _Utils_update(
				parts,
				{
					month: $terezka$intervals$Intervals$Time$intAsMonth(newMonth - 12),
					year: parts.year + 1
				}) : _Utils_update(
				parts,
				{
					month: $terezka$intervals$Intervals$Time$intAsMonth(newMonth)
				}));
	});
var $terezka$intervals$Intervals$Time$ceilingMs = F3(
	function (zone, mult, stamp) {
		var parts = A2($justinmimbs$time_extra$Time$Extra$posixToParts, zone, stamp);
		var rem = parts.millisecond % mult;
		return (!rem) ? A2($justinmimbs$time_extra$Time$Extra$partsToPosix, zone, parts) : A4($justinmimbs$time_extra$Time$Extra$add, $justinmimbs$time_extra$Time$Extra$Millisecond, mult - rem, zone, stamp);
	});
var $justinmimbs$time_extra$Time$Extra$Second = {$: 'Second'};
var $terezka$intervals$Intervals$Time$ceilingSecond = F3(
	function (zone, mult, stamp) {
		var parts = A2(
			$justinmimbs$time_extra$Time$Extra$posixToParts,
			zone,
			A3($justinmimbs$time_extra$Time$Extra$ceiling, $justinmimbs$time_extra$Time$Extra$Second, zone, stamp));
		var rem = parts.second % mult;
		return (!rem) ? A2($justinmimbs$time_extra$Time$Extra$partsToPosix, zone, parts) : A4($justinmimbs$time_extra$Time$Extra$add, $justinmimbs$time_extra$Time$Extra$Second, mult - rem, zone, stamp);
	});
var $justinmimbs$time_extra$Time$Extra$Year = {$: 'Year'};
var $terezka$intervals$Intervals$Time$ceilingYear = F3(
	function (zone, mult, stamp) {
		var parts = A2(
			$justinmimbs$time_extra$Time$Extra$posixToParts,
			zone,
			A3($justinmimbs$time_extra$Time$Extra$ceiling, $justinmimbs$time_extra$Time$Extra$Year, zone, stamp));
		var rem = parts.year % mult;
		var newYear = (!rem) ? parts.year : ((parts.year - rem) + mult);
		return A2(
			$justinmimbs$time_extra$Time$Extra$partsToPosix,
			zone,
			_Utils_update(
				parts,
				{year: newYear}));
	});
var $terezka$intervals$Intervals$Time$ceilingUnit = F3(
	function (zone, unit, mult) {
		switch (unit.$) {
			case 'Millisecond':
				return A2($terezka$intervals$Intervals$Time$ceilingMs, zone, mult);
			case 'Second':
				return A2($terezka$intervals$Intervals$Time$ceilingSecond, zone, mult);
			case 'Minute':
				return A2($terezka$intervals$Intervals$Time$ceilingMinute, zone, mult);
			case 'Hour':
				return A2($terezka$intervals$Intervals$Time$ceilingHour, zone, mult);
			case 'Day':
				return A2($terezka$intervals$Intervals$Time$ceilingDay, zone, mult);
			case 'Month':
				return A2($terezka$intervals$Intervals$Time$ceilingMonth, zone, mult);
			default:
				return A2($terezka$intervals$Intervals$Time$ceilingYear, zone, mult);
		}
	});
var $terezka$intervals$Intervals$Time$Day = {$: 'Day'};
var $terezka$intervals$Intervals$Time$Hour = {$: 'Hour'};
var $terezka$intervals$Intervals$Time$Millisecond = {$: 'Millisecond'};
var $terezka$intervals$Intervals$Time$Minute = {$: 'Minute'};
var $terezka$intervals$Intervals$Time$Month = {$: 'Month'};
var $terezka$intervals$Intervals$Time$Second = {$: 'Second'};
var $terezka$intervals$Intervals$Time$Year = {$: 'Year'};
var $terezka$intervals$Intervals$Time$getChange = F3(
	function (zone, a, b) {
		var bP = A2($justinmimbs$time_extra$Time$Extra$posixToParts, zone, b);
		var aP = A2($justinmimbs$time_extra$Time$Extra$posixToParts, zone, a);
		return (!_Utils_eq(aP.year, bP.year)) ? $terezka$intervals$Intervals$Time$Year : ((!_Utils_eq(aP.month, bP.month)) ? $terezka$intervals$Intervals$Time$Month : ((!_Utils_eq(aP.day, bP.day)) ? $terezka$intervals$Intervals$Time$Day : ((!_Utils_eq(aP.hour, bP.hour)) ? $terezka$intervals$Intervals$Time$Hour : ((!_Utils_eq(aP.minute, bP.minute)) ? $terezka$intervals$Intervals$Time$Minute : ((!_Utils_eq(aP.second, bP.second)) ? $terezka$intervals$Intervals$Time$Second : $terezka$intervals$Intervals$Time$Millisecond)))));
	});
var $danhandrea$elm_time_extra$Util$isLeapYear = function (year) {
	return (!A2($elm$core$Basics$modBy, 400, year)) || ((!(!A2($elm$core$Basics$modBy, 100, year))) && (!A2($elm$core$Basics$modBy, 4, year)));
};
var $danhandrea$elm_time_extra$Month$days = F2(
	function (year, month) {
		switch (month.$) {
			case 'Jan':
				return 31;
			case 'Feb':
				return $danhandrea$elm_time_extra$Util$isLeapYear(year) ? 29 : 28;
			case 'Mar':
				return 31;
			case 'Apr':
				return 30;
			case 'May':
				return 31;
			case 'Jun':
				return 30;
			case 'Jul':
				return 31;
			case 'Aug':
				return 31;
			case 'Sep':
				return 30;
			case 'Oct':
				return 31;
			case 'Nov':
				return 30;
			default:
				return 31;
		}
	});
var $danhandrea$elm_time_extra$TimeExtra$daysInMonth = $danhandrea$elm_time_extra$Month$days;
var $terezka$intervals$Intervals$Time$toMs = $elm$time$Time$posixToMillis;
var $terezka$intervals$Intervals$Time$getDiff = F3(
	function (zone, a, b) {
		var _v0 = (_Utils_cmp(
			$terezka$intervals$Intervals$Time$toMs(a),
			$terezka$intervals$Intervals$Time$toMs(b)) < 0) ? _Utils_Tuple2(
			A2($justinmimbs$time_extra$Time$Extra$posixToParts, zone, a),
			A2($justinmimbs$time_extra$Time$Extra$posixToParts, zone, b)) : _Utils_Tuple2(
			A2($justinmimbs$time_extra$Time$Extra$posixToParts, zone, b),
			A2($justinmimbs$time_extra$Time$Extra$posixToParts, zone, a));
		var aP = _v0.a;
		var bP = _v0.b;
		var dMsX = bP.millisecond - aP.millisecond;
		var dMs = (dMsX < 0) ? (1000 + dMsX) : dMsX;
		var dSecondX = (bP.second - aP.second) + ((dMsX < 0) ? (-1) : 0);
		var dMinuteX = (bP.minute - aP.minute) + ((dSecondX < 0) ? (-1) : 0);
		var dHourX = (bP.hour - aP.hour) + ((dMinuteX < 0) ? (-1) : 0);
		var dDayX = (bP.day - aP.day) + ((dHourX < 0) ? (-1) : 0);
		var dDay = (dDayX < 0) ? (A2($danhandrea$elm_time_extra$TimeExtra$daysInMonth, bP.year, bP.month) + dDayX) : dDayX;
		var dMonthX = ($terezka$intervals$Intervals$Time$monthAsInt(bP.month) - $terezka$intervals$Intervals$Time$monthAsInt(aP.month)) + ((dDayX < 0) ? (-1) : 0);
		var dMonth = (dMonthX < 0) ? (12 + dMonthX) : dMonthX;
		var dHour = (dHourX < 0) ? (24 + dHourX) : dHourX;
		var dMinute = (dMinuteX < 0) ? (60 + dMinuteX) : dMinuteX;
		var dSecond = (dSecondX < 0) ? (60 + dSecondX) : dSecondX;
		var dYearX = (bP.year - aP.year) + ((dMonthX < 0) ? (-1) : 0);
		var dYear = (dYearX < 0) ? ($terezka$intervals$Intervals$Time$monthAsInt(bP.month) + dYearX) : dYearX;
		return {day: dDay, hour: dHour, millisecond: dMs, minute: dMinute, month: dMonth, second: dSecond, year: dYear};
	});
var $terezka$intervals$Intervals$Time$oneSecond = 1000;
var $terezka$intervals$Intervals$Time$oneMinute = $terezka$intervals$Intervals$Time$oneSecond * 60;
var $terezka$intervals$Intervals$Time$oneHour = $terezka$intervals$Intervals$Time$oneMinute * 60;
var $terezka$intervals$Intervals$Time$oneDay = $terezka$intervals$Intervals$Time$oneHour * 24;
var $terezka$intervals$Intervals$Time$oneMs = 1;
var $terezka$intervals$Intervals$Time$getNumOfTicks = F5(
	function (zone, unit, mult, a, b) {
		var div = F2(
			function (n1, n2) {
				return $elm$core$Basics$floor(n1 / n2);
			});
		var timeDiff = function (ms) {
			var ceiled = A4($terezka$intervals$Intervals$Time$ceilingUnit, zone, unit, mult, a);
			return (_Utils_cmp(
				$terezka$intervals$Intervals$Time$toMs(ceiled),
				$terezka$intervals$Intervals$Time$toMs(b)) > 0) ? (-1) : A2(
				div,
				A2(
					div,
					$terezka$intervals$Intervals$Time$toMs(b) - $terezka$intervals$Intervals$Time$toMs(ceiled),
					ms),
				mult);
		};
		var diff = function (property) {
			var ceiled = A4($terezka$intervals$Intervals$Time$ceilingUnit, zone, unit, mult, a);
			return (_Utils_cmp(
				$terezka$intervals$Intervals$Time$toMs(ceiled),
				$terezka$intervals$Intervals$Time$toMs(b)) > 0) ? (-1) : A2(
				div,
				property(
					A3($terezka$intervals$Intervals$Time$getDiff, zone, ceiled, b)),
				mult);
		};
		switch (unit.$) {
			case 'Millisecond':
				return timeDiff($terezka$intervals$Intervals$Time$oneMs) + 1;
			case 'Second':
				return timeDiff($terezka$intervals$Intervals$Time$oneSecond) + 1;
			case 'Minute':
				return timeDiff($terezka$intervals$Intervals$Time$oneMinute) + 1;
			case 'Hour':
				return timeDiff($terezka$intervals$Intervals$Time$oneHour) + 1;
			case 'Day':
				return timeDiff($terezka$intervals$Intervals$Time$oneDay) + 1;
			case 'Month':
				return diff(
					function (d) {
						return d.month + (d.year * 12);
					}) + 1;
			default:
				return diff(
					function ($) {
						return $.year;
					}) + 1;
		}
	});
var $terezka$intervals$Intervals$Time$largerUnit = function (unit) {
	switch (unit.$) {
		case 'Millisecond':
			return $elm$core$Maybe$Just($terezka$intervals$Intervals$Time$Second);
		case 'Second':
			return $elm$core$Maybe$Just($terezka$intervals$Intervals$Time$Minute);
		case 'Minute':
			return $elm$core$Maybe$Just($terezka$intervals$Intervals$Time$Hour);
		case 'Hour':
			return $elm$core$Maybe$Just($terezka$intervals$Intervals$Time$Day);
		case 'Day':
			return $elm$core$Maybe$Just($terezka$intervals$Intervals$Time$Month);
		case 'Month':
			return $elm$core$Maybe$Just($terezka$intervals$Intervals$Time$Year);
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $terezka$intervals$Intervals$Time$niceMultiples = function (unit) {
	switch (unit.$) {
		case 'Millisecond':
			return _List_fromArray(
				[1, 2, 5, 10, 20, 25, 50, 100, 200, 500]);
		case 'Second':
			return _List_fromArray(
				[1, 2, 5, 10, 15, 30]);
		case 'Minute':
			return _List_fromArray(
				[1, 2, 5, 10, 15, 30]);
		case 'Hour':
			return _List_fromArray(
				[1, 2, 3, 4, 6, 8, 12]);
		case 'Day':
			return _List_fromArray(
				[1, 2, 3, 7, 14]);
		case 'Month':
			return _List_fromArray(
				[1, 2, 3, 4, 6]);
		default:
			return _List_fromArray(
				[1, 2, 5, 10, 20, 25, 50, 100, 200, 500, 1000, 10000, 1000000, 10000000]);
	}
};
var $terezka$intervals$Intervals$Time$toBestUnit = F4(
	function (zone, amount, min, max) {
		var toNice = function (unit) {
			toNice:
			while (true) {
				var niceNums = $terezka$intervals$Intervals$Time$niceMultiples(unit);
				var maybeNiceNum = A2(
					$elm$core$List$filter,
					function (n) {
						return _Utils_cmp(
							A5($terezka$intervals$Intervals$Time$getNumOfTicks, zone, unit, n, min, max),
							amount) < 1;
					},
					niceNums);
				var div = F2(
					function (n1, n2) {
						return $elm$core$Basics$ceiling(n1 / n2);
					});
				var _v0 = $elm$core$List$head(maybeNiceNum);
				if (_v0.$ === 'Just') {
					var niceNum = _v0.a;
					return _Utils_Tuple2(unit, niceNum);
				} else {
					var _v1 = $terezka$intervals$Intervals$Time$largerUnit(unit);
					if (_v1.$ === 'Just') {
						var larger = _v1.a;
						var $temp$unit = larger;
						unit = $temp$unit;
						continue toNice;
					} else {
						return _Utils_Tuple2($terezka$intervals$Intervals$Time$Year, 100000000);
					}
				}
			}
		};
		return toNice($terezka$intervals$Intervals$Time$Millisecond);
	});
var $terezka$intervals$Intervals$Time$toExtraUnit = function (unit) {
	switch (unit.$) {
		case 'Millisecond':
			return $justinmimbs$time_extra$Time$Extra$Millisecond;
		case 'Second':
			return $justinmimbs$time_extra$Time$Extra$Second;
		case 'Minute':
			return $justinmimbs$time_extra$Time$Extra$Minute;
		case 'Hour':
			return $justinmimbs$time_extra$Time$Extra$Hour;
		case 'Day':
			return $justinmimbs$time_extra$Time$Extra$Day;
		case 'Month':
			return $justinmimbs$time_extra$Time$Extra$Month;
		default:
			return $justinmimbs$time_extra$Time$Extra$Year;
	}
};
var $terezka$intervals$Intervals$Time$unitToInt = function (unit) {
	switch (unit.$) {
		case 'Millisecond':
			return 0;
		case 'Second':
			return 1;
		case 'Minute':
			return 2;
		case 'Hour':
			return 3;
		case 'Day':
			return 4;
		case 'Month':
			return 5;
		default:
			return 6;
	}
};
var $terezka$intervals$Intervals$Time$values = F4(
	function (zone, maxMmount, min, max) {
		var _v0 = A4($terezka$intervals$Intervals$Time$toBestUnit, zone, maxMmount, min, max);
		var unit = _v0.a;
		var mult = _v0.b;
		var amount = A5($terezka$intervals$Intervals$Time$getNumOfTicks, zone, unit, mult, min, max);
		var initial = A4($terezka$intervals$Intervals$Time$ceilingUnit, zone, unit, mult, min);
		var tUnit = $terezka$intervals$Intervals$Time$toExtraUnit(unit);
		var toTick = F3(
			function (x, timestamp, change) {
				return {
					change: (_Utils_cmp(
						$terezka$intervals$Intervals$Time$unitToInt(change),
						$terezka$intervals$Intervals$Time$unitToInt(unit)) > 0) ? $elm$core$Maybe$Just(change) : $elm$core$Maybe$Nothing,
					isFirst: !x,
					multiple: mult,
					timestamp: timestamp,
					unit: unit,
					zone: zone
				};
			});
		var toTicks = F2(
			function (xs, acc) {
				toTicks:
				while (true) {
					if (xs.b) {
						var x = xs.a;
						var rest = xs.b;
						var prev = A4($justinmimbs$time_extra$Time$Extra$add, tUnit, (x - 1) * mult, zone, initial);
						var curr = A4($justinmimbs$time_extra$Time$Extra$add, tUnit, x * mult, zone, initial);
						var change = A3($terezka$intervals$Intervals$Time$getChange, zone, prev, curr);
						var $temp$xs = rest,
							$temp$acc = A2(
							$elm$core$List$cons,
							A3(toTick, x, curr, change),
							acc);
						xs = $temp$xs;
						acc = $temp$acc;
						continue toTicks;
					} else {
						return acc;
					}
				}
			});
		return $elm$core$List$reverse(
			A2(
				toTicks,
				A2($elm$core$List$range, 0, amount - 1),
				_List_Nil));
	});
var $terezka$intervals$Intervals$times = F3(
	function (zone, amount, range) {
		var toUnit = function (unit) {
			switch (unit.$) {
				case 'Millisecond':
					return $terezka$intervals$Intervals$Millisecond;
				case 'Second':
					return $terezka$intervals$Intervals$Second;
				case 'Minute':
					return $terezka$intervals$Intervals$Minute;
				case 'Hour':
					return $terezka$intervals$Intervals$Hour;
				case 'Day':
					return $terezka$intervals$Intervals$Day;
				case 'Month':
					return $terezka$intervals$Intervals$Month;
				default:
					return $terezka$intervals$Intervals$Year;
			}
		};
		var translateUnit = function (time) {
			return {
				change: A2($elm$core$Maybe$map, toUnit, time.change),
				isFirst: time.isFirst,
				multiple: time.multiple,
				timestamp: time.timestamp,
				unit: toUnit(time.unit),
				zone: time.zone
			};
		};
		var fromMs = function (ts) {
			return $elm$time$Time$millisToPosix(
				$elm$core$Basics$round(ts));
		};
		return A2(
			$elm$core$List$map,
			translateUnit,
			A4(
				$terezka$intervals$Intervals$Time$values,
				zone,
				amount,
				fromMs(range.min),
				fromMs(range.max)));
	});
var $terezka$charts$Internal$Svg$times = function (zone) {
	return $terezka$charts$Internal$Svg$Generator(
		F2(
			function (i, b) {
				return A3(
					$terezka$intervals$Intervals$times,
					zone,
					i,
					{max: b.max, min: b.min});
			}));
};
var $terezka$charts$Chart$Svg$times = $terezka$charts$Internal$Svg$times;
var $terezka$charts$Chart$generateValues = F4(
	function (amount, tick, maybeFormat, axis) {
		var toTickValues = F2(
			function (toValue, toString) {
				return $elm$core$List$map(
					function (i) {
						return {
							label: function () {
								if (maybeFormat.$ === 'Just') {
									var formatter = maybeFormat.a;
									return formatter(
										toValue(i));
								} else {
									return toString(i);
								}
							}(),
							value: toValue(i)
						};
					});
			});
		switch (tick.$) {
			case 'Floats':
				return A3(
					toTickValues,
					$elm$core$Basics$identity,
					$elm$core$String$fromFloat,
					A3($terezka$charts$Chart$Svg$generate, amount, $terezka$charts$Chart$Svg$floats, axis));
			case 'Ints':
				return A3(
					toTickValues,
					$elm$core$Basics$toFloat,
					$elm$core$String$fromInt,
					A3($terezka$charts$Chart$Svg$generate, amount, $terezka$charts$Chart$Svg$ints, axis));
			default:
				var zone = tick.a;
				return A3(
					toTickValues,
					A2(
						$elm$core$Basics$composeL,
						A2($elm$core$Basics$composeL, $elm$core$Basics$toFloat, $elm$time$Time$posixToMillis),
						function ($) {
							return $.timestamp;
						}),
					$terezka$charts$Chart$Svg$formatTime(zone),
					A3(
						$terezka$charts$Chart$Svg$generate,
						amount,
						$terezka$charts$Chart$Svg$times(zone),
						axis));
		}
	});
var $terezka$charts$Chart$Attributes$zero = function (b) {
	return A3($elm$core$Basics$clamp, b.min, b.max, 0);
};
var $terezka$charts$Chart$yLabels = function (edits) {
	var toTicks = F2(
		function (p, config) {
			return A4(
				$terezka$charts$Chart$generateValues,
				config.amount,
				config.generate,
				config.format,
				A3(
					$elm$core$List$foldl,
					F2(
						function (f, y) {
							return f(y);
						}),
					p.y,
					config.limits));
		});
	var toTickValues = F3(
		function (p, config, ts) {
			return (!config.grid) ? ts : _Utils_update(
				ts,
				{
					ys: _Utils_ap(
						ts.ys,
						A2(
							$elm$core$List$map,
							function ($) {
								return $.value;
							},
							A2(toTicks, p, config)))
				});
		});
	var toConfig = function (p) {
		return A2(
			$terezka$charts$Internal$Helpers$apply,
			edits,
			{amount: 5, anchor: $elm$core$Maybe$Nothing, color: '#808BAB', flip: false, fontSize: $elm$core$Maybe$Nothing, format: $elm$core$Maybe$Nothing, generate: $terezka$charts$Internal$Svg$Floats, grid: false, limits: _List_Nil, pinned: $terezka$charts$Chart$Attributes$zero, rotate: 0, uppercase: false, xOff: -10, yOff: 3});
	};
	return A3(
		$terezka$charts$Chart$LabelsElement,
		toConfig,
		toTickValues,
		F2(
			function (p, config) {
				var _default = $terezka$charts$Internal$Svg$defaultLabel;
				var toLabel = function (item) {
					return A4(
						$terezka$charts$Internal$Svg$label,
						p,
						_Utils_update(
							_default,
							{
								anchor: function () {
									var _v0 = config.anchor;
									if (_v0.$ === 'Nothing') {
										return $elm$core$Maybe$Just(
											config.flip ? $terezka$charts$Internal$Svg$Start : $terezka$charts$Internal$Svg$End);
									} else {
										var anchor = _v0.a;
										return $elm$core$Maybe$Just(anchor);
									}
								}(),
								color: config.color,
								fontSize: config.fontSize,
								rotate: config.rotate,
								uppercase: config.uppercase,
								xOff: config.flip ? (-config.xOff) : config.xOff,
								yOff: config.yOff
							}),
						_List_fromArray(
							[
								$elm$svg$Svg$text(item.label)
							]),
						{
							x: config.pinned(p.x),
							y: item.value
						});
				};
				return A2(
					$elm$svg$Svg$g,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$class('elm-charts__y-labels')
						]),
					A2(
						$elm$core$List$map,
						toLabel,
						A2(toTicks, p, config)));
			}));
};
var $author$project$Internal$Views$chart1 = function (model) {
	var total = $elm$core$List$length(model.index);
	var solved = $elm$core$List$length(
		A2(
			$elm$core$List$filter,
			function (_v0) {
				var id = _v0.a;
				var localStorageRecord = _v0.b;
				return _Utils_eq(localStorageRecord.testsPassed, localStorageRecord.testsTotal);
			},
			$elm$core$Dict$toList(model.localStorage)));
	var seen = $elm$core$List$length(
		$elm$core$Dict$toList(model.localStorage));
	return A2(
		$mdgriffith$elm_ui$Element$el,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width(
				$mdgriffith$elm_ui$Element$px(300)),
				$mdgriffith$elm_ui$Element$centerX,
				A2($mdgriffith$elm_ui$Element$paddingXY, 0, 20)
			]),
		$mdgriffith$elm_ui$Element$html(
			A2(
				$terezka$charts$Chart$chart,
				_List_fromArray(
					[
						$terezka$charts$Chart$Attributes$height(200),
						$terezka$charts$Chart$Attributes$width(300)
					]),
				_List_fromArray(
					[
						$terezka$charts$Chart$grid(_List_Nil),
						$terezka$charts$Chart$yLabels(
						_List_fromArray(
							[$terezka$charts$Chart$Attributes$withGrid])),
						A2(
						$terezka$charts$Chart$binLabels,
						function ($) {
							return $.label;
						},
						_List_fromArray(
							[
								$terezka$charts$Chart$Attributes$moveDown(20)
							])),
						A3(
						$terezka$charts$Chart$bars,
						_List_Nil,
						_List_fromArray(
							[
								A2(
								$terezka$charts$Chart$bar,
								function ($) {
									return $.y;
								},
								_List_fromArray(
									[
										$terezka$charts$Chart$Attributes$color($terezka$charts$Chart$Attributes$blue)
									]))
							]),
						_List_fromArray(
							[
								{label: 'Solved', y: solved},
								{label: 'Not solved', y: seen - solved},
								{label: 'Seen', y: seen},
								{label: 'Not seen', y: total - seen}
							])),
						$terezka$charts$Chart$barLabels(
						_List_fromArray(
							[
								$terezka$charts$Chart$Attributes$moveUp(10)
							]))
					]))));
};
var $author$project$Internal$Data$RemoveFromHistory = function (a) {
	return {$: 'RemoveFromHistory', a: a};
};
var $author$project$Internal$Views$exerciseLink = F3(
	function (attrs, index, nowId) {
		return _Utils_eq(index.id, nowId) ? A2(
			$mdgriffith$elm_ui$Element$row,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(10)
					]),
				attrs),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$Font$bold]),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text(index.title),
							$mdgriffith$elm_ui$Element$text(' (#'),
							$mdgriffith$elm_ui$Element$text(
							$elm$core$String$fromInt(index.id)),
							$mdgriffith$elm_ui$Element$text(', '),
							$mdgriffith$elm_ui$Element$text(
							$author$project$Internal$Data$difficultyToString(index.difficulty)),
							$mdgriffith$elm_ui$Element$text(')')
						]))
				])) : A2(
			$mdgriffith$elm_ui$Element$row,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(10)
					]),
				attrs),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_Nil,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$newTabLink,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$alignTop]),
							{
								label: A2(
									$mdgriffith$elm_ui$Element$paragraph,
									_List_Nil,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$text(index.title),
											$mdgriffith$elm_ui$Element$text(' (#'),
											$mdgriffith$elm_ui$Element$text(
											$elm$core$String$fromInt(index.id)),
											$mdgriffith$elm_ui$Element$text(', '),
											$mdgriffith$elm_ui$Element$text(
											$author$project$Internal$Data$difficultyToString(index.difficulty)),
											$mdgriffith$elm_ui$Element$text(')')
										])),
								url: 'https://ellie-app.com/' + index.ellieId
							})
						]))
				]));
	});
var $feathericons$elm_feather$FeatherIcons$eye = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'eye',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$path,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$d('M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$circle,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$cx('12'),
					$elm$svg$Svg$Attributes$cy('12'),
					$elm$svg$Svg$Attributes$r('3')
				]),
			_List_Nil)
		]));
var $feathericons$elm_feather$FeatherIcons$refreshCw = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'refresh-cw',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$polyline,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('23 4 23 10 17 10')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$polyline,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('1 20 1 14 7 14')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$path,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$d('M3.51 9a9 9 0 0 1 14.85-3.36L23 10M1 14l4.64 4.36A9 9 0 0 0 20.49 15')
				]),
			_List_Nil)
		]));
var $ryannhg$date_format$DateFormat$Relative$defaultInSomeDays = function (days) {
	return (days < 2) ? 'tomorrow' : ('in ' + ($elm$core$String$fromInt(days) + ' days'));
};
var $ryannhg$date_format$DateFormat$Relative$defaultInSomeHours = function (hours) {
	return (hours < 2) ? 'in an hour' : ('in ' + ($elm$core$String$fromInt(hours) + ' hours'));
};
var $ryannhg$date_format$DateFormat$Relative$defaultInSomeMinutes = function (minutes) {
	return (minutes < 2) ? 'in a minute' : ('in ' + ($elm$core$String$fromInt(minutes) + ' minutes'));
};
var $ryannhg$date_format$DateFormat$Relative$defaultInSomeMonths = function (months) {
	return (months < 2) ? 'in a month' : ('in ' + ($elm$core$String$fromInt(months) + ' months'));
};
var $ryannhg$date_format$DateFormat$Relative$defaultInSomeSeconds = function (seconds) {
	return (seconds < 30) ? 'in a few seconds' : ('in ' + ($elm$core$String$fromInt(seconds) + ' seconds'));
};
var $ryannhg$date_format$DateFormat$Relative$defaultInSomeYears = function (years) {
	return (years < 2) ? 'in a year' : ('in ' + ($elm$core$String$fromInt(years) + ' years'));
};
var $ryannhg$date_format$DateFormat$Relative$defaultRightNow = 'right now';
var $ryannhg$date_format$DateFormat$Relative$defaultSomeDaysAgo = function (days) {
	return (days < 2) ? 'yesterday' : ($elm$core$String$fromInt(days) + ' days ago');
};
var $ryannhg$date_format$DateFormat$Relative$defaultSomeHoursAgo = function (hours) {
	return (hours < 2) ? 'an hour ago' : ($elm$core$String$fromInt(hours) + ' hours ago');
};
var $ryannhg$date_format$DateFormat$Relative$defaultSomeMinutesAgo = function (minutes) {
	return (minutes < 2) ? 'a minute ago' : ($elm$core$String$fromInt(minutes) + ' minutes ago');
};
var $ryannhg$date_format$DateFormat$Relative$defaultSomeMonthsAgo = function (months) {
	return (months < 2) ? 'last month' : ($elm$core$String$fromInt(months) + ' months ago');
};
var $ryannhg$date_format$DateFormat$Relative$defaultSomeSecondsAgo = function (seconds) {
	return (seconds < 30) ? 'just now' : ($elm$core$String$fromInt(seconds) + ' seconds ago');
};
var $ryannhg$date_format$DateFormat$Relative$defaultSomeYearsAgo = function (years) {
	return (years < 2) ? 'last year' : ($elm$core$String$fromInt(years) + ' years ago');
};
var $ryannhg$date_format$DateFormat$Relative$defaultRelativeOptions = {inSomeDays: $ryannhg$date_format$DateFormat$Relative$defaultInSomeDays, inSomeHours: $ryannhg$date_format$DateFormat$Relative$defaultInSomeHours, inSomeMinutes: $ryannhg$date_format$DateFormat$Relative$defaultInSomeMinutes, inSomeMonths: $ryannhg$date_format$DateFormat$Relative$defaultInSomeMonths, inSomeSeconds: $ryannhg$date_format$DateFormat$Relative$defaultInSomeSeconds, inSomeYears: $ryannhg$date_format$DateFormat$Relative$defaultInSomeYears, rightNow: $ryannhg$date_format$DateFormat$Relative$defaultRightNow, someDaysAgo: $ryannhg$date_format$DateFormat$Relative$defaultSomeDaysAgo, someHoursAgo: $ryannhg$date_format$DateFormat$Relative$defaultSomeHoursAgo, someMinutesAgo: $ryannhg$date_format$DateFormat$Relative$defaultSomeMinutesAgo, someMonthsAgo: $ryannhg$date_format$DateFormat$Relative$defaultSomeMonthsAgo, someSecondsAgo: $ryannhg$date_format$DateFormat$Relative$defaultSomeSecondsAgo, someYearsAgo: $ryannhg$date_format$DateFormat$Relative$defaultSomeYearsAgo};
var $ryannhg$date_format$DateFormat$Relative$RelativeTimeFunctions = F6(
	function (seconds, minutes, hours, days, months, years) {
		return {days: days, hours: hours, minutes: minutes, months: months, seconds: seconds, years: years};
	});
var $ryannhg$date_format$DateFormat$Relative$relativeTimeWithFunctions = F3(
	function (zone, millis, functions) {
		var seconds = (millis / 1000) | 0;
		var posix = $elm$time$Time$millisToPosix(millis);
		var minutes = (seconds / 60) | 0;
		var hours = (minutes / 60) | 0;
		var days = (hours / 24) | 0;
		return (minutes < 1) ? functions.seconds(
			A2($elm$time$Time$toSecond, zone, posix)) : ((hours < 1) ? functions.minutes(
			A2($elm$time$Time$toMinute, zone, posix)) : ((hours < 24) ? functions.hours(
			A2($elm$time$Time$toHour, zone, posix)) : ((days < 30) ? functions.days(days) : ((days < 365) ? functions.months((days / 30) | 0) : functions.years((days / 365) | 0)))));
	});
var $ryannhg$date_format$DateFormat$Relative$toMilliseconds = $elm$time$Time$posixToMillis;
var $elm$time$Time$utc = A2($elm$time$Time$Zone, 0, _List_Nil);
var $ryannhg$date_format$DateFormat$Relative$relativeTimeWithOptions = F3(
	function (options, start, end) {
		var differenceInMilliseconds = $ryannhg$date_format$DateFormat$Relative$toMilliseconds(end) - $ryannhg$date_format$DateFormat$Relative$toMilliseconds(start);
		return (!differenceInMilliseconds) ? options.rightNow : A3(
			$ryannhg$date_format$DateFormat$Relative$relativeTimeWithFunctions,
			$elm$time$Time$utc,
			$elm$core$Basics$abs(differenceInMilliseconds),
			(differenceInMilliseconds < 0) ? A6($ryannhg$date_format$DateFormat$Relative$RelativeTimeFunctions, options.someSecondsAgo, options.someMinutesAgo, options.someHoursAgo, options.someDaysAgo, options.someMonthsAgo, options.someYearsAgo) : A6($ryannhg$date_format$DateFormat$Relative$RelativeTimeFunctions, options.inSomeSeconds, options.inSomeMinutes, options.inSomeHours, options.inSomeDays, options.inSomeMonths, options.inSomeYears));
	});
var $ryannhg$date_format$DateFormat$Relative$relativeTime = $ryannhg$date_format$DateFormat$Relative$relativeTimeWithOptions($ryannhg$date_format$DateFormat$Relative$defaultRelativeOptions);
var $author$project$Internal$Views$relativeTimeOptions = {
	inSomeDays: function (_int) {
		return $elm$core$String$fromInt(_int) + ' days';
	},
	inSomeHours: function (_int) {
		return $elm$core$String$fromInt(_int) + ' hours';
	},
	inSomeMinutes: function (_int) {
		return $elm$core$String$fromInt(_int) + ' minutes';
	},
	inSomeMonths: function (_int) {
		return $elm$core$String$fromInt(_int) + ' months';
	},
	inSomeSeconds: function (_int) {
		return $elm$core$String$fromInt(_int) + ' seconds';
	},
	inSomeYears: function (_int) {
		return $elm$core$String$fromInt(_int) + ' years';
	},
	rightNow: '0 seconds',
	someDaysAgo: function (_int) {
		return $elm$core$String$fromInt(_int) + ' days';
	},
	someHoursAgo: function (_int) {
		return $elm$core$String$fromInt(_int) + ' hours';
	},
	someMinutesAgo: function (_int) {
		return $elm$core$String$fromInt(_int) + ' minutes';
	},
	someMonthsAgo: function (_int) {
		return $elm$core$String$fromInt(_int) + ' months';
	},
	someSecondsAgo: function (_int) {
		return $elm$core$String$fromInt(_int) + ' seconds';
	},
	someYearsAgo: function (_int) {
		return $elm$core$String$fromInt(_int) + ' years';
	}
};
var $feathericons$elm_feather$FeatherIcons$trash2 = A2(
	$feathericons$elm_feather$FeatherIcons$makeBuilder,
	'trash-2',
	_List_fromArray(
		[
			A2(
			$elm$svg$Svg$polyline,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$points('3 6 5 6 21 6')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$path,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$d('M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('10'),
					$elm$svg$Svg$Attributes$y1('11'),
					$elm$svg$Svg$Attributes$x2('10'),
					$elm$svg$Svg$Attributes$y2('17')
				]),
			_List_Nil),
			A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1('14'),
					$elm$svg$Svg$Attributes$y1('11'),
					$elm$svg$Svg$Attributes$x2('14'),
					$elm$svg$Svg$Attributes$y2('17')
				]),
			_List_Nil)
		]));
var $author$project$Internal$Views$viewExcerciseWithHistory = F4(
	function (posix, nowId, index, localStorageRecord) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(8),
					$mdgriffith$elm_ui$Element$Border$width(1),
					$mdgriffith$elm_ui$Element$Border$rounded(5),
					$mdgriffith$elm_ui$Element$Border$color(
					A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.2)),
					$mdgriffith$elm_ui$Element$padding(10)
				]),
			_Utils_ap(
				_List_Nil,
				_Utils_ap(
					_List_fromArray(
						[
							A3(
							$author$project$Internal$Views$exerciseLink,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$size(20),
									$mdgriffith$elm_ui$Element$paddingEach(
									{bottom: 10, left: 0, right: 0, top: 0})
								]),
							index,
							nowId)
						]),
					_Utils_ap(
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$paddingEach(
										{bottom: 0, left: 25, right: 0, top: 0}),
										$mdgriffith$elm_ui$Element$spacing(10)
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_Nil,
										$mdgriffith$elm_ui$Element$html(
											A2(
												$feathericons$elm_feather$FeatherIcons$toHtml,
												_List_Nil,
												A2($feathericons$elm_feather$FeatherIcons$withSize, 18, $feathericons$elm_feather$FeatherIcons$eye)))),
										A2(
										$mdgriffith$elm_ui$Element$paragraph,
										_List_Nil,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text('First seen '),
												$mdgriffith$elm_ui$Element$text(
												A2($ryannhg$date_format$DateFormat$Relative$relativeTime, posix, localStorageRecord.firstSeen))
											]))
									]))
							]),
						_Utils_ap(
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$row,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$paddingEach(
											{bottom: 0, left: 25, right: 0, top: 0}),
											$mdgriffith$elm_ui$Element$spacing(10)
										]),
									_List_fromArray(
										[
											A2(
											$mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[$mdgriffith$elm_ui$Element$alignTop]),
											$mdgriffith$elm_ui$Element$html(
												A2(
													$feathericons$elm_feather$FeatherIcons$toHtml,
													_List_Nil,
													A3(
														$elm$core$Basics$apL,
														$feathericons$elm_feather$FeatherIcons$withClass,
														function () {
															var _v1 = localStorageRecord.solved;
															if (_v1.$ === 'Just') {
																return 'pass';
															} else {
																return 'fail';
															}
														}(),
														A2(
															$feathericons$elm_feather$FeatherIcons$withSize,
															18,
															function () {
																var _v0 = localStorageRecord.solved;
																if (_v0.$ === 'Just') {
																	return $feathericons$elm_feather$FeatherIcons$check;
																} else {
																	return $feathericons$elm_feather$FeatherIcons$x;
																}
															}()))))),
											function () {
											var _v2 = localStorageRecord.solved;
											if (_v2.$ === 'Just') {
												var solved = _v2.a;
												return A2(
													$mdgriffith$elm_ui$Element$paragraph,
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$Font$color($author$project$Internal$Views$green)
														]),
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$text('Solved in '),
															$mdgriffith$elm_ui$Element$text(
															A3($ryannhg$date_format$DateFormat$Relative$relativeTimeWithOptions, $author$project$Internal$Views$relativeTimeOptions, localStorageRecord.firstSeen, solved))
														]));
											} else {
												return A2(
													$mdgriffith$elm_ui$Element$paragraph,
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$Font$color($author$project$Internal$Views$red)
														]),
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$text(
															'Not solved yet, only ' + ($elm$core$String$fromInt(localStorageRecord.testsPassed) + (' out of ' + ($elm$core$String$fromInt(localStorageRecord.testsTotal) + (' tests passed (seen for ' + (A3($ryannhg$date_format$DateFormat$Relative$relativeTimeWithOptions, $author$project$Internal$Views$relativeTimeOptions, localStorageRecord.firstSeen, localStorageRecord.lastSeen) + ')'))))))
														]));
											}
										}()
										]))
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$Input$button,
									_List_Nil,
									{
										label: A2(
											$mdgriffith$elm_ui$Element$row,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$paddingEach(
													{bottom: 0, left: 25, right: 0, top: 0}),
													$mdgriffith$elm_ui$Element$spacing(10)
												]),
											_List_fromArray(
												[
													A2(
													$mdgriffith$elm_ui$Element$el,
													_List_Nil,
													$mdgriffith$elm_ui$Element$html(
														A2(
															$feathericons$elm_feather$FeatherIcons$toHtml,
															_List_Nil,
															A2(
																$feathericons$elm_feather$FeatherIcons$withSize,
																18,
																_Utils_eq(nowId, index.id) ? $feathericons$elm_feather$FeatherIcons$refreshCw : $feathericons$elm_feather$FeatherIcons$trash2)))),
													A2(
													$mdgriffith$elm_ui$Element$paragraph,
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$Font$color(
															A3($mdgriffith$elm_ui$Element$rgb255, 18, 147, 216))
														]),
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$text(
															_Utils_eq(nowId, index.id) ? 'Reset' : 'Remove from history')
														]))
												])),
										onPress: $elm$core$Maybe$Just(
											$author$project$Internal$Data$RemoveFromHistory(index.id))
									})
								]))))));
	});
var $author$project$Internal$Views$contentHistory = function (model) {
	return _Utils_Tuple3(
		'History',
		$author$project$Internal$Views$icons.history,
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(30)
					]),
				_Utils_ap(
					_List_Nil,
					_Utils_ap(
						_List_fromArray(
							[
								$author$project$Internal$Views$chart1(model)
							]),
						_Utils_ap(
							_List_fromArray(
								[
									$author$project$Internal$Views$viewTitle('Seen exercises')
								]),
							_Utils_ap(
								A2(
									$elm$core$List$map,
									function (_v0) {
										var id = _v0.a;
										var localStorageRecord = _v0.b;
										var maybeExerciseData = $elm$core$List$head(
											A2(
												$elm$core$List$filter,
												function (e) {
													return _Utils_eq(e.id, id);
												},
												model.index));
										if (maybeExerciseData.$ === 'Just') {
											var index = maybeExerciseData.a;
											return A4($author$project$Internal$Views$viewExcerciseWithHistory, model.posixNow, model.exerciseData.id, index, localStorageRecord);
										} else {
											return $mdgriffith$elm_ui$Element$none;
										}
									},
									A2(
										$elm$core$List$sortBy,
										function (_v2) {
											var id = _v2.a;
											var localStorageRecord = _v2.b;
											return $elm$time$Time$posixToMillis(localStorageRecord.firstSeen);
										},
										$elm$core$Dict$toList(model.localStorage))),
								_Utils_ap(
									_List_fromArray(
										[
											$author$project$Internal$Views$viewTitle('Privacy note')
										]),
									_Utils_ap(
										_List_fromArray(
											[
												A2(
												$mdgriffith$elm_ui$Element$paragraph,
												_List_Nil,
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$text('We don\'t store this data to any external server. We store it to the local storage of your browser. \n\nThe history is only visible to you to keep track of which exercise you have seen and solved.')
													]))
											]),
										_List_fromArray(
											[
												A2(
												$mdgriffith$elm_ui$Element$column,
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$spacing(10)
													]),
												_List_fromArray(
													[
														A2(
														$mdgriffith$elm_ui$Element$paragraph,
														_List_fromArray(
															[
																$mdgriffith$elm_ui$Element$Font$color($author$project$Internal$Views$red),
																$mdgriffith$elm_ui$Element$Font$bold
															]),
														_List_fromArray(
															[
																$mdgriffith$elm_ui$Element$text('Dangerous zone')
															])),
														A2(
														$mdgriffith$elm_ui$Element$Input$button,
														_List_fromArray(
															[
																$mdgriffith$elm_ui$Element$padding(10),
																$mdgriffith$elm_ui$Element$Border$rounded(5),
																$mdgriffith$elm_ui$Element$Font$color($author$project$Internal$Views$red),
																$mdgriffith$elm_ui$Element$Border$color($author$project$Internal$Views$red),
																$mdgriffith$elm_ui$Element$Border$width(1)
															]),
														{
															label: $mdgriffith$elm_ui$Element$text('Remove the entire history'),
															onPress: $elm$core$Maybe$Just($author$project$Internal$Data$RemoveHistory)
														})
													]))
											]))))))))
			]));
};
var $author$project$Internal$Views$categories = function (exercises) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (exerciseData, acc) {
				return A3(
					$elm$core$List$foldl,
					F2(
						function (category, acc2) {
							return A3(
								$elm$core$Dict$update,
								category,
								function (maybeV) {
									if (maybeV.$ === 'Just') {
										var v = maybeV.a;
										return $elm$core$Maybe$Just(
											A2($elm$core$List$cons, exerciseData, v));
									} else {
										return $elm$core$Maybe$Just(
											_List_fromArray(
												[exerciseData]));
									}
								},
								acc2);
						}),
					acc,
					exerciseData.categories);
			}),
		$elm$core$Dict$empty,
		exercises);
};
var $author$project$Internal$Views$exerciseLink2 = F2(
	function (model, i) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(10)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$alignTop]),
					$mdgriffith$elm_ui$Element$text('•')),
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_Nil,
					_List_fromArray(
						[
							A3($author$project$Internal$Views$exerciseLink, _List_Nil, i, model.exerciseData.id)
						]))
				]));
	});
var $author$project$Internal$Views$subtitle = function (string) {
	return A2(
		$mdgriffith$elm_ui$Element$paragraph,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Region$heading(2),
				$mdgriffith$elm_ui$Element$Font$size(20)
			]),
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$text(string)
			]));
};
var $author$project$Internal$Views$contentOtherExercises = function (model) {
	return _Utils_Tuple3(
		'Other Exercises',
		$author$project$Internal$Views$icons.otherExercises,
		_Utils_ap(
			_List_Nil,
			_Utils_ap(
				_List_fromArray(
					[
						$author$project$Internal$Views$viewTitle('Exercises by Category')
					]),
				_Utils_ap(
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(20)
								]),
							$elm$core$Dict$values(
								A2(
									$elm$core$Dict$map,
									F2(
										function (category, excercises) {
											return A2(
												$mdgriffith$elm_ui$Element$column,
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$spacing(10)
													]),
												_List_fromArray(
													[
														$author$project$Internal$Views$subtitle(
														category + (' (' + ($elm$core$String$fromInt(
															$elm$core$List$length(excercises)) + ')'))),
														A2(
														$mdgriffith$elm_ui$Element$column,
														_List_fromArray(
															[
																$mdgriffith$elm_ui$Element$paddingEach(
																{bottom: 0, left: 10, right: 0, top: 0}),
																$mdgriffith$elm_ui$Element$spacing(5)
															]),
														A2(
															$elm$core$List$map,
															function (exercise) {
																return A2($author$project$Internal$Views$exerciseLink2, model, exercise);
															},
															excercises))
													]));
										}),
									$author$project$Internal$Views$categories(model.index))))
						]),
					_Utils_ap(
						_List_fromArray(
							[
								$author$project$Internal$Views$viewTitle('All Exercises')
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$paddingEach(
										{bottom: 0, left: 10, right: 0, top: 0}),
										$mdgriffith$elm_ui$Element$spacing(5)
									]),
								A2(
									$elm$core$List$map,
									function (i) {
										return A2($author$project$Internal$Views$exerciseLink2, model, i);
									},
									model.index))
							]))))));
};
var $author$project$Internal$Data$HideSolution = function (a) {
	return {$: 'HideSolution', a: a};
};
var $author$project$Internal$Data$ShowSolution = function (a) {
	return {$: 'ShowSolution', a: a};
};
var $author$project$Internal$Data$ShowSolutionsAll = {$: 'ShowSolutionsAll'};
var $author$project$Internal$Data$ShowSolutionsNone = {$: 'ShowSolutionsNone'};
var $author$project$Internal$Views$contentSolutions = function (model) {
	var qty = $elm$core$List$length(model.exerciseData.solutions);
	return _Utils_Tuple3(
		'Solutions',
		$author$project$Internal$Views$icons.solutions,
		(qty > 0) ? _Utils_ap(
			_List_Nil,
			_Utils_ap(
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$wrappedRow,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(10)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internal$Views$attrsButton,
								{
									label: $mdgriffith$elm_ui$Element$text('Show All'),
									onPress: $elm$core$Maybe$Just($author$project$Internal$Data$ShowSolutionsAll)
								}),
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internal$Views$attrsButton,
								{
									label: $mdgriffith$elm_ui$Element$text('Hide All'),
									onPress: $elm$core$Maybe$Just($author$project$Internal$Data$ShowSolutionsNone)
								})
							]))
					]),
				_List_fromArray(
					[
						$author$project$Internal$Views$accordion(
						{hideItem: $author$project$Internal$Data$HideSolution, items: model.localStorageRecord.solutions, itemsContent: model.exerciseData.solutions, showItem: $author$project$Internal$Data$ShowSolution})
					]))) : _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						A2($mdgriffith$elm_ui$Element$paddingXY, 50, 0)
					]),
				A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$centerY,
							$mdgriffith$elm_ui$Element$Font$center,
							$mdgriffith$elm_ui$Element$spacing(16),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					$author$project$Internal$Markdown$markdown(
						'Sorry, no solutions for this exercise yet. If you have a solution, [please add it here](' + ($author$project$Internal$Views$gitHubDirectLink(model.exerciseData.id) + ').'))))
			]));
};
var $author$project$Internal$Views$viewContent = F2(
	function (model, _v0) {
		var title = _v0.a;
		var icon = _v0.b;
		var content = _v0.c;
		var widthSize = 400;
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(widthSize)),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$alignRight,
					$mdgriffith$elm_ui$Element$scrollbarY,
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A2($elm$html$Html$Attributes$style, 'transition', '0.2s')),
					$mdgriffith$elm_ui$Element$Font$size(16),
					$mdgriffith$elm_ui$Element$Font$family(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$typeface('Source Sans Pro'),
							$mdgriffith$elm_ui$Element$Font$sansSerif
						])),
					$mdgriffith$elm_ui$Element$Background$color(
					A4($mdgriffith$elm_ui$Element$rgba, 1, 1, 1, 1)),
					$mdgriffith$elm_ui$Element$Border$shadow(
					{
						blur: 10,
						color: A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.2),
						offset: _Utils_Tuple2(0, 0),
						size: 0
					}),
					model.localStorageRecord.menuOpen ? $mdgriffith$elm_ui$Element$moveRight(0) : $mdgriffith$elm_ui$Element$moveRight(widthSize + 10)
				]),
			_Utils_ap(
				_List_Nil,
				_Utils_ap(
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Background$color(
									A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.1)),
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									A2($mdgriffith$elm_ui$Element$paddingXY, 20, 30),
									$mdgriffith$elm_ui$Element$spacing(10)
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_Nil,
									$mdgriffith$elm_ui$Element$html(
										A2($feathericons$elm_feather$FeatherIcons$toHtml, _List_Nil, icon))),
									A2(
									$mdgriffith$elm_ui$Element$paragraph,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Region$heading(2),
											$mdgriffith$elm_ui$Element$Font$size(24),
											$mdgriffith$elm_ui$Element$Font$bold
										]),
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$text(title)
										]))
								]))
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$paddingEach(
									{bottom: 20, left: 20, right: 30, top: 30}),
									$mdgriffith$elm_ui$Element$spacing(20),
									$mdgriffith$elm_ui$Element$scrollbarY,
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
								]),
							content)
						]))));
	});
var $author$project$Internal$Views$viewSideMenu = function (model) {
	var _v0 = model.localStorageRecord.menuContent;
	switch (_v0.$) {
		case 'ContentHints':
			return A2(
				$author$project$Internal$Views$viewContent,
				model,
				$author$project$Internal$Views$contentHints(model));
		case 'ContentSolutions':
			return A2(
				$author$project$Internal$Views$viewContent,
				model,
				$author$project$Internal$Views$contentSolutions(model));
		case 'ContentHistory':
			return A2(
				$author$project$Internal$Views$viewContent,
				model,
				$author$project$Internal$Views$contentHistory(model));
		case 'ContentOtherExercises':
			return A2(
				$author$project$Internal$Views$viewContent,
				model,
				$author$project$Internal$Views$contentOtherExercises(model));
		case 'ContentHelp':
			return A2($author$project$Internal$Views$viewContent, model, $author$project$Internal$Views$contentHelp);
		default:
			return A2(
				$author$project$Internal$Views$viewContent,
				model,
				$author$project$Internal$Views$contentContribute(model.exerciseData.id));
	}
};
var $author$project$Internal$Views$viewElementAttrs = function (model) {
	return _Utils_ap(
		_List_Nil,
		_Utils_ap(
			model.localStorageRecord.menuOpen ? _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$inFront(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$Background$color(
								A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.2)),
								$mdgriffith$elm_ui$Element$htmlAttribute(
								A2($elm$html$Html$Attributes$style, 'transition', '0.2s')),
								$mdgriffith$elm_ui$Element$Events$onClick(
								$author$project$Internal$Data$ChangeMenu(model.localStorageRecord.menuContent))
							]),
						$mdgriffith$elm_ui$Element$none))
				]) : _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$inFront(
					$mdgriffith$elm_ui$Element$text(''))
				]),
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$inFront(
						$author$project$Internal$Views$viewSideMenu(model))
					]),
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$inFront(
							$author$project$Internal$Views$viewSideButtons(model))
						]),
					model.localStorageRecord.menuOpen ? _List_fromArray(
						[
							$mdgriffith$elm_ui$Element$inFront(
							A2(
								$mdgriffith$elm_ui$Element$Input$button,
								_Utils_ap(
									$author$project$Internal$Views$attrsButton,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$alignRight,
											$mdgriffith$elm_ui$Element$Font$size(24),
											$mdgriffith$elm_ui$Element$padding(10),
											$mdgriffith$elm_ui$Element$Border$width(0),
											$mdgriffith$elm_ui$Element$moveLeft(15),
											$mdgriffith$elm_ui$Element$moveDown(17),
											$mdgriffith$elm_ui$Element$mouseOver(_List_Nil)
										])),
								{
									label: $mdgriffith$elm_ui$Element$html(
										A2(
											$feathericons$elm_feather$FeatherIcons$toHtml,
											_List_Nil,
											A2($feathericons$elm_feather$FeatherIcons$withSize, 32, $feathericons$elm_feather$FeatherIcons$x))),
									onPress: $elm$core$Maybe$Just(
										$author$project$Internal$Data$ChangeMenu(model.localStorageRecord.menuContent))
								}))
						]) : _List_Nil))));
};
var $author$project$Exercises$viewElementAttrs = $author$project$Internal$Views$viewElementAttrs;
var $author$project$Main$htmlForEllie = '<!DOCTYPE html>\n<html lang="en">\n\n<head>\n    <meta charset="utf-8">\n    <meta name="viewport" content="width=device-width">\n    <link rel="shortcut icon" href="/favicon.ico">\n\n    <!-- Primary Meta Tags -->\n    <title>Elm Excercises</title>\n    <meta name="title" content="Elm Excercises">\n    <meta name="description" content="Elm Excercises">\n\n    <!-- <link rel="stylesheet" href="highlight/styles/default.min.css"> -->\n    <link rel="stylesheet" href="https://package.elm-lang.org/assets/highlight/styles/default.css">\n\n    <!-- Fonts -->\n\n    <link rel="preconnect" href="https://fonts.googleapis.com">\n    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>\n    <link href="https://fonts.googleapis.com/css2?family=Source+Code+Pro&family=Source+Sans+Pro:wght@400;700&display=swap" rel="stylesheet">\n\n    <!-- <link rel="preconnect" href="https://fonts.gstatic.com">\n    <link href="https://fonts.googleapis.com/css2?family=Big+Shoulders+Display:wght@300&family=IBM+Plex+Sans:wght@300;700&display=swap" rel="stylesheet"> -->\n</head>\n\n<body>\n    <div id="elm"></div>\n    <script src="/elm.js"></sc' + ('ript>\n    <script>\n        var app = Elm.Main.init({\n            node: document.getElementById("elm"),\n        });\n    </sc' + ('ript>\n    <script src="highlight.min.js"></sc' + ('ript>\n    <script>\n        hljs.highlightAll();\n    </sc' + 'ript>\n</body>\n\n</html>')));
var $author$project$Main$viewEllie = function (_v0) {
	return A2(
		$author$project$Main$textarea,
		_List_fromArray(
			[
				$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill)
			]),
		$author$project$Main$htmlForEllie);
};
var $author$project$Main$view = function (model) {
	return A4(
		$lucamug$elm_ui_with_context$Element$WithContext$layoutWith,
		$rakutentech$r10$R10$Context$empty,
		{
			options: _List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$focusStyle(
					{backgroundColor: $elm$core$Maybe$Nothing, borderColor: $elm$core$Maybe$Nothing, shadow: $elm$core$Maybe$Nothing})
				])
		},
		_List_fromArray(
			[
				$lucamug$elm_ui_with_context$Element$WithContext$Font$size(16)
			]),
		A2(
			$lucamug$elm_ui_with_context$Element$WithContext$column,
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$padding(20),
					$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
					$lucamug$elm_ui_with_context$Element$WithContext$spacing(20)
				]),
			_List_fromArray(
				[
					A2(
					$lucamug$elm_ui_with_context$Element$WithContext$paragraph,
					_List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$Region$heading(1),
							$lucamug$elm_ui_with_context$Element$WithContext$Font$size(35)
						]),
					_List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$text('Elm Exercises Dashboard')
						])),
					A2(
					$lucamug$elm_ui_with_context$Element$WithContext$row,
					_List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$spacing(10)
						]),
					_Utils_ap(
						_List_Nil,
						_Utils_ap(
							_List_fromArray(
								[
									A2(
									$lucamug$elm_ui_with_context$Element$WithContext$Input$button,
									_List_fromArray(
										[
											$lucamug$elm_ui_with_context$Element$WithContext$Border$width(1),
											$lucamug$elm_ui_with_context$Element$WithContext$padding(5)
										]),
									{
										label: $lucamug$elm_ui_with_context$Element$WithContext$text('Top'),
										onPress: $elm$core$Maybe$Just(
											$author$project$Main$ChangePage($author$project$Main$Top))
									})
								]),
							_Utils_ap(
								_List_fromArray(
									[
										A2(
										$lucamug$elm_ui_with_context$Element$WithContext$Input$button,
										_List_fromArray(
											[
												$lucamug$elm_ui_with_context$Element$WithContext$Border$width(1),
												$lucamug$elm_ui_with_context$Element$WithContext$padding(5)
											]),
										{
											label: $lucamug$elm_ui_with_context$Element$WithContext$text('Output'),
											onPress: $elm$core$Maybe$Just(
												$author$project$Main$ChangePage($author$project$Main$PageOutput))
										})
									]),
								_Utils_ap(
									_List_fromArray(
										[
											A2(
											$lucamug$elm_ui_with_context$Element$WithContext$Input$button,
											_List_fromArray(
												[
													$lucamug$elm_ui_with_context$Element$WithContext$Border$width(1),
													$lucamug$elm_ui_with_context$Element$WithContext$padding(5)
												]),
											{
												label: $lucamug$elm_ui_with_context$Element$WithContext$text('Index'),
												onPress: $elm$core$Maybe$Just(
													$author$project$Main$ChangePage($author$project$Main$Index))
											})
										]),
									_Utils_ap(
										A2(
											$elm$core$List$map,
											function (exerciseData) {
												return A2(
													$lucamug$elm_ui_with_context$Element$WithContext$Input$button,
													_List_fromArray(
														[
															$lucamug$elm_ui_with_context$Element$WithContext$Border$width(1),
															$lucamug$elm_ui_with_context$Element$WithContext$padding(5)
														]),
													{
														label: $lucamug$elm_ui_with_context$Element$WithContext$text(
															$elm$core$String$fromInt(exerciseData.id)),
														onPress: $elm$core$Maybe$Just(
															$author$project$Main$ChangePage(
																$author$project$Main$ViewJson(exerciseData)))
													});
											},
											$author$project$ListExercises$exercises),
										_Utils_ap(
											A2(
												$elm$core$List$map,
												function (exerciseData) {
													return A2(
														$lucamug$elm_ui_with_context$Element$WithContext$Input$button,
														_List_fromArray(
															[
																$lucamug$elm_ui_with_context$Element$WithContext$Border$width(1),
																$lucamug$elm_ui_with_context$Element$WithContext$padding(5)
															]),
														{
															label: $lucamug$elm_ui_with_context$Element$WithContext$text(
																$elm$core$String$fromInt(exerciseData.id)),
															onPress: $elm$core$Maybe$Just(
																$author$project$Main$ChangePage(
																	A2(
																		$author$project$Main$ViewExercise,
																		exerciseData,
																		A2(
																			$author$project$Exercises$init,
																			$author$project$Main$onlyTests(
																				$elm$core$List$length(exerciseData.tests)),
																			{
																				exerciseData: A3($miniBill$elm_codec$Codec$encodeToString, 0, $author$project$Exercises$codecExerciseData, exerciseData),
																				index: A2($author$project$Main$createIndex, 0, $author$project$ListExercises$exercises),
																				localStorage: '',
																				width: 800
																			}).a)))
														});
												},
												$author$project$ListExercises$exercises),
											A2(
												$elm$core$List$map,
												function (exerciseData) {
													return A2(
														$lucamug$elm_ui_with_context$Element$WithContext$Input$button,
														_List_fromArray(
															[
																$lucamug$elm_ui_with_context$Element$WithContext$Border$width(1),
																$lucamug$elm_ui_with_context$Element$WithContext$padding(5)
															]),
														{
															label: $lucamug$elm_ui_with_context$Element$WithContext$text(
																$elm$core$String$fromInt(exerciseData.id)),
															onPress: $elm$core$Maybe$Just(
																$author$project$Main$ChangePage(
																	$author$project$Main$ViewEllie(exerciseData)))
														});
												},
												$author$project$ListExercises$exercises)))))))),
					function () {
					var _v0 = model.page;
					switch (_v0.$) {
						case 'Top':
							return A2(
								$lucamug$elm_ui_with_context$Element$WithContext$column,
								_List_fromArray(
									[
										$lucamug$elm_ui_with_context$Element$WithContext$spacing(20)
									]),
								_List_fromArray(
									[
										$lucamug$elm_ui_with_context$Element$WithContext$text('Welcome to Elm Exercises.'),
										A2(
										$lucamug$elm_ui_with_context$Element$WithContext$column,
										_List_fromArray(
											[
												$lucamug$elm_ui_with_context$Element$WithContext$spacing(10)
											]),
										A2(
											$elm$core$List$map,
											function (exercise) {
												return $lucamug$elm_ui_with_context$Element$WithContext$text(exercise.title);
											},
											$author$project$ListExercises$exercises))
									]));
						case 'PageOutput':
							return A2(
								$lucamug$elm_ui_with_context$Element$WithContext$column,
								_List_fromArray(
									[
										$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
										$lucamug$elm_ui_with_context$Element$WithContext$spacing(10)
									]),
								_List_fromArray(
									[
										A2(
										$lucamug$elm_ui_with_context$Element$WithContext$paragraph,
										_List_Nil,
										_List_fromArray(
											[
												$lucamug$elm_ui_with_context$Element$WithContext$text('Updated list of all exercises. Copy this JSON data into \"docs/index.json\".')
											])),
										A2(
										$author$project$Main$textarea,
										_List_fromArray(
											[
												$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill)
											]),
										A2($author$project$Main$createOutputs, 4, $author$project$ListExercises$exercises))
									]));
						case 'Index':
							return A2(
								$lucamug$elm_ui_with_context$Element$WithContext$column,
								_List_fromArray(
									[
										$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
										$lucamug$elm_ui_with_context$Element$WithContext$spacing(10)
									]),
								_List_fromArray(
									[
										A2(
										$lucamug$elm_ui_with_context$Element$WithContext$paragraph,
										_List_Nil,
										_List_fromArray(
											[
												$lucamug$elm_ui_with_context$Element$WithContext$text('Updated list of all exercises. Copy this JSON data into \"docs/index.json\".')
											])),
										A2(
										$author$project$Main$textarea,
										_List_fromArray(
											[
												$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill)
											]),
										A2($author$project$Main$createIndexJsonp, 0, $author$project$ListExercises$exercises))
									]));
						case 'ViewJson':
							var exerciseData = _v0.a;
							return A2(
								$lucamug$elm_ui_with_context$Element$WithContext$column,
								_List_fromArray(
									[
										$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
										$lucamug$elm_ui_with_context$Element$WithContext$spacing(10)
									]),
								_List_fromArray(
									[
										A2(
										$lucamug$elm_ui_with_context$Element$WithContext$paragraph,
										_List_Nil,
										_List_fromArray(
											[
												$lucamug$elm_ui_with_context$Element$WithContext$text(
												'Copy this JSON data into \"docs/' + (A3(
													$elm$core$String$padLeft,
													3,
													_Utils_chr('0'),
													$elm$core$String$fromInt(exerciseData.id)) + '.json\".'))
											])),
										A2(
										$author$project$Main$textarea,
										_List_fromArray(
											[
												$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill)
											]),
										A2($author$project$Main$createExerciseJsonp, 0, exerciseData))
									]));
						case 'ViewEllie':
							var exerciseData = _v0.a;
							return A2(
								$lucamug$elm_ui_with_context$Element$WithContext$column,
								_List_fromArray(
									[
										$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
										$lucamug$elm_ui_with_context$Element$WithContext$spacing(10)
									]),
								_List_fromArray(
									[
										A2(
										$lucamug$elm_ui_with_context$Element$WithContext$paragraph,
										_List_Nil,
										_List_fromArray(
											[
												$lucamug$elm_ui_with_context$Element$WithContext$text('Copy these into an Ellie (https://ellie-app.com/new), then copy the Ellie id back in ...')
											])),
										$author$project$Main$viewEllie(exerciseData)
									]));
						default:
							var exerciseData = _v0.a;
							var exerciseModel = _v0.b;
							return A2(
								$lucamug$elm_ui_with_context$Element$WithContext$row,
								_List_fromArray(
									[
										$lucamug$elm_ui_with_context$Element$WithContext$spacing(20),
										$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill)
									]),
								_List_fromArray(
									[
										A2(
										$lucamug$elm_ui_with_context$Element$WithContext$column,
										_List_fromArray(
											[
												$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
												$lucamug$elm_ui_with_context$Element$WithContext$alignTop,
												$lucamug$elm_ui_with_context$Element$WithContext$spacing(20),
												$lucamug$elm_ui_with_context$Element$WithContext$width(
												$lucamug$elm_ui_with_context$Element$WithContext$fillPortion(2))
											]),
										_List_fromArray(
											[
												A2(
												$lucamug$elm_ui_with_context$Element$WithContext$column,
												_List_fromArray(
													[
														$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
														$lucamug$elm_ui_with_context$Element$WithContext$spacing(20)
													]),
												A2($rakutentech$r10$R10$Form$view, model.form, $author$project$Main$MsgForm)),
												A2(
												$lucamug$elm_ui_with_context$Element$WithContext$column,
												_List_fromArray(
													[
														$lucamug$elm_ui_with_context$Element$WithContext$spacing(10)
													]),
												_List_fromArray(
													[
														$lucamug$elm_ui_with_context$Element$WithContext$text('Title'),
														A2(
														$lucamug$elm_ui_with_context$Element$WithContext$paragraph,
														_List_Nil,
														_List_fromArray(
															[
																$lucamug$elm_ui_with_context$Element$WithContext$text(exerciseModel.exerciseData.title)
															]))
													])),
												A2(
												$lucamug$elm_ui_with_context$Element$WithContext$column,
												_List_fromArray(
													[
														$lucamug$elm_ui_with_context$Element$WithContext$spacing(10)
													]),
												_List_fromArray(
													[
														$lucamug$elm_ui_with_context$Element$WithContext$text('Ellie ID'),
														A2(
														$lucamug$elm_ui_with_context$Element$WithContext$paragraph,
														_List_Nil,
														_List_fromArray(
															[
																$lucamug$elm_ui_with_context$Element$WithContext$text(exerciseModel.exerciseData.ellieId)
															]))
													])),
												A2(
												$lucamug$elm_ui_with_context$Element$WithContext$column,
												_List_fromArray(
													[
														$lucamug$elm_ui_with_context$Element$WithContext$spacing(10)
													]),
												_List_fromArray(
													[
														$lucamug$elm_ui_with_context$Element$WithContext$text('Reference'),
														A2(
														$lucamug$elm_ui_with_context$Element$WithContext$paragraph,
														_List_Nil,
														_List_fromArray(
															[
																$lucamug$elm_ui_with_context$Element$WithContext$text(exerciseModel.exerciseData.reference)
															]))
													])),
												A2(
												$lucamug$elm_ui_with_context$Element$WithContext$column,
												_List_fromArray(
													[
														$lucamug$elm_ui_with_context$Element$WithContext$spacing(10)
													]),
												_List_fromArray(
													[
														$lucamug$elm_ui_with_context$Element$WithContext$text('Problem'),
														A2(
														$lucamug$elm_ui_with_context$Element$WithContext$paragraph,
														_List_Nil,
														_List_fromArray(
															[
																$lucamug$elm_ui_with_context$Element$WithContext$text(exerciseModel.exerciseData.problem)
															]))
													])),
												A2(
												$lucamug$elm_ui_with_context$Element$WithContext$column,
												_List_fromArray(
													[
														$lucamug$elm_ui_with_context$Element$WithContext$spacing(10)
													]),
												_List_fromArray(
													[
														$lucamug$elm_ui_with_context$Element$WithContext$text('Example'),
														A2(
														$lucamug$elm_ui_with_context$Element$WithContext$paragraph,
														_List_Nil,
														_List_fromArray(
															[
																$lucamug$elm_ui_with_context$Element$WithContext$text(exerciseModel.exerciseData.example)
															]))
													])),
												A2(
												$lucamug$elm_ui_with_context$Element$WithContext$column,
												_List_fromArray(
													[
														$lucamug$elm_ui_with_context$Element$WithContext$spacing(10)
													]),
												_List_fromArray(
													[
														$lucamug$elm_ui_with_context$Element$WithContext$text('Dummy Solution'),
														A2(
														$lucamug$elm_ui_with_context$Element$WithContext$paragraph,
														_List_Nil,
														_List_fromArray(
															[
																$lucamug$elm_ui_with_context$Element$WithContext$text(exerciseModel.exerciseData.dummySolution)
															]))
													]))
											])),
										A2(
										$lucamug$elm_ui_with_context$Element$WithContext$map,
										$author$project$Main$ExercisesMsg,
										A2(
											$lucamug$elm_ui_with_context$Element$WithContext$el,
											_Utils_ap(
												_List_fromArray(
													[
														$lucamug$elm_ui_with_context$Element$WithContext$Border$width(1),
														$lucamug$elm_ui_with_context$Element$WithContext$Border$color(
														A4($lucamug$elm_ui_with_context$Element$WithContext$rgba, 0, 0, 0, 0.2)),
														$lucamug$elm_ui_with_context$Element$WithContext$width(
														$lucamug$elm_ui_with_context$Element$WithContext$fillPortion(3)),
														$lucamug$elm_ui_with_context$Element$WithContext$Border$shadow(
														{
															blur: 10,
															color: A4($lucamug$elm_ui_with_context$Element$WithContext$rgba, 0, 0, 0, 0.2),
															offset: _Utils_Tuple2(0, 0),
															size: 0
														}),
														$lucamug$elm_ui_with_context$Element$WithContext$clip
													]),
												A2(
													$elm$core$List$map,
													$lucamug$elm_ui_with_context$Element$WithContext$attribute,
													$author$project$Exercises$viewElementAttrs(exerciseModel))),
											$lucamug$elm_ui_with_context$Element$WithContext$element(
												A2(
													$author$project$Exercises$viewElement,
													$author$project$Main$onlyTests(
														$elm$core$List$length(exerciseData.tests)),
													exerciseModel))))
									]));
					}
				}()
				])));
};
var $author$project$Main$main = $elm$browser$Browser$element(
	{
		init: $author$project$Main$init,
		subscriptions: function (_v0) {
			return $elm$core$Platform$Sub$none;
		},
		update: $author$project$Main$update,
		view: $author$project$Main$view
	});
_Platform_export({'Main':{'init':$author$project$Main$main(
	$elm$json$Json$Decode$succeed(_Utils_Tuple0))({"versions":{"elm":"0.19.1"},"types":{"message":"Main.Msg","aliases":{"Exercises.Msg":{"args":["msgExercise"],"type":"Internal.Data.Msg msgExercise"},"R10.Form.Msg":{"args":[],"type":"R10.Form.Internal.Msg.Msg"},"R10.Form.Internal.Conf.Conf":{"args":[],"type":"List.List R10.Form.Internal.Conf.Entity"},"Exercises.ExerciseData":{"args":[],"type":"Internal.Data.ExerciseData"},"Internal.Data.ExerciseData":{"args":[],"type":"{ id : Basics.Int, title : String.String, difficulty : Internal.Data.Difficulty, categories : List.List String.String, ellieId : String.String, reference : String.String, problem : String.String, example : String.String, tests : List.List String.String, hints : List.List String.String, dummySolution : String.String, solutions : List.List String.String }"},"Internal.Data.FailureReason":{"args":[],"type":"Maybe.Maybe { description : String.String, given : Maybe.Maybe String.String, reason : Test.Runner.Failure.Reason }"},"R10.Form.Internal.FieldConf.FieldConf":{"args":[],"type":"{ id : R10.Form.Internal.FieldConf.FieldId, idDom : Maybe.Maybe String.String, type_ : R10.FormTypes.FieldType, label : String.String, clickableLabel : Basics.Bool, helperText : Maybe.Maybe String.String, requiredLabel : Maybe.Maybe String.String, validationSpecs : Maybe.Maybe R10.Form.Internal.FieldConf.ValidationSpecs, minWidth : Maybe.Maybe Basics.Int, maxWidth : Maybe.Maybe Basics.Int, autocomplete : Maybe.Maybe String.String }"},"R10.Form.Internal.FieldConf.FieldId":{"args":[],"type":"String.String"},"Internal.Data.Index":{"args":[],"type":"{ id : Basics.Int, title : String.String, difficulty : Internal.Data.Difficulty, categories : List.List String.String, ellieId : String.String }"},"Internal.Data.LocalStorageRecord":{"args":[],"type":"{ hints : Internal.Data.Show, solutions : Internal.Data.Show, menuOpen : Basics.Bool, menuContent : Internal.Data.MenuContent, firstSeen : Time.Posix, lastSeen : Time.Posix, solved : Maybe.Maybe Time.Posix, testsTotal : Basics.Int, testsPassed : Basics.Int }"},"Exercises.Model":{"args":["modelExercise"],"type":"Internal.Data.Model modelExercise"},"Internal.Data.Model":{"args":["modelExercise"],"type":"{ index : List.List Internal.Data.Index, exerciseData : Internal.Data.ExerciseData, localStorage : Dict.Dict Basics.Int Internal.Data.LocalStorageRecord, localStorageRecord : Internal.Data.LocalStorageRecord, modelExercise : modelExercise, menuOver : Basics.Bool, failureReasons : List.List Internal.Data.FailureReason, posixNow : Time.Posix, width : Basics.Int }"},"R10.Form.Internal.FieldConf.ValidationSpecs":{"args":[],"type":"{ showAlsoPassedValidation : Basics.Bool, pretendIsNotValidatedIfValid : Basics.Bool, validation : List.List R10.Form.Internal.FieldConf.Validation, validationIcon : R10.FormTypes.ValidationIcon }"},"R10.Form.Internal.Conf.EntityId":{"args":[],"type":"String.String"},"R10.FormComponents.Internal.Single.Common.FieldOption":{"args":[],"type":"{ value : String.String, label : String.String }"},"R10.FormTypes.FieldOption":{"args":[],"type":"{ value : String.String, label : String.String }"},"R10.Form.Internal.Key.KeyAsString":{"args":[],"type":"String.String"},"R10.Form.Internal.Conf.TextConf":{"args":[],"type":"{ title : String.String, helperText : Maybe.Maybe String.String, validationSpecs : Maybe.Maybe R10.Form.Internal.FieldConf.ValidationSpecs }"},"R10.Form.Internal.FieldConf.ValidationMessage":{"args":[],"type":"{ ok : String.String, err : String.String }"}},"unions":{"Main.Msg":{"args":[],"tags":{"ChangePage":["Main.Page"],"ExercisesMsg":["Exercises.Msg ()"],"MsgForm":["R10.Form.Msg"]}},"Internal.Data.Msg":{"args":["msgExercise"],"tags":{"ShowHint":["Basics.Int"],"ShowHintsAll":[],"ShowHintsNone":[],"HideHint":["Basics.Int"],"ShowSolution":["Basics.Int"],"ShowSolutionsAll":[],"ShowSolutionsNone":[],"HideSolution":["Basics.Int"],"MsgTEA":["msgExercise"],"ChangeMenu":["Internal.Data.MenuContent"],"MenuOver":["Basics.Bool"],"PortLocalStoragePop":["String.String"],"PortLocalStoragePush":["Dict.Dict Basics.Int Internal.Data.LocalStorageRecord"],"UpdatePosix":["Time.Posix"],"RemoveFromHistory":["Basics.Int"],"RemoveHistory":[],"Resize":["Basics.Int","Basics.Int"]}},"R10.Form.Internal.Msg.Msg":{"args":[],"tags":{"NoOp":[],"GetFocus":["R10.Form.Internal.Key.Key"],"LoseFocus":["R10.Form.Internal.Key.Key","R10.Form.Internal.FieldConf.FieldConf"],"TogglePasswordShow":["R10.Form.Internal.Key.Key"],"ChangeValue":["R10.Form.Internal.Key.Key","R10.Form.Internal.FieldConf.FieldConf","R10.Form.Internal.Conf.Conf","String.String"],"ChangeTab":["R10.Form.Internal.Key.Key","String.String"],"AddEntity":["R10.Form.Internal.Key.Key"],"RemoveEntity":["R10.Form.Internal.Key.Key"],"Submit":["R10.Form.Internal.Conf.Conf"],"OnSingleMsg":["R10.Form.Internal.Key.Key","R10.Form.Internal.FieldConf.FieldConf","R10.Form.Internal.Conf.Conf","R10.FormComponents.Internal.Single.Common.Msg"],"OnPhoneMsg":["R10.Form.Internal.Key.Key","R10.Form.Internal.FieldConf.FieldConf","R10.Form.Internal.Conf.Conf","R10.FormComponents.Internal.Phone.Common.Msg"]}},"Main.Page":{"args":[],"tags":{"Top":[],"Index":[],"PageOutput":[],"ViewJson":["Exercises.ExerciseData"],"ViewEllie":["Exercises.ExerciseData"],"ViewExercise":["Exercises.ExerciseData","Exercises.Model ()"]}},"Basics.Bool":{"args":[],"tags":{"True":[],"False":[]}},"Dict.Dict":{"args":["k","v"],"tags":{"RBNode_elm_builtin":["Dict.NColor","k","v","Dict.Dict k v","Dict.Dict k v"],"RBEmpty_elm_builtin":[]}},"Internal.Data.Difficulty":{"args":[],"tags":{"Easy":[],"Medium":[],"Hard":[],"Undefined":[]}},"R10.Form.Internal.Conf.Entity":{"args":[],"tags":{"EntityNormal":["R10.Form.Internal.Conf.EntityId","List.List R10.Form.Internal.Conf.Entity"],"EntityWrappable":["R10.Form.Internal.Conf.EntityId","List.List R10.Form.Internal.Conf.Entity"],"EntityWithBorder":["R10.Form.Internal.Conf.EntityId","List.List R10.Form.Internal.Conf.Entity"],"EntityWithTabs":["R10.Form.Internal.Conf.EntityId","List.List ( String.String, R10.Form.Internal.Conf.Entity )"],"EntityMulti":["R10.Form.Internal.Conf.EntityId","List.List R10.Form.Internal.Conf.Entity"],"EntityField":["R10.Form.Internal.FieldConf.FieldConf"],"EntityTitle":["R10.Form.Internal.Conf.EntityId","R10.Form.Internal.Conf.TextConf"],"EntitySubTitle":["R10.Form.Internal.Conf.EntityId","R10.Form.Internal.Conf.TextConf"]}},"R10.FormTypes.FieldType":{"args":[],"tags":{"TypeText":["R10.FormTypes.TypeText"],"TypeSingle":["R10.FormTypes.TypeSingle","List.List R10.FormTypes.FieldOption"],"TypeMulti":["R10.FormTypes.TypeMulti","List.List R10.FormTypes.FieldOption"],"TypeBinary":["R10.FormTypes.TypeBinary"],"TypeSpecial":["R10.FormTypes.TypeSpecial"]}},"Basics.Int":{"args":[],"tags":{"Int":[]}},"R10.Form.Internal.Key.Key":{"args":[],"tags":{"Key":["List.List String.String"]}},"List.List":{"args":["a"],"tags":{}},"Maybe.Maybe":{"args":["a"],"tags":{"Just":["a"],"Nothing":[]}},"Internal.Data.MenuContent":{"args":[],"tags":{"ContentHints":[],"ContentSolutions":[],"ContentHistory":[],"ContentOtherExercises":[],"ContentHelp":[],"ContentContribute":[]}},"R10.FormComponents.Internal.Phone.Common.Msg":{"args":[],"tags":{"NoOp":[],"OnFocus":["String.String"],"OnLoseFocus":["String.String"],"OnScroll":["Basics.Float"],"OnEsc":[],"OnInputClick":["{ key : String.String, selectedY : Basics.Float }"],"OnOptionSelect":["R10.Country.Country"],"OnSearch":["{ key : String.String, selectOptionHeight : Basics.Int, maxDisplayCount : Basics.Int, filteredFieldOption : List.List R10.Country.Country }","String.String"],"OnArrowUp":["{ key : String.String, selectOptionHeight : Basics.Int, maxDisplayCount : Basics.Int, filteredFieldOption : List.List R10.Country.Country }"],"OnArrowDown":["{ key : String.String, selectOptionHeight : Basics.Int, maxDisplayCount : Basics.Int, filteredFieldOption : List.List R10.Country.Country }"],"OnValueChange":["String.String","{ selectOptionHeight : Basics.Int, maxDisplayCount : Basics.Int, filteredFieldOption : List.List R10.Country.Country }","String.String"]}},"R10.FormComponents.Internal.Single.Common.Msg":{"args":[],"tags":{"NoOp":[],"OnFocus":["String.String"],"OnLoseFocus":["String.String"],"OnScroll":["Basics.Float"],"OnEsc":[],"OnInputClick":["{ key : String.String, selectedY : Basics.Float }"],"OnOptionSelect":["String.String"],"OnSearch":["{ key : String.String, selectOptionHeight : Basics.Int, maxDisplayCount : Basics.Int, filteredFieldOption : List.List R10.FormComponents.Internal.Single.Common.FieldOption }","String.String"],"OnArrowUp":["{ key : String.String, selectOptionHeight : Basics.Int, maxDisplayCount : Basics.Int, filteredFieldOption : List.List R10.FormComponents.Internal.Single.Common.FieldOption }"],"OnArrowDown":["{ key : String.String, selectOptionHeight : Basics.Int, maxDisplayCount : Basics.Int, filteredFieldOption : List.List R10.FormComponents.Internal.Single.Common.FieldOption }"],"OnDelBackspace":[]}},"Time.Posix":{"args":[],"tags":{"Posix":["Basics.Int"]}},"Test.Runner.Failure.Reason":{"args":[],"tags":{"Custom":[],"Equality":["String.String","String.String"],"Comparison":["String.String","String.String"],"ListDiff":["List.List String.String","List.List String.String"],"CollectionDiff":["{ expected : String.String, actual : String.String, extra : List.List String.String, missing : List.List String.String }"],"TODO":[],"Invalid":["Test.Runner.Failure.InvalidReason"]}},"Internal.Data.Show":{"args":[],"tags":{"ShowAll":[],"ShowNone":[],"Show":["Set.Set Basics.Int"]}},"String.String":{"args":[],"tags":{"String":[]}},"R10.Form.Internal.FieldConf.Validation":{"args":[],"tags":{"NoValidation":[],"WithMsg":["R10.Form.Internal.FieldConf.ValidationMessage","R10.Form.Internal.FieldConf.Validation"],"Dependant":["R10.Form.Internal.Key.KeyAsString","R10.Form.Internal.FieldConf.Validation"],"OneOf":["List.List R10.Form.Internal.FieldConf.Validation"],"AllOf":["List.List R10.Form.Internal.FieldConf.Validation"],"Not":["R10.Form.Internal.FieldConf.Validation"],"Equal":["R10.Form.Internal.Key.KeyAsString"],"Required":[],"Empty":[],"MinLength":["Basics.Int"],"MaxLength":["Basics.Int"],"Regex":["String.String"]}},"R10.FormTypes.ValidationIcon":{"args":[],"tags":{"NoIcon":[],"ClearOrCheck":[],"ErrorOrCheck":[]}},"R10.Country.Country":{"args":[],"tags":{"Afghanistan":[],"Albania":[],"Algeria":[],"AmericanSamoa":[],"Andorra":[],"Angola":[],"Anguilla":[],"Antarctica":[],"AntiguaandBarbuda":[],"Argentina":[],"Armenia":[],"Aruba":[],"Australia":[],"Austria":[],"Azerbaijan":[],"Bahamas":[],"Bahrain":[],"Bangladesh":[],"Barbados":[],"Belarus":[],"Belgium":[],"Belize":[],"Benin":[],"Bermuda":[],"Bhutan":[],"Bolivia":[],"BosniaandHerzegovina":[],"Botswana":[],"Brazil":[],"BritishIndianOceanTerritory":[],"BritishVirginIslands":[],"Brunei":[],"Bulgaria":[],"BurkinaFaso":[],"Burundi":[],"Cambodia":[],"Cameroon":[],"Canada":[],"CapeVerde":[],"CaymanIslands":[],"CentralAfricanRepublic":[],"Chad":[],"Chile":[],"China":[],"ChristmasIsland":[],"CocosIslands":[],"Colombia":[],"Comoros":[],"CookIslands":[],"CostaRica":[],"Croatia":[],"Cuba":[],"Curacao":[],"Cyprus":[],"CzechRepublic":[],"DemocraticRepublicoftheCongo":[],"Denmark":[],"Djibouti":[],"Dominica":[],"DominicanRepublic":[],"EastTimor":[],"Ecuador":[],"Egypt":[],"ElSalvador":[],"EquatorialGuinea":[],"Eritrea":[],"Estonia":[],"Ethiopia":[],"FalklandIslands":[],"FaroeIslands":[],"Fiji":[],"Finland":[],"France":[],"FrenchPolynesia":[],"Gabon":[],"Gambia":[],"Georgia":[],"Germany":[],"Ghana":[],"Gibraltar":[],"Greece":[],"Greenland":[],"Grenada":[],"Guam":[],"Guatemala":[],"Guernsey":[],"Guinea":[],"GuineaBissau":[],"Guyana":[],"Haiti":[],"Honduras":[],"HongKong":[],"Hungary":[],"Iceland":[],"India":[],"Indonesia":[],"Iran":[],"Iraq":[],"Ireland":[],"IsleofMan":[],"Israel":[],"Italy":[],"IvoryCoast":[],"Jamaica":[],"Japan":[],"Jersey":[],"Jordan":[],"Kazakhstan":[],"Kenya":[],"Kiribati":[],"Kosovo":[],"Kuwait":[],"Kyrgyzstan":[],"Laos":[],"Latvia":[],"Lebanon":[],"Lesotho":[],"Liberia":[],"Libya":[],"Liechtenstein":[],"Lithuania":[],"Luxembourg":[],"Macau":[],"Macedonia":[],"Madagascar":[],"Malawi":[],"Malaysia":[],"Maldives":[],"Mali":[],"Malta":[],"MarshallIslands":[],"Mauritania":[],"Mauritius":[],"Mayotte":[],"Mexico":[],"Micronesia":[],"Moldova":[],"Monaco":[],"Mongolia":[],"Montenegro":[],"Montserrat":[],"Morocco":[],"Mozambique":[],"Myanmar":[],"Namibia":[],"Nauru":[],"Nepal":[],"Netherlands":[],"NewCaledonia":[],"NewZealand":[],"Nicaragua":[],"Niger":[],"Nigeria":[],"Niue":[],"NorthKorea":[],"NorthernMarianaIslands":[],"Norway":[],"Oman":[],"Pakistan":[],"Palau":[],"Palestine":[],"Panama":[],"PapuaNewGuinea":[],"Paraguay":[],"Peru":[],"Philippines":[],"Pitcairn":[],"Poland":[],"Portugal":[],"PuertoRico":[],"Qatar":[],"RepublicoftheCongo":[],"Reunion":[],"Romania":[],"Russia":[],"Rwanda":[],"SaintBarthelemy":[],"SaintHelena":[],"SaintKittsandNevis":[],"SaintLucia":[],"SaintMartin":[],"SaintPierreandMiquelon":[],"SaintVincentandTheGrenadines":[],"Samoa":[],"SanMarino":[],"SaoTomeandPrincipe":[],"SaudiArabia":[],"Senegal":[],"Serbia":[],"Seychelles":[],"SierraLeone":[],"Singapore":[],"SintMaarten":[],"Slovakia":[],"Slovenia":[],"SolomonIslands":[],"Somalia":[],"SouthAfrica":[],"SouthKorea":[],"SouthSudan":[],"Spain":[],"SriLanka":[],"Sudan":[],"Suriname":[],"SvalbardandJanMayen":[],"Swaziland":[],"Sweden":[],"Switzerland":[],"Syria":[],"Taiwan":[],"Tajikistan":[],"Tanzania":[],"Thailand":[],"Togo":[],"Tokelau":[],"Tonga":[],"TrinidadandTobago":[],"Tunisia":[],"Turkey":[],"Turkmenistan":[],"TurksandCaicosIslands":[],"Tuvalu":[],"USVirginIslands":[],"Uganda":[],"Ukraine":[],"UnitedArabEmirates":[],"UnitedKingdom":[],"UnitedStates":[],"Uruguay":[],"Uzbekistan":[],"Vanuatu":[],"Vatican":[],"Venezuela":[],"Vietnam":[],"WallisandFutuna":[],"WesternSahara":[],"Yemen":[],"Zambia":[],"Zimbabwe":[]}},"Basics.Float":{"args":[],"tags":{"Float":[]}},"Test.Runner.Failure.InvalidReason":{"args":[],"tags":{"EmptyList":[],"NonpositiveFuzzCount":[],"InvalidFuzzer":[],"BadDescription":[],"DuplicatedName":[]}},"Dict.NColor":{"args":[],"tags":{"Red":[],"Black":[]}},"Set.Set":{"args":["t"],"tags":{"Set_elm_builtin":["Dict.Dict t ()"]}},"R10.FormTypes.TypeBinary":{"args":[],"tags":{"BinaryCheckbox":[],"BinarySwitch":[]}},"R10.FormTypes.TypeMulti":{"args":[],"tags":{"MultiCombobox":[]}},"R10.FormTypes.TypeSingle":{"args":[],"tags":{"SingleRadio":[],"SingleRadioRow":[],"SingleCombobox":[],"SingleSelect":[]}},"R10.FormTypes.TypeSpecial":{"args":[],"tags":{"SpecialPhone":[]}},"R10.FormTypes.TypeText":{"args":[],"tags":{"TextPlain":[],"TextEmail":[],"TextEmailWithSuggestions":["List.List String.String"],"TextUsername":[],"TextPasswordNew":[],"TextPasswordCurrent":[],"TextMultiline":[],"TextWithPattern":["String.String"],"TextWithPatternLarge":["String.String"]}}}}})}});

//////////////////// HMR BEGIN ////////////////////

/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Original Author: Flux Xu @fluxxu
*/

/*
    A note about the environment that this code runs in...

    assumed globals:
        - `module` (from Node.js module system and webpack)

    assumed in scope after injection into the Elm IIFE:
        - `scope` (has an 'Elm' property which contains the public Elm API)
        - various functions defined by Elm which we have to hook such as `_Platform_initialize` and `_Scheduler_binding`
 */

if (module.hot) {
    (function () {
        "use strict";

        //polyfill for IE: https://github.com/fluxxu/elm-hot-loader/issues/16
        if (typeof Object.assign != 'function') {
            Object.assign = function (target) {
                'use strict';
                if (target == null) {
                    throw new TypeError('Cannot convert undefined or null to object');
                }

                target = Object(target);
                for (var index = 1; index < arguments.length; index++) {
                    var source = arguments[index];
                    if (source != null) {
                        for (var key in source) {
                            if (Object.prototype.hasOwnProperty.call(source, key)) {
                                target[key] = source[key];
                            }
                        }
                    }
                }
                return target;
            };
        }

        // Elm 0.19.1 introduced a '$' prefix at the beginning of the symbols it emits,
        // and we check for `Maybe.Just` because we expect it to be present in all Elm programs.
        var elmVersion;
        if (typeof elm$core$Maybe$Just !== 'undefined')
            elmVersion = '0.19.0';
        else if (typeof $elm$core$Maybe$Just !== 'undefined')
            elmVersion = '0.19.1';
        else
            throw new Error("Could not determine Elm version");

        function elmSymbol(symbol) {
            try {
                switch (elmVersion) {
                    case '0.19.0':
                        return eval(symbol);
                    case '0.19.1':
                        return eval('$' + symbol);
                    default:
                        throw new Error('Cannot resolve ' + symbol + '. Elm version unknown!')
                }
            } catch (e) {
                if (e instanceof ReferenceError) {
                    return undefined;
                } else {
                    throw e;
                }
            }
        }

        var instances = module.hot.data
            ? module.hot.data.instances || {}
            : {};
        var uid = module.hot.data
            ? module.hot.data.uid || 0
            : 0;

        if (Object.keys(instances).length === 0) {
            log("[elm-hot] Enabled");
        }

        var cancellers = [];

        // These 2 variables act as dynamically-scoped variables which are set only when the
        // Elm module's hooked init function is called.
        var initializingInstance = null;
        var swappingInstance = null;

        module.hot.accept();
        module.hot.dispose(function (data) {
            data.instances = instances;
            data.uid = uid;

            // Cleanup pending async tasks

            // First, make sure that no new tasks can be started until we finish replacing the code
            _Scheduler_binding = function () {
                return _Scheduler_fail(new Error('[elm-hot] Inactive Elm instance.'))
            };

            // Second, kill pending tasks belonging to the old instance
            if (cancellers.length) {
                log('[elm-hot] Killing ' + cancellers.length + ' running processes...');
                try {
                    cancellers.forEach(function (cancel) {
                        cancel();
                    });
                } catch (e) {
                    console.warn('[elm-hot] Kill process error: ' + e.message);
                }
            }
        });

        function log(message) {
            if (module.hot.verbose) {
                console.log(message)
            }
        }

        function getId() {
            return ++uid;
        }

        function findPublicModules(parent, path) {
            var modules = [];
            for (var key in parent) {
                var child = parent[key];
                var currentPath = path ? path + '.' + key : key;
                if ('init' in child) {
                    modules.push({
                        path: currentPath,
                        module: child
                    });
                } else {
                    modules = modules.concat(findPublicModules(child, currentPath));
                }
            }
            return modules;
        }

        function registerInstance(domNode, flags, path, portSubscribes, portSends) {
            var id = getId();

            var instance = {
                id: id,
                path: path,
                domNode: domNode,
                flags: flags,
                portSubscribes: portSubscribes,
                portSends: portSends,
                lastState: null // last Elm app state (root model)
            };

            return instances[id] = instance
        }

        function isFullscreenApp() {
            // Returns true if the Elm app will take over the entire DOM body.
            return typeof elmSymbol("elm$browser$Browser$application") !== 'undefined'
                || typeof elmSymbol("elm$browser$Browser$document") !== 'undefined';
        }

        function wrapDomNode(node) {
            // When embedding an Elm app into a specific DOM node, Elm will replace the provided
            // DOM node with the Elm app's content. When the Elm app is compiled normally, the
            // original DOM node is reused (its attributes and content changes, but the object
            // in memory remains the same). But when compiled using `--debug`, Elm will completely
            // destroy the original DOM node and instead replace it with 2 brand new nodes: one
            // for your Elm app's content and the other for the Elm debugger UI. In this case,
            // if you held a reference to the DOM node provided for embedding, it would be orphaned
            // after Elm module initialization.
            //
            // So in order to make both cases consistent and isolate us from changes in how Elm
            // does this, we will insert a dummy node to wrap the node for embedding and hold
            // a reference to the dummy node.
            //
            // We will also put a tag on the dummy node so that the Elm developer knows who went
            // behind their back and rudely put stuff in their DOM.
            var dummyNode = document.createElement("div");
            dummyNode.setAttribute("data-elm-hot", "true");
            dummyNode.style.height = "inherit";
            var parentNode = node.parentNode;
            parentNode.replaceChild(dummyNode, node);
            dummyNode.appendChild(node);
            return dummyNode;
        }

        function wrapPublicModule(path, module) {
            var originalInit = module.init;
            if (originalInit) {
                module.init = function (args) {
                    var elm;
                    var portSubscribes = {};
                    var portSends = {};
                    var domNode = null;
                    var flags = null;
                    if (typeof args !== 'undefined') {
                        // normal case
                        domNode = args['node'] && !isFullscreenApp()
                            ? wrapDomNode(args['node'])
                            : document.body;
                        flags = args['flags'];
                    } else {
                        // rare case: Elm allows init to be called without any arguments at all
                        domNode = document.body;
                        flags = undefined
                    }
                    initializingInstance = registerInstance(domNode, flags, path, portSubscribes, portSends);
                    elm = originalInit(args);
                    wrapPorts(elm, portSubscribes, portSends);
                    initializingInstance = null;
                    return elm;
                };
            } else {
                console.error("Could not find a public module to wrap at path " + path)
            }
        }

        function swap(Elm, instance) {
            log('[elm-hot] Hot-swapping module: ' + instance.path);

            swappingInstance = instance;

            // remove from the DOM everything that had been created by the old Elm app
            var containerNode = instance.domNode;
            while (containerNode.lastChild) {
                containerNode.removeChild(containerNode.lastChild);
            }

            var m = getAt(instance.path.split('.'), Elm);
            var elm;
            if (m) {
                // prepare to initialize the new Elm module
                var args = {flags: instance.flags};
                if (containerNode === document.body) {
                    // fullscreen case: no additional args needed
                } else {
                    // embed case: provide a new node for Elm to use
                    var nodeForEmbed = document.createElement("div");
                    containerNode.appendChild(nodeForEmbed);
                    args['node'] = nodeForEmbed;
                }

                elm = m.init(args);

                Object.keys(instance.portSubscribes).forEach(function (portName) {
                    if (portName in elm.ports && 'subscribe' in elm.ports[portName]) {
                        var handlers = instance.portSubscribes[portName];
                        if (!handlers.length) {
                            return;
                        }
                        log('[elm-hot] Reconnect ' + handlers.length + ' handler(s) to port \''
                            + portName + '\' (' + instance.path + ').');
                        handlers.forEach(function (handler) {
                            elm.ports[portName].subscribe(handler);
                        });
                    } else {
                        delete instance.portSubscribes[portName];
                        log('[elm-hot] Port was removed: ' + portName);
                    }
                });

                Object.keys(instance.portSends).forEach(function (portName) {
                    if (portName in elm.ports && 'send' in elm.ports[portName]) {
                        log('[elm-hot] Replace old port send with the new send');
                        instance.portSends[portName] = elm.ports[portName].send;
                    } else {
                        delete instance.portSends[portName];
                        log('[elm-hot] Port was removed: ' + portName);
                    }
                });
            } else {
                log('[elm-hot] Module was removed: ' + instance.path);
            }

            swappingInstance = null;
        }

        function wrapPorts(elm, portSubscribes, portSends) {
            var portNames = Object.keys(elm.ports || {});
            //hook ports
            if (portNames.length) {
                // hook outgoing ports
                portNames
                    .filter(function (name) {
                        return 'subscribe' in elm.ports[name];
                    })
                    .forEach(function (portName) {
                        var port = elm.ports[portName];
                        var subscribe = port.subscribe;
                        var unsubscribe = port.unsubscribe;
                        elm.ports[portName] = Object.assign(port, {
                            subscribe: function (handler) {
                                log('[elm-hot] ports.' + portName + '.subscribe called.');
                                if (!portSubscribes[portName]) {
                                    portSubscribes[portName] = [handler];
                                } else {
                                    //TODO handle subscribing to single handler more than once?
                                    portSubscribes[portName].push(handler);
                                }
                                return subscribe.call(port, handler);
                            },
                            unsubscribe: function (handler) {
                                log('[elm-hot] ports.' + portName + '.unsubscribe called.');
                                var list = portSubscribes[portName];
                                if (list && list.indexOf(handler) !== -1) {
                                    list.splice(list.lastIndexOf(handler), 1);
                                } else {
                                    console.warn('[elm-hot] ports.' + portName + '.unsubscribe: handler not subscribed');
                                }
                                return unsubscribe.call(port, handler);
                            }
                        });
                    });

                // hook incoming ports
                portNames
                    .filter(function (name) {
                        return 'send' in elm.ports[name];
                    })
                    .forEach(function (portName) {
                        var port = elm.ports[portName];
                        portSends[portName] = port.send;
                        elm.ports[portName] = Object.assign(port, {
                            send: function (val) {
                                return portSends[portName].call(port, val);
                            }
                        });
                    });
            }
            return portSubscribes;
        }

        /*
        Breadth-first search for a `Browser.Navigation.Key` in the user's app model.
        Returns the key and keypath or null if not found.
        */
        function findNavKey(rootModel) {
            var queue = [];
            if (isDebuggerModel(rootModel)) {
                /*
                 Extract the user's app model from the Elm Debugger's model. The Elm debugger
                 can hold multiple references to the user's model (e.g. in its "history"). So
                 we must be careful to only search within the "state" part of the Debugger.
                */
                queue.push({value: rootModel['state'], keypath: ['state']});
            } else {
                queue.push({value: rootModel, keypath: []});
            }

            while (queue.length !== 0) {
                var item = queue.shift();

                if (typeof item.value === "undefined" || item.value === null) {
                    continue;
                }

                // The nav key is identified by a runtime tag added by the elm-hot injector.
                if (item.value.hasOwnProperty("elm-hot-nav-key")) {
                    // found it!
                    return item;
                }

                if (typeof item.value !== "object") {
                    continue;
                }

                for (var propName in item.value) {
                    if (!item.value.hasOwnProperty(propName)) continue;
                    var newKeypath = item.keypath.slice();
                    newKeypath.push(propName);
                    queue.push({value: item.value[propName], keypath: newKeypath})
                }
            }

            return null;
        }


        function isDebuggerModel(model) {
            // Up until elm/browser 1.0.2, the Elm debugger could be identified by a
            // property named "expando". But in version 1.0.2 that was renamed to "expandoModel"
            return model
                && (model.hasOwnProperty("expando") || model.hasOwnProperty("expandoModel"))
                && model.hasOwnProperty("state");
        }

        function getAt(keyPath, obj) {
            return keyPath.reduce(function (xs, x) {
                return (xs && xs[x]) ? xs[x] : null
            }, obj)
        }

        function removeNavKeyListeners(navKey) {
            window.removeEventListener('popstate', navKey.value);
            window.navigator.userAgent.indexOf('Trident') < 0 || window.removeEventListener('hashchange', navKey.value);
        }

        // hook program creation
        var initialize = _Platform_initialize;
        _Platform_initialize = function (flagDecoder, args, init, update, subscriptions, stepperBuilder) {
            var instance = initializingInstance || swappingInstance;
            var tryFirstRender = !!swappingInstance;

            var hookedInit = function (args) {
                var initialStateTuple = init(args);
                if (swappingInstance) {
                    var oldModel = swappingInstance.lastState;
                    var newModel = initialStateTuple.a;

                    if (typeof elmSymbol("elm$browser$Browser$application") !== 'undefined') {
                        var oldKeyLoc = findNavKey(oldModel);

                        // attempt to find the Browser.Navigation.Key in the newly-constructed model
                        // and bring it along with the rest of the old data.
                        var newKeyLoc = findNavKey(newModel);
                        var error = null;
                        if (newKeyLoc === null) {
                            error = "could not find Browser.Navigation.Key in the new app model";
                        } else if (oldKeyLoc === null) {
                            error = "could not find Browser.Navigation.Key in the old app model.";
                        } else if (newKeyLoc.keypath.toString() !== oldKeyLoc.keypath.toString()) {
                            error = "the location of the Browser.Navigation.Key in the model has changed.";
                        } else {
                            // remove event listeners attached to the old nav key
                            removeNavKeyListeners(oldKeyLoc.value);

                            // insert the new nav key into the old model in the exact same location
                            var parentKeyPath = oldKeyLoc.keypath.slice(0, -1);
                            var lastSegment = oldKeyLoc.keypath.slice(-1)[0];
                            var oldParent = getAt(parentKeyPath, oldModel);
                            oldParent[lastSegment] = newKeyLoc.value;
                        }

                        if (error !== null) {
                            console.error("[elm-hot] Hot-swapping " + instance.path + " not possible: " + error);
                            oldModel = newModel;
                        }
                    }

                    // the heart of the app state hot-swap
                    initialStateTuple.a = oldModel;

                    // ignore any Cmds returned by the init during hot-swap
                    initialStateTuple.b = elmSymbol("elm$core$Platform$Cmd$none");
                } else {
                    // capture the initial state for later
                    initializingInstance.lastState = initialStateTuple.a;
                }

                return initialStateTuple
            };

            var hookedStepperBuilder = function (sendToApp, model) {
                var result;
                // first render may fail if shape of model changed too much
                if (tryFirstRender) {
                    tryFirstRender = false;
                    try {
                        result = stepperBuilder(sendToApp, model)
                    } catch (e) {
                        throw new Error('[elm-hot] Hot-swapping ' + instance.path +
                            ' is not possible, please reload page. Error: ' + e.message)
                    }
                } else {
                    result = stepperBuilder(sendToApp, model)
                }

                return function (nextModel, isSync) {
                    if (instance) {
                        // capture the state after every step so that later we can restore from it during a hot-swap
                        instance.lastState = nextModel
                    }
                    return result(nextModel, isSync)
                }
            };

            return initialize(flagDecoder, args, hookedInit, update, subscriptions, hookedStepperBuilder)
        };

        // hook process creation
        var originalBinding = _Scheduler_binding;
        _Scheduler_binding = function (originalCallback) {
            return originalBinding(function () {
                // start the scheduled process, which may return a cancellation function.
                var cancel = originalCallback.apply(this, arguments);
                if (cancel) {
                    cancellers.push(cancel);
                    return function () {
                        cancellers.splice(cancellers.indexOf(cancel), 1);
                        return cancel();
                    };
                }
                return cancel;
            });
        };

        scope['_elm_hot_loader_init'] = function (Elm) {
            // swap instances
            var removedInstances = [];
            for (var id in instances) {
                var instance = instances[id];
                if (instance.domNode.parentNode) {
                    swap(Elm, instance);
                } else {
                    removedInstances.push(id);
                }
            }

            removedInstances.forEach(function (id) {
                delete instance[id];
            });

            // wrap all public modules
            var publicModules = findPublicModules(Elm);
            publicModules.forEach(function (m) {
                wrapPublicModule(m.path, m.module);
            });
        }
    })();

    scope['_elm_hot_loader_init'](scope['Elm']);
}
//////////////////// HMR END ////////////////////


}(this));