exerciseData = {"solutions":["Using [`getAt`](https://package.elm-lang.org/packages/elm-community/list-extra/latest/List-Extra#getAt) and [`removeAt`](https://package.elm-lang.org/packages/elm-community/list-extra/latest/List-Extra#removeAt) from `elm-community/list-extra`.\n    \n```elm\nimport List.Extra\n\n\nrandomSelect : Random.Seed -> Int -> List a -> ( List a, Random.Seed )\nrandomSelect seed n list =\n    let\n        ( l, r, s ) =\n            randSelect n ( [], list, seed )\n    in\n    ( l, s )\n\n\nrandSelect : Int -> ( List a, List a, Random.Seed ) -> ( List a, List a, Random.Seed )\nrandSelect n ( l, r, seed ) =\n    if n > 0 then\n        let\n            ( idx, seed_ ) =\n                Random.step (Random.int 1 (List.length r)) seed\n\n            e =\n                List.Extra.getAt (idx - 1) r\n\n            r_ =\n                List.Extra.removeAt (idx - 1) r\n        in\n        case e of\n            Nothing ->\n                ( l, r, seed )\n\n            Just x ->\n                randSelect (n - 1) ( x :: l, r_, seed_ )\n\n    else\n        ( l, r, seed )\n```","Defining a new `Random.Generator`\n\n```elm\nmanyOf : Random.Seed -> Int -> List a -> List a -> ( List a, Random.Seed )\nmanyOf seed n source acc =\n    let\n        ( x, seed2 ) =\n            Random.step (select source) seed\n    in\n    if n < 1 then\n        ( acc, seed )\n\n    else\n        ( x\n            ++ Tuple.first\n                (manyOf seed2 (n - 1) (removeElements x source) acc)\n        , seed2\n        )\n\n\nrandomSelect : Random.Seed -> Int -> List a -> ( List a, Random.Seed )\nrandomSelect seed n source =\n    manyOf seed n source []\n\n\nremoveElements : List a -> List a -> List a\nremoveElements exclude source =\n    List.filter (\\x -> not (List.member x exclude)) source\n\n\nselect : List a -> Random.Generator (List a)\nselect list =\n    Random.map (\\y -> list |> List.drop y |> List.take 1) (Random.int 0 (List.length list - 1))\n```"],"dummySolutions":"randomSelect : Random.Seed -> Int -> List a -> ( List a, Random.Seed )\nrandomSelect seed n list =\n    -- Your implementation goes here\n    ( [], seed )","hints":["[`getAt`](https://package.elm-lang.org/packages/elm-community/list-extra/latest/List-Extra#getAt) and [`removeAt`](https://package.elm-lang.org/packages/elm-community/list-extra/latest/List-Extra#removeAt) from `elm-community/list-extra` could prove useful.","A more Elm-ish solution would be to define a new `Random.Generator`."],"tests":["List.sort list1 |> equal (List.sort list2)","list2 |> notEqual list3","List.sort list4 |> equal (List.range 1 9)","List.sort list5 |> equal [ \"a\", \"b\" ]","list6 |> equal []","list7 |> equal []","list8 |> equal []"],"example":"randomSelect seed 3 [\"Al\", \"Biff\", \"Cal\", \"Dee\", \"Ed\", \"Flip\"]\n    == [\"Cal\", \"Dee\", \"Al\"]","problem":"Extract a given number of randomly selected elements from a list.\n\nYou must use [Elm's Random](https://package.elm-lang.org/packages/elm/random/latest/) to implement `randomSelect`. Use [`Random.step`](https://package.elm-lang.org/packages/elm/random/latest/Random#step) to generate a pseudo-random number. `Random.step` takes a [`Generator`](https://package.elm-lang.org/packages/elm/random/latest/Random#Generator) and a [`Seed`](https://package.elm-lang.org/packages/elm/random/latest/Random#Seed). The seed is passed as a parameter to `randomSelect`. You will need to create a generator such as [`Random.int`](https://package.elm-lang.org/packages/elm/random/latest/Random#int).\n\n`Random.step` will return both a randomly generated value from the generator, and a new seed. You must use the new seed for subsequent random numbers.","reference":"https://johncrane.gitbooks.io/ninety-nine-elm-problems/content/p/p23.html","ellieId":"dZgZqMHCKvWa1","categories":["Randomness"],"difficulty":"hard","title":"Extract randomly selected elements from a list","id":23}